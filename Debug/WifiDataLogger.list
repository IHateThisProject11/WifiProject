
WifiDataLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cebc  08000260  08000260  00001260  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  0800d11c  0800d11c  0000e11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d418  0800d418  0000f088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d418  0800d418  0000e418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d420  0800d420  0000f088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d420  0800d420  0000e420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d424  0800d424  0000e424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800d428  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003188  20000088  0800d4b0  0000f088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003210  0800d4b0  0000f210  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000f088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a819  00000000  00000000  0000f0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bf6  00000000  00000000  000398d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f8  00000000  00000000  0003f4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c25  00000000  00000000  000418c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028960  00000000  00000000  000434ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002de5b  00000000  00000000  0006be4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb068  00000000  00000000  00099ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184d10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d9c  00000000  00000000  00184d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  0018eaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000260 <__do_global_dtors_aux>:
 8000260:	b510      	push	{r4, lr}
 8000262:	4c05      	ldr	r4, [pc, #20]	@ (8000278 <__do_global_dtors_aux+0x18>)
 8000264:	7823      	ldrb	r3, [r4, #0]
 8000266:	b933      	cbnz	r3, 8000276 <__do_global_dtors_aux+0x16>
 8000268:	4b04      	ldr	r3, [pc, #16]	@ (800027c <__do_global_dtors_aux+0x1c>)
 800026a:	b113      	cbz	r3, 8000272 <__do_global_dtors_aux+0x12>
 800026c:	4804      	ldr	r0, [pc, #16]	@ (8000280 <__do_global_dtors_aux+0x20>)
 800026e:	f3af 8000 	nop.w
 8000272:	2301      	movs	r3, #1
 8000274:	7023      	strb	r3, [r4, #0]
 8000276:	bd10      	pop	{r4, pc}
 8000278:	20000088 	.word	0x20000088
 800027c:	00000000 	.word	0x00000000
 8000280:	0800d104 	.word	0x0800d104

08000284 <frame_dummy>:
 8000284:	b508      	push	{r3, lr}
 8000286:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <frame_dummy+0x10>)
 8000288:	b11b      	cbz	r3, 8000292 <frame_dummy+0xe>
 800028a:	4903      	ldr	r1, [pc, #12]	@ (8000298 <frame_dummy+0x14>)
 800028c:	4803      	ldr	r0, [pc, #12]	@ (800029c <frame_dummy+0x18>)
 800028e:	f3af 8000 	nop.w
 8000292:	bd08      	pop	{r3, pc}
 8000294:	00000000 	.word	0x00000000
 8000298:	2000008c 	.word	0x2000008c
 800029c:	0800d104 	.word	0x0800d104

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b9b0 	b.w	8000618 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d6:	4688      	mov	r8, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	468e      	mov	lr, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d95f      	bls.n	80003a6 <__udivmoddi4+0xd6>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 fe06 	lsl.w	lr, r1, r6
 80002f4:	40b7      	lsls	r7, r6
 80002f6:	40b4      	lsls	r4, r6
 80002f8:	fa20 f303 	lsr.w	r3, r0, r3
 80002fc:	ea43 0e0e 	orr.w	lr, r3, lr
 8000300:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	0c23      	lsrs	r3, r4, #16
 800030a:	fbbe f1f8 	udiv	r1, lr, r8
 800030e:	fb08 ee11 	mls	lr, r8, r1, lr
 8000312:	fb01 f20c 	mul.w	r2, r1, ip
 8000316:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x5e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x5c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 8154 	bhi.w	80005d4 <__udivmoddi4+0x304>
 800032c:	4601      	mov	r1, r0
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	b2a2      	uxth	r2, r4
 8000332:	fbb3 f0f8 	udiv	r0, r3, r8
 8000336:	fb08 3310 	mls	r3, r8, r0, r3
 800033a:	fb00 fc0c 	mul.w	ip, r0, ip
 800033e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000342:	4594      	cmp	ip, r2
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x8e>
 8000346:	18ba      	adds	r2, r7, r2
 8000348:	f100 33ff 	add.w	r3, r0, #4294967295
 800034c:	bf2c      	ite	cs
 800034e:	2401      	movcs	r4, #1
 8000350:	2400      	movcc	r4, #0
 8000352:	4594      	cmp	ip, r2
 8000354:	d902      	bls.n	800035c <__udivmoddi4+0x8c>
 8000356:	2c00      	cmp	r4, #0
 8000358:	f000 813f 	beq.w	80005da <__udivmoddi4+0x30a>
 800035c:	4618      	mov	r0, r3
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba2 020c 	sub.w	r2, r2, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f2      	lsrs	r2, r6
 800036c:	2300      	movs	r3, #0
 800036e:	e9c5 2300 	strd	r2, r3, [r5]
 8000372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d14e      	bne.n	800042c <__udivmoddi4+0x15c>
 800038e:	4543      	cmp	r3, r8
 8000390:	f0c0 8112 	bcc.w	80005b8 <__udivmoddi4+0x2e8>
 8000394:	4282      	cmp	r2, r0
 8000396:	f240 810f 	bls.w	80005b8 <__udivmoddi4+0x2e8>
 800039a:	4608      	mov	r0, r1
 800039c:	2d00      	cmp	r5, #0
 800039e:	d0e8      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a0:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a4:	e7e5      	b.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	f000 80ac 	beq.w	8000504 <__udivmoddi4+0x234>
 80003ac:	fab2 f682 	clz	r6, r2
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	f040 80bb 	bne.w	800052c <__udivmoddi4+0x25c>
 80003b6:	1a8b      	subs	r3, r1, r2
 80003b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003bc:	b2bc      	uxth	r4, r7
 80003be:	2101      	movs	r1, #1
 80003c0:	0c02      	lsrs	r2, r0, #16
 80003c2:	b280      	uxth	r0, r0
 80003c4:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80003cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003d0:	fb04 f20c 	mul.w	r2, r4, ip
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d90e      	bls.n	80003f6 <__udivmoddi4+0x126>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003de:	bf2c      	ite	cs
 80003e0:	f04f 0901 	movcs.w	r9, #1
 80003e4:	f04f 0900 	movcc.w	r9, #0
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d903      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003ec:	f1b9 0f00 	cmp.w	r9, #0
 80003f0:	f000 80ec 	beq.w	80005cc <__udivmoddi4+0x2fc>
 80003f4:	46c4      	mov	ip, r8
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	fbb3 f8fe 	udiv	r8, r3, lr
 80003fc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000400:	fb04 f408 	mul.w	r4, r4, r8
 8000404:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000408:	4294      	cmp	r4, r2
 800040a:	d90b      	bls.n	8000424 <__udivmoddi4+0x154>
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	f108 33ff 	add.w	r3, r8, #4294967295
 8000412:	bf2c      	ite	cs
 8000414:	2001      	movcs	r0, #1
 8000416:	2000      	movcc	r0, #0
 8000418:	4294      	cmp	r4, r2
 800041a:	d902      	bls.n	8000422 <__udivmoddi4+0x152>
 800041c:	2800      	cmp	r0, #0
 800041e:	f000 80d1 	beq.w	80005c4 <__udivmoddi4+0x2f4>
 8000422:	4698      	mov	r8, r3
 8000424:	1b12      	subs	r2, r2, r4
 8000426:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800042a:	e79d      	b.n	8000368 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa08 f401 	lsl.w	r4, r8, r1
 8000436:	fa00 f901 	lsl.w	r9, r0, r1
 800043a:	fa22 f706 	lsr.w	r7, r2, r6
 800043e:	fa28 f806 	lsr.w	r8, r8, r6
 8000442:	408a      	lsls	r2, r1
 8000444:	431f      	orrs	r7, r3
 8000446:	fa20 f306 	lsr.w	r3, r0, r6
 800044a:	0c38      	lsrs	r0, r7, #16
 800044c:	4323      	orrs	r3, r4
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	fbb8 fef0 	udiv	lr, r8, r0
 8000458:	fb00 881e 	mls	r8, r0, lr, r8
 800045c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000460:	fb0e f80c 	mul.w	r8, lr, ip
 8000464:	45a0      	cmp	r8, r4
 8000466:	d90e      	bls.n	8000486 <__udivmoddi4+0x1b6>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b4>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 80b8 	beq.w	80005f4 <__udivmoddi4+0x324>
 8000484:	46d6      	mov	lr, sl
 8000486:	eba4 0408 	sub.w	r4, r4, r8
 800048a:	fa1f f883 	uxth.w	r8, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	fb03 fc0c 	mul.w	ip, r3, ip
 800049a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d90e      	bls.n	80004c0 <__udivmoddi4+0x1f0>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	bf2c      	ite	cs
 80004aa:	f04f 0801 	movcs.w	r8, #1
 80004ae:	f04f 0800 	movcc.w	r8, #0
 80004b2:	45a4      	cmp	ip, r4
 80004b4:	d903      	bls.n	80004be <__udivmoddi4+0x1ee>
 80004b6:	f1b8 0f00 	cmp.w	r8, #0
 80004ba:	f000 809f 	beq.w	80005fc <__udivmoddi4+0x32c>
 80004be:	4603      	mov	r3, r0
 80004c0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c4:	eba4 040c 	sub.w	r4, r4, ip
 80004c8:	fba0 ec02 	umull	lr, ip, r0, r2
 80004cc:	4564      	cmp	r4, ip
 80004ce:	4673      	mov	r3, lr
 80004d0:	46e0      	mov	r8, ip
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x20a>
 80004d4:	d107      	bne.n	80004e6 <__udivmoddi4+0x216>
 80004d6:	45f1      	cmp	r9, lr
 80004d8:	d205      	bcs.n	80004e6 <__udivmoddi4+0x216>
 80004da:	ebbe 0302 	subs.w	r3, lr, r2
 80004de:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	46e0      	mov	r8, ip
 80004e6:	b15d      	cbz	r5, 8000500 <__udivmoddi4+0x230>
 80004e8:	ebb9 0203 	subs.w	r2, r9, r3
 80004ec:	eb64 0408 	sbc.w	r4, r4, r8
 80004f0:	fa04 f606 	lsl.w	r6, r4, r6
 80004f4:	fa22 f301 	lsr.w	r3, r2, r1
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	431e      	orrs	r6, r3
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e736      	b.n	8000372 <__udivmoddi4+0xa2>
 8000504:	fbb1 fcf2 	udiv	ip, r1, r2
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	4614      	mov	r4, r2
 800050c:	b280      	uxth	r0, r0
 800050e:	4696      	mov	lr, r2
 8000510:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000514:	2620      	movs	r6, #32
 8000516:	4690      	mov	r8, r2
 8000518:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 800051c:	4610      	mov	r0, r2
 800051e:	fbb1 f1f2 	udiv	r1, r1, r2
 8000522:	eba3 0308 	sub.w	r3, r3, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e74b      	b.n	80003c4 <__udivmoddi4+0xf4>
 800052c:	40b7      	lsls	r7, r6
 800052e:	f1c6 0320 	rsb	r3, r6, #32
 8000532:	fa01 f206 	lsl.w	r2, r1, r6
 8000536:	fa21 f803 	lsr.w	r8, r1, r3
 800053a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800053e:	fa20 f303 	lsr.w	r3, r0, r3
 8000542:	b2bc      	uxth	r4, r7
 8000544:	40b0      	lsls	r0, r6
 8000546:	4313      	orrs	r3, r2
 8000548:	0c02      	lsrs	r2, r0, #16
 800054a:	0c19      	lsrs	r1, r3, #16
 800054c:	b280      	uxth	r0, r0
 800054e:	fbb8 f9fe 	udiv	r9, r8, lr
 8000552:	fb0e 8819 	mls	r8, lr, r9, r8
 8000556:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	4588      	cmp	r8, r1
 8000560:	d951      	bls.n	8000606 <__udivmoddi4+0x336>
 8000562:	1879      	adds	r1, r7, r1
 8000564:	f109 3cff 	add.w	ip, r9, #4294967295
 8000568:	bf2c      	ite	cs
 800056a:	f04f 0a01 	movcs.w	sl, #1
 800056e:	f04f 0a00 	movcc.w	sl, #0
 8000572:	4588      	cmp	r8, r1
 8000574:	d902      	bls.n	800057c <__udivmoddi4+0x2ac>
 8000576:	f1ba 0f00 	cmp.w	sl, #0
 800057a:	d031      	beq.n	80005e0 <__udivmoddi4+0x310>
 800057c:	eba1 0108 	sub.w	r1, r1, r8
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	fb0e 1119 	mls	r1, lr, r9, r1
 800058c:	b29b      	uxth	r3, r3
 800058e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000592:	4543      	cmp	r3, r8
 8000594:	d235      	bcs.n	8000602 <__udivmoddi4+0x332>
 8000596:	18fb      	adds	r3, r7, r3
 8000598:	f109 31ff 	add.w	r1, r9, #4294967295
 800059c:	bf2c      	ite	cs
 800059e:	f04f 0a01 	movcs.w	sl, #1
 80005a2:	f04f 0a00 	movcc.w	sl, #0
 80005a6:	4543      	cmp	r3, r8
 80005a8:	d2bb      	bcs.n	8000522 <__udivmoddi4+0x252>
 80005aa:	f1ba 0f00 	cmp.w	sl, #0
 80005ae:	d1b8      	bne.n	8000522 <__udivmoddi4+0x252>
 80005b0:	f1a9 0102 	sub.w	r1, r9, #2
 80005b4:	443b      	add	r3, r7
 80005b6:	e7b4      	b.n	8000522 <__udivmoddi4+0x252>
 80005b8:	1a84      	subs	r4, r0, r2
 80005ba:	eb68 0203 	sbc.w	r2, r8, r3
 80005be:	2001      	movs	r0, #1
 80005c0:	4696      	mov	lr, r2
 80005c2:	e6eb      	b.n	800039c <__udivmoddi4+0xcc>
 80005c4:	443a      	add	r2, r7
 80005c6:	f1a8 0802 	sub.w	r8, r8, #2
 80005ca:	e72b      	b.n	8000424 <__udivmoddi4+0x154>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e710      	b.n	80003f6 <__udivmoddi4+0x126>
 80005d4:	3902      	subs	r1, #2
 80005d6:	443b      	add	r3, r7
 80005d8:	e6a9      	b.n	800032e <__udivmoddi4+0x5e>
 80005da:	443a      	add	r2, r7
 80005dc:	3802      	subs	r0, #2
 80005de:	e6be      	b.n	800035e <__udivmoddi4+0x8e>
 80005e0:	eba7 0808 	sub.w	r8, r7, r8
 80005e4:	f1a9 0c02 	sub.w	ip, r9, #2
 80005e8:	4441      	add	r1, r8
 80005ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ee:	fb09 f804 	mul.w	r8, r9, r4
 80005f2:	e7c9      	b.n	8000588 <__udivmoddi4+0x2b8>
 80005f4:	f1ae 0e02 	sub.w	lr, lr, #2
 80005f8:	443c      	add	r4, r7
 80005fa:	e744      	b.n	8000486 <__udivmoddi4+0x1b6>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e75e      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000602:	4649      	mov	r1, r9
 8000604:	e78d      	b.n	8000522 <__udivmoddi4+0x252>
 8000606:	eba1 0108 	sub.w	r1, r1, r8
 800060a:	46cc      	mov	ip, r9
 800060c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000610:	fb09 f804 	mul.w	r8, r9, r4
 8000614:	e7b8      	b.n	8000588 <__udivmoddi4+0x2b8>
 8000616:	bf00      	nop

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <wifi_cb>:

/**
 * @brief Wi-Fi event callback.
 */
void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	4603      	mov	r3, r0
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	71fb      	strb	r3, [r7, #7]
    switch (u8MsgType) {
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b2c      	cmp	r3, #44	@ 0x2c
 800062c:	d002      	beq.n	8000634 <wifi_cb+0x18>
 800062e:	2b32      	cmp	r3, #50	@ 0x32
 8000630:	d00e      	beq.n	8000650 <wifi_cb+0x34>
                ip[0], ip[1], ip[2], ip[3]);
        break;
    }

    default:
        break;
 8000632:	e024      	b.n	800067e <wifi_cb+0x62>
        tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	60bb      	str	r3, [r7, #8]
        if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d01d      	beq.n	800067c <wifi_cb+0x60>
        } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d119      	bne.n	800067c <wifi_cb+0x60>
            printf("Station disconnected\r\n");
 8000648:	480f      	ldr	r0, [pc, #60]	@ (8000688 <wifi_cb+0x6c>)
 800064a:	f00b ff89 	bl	800c560 <puts>
        break;
 800064e:	e015      	b.n	800067c <wifi_cb+0x60>
        uint8_t *ip = (uint8_t*)pvMsg;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	60fb      	str	r3, [r7, #12]
                ip[0], ip[1], ip[2], ip[3]);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	781b      	ldrb	r3, [r3, #0]
        printf("DHCP - IP address is %u.%u.%u.%u\r\n",
 8000658:	4619      	mov	r1, r3
                ip[0], ip[1], ip[2], ip[3]);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	781b      	ldrb	r3, [r3, #0]
        printf("DHCP - IP address is %u.%u.%u.%u\r\n",
 8000660:	461a      	mov	r2, r3
                ip[0], ip[1], ip[2], ip[3]);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3302      	adds	r3, #2
 8000666:	781b      	ldrb	r3, [r3, #0]
        printf("DHCP - IP address is %u.%u.%u.%u\r\n",
 8000668:	4618      	mov	r0, r3
                ip[0], ip[1], ip[2], ip[3]);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3303      	adds	r3, #3
 800066e:	781b      	ldrb	r3, [r3, #0]
        printf("DHCP - IP address is %u.%u.%u.%u\r\n",
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	4603      	mov	r3, r0
 8000674:	4805      	ldr	r0, [pc, #20]	@ (800068c <wifi_cb+0x70>)
 8000676:	f00b ff0b 	bl	800c490 <iprintf>
        break;
 800067a:	e000      	b.n	800067e <wifi_cb+0x62>
        break;
 800067c:	bf00      	nop
    }
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	0800d11c 	.word	0x0800d11c
 800068c:	0800d134 	.word	0x0800d134

08000690 <WifiApp_InitAP>:
//    }
//
//    printf("AP mode started. You can connect to %s.\r\n", MAIN_WLAN_SSID);
//}
void WifiApp_InitAP(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	@ 0x28
 8000694:	af02      	add	r7, sp, #8
    /* 1. Bring up HAL/BSP */
    nm_bsp_init();
 8000696:	f008 febd 	bl	8009414 <nm_bsp_init>

    /* 2. Initialise driver and register wifi_cb() */
    tstrWifiInitParam initParam;
    memset(&initParam, 0, sizeof(initParam));
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2218      	movs	r2, #24
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f00c f83d 	bl	800c720 <memset>
    initParam.pfAppWifiCb = wifi_cb;
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <WifiApp_InitAP+0x6c>)
 80006a8:	607b      	str	r3, [r7, #4]
    if (m2m_wifi_init(&initParam) != M2M_SUCCESS) {
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4618      	mov	r0, r3
 80006ae:	f009 fec7 	bl	800a440 <m2m_wifi_init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d004      	beq.n	80006c2 <WifiApp_InitAP+0x32>
        printf("WINC init failed\r\n");
 80006b8:	4811      	ldr	r0, [pc, #68]	@ (8000700 <WifiApp_InitAP+0x70>)
 80006ba:	f00b ff51 	bl	800c560 <puts>
        Error_Handler();
 80006be:	f000 fb29 	bl	8000d14 <Error_Handler>
    }

    /* 3. Ask WINC to join the router */
    sint8 ret = m2m_wifi_connect(
 80006c2:	23ff      	movs	r3, #255	@ 0xff
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <WifiApp_InitAP+0x74>)
 80006c8:	2202      	movs	r2, #2
 80006ca:	2111      	movs	r1, #17
 80006cc:	480e      	ldr	r0, [pc, #56]	@ (8000708 <WifiApp_InitAP+0x78>)
 80006ce:	f00a f92b 	bl	800a928 <m2m_wifi_connect>
 80006d2:	4603      	mov	r3, r0
 80006d4:	77fb      	strb	r3, [r7, #31]
            MAIN_WLAN_SSID,
            strlen(MAIN_WLAN_SSID),
            MAIN_WLAN_AUTH,
            (void*)MAIN_WLAN_PSK,
            MAIN_WLAN_CHANNEL);
    if (ret != M2M_SUCCESS) {
 80006d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <WifiApp_InitAP+0x5c>
        printf("m2m_wifi_connect error %d\r\n", ret);
 80006de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80006e2:	4619      	mov	r1, r3
 80006e4:	4809      	ldr	r0, [pc, #36]	@ (800070c <WifiApp_InitAP+0x7c>)
 80006e6:	f00b fed3 	bl	800c490 <iprintf>
    } else {
        printf("Connecting to %s …\r\n", MAIN_WLAN_SSID);
    }
}
 80006ea:	e003      	b.n	80006f4 <WifiApp_InitAP+0x64>
        printf("Connecting to %s …\r\n", MAIN_WLAN_SSID);
 80006ec:	4906      	ldr	r1, [pc, #24]	@ (8000708 <WifiApp_InitAP+0x78>)
 80006ee:	4808      	ldr	r0, [pc, #32]	@ (8000710 <WifiApp_InitAP+0x80>)
 80006f0:	f00b fece 	bl	800c490 <iprintf>
}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	0800061d 	.word	0x0800061d
 8000700:	0800d158 	.word	0x0800d158
 8000704:	0800d16c 	.word	0x0800d16c
 8000708:	0800d17c 	.word	0x0800d17c
 800070c:	0800d190 	.word	0x0800d190
 8000710:	0800d1ac 	.word	0x0800d1ac

08000714 <EXTI4_IRQHandler>:

/**
 * @brief EXTI line 4 interrupt handler for WINC IRQ.
 */
void EXTI4_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
    /* Clear and handle interrupt */
    if (__HAL_GPIO_EXTI_GET_IT(WINC_INT_PIN) != RESET) {
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <EXTI4_IRQHandler+0x3c>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	2b00      	cmp	r3, #0
 8000722:	d105      	bne.n	8000730 <EXTI4_IRQHandler+0x1c>
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <EXTI4_IRQHandler+0x3c>)
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	f003 0310 	and.w	r3, r3, #16
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <EXTI4_IRQHandler+0x20>
 8000730:	2301      	movs	r3, #1
 8000732:	e000      	b.n	8000736 <EXTI4_IRQHandler+0x22>
 8000734:	2300      	movs	r3, #0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d008      	beq.n	800074c <EXTI4_IRQHandler+0x38>
        __HAL_GPIO_EXTI_CLEAR_IT(WINC_INT_PIN);
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <EXTI4_IRQHandler+0x3c>)
 800073c:	2210      	movs	r2, #16
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	4b03      	ldr	r3, [pc, #12]	@ (8000750 <EXTI4_IRQHandler+0x3c>)
 8000742:	2210      	movs	r2, #16
 8000744:	611a      	str	r2, [r3, #16]
        HAL_GPIO_EXTI_IRQHandler(WINC_INT_PIN);
 8000746:	2010      	movs	r0, #16
 8000748:	f001 fc8e 	bl	8002068 <HAL_GPIO_EXTI_IRQHandler>
    }
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	44022000 	.word	0x44022000

08000754 <WifiTask>:
#include "WifiApp.h"        // your init functions & callback registration
#include "m2m_wifi.h"       // WINC1500 driver
#include <stdio.h>          // for printf()

void WifiTask(void *argument)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    // 1) Initialize the WINC1500 driver in AP or STA mode:
    //    this will call m2m_wifi_init() under the hood.
    WifiApp_InitAP();    // or WifiApp_InitSTA()
 800075c:	f7ff ff98 	bl	8000690 <WifiApp_InitAP>

    // 2) Enter the driver event loop
    for (;;)
    {
        m2m_wifi_handle_events(NULL);
 8000760:	2000      	movs	r0, #0
 8000762:	f009 fe86 	bl	800a472 <m2m_wifi_handle_events>
        osDelay(1);      // yield for 1 ms
 8000766:	2001      	movs	r0, #1
 8000768:	f006 fc51 	bl	800700e <osDelay>
        m2m_wifi_handle_events(NULL);
 800076c:	bf00      	nop
 800076e:	e7f7      	b.n	8000760 <WifiTask+0xc>

08000770 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	@ 0x28
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	  // … existing threads, mutexes, etc …

	  /* Create WIFI task */
	  const osThreadAttr_t wifiTask_attributes = {
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2224      	movs	r2, #36	@ 0x24
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f00b ffcf 	bl	800c720 <memset>
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_FREERTOS_Init+0x44>)
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	2318      	movs	r3, #24
 800078e:	61fb      	str	r3, [r7, #28]
	    .name = "wifiTask",
	    .priority = (osPriority_t) osPriorityNormal,
	    .stack_size = 512
	  };
	  osThreadNew(WifiTask, NULL, &wifiTask_attributes);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	461a      	mov	r2, r3
 8000794:	2100      	movs	r1, #0
 8000796:	4808      	ldr	r0, [pc, #32]	@ (80007b8 <MX_FREERTOS_Init+0x48>)
 8000798:	f006 fba8 	bl	8006eec <osThreadNew>

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800079c:	4a07      	ldr	r2, [pc, #28]	@ (80007bc <MX_FREERTOS_Init+0x4c>)
 800079e:	2100      	movs	r1, #0
 80007a0:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <MX_FREERTOS_Init+0x50>)
 80007a2:	f006 fba3 	bl	8006eec <osThreadNew>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a06      	ldr	r2, [pc, #24]	@ (80007c4 <MX_FREERTOS_Init+0x54>)
 80007aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	@ 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	0800d1d0 	.word	0x0800d1d0
 80007b8:	08000755 	.word	0x08000755
 80007bc:	0800d278 	.word	0x0800d278
 80007c0:	080007c9 	.word	0x080007c9
 80007c4:	200000a4 	.word	0x200000a4

080007c8 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f006 fc1c 	bl	800700e <osDelay>
 80007d6:	e7fb      	b.n	80007d0 <StartDefaultTask+0x8>

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007dc:	f001 f856 	bl	800188c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e0:	f000 f84a 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f000 f9c8 	bl	8000b78 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007e8:	f000 f8ce 	bl	8000988 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007ec:	f000 f922 	bl	8000a34 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80007f0:	f000 f976 	bl	8000ae0 <MX_USART2_UART_Init>
  MX_ICACHE_Init();
 80007f4:	f000 f8b4 	bl	8000960 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007f8:	f006 fb28 	bl	8006e4c <osKernelInitialize>
  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 80007fc:	f7ff ffb8 	bl	8000770 <MX_FREERTOS_Init>

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000800:	2000      	movs	r0, #0
 8000802:	f000 fe57 	bl	80014b4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000806:	2101      	movs	r1, #1
 8000808:	2000      	movs	r0, #0
 800080a:	f000 fed3 	bl	80015b4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <main+0x94>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000814:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <main+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800081c:	4b13      	ldr	r3, [pc, #76]	@ (800086c <main+0x94>)
 800081e:	2200      	movs	r2, #0
 8000820:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <main+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000828:	4b10      	ldr	r3, [pc, #64]	@ (800086c <main+0x94>)
 800082a:	2200      	movs	r2, #0
 800082c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800082e:	490f      	ldr	r1, [pc, #60]	@ (800086c <main+0x94>)
 8000830:	2000      	movs	r0, #0
 8000832:	f000 ff4d 	bl	80016d0 <BSP_COM_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <main+0x68>
  {
    Error_Handler();
 800083c:	f000 fa6a 	bl	8000d14 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000840:	480b      	ldr	r0, [pc, #44]	@ (8000870 <main+0x98>)
 8000842:	f00b fe25 	bl	800c490 <iprintf>
  /* -- Sample board code to switch on led ---- */
  BSP_LED_On(LED_GREEN);
 8000846:	2000      	movs	r0, #0
 8000848:	f000 fe78 	bl	800153c <BSP_LED_On>

  /* USER CODE END BSP */

  /* Start scheduler */
  osKernelStart();
 800084c:	f006 fb24 	bl	8006e98 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  m2m_wifi_handle_events(NULL);   /* must be called regularly */
 8000850:	2000      	movs	r0, #0
 8000852:	f009 fe0e 	bl	800a472 <m2m_wifi_handle_events>
	      /* … any other low-priority work … */

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000856:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <main+0x9c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d1f8      	bne.n	8000850 <main+0x78>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 800085e:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <main+0x9c>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle led ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000864:	2000      	movs	r0, #0
 8000866:	f000 fe87 	bl	8001578 <BSP_LED_Toggle>
	  m2m_wifi_handle_events(NULL);   /* must be called regularly */
 800086a:	e7f1      	b.n	8000850 <main+0x78>
 800086c:	200000a8 	.word	0x200000a8
 8000870:	0800d1dc 	.word	0x0800d1dc
 8000874:	200000b8 	.word	0x200000b8

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b09c      	sub	sp, #112	@ 0x70
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	2250      	movs	r2, #80	@ 0x50
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f00b ff4a 	bl	800c720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800089e:	4b2e      	ldr	r3, [pc, #184]	@ (8000958 <SystemClock_Config+0xe0>)
 80008a0:	691b      	ldr	r3, [r3, #16]
 80008a2:	4a2d      	ldr	r2, [pc, #180]	@ (8000958 <SystemClock_Config+0xe0>)
 80008a4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80008a8:	6113      	str	r3, [r2, #16]
 80008aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000958 <SystemClock_Config+0xe0>)
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008b6:	bf00      	nop
 80008b8:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <SystemClock_Config+0xe0>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	2b08      	cmp	r3, #8
 80008c2:	d1f9      	bne.n	80008b8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d0:	2340      	movs	r3, #64	@ 0x40
 80008d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 80008d8:	2301      	movs	r3, #1
 80008da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008dc:	2304      	movs	r3, #4
 80008de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 80008e0:	231f      	movs	r3, #31
 80008e2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e8:	2304      	movs	r3, #4
 80008ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80008f0:	230c      	movs	r3, #12
 80008f2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4618      	mov	r0, r3
 8000902:	f001 fc1d 	bl	8002140 <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800090c:	f000 fa02 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	231f      	movs	r3, #31
 8000912:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2303      	movs	r3, #3
 8000916:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	2105      	movs	r1, #5
 800092e:	4618      	mov	r0, r3
 8000930:	f002 f83e 	bl	80029b0 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800093a:	f000 f9eb 	bl	8000d14 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800093e:	4b07      	ldr	r3, [pc, #28]	@ (800095c <SystemClock_Config+0xe4>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000946:	4a05      	ldr	r2, [pc, #20]	@ (800095c <SystemClock_Config+0xe4>)
 8000948:	f043 0320 	orr.w	r3, r3, #32
 800094c:	6013      	str	r3, [r2, #0]
}
 800094e:	bf00      	nop
 8000950:	3770      	adds	r7, #112	@ 0x70
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	44020800 	.word	0x44020800
 800095c:	40022000 	.word	0x40022000

08000960 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000964:	2000      	movs	r0, #0
 8000966:	f001 fbbb 	bl	80020e0 <HAL_ICACHE_ConfigAssociativityMode>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000970:	f000 f9d0 	bl	8000d14 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000974:	f001 fbd4 	bl	8002120 <HAL_ICACHE_Enable>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800097e:	f000 f9c9 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800098c:	4b27      	ldr	r3, [pc, #156]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 800098e:	4a28      	ldr	r2, [pc, #160]	@ (8000a30 <MX_SPI1_Init+0xa8>)
 8000990:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000992:	4b26      	ldr	r3, [pc, #152]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 8000994:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000998:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800099a:	4b24      	ldr	r3, [pc, #144]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009a0:	4b22      	ldr	r3, [pc, #136]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009a2:	2203      	movs	r2, #3
 80009a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a6:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c6:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009cc:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009d4:	2207      	movs	r2, #7
 80009d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d8:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009de:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_SPI1_Init+0xa4>)
 8000a18:	f004 fc16 	bl	8005248 <HAL_SPI_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000a22:	f000 f977 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000bc 	.word	0x200000bc
 8000a30:	40013000 	.word	0x40013000

08000a34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a38:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a3a:	4a28      	ldr	r2, [pc, #160]	@ (8000adc <MX_SPI2_Init+0xa8>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a40:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a4e:	2203      	movs	r2, #3
 8000a50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a60:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a64:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a8a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_SPI2_Init+0xa4>)
 8000ac4:	f004 fbc0 	bl	8005248 <HAL_SPI_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000ace:	f000 f921 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000014c 	.word	0x2000014c
 8000adc:	40003800 	.word	0x40003800

08000ae0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae4:	4b22      	ldr	r3, [pc, #136]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000ae6:	4a23      	ldr	r2, [pc, #140]	@ (8000b74 <MX_USART2_UART_Init+0x94>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000aec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b28:	4811      	ldr	r0, [pc, #68]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b2a:	f005 fb97 	bl	800625c <HAL_UART_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b34:	f000 f8ee 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b3c:	f006 f852 	bl	8006be4 <HAL_UARTEx_SetTxFifoThreshold>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b46:	f000 f8e5 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4808      	ldr	r0, [pc, #32]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b4e:	f006 f887 	bl	8006c60 <HAL_UARTEx_SetRxFifoThreshold>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b58:	f000 f8dc 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b5e:	f006 f808 	bl	8006b72 <HAL_UARTEx_DisableFifoMode>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b68:	f000 f8d4 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200001dc 	.word	0x200001dc
 8000b74:	40004400 	.word	0x40004400

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8000cb8 <MX_GPIO_Init+0x140>)
 8000b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b94:	4a48      	ldr	r2, [pc, #288]	@ (8000cb8 <MX_GPIO_Init+0x140>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b9e:	4b46      	ldr	r3, [pc, #280]	@ (8000cb8 <MX_GPIO_Init+0x140>)
 8000ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b42      	ldr	r3, [pc, #264]	@ (8000cb8 <MX_GPIO_Init+0x140>)
 8000bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bb2:	4a41      	ldr	r2, [pc, #260]	@ (8000cb8 <MX_GPIO_Init+0x140>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cb8 <MX_GPIO_Init+0x140>)
 8000bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b3b      	ldr	r3, [pc, #236]	@ (8000cb8 <MX_GPIO_Init+0x140>)
 8000bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd0:	4a39      	ldr	r2, [pc, #228]	@ (8000cb8 <MX_GPIO_Init+0x140>)
 8000bd2:	f043 0302 	orr.w	r3, r3, #2
 8000bd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bda:	4b37      	ldr	r3, [pc, #220]	@ (8000cb8 <MX_GPIO_Init+0x140>)
 8000bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2120      	movs	r1, #32
 8000bec:	4833      	ldr	r0, [pc, #204]	@ (8000cbc <MX_GPIO_Init+0x144>)
 8000bee:	f001 fa09 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_WINC_GPIO_Port, CS_WINC_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	4832      	ldr	r0, [pc, #200]	@ (8000cc0 <MX_GPIO_Init+0x148>)
 8000bf8:	f001 fa04 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_WINC_Pin|CHIP_EN_WINC_Pin|SDCARD_CS_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f240 1103 	movw	r1, #259	@ 0x103
 8000c02:	4830      	ldr	r0, [pc, #192]	@ (8000cc4 <MX_GPIO_Init+0x14c>)
 8000c04:	f001 f9fe 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c08:	2318      	movs	r3, #24
 8000c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000c18:	230d      	movs	r3, #13
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	4619      	mov	r1, r3
 8000c22:	4826      	ldr	r0, [pc, #152]	@ (8000cbc <MX_GPIO_Init+0x144>)
 8000c24:	f001 f890 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c28:	2320      	movs	r3, #32
 8000c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481f      	ldr	r0, [pc, #124]	@ (8000cbc <MX_GPIO_Init+0x144>)
 8000c40:	f001 f882 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_WINC_PIN_Pin */
  GPIO_InitStruct.Pin = IRQ_WINC_PIN_Pin;
 8000c44:	2310      	movs	r3, #16
 8000c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_WINC_PIN_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	4619      	mov	r1, r3
 8000c56:	481a      	ldr	r0, [pc, #104]	@ (8000cc0 <MX_GPIO_Init+0x148>)
 8000c58:	f001 f876 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_WINC_Pin */
  GPIO_InitStruct.Pin = CS_WINC_Pin;
 8000c5c:	2320      	movs	r3, #32
 8000c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_WINC_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	4619      	mov	r1, r3
 8000c72:	4813      	ldr	r0, [pc, #76]	@ (8000cc0 <MX_GPIO_Init+0x148>)
 8000c74:	f001 f868 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_WINC_Pin CHIP_EN_WINC_Pin SDCARD_CS_Pin */
  GPIO_InitStruct.Pin = RESET_WINC_Pin|CHIP_EN_WINC_Pin|SDCARD_CS_Pin;
 8000c78:	f240 1303 	movw	r3, #259	@ 0x103
 8000c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <MX_GPIO_Init+0x14c>)
 8000c92:	f001 f859 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c96:	2310      	movs	r3, #16
 8000c98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <MX_GPIO_Init+0x14c>)
 8000caa:	f001 f84d 	bl	8001d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cae:	bf00      	nop
 8000cb0:	3720      	adds	r7, #32
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	44020c00 	.word	0x44020c00
 8000cbc:	42020000 	.word	0x42020000
 8000cc0:	42020800 	.word	0x42020800
 8000cc4:	42020400 	.word	0x42020400

08000cc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d101      	bne.n	8000cde <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000cda:	f000 fdff 	bl	80018dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40012c00 	.word	0x40012c00

08000cec <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <BSP_PB_Callback+0x24>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	200000b8 	.word	0x200000b8

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	210f      	movs	r1, #15
 8000d28:	f06f 0001 	mvn.w	r0, #1
 8000d2c:	f000 fef6 	bl	8001b1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0b0      	sub	sp, #192	@ 0xc0
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d4c:	f107 0320 	add.w	r3, r7, #32
 8000d50:	2288      	movs	r2, #136	@ 0x88
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f00b fce3 	bl	800c720 <memset>
  if(hspi->Instance==SPI1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a86      	ldr	r2, [pc, #536]	@ (8000f78 <HAL_SPI_MspInit+0x244>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d17f      	bne.n	8000e64 <HAL_SPI_MspInit+0x130>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000d64:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 f992 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000d86:	f7ff ffc5 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000d8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d90:	4a7a      	ldr	r2, [pc, #488]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000d92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d96:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000d9a:	4b78      	ldr	r3, [pc, #480]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000d9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b74      	ldr	r3, [pc, #464]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dae:	4a73      	ldr	r2, [pc, #460]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000db8:	4b70      	ldr	r3, [pc, #448]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dcc:	4a6b      	ldr	r2, [pc, #428]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dd6:	4b69      	ldr	r3, [pc, #420]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000de4:	2340      	movs	r3, #64	@ 0x40
 8000de6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dfc:	2305      	movs	r3, #5
 8000dfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e06:	4619      	mov	r1, r3
 8000e08:	485d      	ldr	r0, [pc, #372]	@ (8000f80 <HAL_SPI_MspInit+0x24c>)
 8000e0a:	f000 ff9d 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e0e:	2380      	movs	r3, #128	@ 0x80
 8000e10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e26:	2305      	movs	r3, #5
 8000e28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e30:	4619      	mov	r1, r3
 8000e32:	4853      	ldr	r0, [pc, #332]	@ (8000f80 <HAL_SPI_MspInit+0x24c>)
 8000e34:	f000 ff88 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e50:	2305      	movs	r3, #5
 8000e52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4849      	ldr	r0, [pc, #292]	@ (8000f84 <HAL_SPI_MspInit+0x250>)
 8000e5e:	f000 ff73 	bl	8001d48 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e62:	e084      	b.n	8000f6e <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a47      	ldr	r2, [pc, #284]	@ (8000f88 <HAL_SPI_MspInit+0x254>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d17f      	bne.n	8000f6e <HAL_SPI_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 f90d 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_SPI_MspInit+0x160>
      Error_Handler();
 8000e90:	f7ff ff40 	bl	8000d14 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e94:	4b39      	ldr	r3, [pc, #228]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e9a:	4a38      	ldr	r2, [pc, #224]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000e9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ea4:	4b35      	ldr	r3, [pc, #212]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eb8:	4a30      	ldr	r2, [pc, #192]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed6:	4a29      	ldr	r2, [pc, #164]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ee0:	4b26      	ldr	r3, [pc, #152]	@ (8000f7c <HAL_SPI_MspInit+0x248>)
 8000ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SDCARD_MOSI_Pin;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f06:	2305      	movs	r3, #5
 8000f08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(SDCARD_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f10:	4619      	mov	r1, r3
 8000f12:	481e      	ldr	r0, [pc, #120]	@ (8000f8c <HAL_SPI_MspInit+0x258>)
 8000f14:	f000 ff18 	bl	8001d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDCARD_MISO_Pin;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f30:	2305      	movs	r3, #5
 8000f32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(SDCARD_MISO_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4813      	ldr	r0, [pc, #76]	@ (8000f8c <HAL_SPI_MspInit+0x258>)
 8000f3e:	f000 ff03 	bl	8001d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDCARD_SCK_Pin;
 8000f42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f5c:	2305      	movs	r3, #5
 8000f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(SDCARD_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f66:	4619      	mov	r1, r3
 8000f68:	4806      	ldr	r0, [pc, #24]	@ (8000f84 <HAL_SPI_MspInit+0x250>)
 8000f6a:	f000 feed 	bl	8001d48 <HAL_GPIO_Init>
}
 8000f6e:	bf00      	nop
 8000f70:	37c0      	adds	r7, #192	@ 0xc0
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40013000 	.word	0x40013000
 8000f7c:	44020c00 	.word	0x44020c00
 8000f80:	42020000 	.word	0x42020000
 8000f84:	42020400 	.word	0x42020400
 8000f88:	40003800 	.word	0x40003800
 8000f8c:	42020800 	.word	0x42020800

08000f90 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0ae      	sub	sp, #184	@ 0xb8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	2288      	movs	r2, #136	@ 0x88
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f00b fbb5 	bl	800c720 <memset>
  if(huart->Instance==USART2)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a38      	ldr	r2, [pc, #224]	@ (800109c <HAL_UART_MspInit+0x10c>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d169      	bne.n	8001094 <HAL_UART_MspInit+0x104>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fc0:	f04f 0202 	mov.w	r2, #2
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 f865 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000fe0:	f7ff fe98 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80010a0 <HAL_UART_MspInit+0x110>)
 8000fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000fea:	4a2d      	ldr	r2, [pc, #180]	@ (80010a0 <HAL_UART_MspInit+0x110>)
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80010a0 <HAL_UART_MspInit+0x110>)
 8000ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	4b27      	ldr	r3, [pc, #156]	@ (80010a0 <HAL_UART_MspInit+0x110>)
 8001004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001008:	4a25      	ldr	r2, [pc, #148]	@ (80010a0 <HAL_UART_MspInit+0x110>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001012:	4b23      	ldr	r3, [pc, #140]	@ (80010a0 <HAL_UART_MspInit+0x110>)
 8001014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <HAL_UART_MspInit+0x110>)
 8001022:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001026:	4a1e      	ldr	r2, [pc, #120]	@ (80010a0 <HAL_UART_MspInit+0x110>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <HAL_UART_MspInit+0x110>)
 8001032:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PC7     ------> USART2_RX
    PA8     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = DISPLAY_RX_Pin;
 800103e:	2380      	movs	r3, #128	@ 0x80
 8001040:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF13_USART2;
 8001056:	230d      	movs	r3, #13
 8001058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DISPLAY_RX_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001060:	4619      	mov	r1, r3
 8001062:	4810      	ldr	r0, [pc, #64]	@ (80010a4 <HAL_UART_MspInit+0x114>)
 8001064:	f000 fe70 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPLAY_TX_Pin;
 8001068:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800106c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001082:	2304      	movs	r3, #4
 8001084:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DISPLAY_TX_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800108c:	4619      	mov	r1, r3
 800108e:	4806      	ldr	r0, [pc, #24]	@ (80010a8 <HAL_UART_MspInit+0x118>)
 8001090:	f000 fe5a 	bl	8001d48 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001094:	bf00      	nop
 8001096:	37b8      	adds	r7, #184	@ 0xb8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40004400 	.word	0x40004400
 80010a0:	44020c00 	.word	0x44020c00
 80010a4:	42020800 	.word	0x42020800
 80010a8:	42020000 	.word	0x42020000

080010ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	@ 0x38
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001170 <HAL_InitTick+0xc4>)
 80010b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80010ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001170 <HAL_InitTick+0xc4>)
 80010bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010c0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80010c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001170 <HAL_InitTick+0xc4>)
 80010c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80010ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010d2:	f107 0210 	add.w	r2, r7, #16
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 ffa9 	bl	8003034 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010e2:	f001 ff7b 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 80010e6:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 80010e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	4a21      	ldr	r2, [pc, #132]	@ (8001174 <HAL_InitTick+0xc8>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	09db      	lsrs	r3, r3, #7
 80010f4:	3b01      	subs	r3, #1
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001178 <HAL_InitTick+0xcc>)
 80010fa:	4a20      	ldr	r2, [pc, #128]	@ (800117c <HAL_InitTick+0xd0>)
 80010fc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (100000U / 1000U) - 1U;
 80010fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001178 <HAL_InitTick+0xcc>)
 8001100:	2263      	movs	r2, #99	@ 0x63
 8001102:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001104:	4a1c      	ldr	r2, [pc, #112]	@ (8001178 <HAL_InitTick+0xcc>)
 8001106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001108:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800110a:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <HAL_InitTick+0xcc>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <HAL_InitTick+0xcc>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001116:	4818      	ldr	r0, [pc, #96]	@ (8001178 <HAL_InitTick+0xcc>)
 8001118:	f004 fdc7 	bl	8005caa <HAL_TIM_Base_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001122:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001126:	2b00      	cmp	r3, #0
 8001128:	d118      	bne.n	800115c <HAL_InitTick+0xb0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800112a:	4813      	ldr	r0, [pc, #76]	@ (8001178 <HAL_InitTick+0xcc>)
 800112c:	f004 fe1e 	bl	8005d6c <HAL_TIM_Base_Start_IT>
 8001130:	4603      	mov	r3, r0
 8001132:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001136:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10e      	bne.n	800115c <HAL_InitTick+0xb0>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d808      	bhi.n	8001156 <HAL_InitTick+0xaa>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	202a      	movs	r0, #42	@ 0x2a
 800114a:	f000 fce7 	bl	8001b1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800114e:	4a0c      	ldr	r2, [pc, #48]	@ (8001180 <HAL_InitTick+0xd4>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	e002      	b.n	800115c <HAL_InitTick+0xb0>
      }
      else
      {
        status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
}

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800115c:	202a      	movs	r0, #42	@ 0x2a
 800115e:	f000 fcf7 	bl	8001b50 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8001162:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001166:	4618      	mov	r0, r3
 8001168:	3738      	adds	r7, #56	@ 0x38
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	44020c00 	.word	0x44020c00
 8001174:	0a7c5ac5 	.word	0x0a7c5ac5
 8001178:	20000270 	.word	0x20000270
 800117c:	40012c00 	.word	0x40012c00
 8001180:	20000018 	.word	0x20000018

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <NMI_Handler+0x4>

0800118c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	uint32_t hfsr  = SCB->HFSR;   // hard fault status
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <HardFault_Handler+0x48>)
 8001194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001196:	60fb      	str	r3, [r7, #12]
	    uint32_t cfsr  = SCB->CFSR;   // configurable fault status
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <HardFault_Handler+0x48>)
 800119a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800119c:	60bb      	str	r3, [r7, #8]
	    uint32_t mmfar = SCB->MMFAR;  // mem manage fault address
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <HardFault_Handler+0x48>)
 80011a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011a2:	607b      	str	r3, [r7, #4]
	    uint32_t bfar  = SCB->BFAR;   // bus fault address
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HardFault_Handler+0x48>)
 80011a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a8:	603b      	str	r3, [r7, #0]

	    printf("\r\n*** HARDFAULT! ***\r\n");
 80011aa:	480b      	ldr	r0, [pc, #44]	@ (80011d8 <HardFault_Handler+0x4c>)
 80011ac:	f00b f9d8 	bl	800c560 <puts>
	    printf(" HFSR  = 0x%08lX\r\n", hfsr);
 80011b0:	68f9      	ldr	r1, [r7, #12]
 80011b2:	480a      	ldr	r0, [pc, #40]	@ (80011dc <HardFault_Handler+0x50>)
 80011b4:	f00b f96c 	bl	800c490 <iprintf>
	    printf(" CFSR  = 0x%08lX\r\n", cfsr);
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	4809      	ldr	r0, [pc, #36]	@ (80011e0 <HardFault_Handler+0x54>)
 80011bc:	f00b f968 	bl	800c490 <iprintf>
	    printf(" MMFAR = 0x%08lX\r\n", mmfar);
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	4808      	ldr	r0, [pc, #32]	@ (80011e4 <HardFault_Handler+0x58>)
 80011c4:	f00b f964 	bl	800c490 <iprintf>
	    printf(" BFAR  = 0x%08lX\r\n", bfar);
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	4807      	ldr	r0, [pc, #28]	@ (80011e8 <HardFault_Handler+0x5c>)
 80011cc:	f00b f960 	bl	800c490 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
      __NOP();  // you can blink an LED here if you want
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <HardFault_Handler+0x44>
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	0800d1f8 	.word	0x0800d1f8
 80011dc:	0800d210 	.word	0x0800d210
 80011e0:	0800d224 	.word	0x0800d224
 80011e4:	0800d238 	.word	0x0800d238
 80011e8:	0800d24c 	.word	0x0800d24c

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <MemManage_Handler+0x4>

080011f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <BusFault_Handler+0x4>

080011fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <UsageFault_Handler+0x4>

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001216:	2000      	movs	r0, #0
 8001218:	f000 fa44 	bl	80016a4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <TIM1_UP_IRQHandler+0x10>)
 8001226:	f004 fdf5 	bl	8005e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000270 	.word	0x20000270

08001234 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	e00a      	b.n	800125c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001246:	f3af 8000 	nop.w
 800124a:	4601      	mov	r1, r0
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	b2ca      	uxtb	r2, r1
 8001254:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3301      	adds	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	dbf0      	blt.n	8001246 <_read+0x12>
  }

  return len;
 8001264:	687b      	ldr	r3, [r7, #4]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e009      	b.n	8001294 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	60ba      	str	r2, [r7, #8]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fa85 	bl	8001798 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	dbf1      	blt.n	8001280 <_write+0x12>
  }
  return len;
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_close>:

int _close(int file)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012ce:	605a      	str	r2, [r3, #4]
  return 0;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_isatty>:

int _isatty(int file)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	@ (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f00b fa4c 	bl	800c7dc <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <_sbrk+0x64>)
 8001360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20008000 	.word	0x20008000
 8001370:	00000400 	.word	0x00000400
 8001374:	200002bc 	.word	0x200002bc
 8001378:	20003210 	.word	0x20003210

0800137c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001382:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <SystemInit+0xc8>)
 8001384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001388:	4a2e      	ldr	r2, [pc, #184]	@ (8001444 <SystemInit+0xc8>)
 800138a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800138e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001392:	4b2d      	ldr	r3, [pc, #180]	@ (8001448 <SystemInit+0xcc>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001398:	4b2b      	ldr	r3, [pc, #172]	@ (8001448 <SystemInit+0xcc>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800139e:	4b2a      	ldr	r3, [pc, #168]	@ (8001448 <SystemInit+0xcc>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80013a4:	4b28      	ldr	r3, [pc, #160]	@ (8001448 <SystemInit+0xcc>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4927      	ldr	r1, [pc, #156]	@ (8001448 <SystemInit+0xcc>)
 80013aa:	4b28      	ldr	r3, [pc, #160]	@ (800144c <SystemInit+0xd0>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80013b0:	4b25      	ldr	r3, [pc, #148]	@ (8001448 <SystemInit+0xcc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80013b6:	4b24      	ldr	r3, [pc, #144]	@ (8001448 <SystemInit+0xcc>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80013bc:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <SystemInit+0xcc>)
 80013be:	4a24      	ldr	r2, [pc, #144]	@ (8001450 <SystemInit+0xd4>)
 80013c0:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80013c2:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <SystemInit+0xcc>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <SystemInit+0xcc>)
 80013ca:	4a21      	ldr	r2, [pc, #132]	@ (8001450 <SystemInit+0xd4>)
 80013cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80013ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001448 <SystemInit+0xcc>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80013d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001448 <SystemInit+0xcc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001448 <SystemInit+0xcc>)
 80013da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80013e0:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <SystemInit+0xcc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <SystemInit+0xc8>)
 80013e8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80013ec:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80013ee:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <SystemInit+0xd8>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80013f6:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80013fe:	d003      	beq.n	8001408 <SystemInit+0x8c>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001406:	d117      	bne.n	8001438 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <SystemInit+0xd8>)
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <SystemInit+0xd8>)
 8001416:	4a10      	ldr	r2, [pc, #64]	@ (8001458 <SystemInit+0xdc>)
 8001418:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <SystemInit+0xd8>)
 800141c:	4a0f      	ldr	r2, [pc, #60]	@ (800145c <SystemInit+0xe0>)
 800141e:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001420:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <SystemInit+0xd8>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <SystemInit+0xd8>)
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800142c:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <SystemInit+0xd8>)
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	4a08      	ldr	r2, [pc, #32]	@ (8001454 <SystemInit+0xd8>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	61d3      	str	r3, [r2, #28]
  }
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00
 8001448:	44020c00 	.word	0x44020c00
 800144c:	fae2eae3 	.word	0xfae2eae3
 8001450:	01010280 	.word	0x01010280
 8001454:	40022000 	.word	0x40022000
 8001458:	08192a3b 	.word	0x08192a3b
 800145c:	4c5d6e7f 	.word	0x4c5d6e7f

08001460 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001460:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001498 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001464:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001466:	e003      	b.n	8001470 <LoopCopyDataInit>

08001468 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800146a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800146c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800146e:	3104      	adds	r1, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001470:	480b      	ldr	r0, [pc, #44]	@ (80014a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001474:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001476:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001478:	d3f6      	bcc.n	8001468 <CopyDataInit>
	ldr	r2, =_sbss
 800147a:	4a0b      	ldr	r2, [pc, #44]	@ (80014a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800147c:	e002      	b.n	8001484 <LoopFillZerobss>

0800147e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800147e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001480:	f842 3b04 	str.w	r3, [r2], #4

08001484 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001484:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <LoopForever+0x16>)
	cmp	r2, r3
 8001486:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001488:	d3f9      	bcc.n	800147e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800148a:	f7ff ff77 	bl	800137c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148e:	f00b f9ab 	bl	800c7e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001492:	f7ff f9a1 	bl	80007d8 <main>

08001496 <LoopForever>:

LoopForever:
    b LoopForever
 8001496:	e7fe      	b.n	8001496 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001498:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 800149c:	0800d428 	.word	0x0800d428
	ldr	r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014a4:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 80014a8:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 80014ac:	20003210 	.word	0x20003210

080014b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC1_IRQHandler>
	...

080014b4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014c8:	f06f 0301 	mvn.w	r3, #1
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ce:	e02c      	b.n	800152a <BSP_LED_Init+0x76>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10e      	bne.n	80014f4 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 80014d6:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <BSP_LED_Init+0x80>)
 80014d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014dc:	4a15      	ldr	r2, [pc, #84]	@ (8001534 <BSP_LED_Init+0x80>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <BSP_LED_Init+0x80>)
 80014e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80014f4:	2320      	movs	r3, #32
 80014f6:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	4a0c      	ldr	r2, [pc, #48]	@ (8001538 <BSP_LED_Init+0x84>)
 8001508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150c:	f107 0210 	add.w	r2, r7, #16
 8001510:	4611      	mov	r1, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fc18 	bl	8001d48 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	4a07      	ldr	r2, [pc, #28]	@ (8001538 <BSP_LED_Init+0x84>)
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	2120      	movs	r1, #32
 8001522:	2200      	movs	r2, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fd6d 	bl	8002004 <HAL_GPIO_WritePin>
  }

  return ret;
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800152c:	4618      	mov	r0, r3
 800152e:	3728      	adds	r7, #40	@ 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	44020c00 	.word	0x44020c00
 8001538:	20000008 	.word	0x20000008

0800153c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <BSP_LED_On+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001550:	f06f 0301 	mvn.w	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e008      	b.n	800156a <BSP_LED_On+0x2e>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	4a06      	ldr	r2, [pc, #24]	@ (8001574 <BSP_LED_On+0x38>)
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	2120      	movs	r1, #32
 8001562:	2201      	movs	r2, #1
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fd4d 	bl	8002004 <HAL_GPIO_WritePin>
  }

  return ret;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000008 	.word	0x20000008

08001578 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <BSP_LED_Toggle+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800158c:	f06f 0301 	mvn.w	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	e008      	b.n	80015a6 <BSP_LED_Toggle+0x2e>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	4a06      	ldr	r2, [pc, #24]	@ (80015b0 <BSP_LED_Toggle+0x38>)
 8001598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159c:	2220      	movs	r2, #32
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fd47 	bl	8002034 <HAL_GPIO_TogglePin>
  }

  return ret;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000008 	.word	0x20000008

080015b4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	460a      	mov	r2, r1
 80015be:	71fb      	strb	r3, [r7, #7]
 80015c0:	4613      	mov	r3, r2
 80015c2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80015c4:	4b30      	ldr	r3, [pc, #192]	@ (8001688 <BSP_PB_Init+0xd4>)
 80015c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001688 <BSP_PB_Init+0xd4>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001688 <BSP_PB_Init+0xd4>)
 80015d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80015e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80015e8:	2302      	movs	r3, #2
 80015ea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ec:	2302      	movs	r3, #2
 80015ee:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10c      	bne.n	8001610 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	4a23      	ldr	r2, [pc, #140]	@ (800168c <BSP_PB_Init+0xd8>)
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	f107 020c 	add.w	r2, r7, #12
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fb9d 	bl	8001d48 <HAL_GPIO_Init>
 800160e:	e036      	b.n	800167e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001610:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <BSP_PB_Init+0xdc>)
 8001612:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4a1d      	ldr	r2, [pc, #116]	@ (800168c <BSP_PB_Init+0xd8>)
 8001618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161c:	f107 020c 	add.w	r2, r7, #12
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fb90 	bl	8001d48 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001628:	79fa      	ldrb	r2, [r7, #7]
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4a18      	ldr	r2, [pc, #96]	@ (8001694 <BSP_PB_Init+0xe0>)
 8001634:	441a      	add	r2, r3
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	4917      	ldr	r1, [pc, #92]	@ (8001698 <BSP_PB_Init+0xe4>)
 800163a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800163e:	4619      	mov	r1, r3
 8001640:	4610      	mov	r0, r2
 8001642:	f000 fb25 	bl	8001c90 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001646:	79fa      	ldrb	r2, [r7, #7]
 8001648:	4613      	mov	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4a10      	ldr	r2, [pc, #64]	@ (8001694 <BSP_PB_Init+0xe0>)
 8001652:	1898      	adds	r0, r3, r2
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	4a11      	ldr	r2, [pc, #68]	@ (800169c <BSP_PB_Init+0xe8>)
 8001658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165c:	461a      	mov	r2, r3
 800165e:	2100      	movs	r1, #0
 8001660:	f000 faea 	bl	8001c38 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001664:	2018      	movs	r0, #24
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	4a0d      	ldr	r2, [pc, #52]	@ (80016a0 <BSP_PB_Init+0xec>)
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	2200      	movs	r2, #0
 8001670:	4619      	mov	r1, r3
 8001672:	f000 fa53 	bl	8001b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001676:	2318      	movs	r3, #24
 8001678:	4618      	mov	r0, r3
 800167a:	f000 fa69 	bl	8001b50 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3720      	adds	r7, #32
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	44020c00 	.word	0x44020c00
 800168c:	2000000c 	.word	0x2000000c
 8001690:	10110000 	.word	0x10110000
 8001694:	200002c0 	.word	0x200002c0
 8001698:	0800d2b4 	.word	0x0800d2b4
 800169c:	20000010 	.word	0x20000010
 80016a0:	20000014 	.word	0x20000014

080016a4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80016ae:	79fa      	ldrb	r2, [r7, #7]
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4a04      	ldr	r2, [pc, #16]	@ (80016cc <BSP_PB_IRQHandler+0x28>)
 80016ba:	4413      	add	r3, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fafb 	bl	8001cb8 <HAL_EXTI_IRQHandler>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200002c0 	.word	0x200002c0

080016d0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016e6:	f06f 0301 	mvn.w	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	e018      	b.n	8001720 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	2294      	movs	r2, #148	@ 0x94
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <BSP_COM_Init+0x5c>)
 80016f8:	4413      	add	r3, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f870 	bl	80017e0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2294      	movs	r2, #148	@ 0x94
 8001704:	fb02 f303 	mul.w	r3, r2, r3
 8001708:	4a08      	ldr	r2, [pc, #32]	@ (800172c <BSP_COM_Init+0x5c>)
 800170a:	4413      	add	r3, r2
 800170c:	6839      	ldr	r1, [r7, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f80e 	bl	8001730 <MX_USART_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800171a:	f06f 0303 	mvn.w	r3, #3
 800171e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001720:	68fb      	ldr	r3, [r7, #12]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200002cc 	.word	0x200002cc

08001730 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <MX_USART_Init+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	220c      	movs	r2, #12
 800174e:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	895b      	ldrh	r3, [r3, #10]
 8001754:	461a      	mov	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	891b      	ldrh	r3, [r3, #8]
 8001766:	461a      	mov	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	899b      	ldrh	r3, [r3, #12]
 8001770:	461a      	mov	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800177c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f004 fd69 	bl	800625c <HAL_UART_Init>
 800178a:	4603      	mov	r3, r0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000004 	.word	0x20000004

08001798 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80017a0:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <__io_putchar+0x30>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	2394      	movs	r3, #148	@ 0x94
 80017a8:	fb02 f303 	mul.w	r3, r2, r3
 80017ac:	4a07      	ldr	r2, [pc, #28]	@ (80017cc <__io_putchar+0x34>)
 80017ae:	1898      	adds	r0, r3, r2
 80017b0:	1d39      	adds	r1, r7, #4
 80017b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b6:	2201      	movs	r2, #1
 80017b8:	f004 fda0 	bl	80062fc <HAL_UART_Transmit>
  return ch;
 80017bc:	687b      	ldr	r3, [r7, #4]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000360 	.word	0x20000360
 80017cc:	200002cc 	.word	0x200002cc

080017d0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7ff fa89 	bl	8000cec <BSP_PB_Callback>
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	@ 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80017e8:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <COM1_MspInit+0xa4>)
 80017ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ee:	4a25      	ldr	r2, [pc, #148]	@ (8001884 <COM1_MspInit+0xa4>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017f8:	4b22      	ldr	r3, [pc, #136]	@ (8001884 <COM1_MspInit+0xa4>)
 80017fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001806:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <COM1_MspInit+0xa4>)
 8001808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800180c:	4a1d      	ldr	r2, [pc, #116]	@ (8001884 <COM1_MspInit+0xa4>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001816:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <COM1_MspInit+0xa4>)
 8001818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001824:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <COM1_MspInit+0xa4>)
 8001826:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800182a:	4a16      	ldr	r2, [pc, #88]	@ (8001884 <COM1_MspInit+0xa4>)
 800182c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001830:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001834:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <COM1_MspInit+0xa4>)
 8001836:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800183a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001842:	2310      	movs	r3, #16
 8001844:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800184a:	2302      	movs	r3, #2
 800184c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800184e:	2301      	movs	r3, #1
 8001850:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001852:	230d      	movs	r3, #13
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	480a      	ldr	r0, [pc, #40]	@ (8001888 <COM1_MspInit+0xa8>)
 800185e:	f000 fa73 	bl	8001d48 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001862:	2308      	movs	r3, #8
 8001864:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800186a:	230d      	movs	r3, #13
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4804      	ldr	r0, [pc, #16]	@ (8001888 <COM1_MspInit+0xa8>)
 8001876:	f000 fa67 	bl	8001d48 <HAL_GPIO_Init>
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	@ 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	44020c00 	.word	0x44020c00
 8001888:	42020000 	.word	0x42020000

0800188c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f000 f938 	bl	8001b06 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001896:	f001 fa43 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 800189a:	4602      	mov	r2, r0
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <HAL_Init+0x44>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	490b      	ldr	r1, [pc, #44]	@ (80018d4 <HAL_Init+0x48>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ac:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <HAL_Init+0x4c>)
 80018ae:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80018b0:	2004      	movs	r0, #4
 80018b2:	f000 f969 	bl	8001b88 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b6:	200f      	movs	r0, #15
 80018b8:	f7ff fbf8 	bl	80010ac <HAL_InitTick>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e002      	b.n	80018cc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018c6:	f7ff fa2b 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	44020c00 	.word	0x44020c00
 80018d4:	0800d29c 	.word	0x0800d29c
 80018d8:	20000000 	.word	0x20000000

080018dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	2000001c 	.word	0x2000001c
 8001900:	20000364 	.word	0x20000364

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000364 	.word	0x20000364

0800191c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff ffee 	bl	8001904 <HAL_GetTick>
 8001928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d005      	beq.n	8001942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_Delay+0x44>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001942:	bf00      	nop
 8001944:	f7ff ffde 	bl	8001904 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	429a      	cmp	r2, r3
 8001952:	d8f7      	bhi.n	8001944 <HAL_Delay+0x28>
  {
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000001c 	.word	0x2000001c

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4907      	ldr	r1, [pc, #28]	@ (8001a00 <__NVIC_EnableIRQ+0x38>)
 80019e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db12      	blt.n	8001a3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	490a      	ldr	r1, [pc, #40]	@ (8001a48 <__NVIC_DisableIRQ+0x44>)
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2001      	movs	r0, #1
 8001a26:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2a:	3320      	adds	r3, #32
 8001a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a30:	f3bf 8f4f 	dsb	sy
}
 8001a34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a36:	f3bf 8f6f 	isb	sy
}
 8001a3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	@ (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	@ (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	@ 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ff28 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2a:	f7ff ff3f 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001b2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	68b9      	ldr	r1, [r7, #8]
 8001b34:	6978      	ldr	r0, [r7, #20]
 8001b36:	f7ff ffb3 	bl	8001aa0 <NVIC_EncodePriority>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff82 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b48:	bf00      	nop
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff32 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff42 	bl	8001a04 <__NVIC_DisableIRQ>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d844      	bhi.n	8001c20 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001b96:	a201      	add	r2, pc, #4	@ (adr r2, 8001b9c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9c:	08001bbf 	.word	0x08001bbf
 8001ba0:	08001bdd 	.word	0x08001bdd
 8001ba4:	08001bff 	.word	0x08001bff
 8001ba8:	08001c21 	.word	0x08001c21
 8001bac:	08001bb1 	.word	0x08001bb1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	6013      	str	r3, [r2, #0]
      break;
 8001bbc:	e031      	b.n	8001c22 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bc4:	f023 0304 	bic.w	r3, r3, #4
 8001bc8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001bca:	4b1a      	ldr	r3, [pc, #104]	@ (8001c34 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001bcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001bd0:	4a18      	ldr	r2, [pc, #96]	@ (8001c34 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001bd2:	f023 030c 	bic.w	r3, r3, #12
 8001bd6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001bda:	e022      	b.n	8001c22 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001bdc:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a13      	ldr	r2, [pc, #76]	@ (8001c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001be2:	f023 0304 	bic.w	r3, r3, #4
 8001be6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001bea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001bee:	f023 030c 	bic.w	r3, r3, #12
 8001bf2:	4a10      	ldr	r2, [pc, #64]	@ (8001c34 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001bfc:	e011      	b.n	8001c22 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a0b      	ldr	r2, [pc, #44]	@ (8001c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c04:	f023 0304 	bic.w	r3, r3, #4
 8001c08:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001c10:	f023 030c 	bic.w	r3, r3, #12
 8001c14:	4a07      	ldr	r2, [pc, #28]	@ (8001c34 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c16:	f043 0308 	orr.w	r3, r3, #8
 8001c1a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001c1e:	e000      	b.n	8001c22 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001c20:	bf00      	nop
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e010 	.word	0xe000e010
 8001c34:	44020c00 	.word	0x44020c00

08001c38 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	460b      	mov	r3, r1
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001c4a:	7afb      	ldrb	r3, [r7, #11]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d011      	beq.n	8001c74 <HAL_EXTI_RegisterCallback+0x3c>
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	dc13      	bgt.n	8001c7c <HAL_EXTI_RegisterCallback+0x44>
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_EXTI_RegisterCallback+0x26>
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d007      	beq.n	8001c6c <HAL_EXTI_RegisterCallback+0x34>
 8001c5c:	e00e      	b.n	8001c7c <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	609a      	str	r2, [r3, #8]
      break;
 8001c6a:	e00a      	b.n	8001c82 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	605a      	str	r2, [r3, #4]
      break;
 8001c72:	e006      	b.n	8001c82 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	609a      	str	r2, [r3, #8]
      break;
 8001c7a:	e002      	b.n	8001c82 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8001c80:	bf00      	nop
  }

  return status;
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e003      	b.n	8001cac <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001caa:	2300      	movs	r3, #0
  }
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <HAL_EXTI_IRQHandler+0x88>)
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	015a      	lsls	r2, r3, #5
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <HAL_EXTI_IRQHandler+0x8c>)
 8001d10:	4413      	add	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d009      	beq.n	8001d38 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	4798      	blx	r3
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	4402200c 	.word	0x4402200c
 8001d44:	44022010 	.word	0x44022010

08001d48 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d56:	e142      	b.n	8001fde <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	4013      	ands	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8134 	beq.w	8001fd8 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x38>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b12      	cmp	r3, #18
 8001d7e:	d125      	bne.n	8001dcc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	08da      	lsrs	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	220f      	movs	r2, #15
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4013      	ands	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f003 020f 	and.w	r2, r3, #15
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	08da      	lsrs	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3208      	adds	r2, #8
 8001dc6:	6979      	ldr	r1, [r7, #20]
 8001dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4013      	ands	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0203 	and.w	r2, r3, #3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d00b      	beq.n	8001e20 <HAL_GPIO_Init+0xd8>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d007      	beq.n	8001e20 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e14:	2b11      	cmp	r3, #17
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b12      	cmp	r3, #18
 8001e1e:	d130      	bne.n	8001e82 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4013      	ands	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e56:	2201      	movs	r2, #1
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4013      	ands	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f003 0201 	and.w	r2, r3, #1
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d109      	bne.n	8001ea2 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d11b      	bne.n	8001ed2 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d017      	beq.n	8001ed2 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	2203      	movs	r2, #3
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d07c      	beq.n	8001fd8 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001ede:	4a47      	ldr	r2, [pc, #284]	@ (8001ffc <HAL_GPIO_Init+0x2b4>)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3318      	adds	r3, #24
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	4013      	ands	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	0a9a      	lsrs	r2, r3, #10
 8001f06:	4b3e      	ldr	r3, [pc, #248]	@ (8002000 <HAL_GPIO_Init+0x2b8>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	00d2      	lsls	r2, r2, #3
 8001f12:	4093      	lsls	r3, r2
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001f1a:	4938      	ldr	r1, [pc, #224]	@ (8001ffc <HAL_GPIO_Init+0x2b4>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3318      	adds	r3, #24
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001f28:	4b34      	ldr	r3, [pc, #208]	@ (8001ffc <HAL_GPIO_Init+0x2b4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4013      	ands	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001ffc <HAL_GPIO_Init+0x2b4>)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001f52:	4b2a      	ldr	r3, [pc, #168]	@ (8001ffc <HAL_GPIO_Init+0x2b4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001f76:	4a21      	ldr	r2, [pc, #132]	@ (8001ffc <HAL_GPIO_Init+0x2b4>)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ffc <HAL_GPIO_Init+0x2b4>)
 8001f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f82:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001fa2:	4a16      	ldr	r2, [pc, #88]	@ (8001ffc <HAL_GPIO_Init+0x2b4>)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001faa:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <HAL_GPIO_Init+0x2b4>)
 8001fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fb0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <HAL_GPIO_Init+0x2b4>)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f47f aeb5 	bne.w	8001d58 <HAL_GPIO_Init+0x10>
  }
}
 8001fee:	bf00      	nop
 8001ff0:	bf00      	nop
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	44022000 	.word	0x44022000
 8002000:	002f7f7f 	.word	0x002f7f7f

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002020:	e002      	b.n	8002028 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4013      	ands	r3, r2
 800204c:	041a      	lsls	r2, r3, #16
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43d9      	mvns	r1, r3
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	400b      	ands	r3, r1
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	619a      	str	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002072:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800207e:	4a0c      	ldr	r2, [pc, #48]	@ (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f814 	bl	80020b4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800208c:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002098:	4a05      	ldr	r2, [pc, #20]	@ (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 f812 	bl	80020ca <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	44022000 	.word	0x44022000

080020b4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	e007      	b.n	800210e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80020fe:	4b07      	ldr	r3, [pc, #28]	@ (800211c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 0204 	bic.w	r2, r3, #4
 8002106:	4905      	ldr	r1, [pc, #20]	@ (800211c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40030400 	.word	0x40030400

08002120 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_ICACHE_Enable+0x1c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a04      	ldr	r2, [pc, #16]	@ (800213c <HAL_ICACHE_Enable+0x1c>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40030400 	.word	0x40030400

08002140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	f000 bc28 	b.w	80029a4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002154:	4b94      	ldr	r3, [pc, #592]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	f003 0318 	and.w	r3, r3, #24
 800215c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800215e:	4b92      	ldr	r3, [pc, #584]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	d05b      	beq.n	800222c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b08      	cmp	r3, #8
 8002178:	d005      	beq.n	8002186 <HAL_RCC_OscConfig+0x46>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	2b18      	cmp	r3, #24
 800217e:	d114      	bne.n	80021aa <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d111      	bne.n	80021aa <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d102      	bne.n	8002194 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	f000 bc08 	b.w	80029a4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002194:	4b84      	ldr	r3, [pc, #528]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	041b      	lsls	r3, r3, #16
 80021a2:	4981      	ldr	r1, [pc, #516]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80021a8:	e040      	b.n	800222c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d023      	beq.n	80021fa <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021b2:	4b7d      	ldr	r3, [pc, #500]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a7c      	ldr	r2, [pc, #496]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7ff fba1 	bl	8001904 <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80021c6:	f7ff fb9d 	bl	8001904 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e3e5      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80021d8:	4b73      	ldr	r3, [pc, #460]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80021e4:	4b70      	ldr	r3, [pc, #448]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	496d      	ldr	r1, [pc, #436]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	618b      	str	r3, [r1, #24]
 80021f8:	e018      	b.n	800222c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80021fa:	4b6b      	ldr	r3, [pc, #428]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a6a      	ldr	r2, [pc, #424]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002206:	f7ff fb7d 	bl	8001904 <HAL_GetTick>
 800220a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800220e:	f7ff fb79 	bl	8001904 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e3c1      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002220:	4b61      	ldr	r3, [pc, #388]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f0      	bne.n	800220e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a0 	beq.w	800237a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	2b10      	cmp	r3, #16
 800223e:	d005      	beq.n	800224c <HAL_RCC_OscConfig+0x10c>
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	2b18      	cmp	r3, #24
 8002244:	d109      	bne.n	800225a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 8092 	bne.w	800237a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e3a4      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x132>
 8002264:	4b50      	ldr	r3, [pc, #320]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a4f      	ldr	r2, [pc, #316]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 800226a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e058      	b.n	8002324 <HAL_RCC_OscConfig+0x1e4>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d112      	bne.n	80022a0 <HAL_RCC_OscConfig+0x160>
 800227a:	4b4b      	ldr	r3, [pc, #300]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a4a      	ldr	r2, [pc, #296]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b48      	ldr	r3, [pc, #288]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a47      	ldr	r2, [pc, #284]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 800228c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b45      	ldr	r3, [pc, #276]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a44      	ldr	r2, [pc, #272]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002298:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e041      	b.n	8002324 <HAL_RCC_OscConfig+0x1e4>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022a8:	d112      	bne.n	80022d0 <HAL_RCC_OscConfig+0x190>
 80022aa:	4b3f      	ldr	r3, [pc, #252]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a3e      	ldr	r2, [pc, #248]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80022b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b3c      	ldr	r3, [pc, #240]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a3b      	ldr	r2, [pc, #236]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80022bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b39      	ldr	r3, [pc, #228]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a38      	ldr	r2, [pc, #224]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e029      	b.n	8002324 <HAL_RCC_OscConfig+0x1e4>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80022d8:	d112      	bne.n	8002300 <HAL_RCC_OscConfig+0x1c0>
 80022da:	4b33      	ldr	r3, [pc, #204]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a32      	ldr	r2, [pc, #200]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80022e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b30      	ldr	r3, [pc, #192]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a2f      	ldr	r2, [pc, #188]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80022ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b2d      	ldr	r3, [pc, #180]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a2c      	ldr	r2, [pc, #176]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e011      	b.n	8002324 <HAL_RCC_OscConfig+0x1e4>
 8002300:	4b29      	ldr	r3, [pc, #164]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a28      	ldr	r2, [pc, #160]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b26      	ldr	r3, [pc, #152]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a25      	ldr	r2, [pc, #148]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b23      	ldr	r3, [pc, #140]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a22      	ldr	r2, [pc, #136]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 800231e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d013      	beq.n	8002354 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7ff faea 	bl	8001904 <HAL_GetTick>
 8002330:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002334:	f7ff fae6 	bl	8001904 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	@ 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e32e      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002346:	4b18      	ldr	r3, [pc, #96]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x1f4>
 8002352:	e012      	b.n	800237a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7ff fad6 	bl	8001904 <HAL_GetTick>
 8002358:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800235c:	f7ff fad2 	bl	8001904 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	@ 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e31a      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <HAL_RCC_OscConfig+0x268>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 809a 	beq.w	80024bc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x25a>
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	2b18      	cmp	r3, #24
 8002392:	d149      	bne.n	8002428 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d146      	bne.n	8002428 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d104      	bne.n	80023ac <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e2fe      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
 80023a6:	bf00      	nop
 80023a8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d11c      	bne.n	80023ec <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80023b2:	4b9a      	ldr	r3, [pc, #616]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0218 	and.w	r2, r3, #24
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d014      	beq.n	80023ec <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80023c2:	4b96      	ldr	r3, [pc, #600]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 0218 	bic.w	r2, r3, #24
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	4993      	ldr	r1, [pc, #588]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80023d4:	f000 fdd0 	bl	8002f78 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023d8:	4b91      	ldr	r3, [pc, #580]	@ (8002620 <HAL_RCC_OscConfig+0x4e0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fe65 	bl	80010ac <HAL_InitTick>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e2db      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7ff fa8a 	bl	8001904 <HAL_GetTick>
 80023f0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80023f4:	f7ff fa86 	bl	8001904 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e2ce      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002406:	4b85      	ldr	r3, [pc, #532]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002412:	4b82      	ldr	r3, [pc, #520]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	041b      	lsls	r3, r3, #16
 8002420:	497e      	ldr	r1, [pc, #504]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002422:	4313      	orrs	r3, r2
 8002424:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002426:	e049      	b.n	80024bc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d02c      	beq.n	800248a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002430:	4b7a      	ldr	r3, [pc, #488]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 0218 	bic.w	r2, r3, #24
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	4977      	ldr	r1, [pc, #476]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002442:	4b76      	ldr	r3, [pc, #472]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a75      	ldr	r2, [pc, #468]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7ff fa59 	bl	8001904 <HAL_GetTick>
 8002452:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002456:	f7ff fa55 	bl	8001904 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e29d      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002468:	4b6c      	ldr	r3, [pc, #432]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002474:	4b69      	ldr	r3, [pc, #420]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	041b      	lsls	r3, r3, #16
 8002482:	4966      	ldr	r1, [pc, #408]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002484:	4313      	orrs	r3, r2
 8002486:	610b      	str	r3, [r1, #16]
 8002488:	e018      	b.n	80024bc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248a:	4b64      	ldr	r3, [pc, #400]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a63      	ldr	r2, [pc, #396]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7ff fa35 	bl	8001904 <HAL_GetTick>
 800249a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800249e:	f7ff fa31 	bl	8001904 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e279      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b0:	4b5a      	ldr	r3, [pc, #360]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f0      	bne.n	800249e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d03c      	beq.n	8002542 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01c      	beq.n	800250a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d0:	4b52      	ldr	r3, [pc, #328]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80024d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024d6:	4a51      	ldr	r2, [pc, #324]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80024d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7ff fa10 	bl	8001904 <HAL_GetTick>
 80024e4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80024e8:	f7ff fa0c 	bl	8001904 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e254      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80024fa:	4b48      	ldr	r3, [pc, #288]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80024fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002500:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0ef      	beq.n	80024e8 <HAL_RCC_OscConfig+0x3a8>
 8002508:	e01b      	b.n	8002542 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250a:	4b44      	ldr	r3, [pc, #272]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 800250c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002510:	4a42      	ldr	r2, [pc, #264]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002512:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002516:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7ff f9f3 	bl	8001904 <HAL_GetTick>
 800251e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002522:	f7ff f9ef 	bl	8001904 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e237      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002534:	4b39      	ldr	r3, [pc, #228]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800253a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1ef      	bne.n	8002522 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 80d2 	beq.w	80026f4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002550:	4b34      	ldr	r3, [pc, #208]	@ (8002624 <HAL_RCC_OscConfig+0x4e4>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d118      	bne.n	800258e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800255c:	4b31      	ldr	r3, [pc, #196]	@ (8002624 <HAL_RCC_OscConfig+0x4e4>)
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	4a30      	ldr	r2, [pc, #192]	@ (8002624 <HAL_RCC_OscConfig+0x4e4>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002568:	f7ff f9cc 	bl	8001904 <HAL_GetTick>
 800256c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002570:	f7ff f9c8 	bl	8001904 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e210      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002582:	4b28      	ldr	r3, [pc, #160]	@ (8002624 <HAL_RCC_OscConfig+0x4e4>)
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d108      	bne.n	80025a8 <HAL_RCC_OscConfig+0x468>
 8002596:	4b21      	ldr	r3, [pc, #132]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800259c:	4a1f      	ldr	r2, [pc, #124]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025a6:	e074      	b.n	8002692 <HAL_RCC_OscConfig+0x552>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d118      	bne.n	80025e2 <HAL_RCC_OscConfig+0x4a2>
 80025b0:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025b6:	4a19      	ldr	r2, [pc, #100]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025c0:	4b16      	ldr	r3, [pc, #88]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025c6:	4a15      	ldr	r2, [pc, #84]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025d0:	4b12      	ldr	r3, [pc, #72]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025d6:	4a11      	ldr	r2, [pc, #68]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025d8:	f023 0304 	bic.w	r3, r3, #4
 80025dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025e0:	e057      	b.n	8002692 <HAL_RCC_OscConfig+0x552>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d11e      	bne.n	8002628 <HAL_RCC_OscConfig+0x4e8>
 80025ea:	4b0c      	ldr	r3, [pc, #48]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025f0:	4a0a      	ldr	r2, [pc, #40]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025fa:	4b08      	ldr	r3, [pc, #32]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002600:	4a06      	ldr	r2, [pc, #24]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002606:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800260a:	4b04      	ldr	r3, [pc, #16]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 800260c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002610:	4a02      	ldr	r2, [pc, #8]	@ (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800261a:	e03a      	b.n	8002692 <HAL_RCC_OscConfig+0x552>
 800261c:	44020c00 	.word	0x44020c00
 8002620:	20000018 	.word	0x20000018
 8002624:	44020800 	.word	0x44020800
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b85      	cmp	r3, #133	@ 0x85
 800262e:	d118      	bne.n	8002662 <HAL_RCC_OscConfig+0x522>
 8002630:	4ba2      	ldr	r3, [pc, #648]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002636:	4aa1      	ldr	r2, [pc, #644]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002640:	4b9e      	ldr	r3, [pc, #632]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002642:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002646:	4a9d      	ldr	r2, [pc, #628]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800264c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002650:	4b9a      	ldr	r3, [pc, #616]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002656:	4a99      	ldr	r2, [pc, #612]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002660:	e017      	b.n	8002692 <HAL_RCC_OscConfig+0x552>
 8002662:	4b96      	ldr	r3, [pc, #600]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002668:	4a94      	ldr	r2, [pc, #592]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 800266a:	f023 0301 	bic.w	r3, r3, #1
 800266e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002672:	4b92      	ldr	r3, [pc, #584]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002678:	4a90      	ldr	r2, [pc, #576]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 800267a:	f023 0304 	bic.w	r3, r3, #4
 800267e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002682:	4b8e      	ldr	r3, [pc, #568]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002688:	4a8c      	ldr	r2, [pc, #560]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 800268a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800268e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269a:	f7ff f933 	bl	8001904 <HAL_GetTick>
 800269e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7ff f92f 	bl	8001904 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e175      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b8:	4b80      	ldr	r3, [pc, #512]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 80026ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0ed      	beq.n	80026a2 <HAL_RCC_OscConfig+0x562>
 80026c6:	e015      	b.n	80026f4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7ff f91c 	bl	8001904 <HAL_GetTick>
 80026cc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7ff f918 	bl	8001904 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e15e      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026e6:	4b75      	ldr	r3, [pc, #468]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 80026e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ed      	bne.n	80026d0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d036      	beq.n	800276e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	2b00      	cmp	r3, #0
 8002706:	d019      	beq.n	800273c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002708:	4b6c      	ldr	r3, [pc, #432]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a6b      	ldr	r2, [pc, #428]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 800270e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002712:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7ff f8f6 	bl	8001904 <HAL_GetTick>
 8002718:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800271c:	f7ff f8f2 	bl	8001904 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e13a      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800272e:	4b63      	ldr	r3, [pc, #396]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x5dc>
 800273a:	e018      	b.n	800276e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800273c:	4b5f      	ldr	r3, [pc, #380]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a5e      	ldr	r2, [pc, #376]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002742:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7ff f8dc 	bl	8001904 <HAL_GetTick>
 800274c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002750:	f7ff f8d8 	bl	8001904 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e120      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002762:	4b56      	ldr	r3, [pc, #344]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 8115 	beq.w	80029a2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2b18      	cmp	r3, #24
 800277c:	f000 80af 	beq.w	80028de <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002784:	2b02      	cmp	r3, #2
 8002786:	f040 8086 	bne.w	8002896 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800278a:	4b4c      	ldr	r3, [pc, #304]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a4b      	ldr	r2, [pc, #300]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002790:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7ff f8b5 	bl	8001904 <HAL_GetTick>
 800279a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800279e:	f7ff f8b1 	bl	8001904 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0f9      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80027b0:	4b42      	ldr	r3, [pc, #264]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f0      	bne.n	800279e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80027bc:	4b3f      	ldr	r3, [pc, #252]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 80027be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80027c4:	f023 0303 	bic.w	r3, r3, #3
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80027d0:	0212      	lsls	r2, r2, #8
 80027d2:	430a      	orrs	r2, r1
 80027d4:	4939      	ldr	r1, [pc, #228]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	628b      	str	r3, [r1, #40]	@ 0x28
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027de:	3b01      	subs	r3, #1
 80027e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e8:	3b01      	subs	r3, #1
 80027ea:	025b      	lsls	r3, r3, #9
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f4:	3b01      	subs	r3, #1
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	3b01      	subs	r3, #1
 8002804:	061b      	lsls	r3, r3, #24
 8002806:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800280a:	492c      	ldr	r1, [pc, #176]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 800280c:	4313      	orrs	r3, r2
 800280e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002810:	4b2a      	ldr	r3, [pc, #168]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	4a29      	ldr	r2, [pc, #164]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002816:	f023 0310 	bic.w	r3, r3, #16
 800281a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002820:	4a26      	ldr	r2, [pc, #152]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002826:	4b25      	ldr	r3, [pc, #148]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282a:	4a24      	ldr	r2, [pc, #144]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 800282c:	f043 0310 	orr.w	r3, r3, #16
 8002830:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002832:	4b22      	ldr	r3, [pc, #136]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002836:	f023 020c 	bic.w	r2, r3, #12
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	491f      	ldr	r1, [pc, #124]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002840:	4313      	orrs	r3, r2
 8002842:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002844:	4b1d      	ldr	r3, [pc, #116]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002848:	f023 0220 	bic.w	r2, r3, #32
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002850:	491a      	ldr	r1, [pc, #104]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002852:	4313      	orrs	r3, r2
 8002854:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002856:	4b19      	ldr	r3, [pc, #100]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285a:	4a18      	ldr	r2, [pc, #96]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002860:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002862:	4b16      	ldr	r3, [pc, #88]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a15      	ldr	r2, [pc, #84]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002868:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800286c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7ff f849 	bl	8001904 <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002876:	f7ff f845 	bl	8001904 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e08d      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x736>
 8002894:	e085      	b.n	80029a2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002896:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a08      	ldr	r2, [pc, #32]	@ (80028bc <HAL_RCC_OscConfig+0x77c>)
 800289c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7ff f82f 	bl	8001904 <HAL_GetTick>
 80028a6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80028aa:	f7ff f82b 	bl	8001904 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d903      	bls.n	80028c0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e073      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
 80028bc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028c0:	4b3a      	ldr	r3, [pc, #232]	@ (80029ac <HAL_RCC_OscConfig+0x86c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ee      	bne.n	80028aa <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80028cc:	4b37      	ldr	r3, [pc, #220]	@ (80029ac <HAL_RCC_OscConfig+0x86c>)
 80028ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d0:	4a36      	ldr	r2, [pc, #216]	@ (80029ac <HAL_RCC_OscConfig+0x86c>)
 80028d2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80028d6:	f023 0303 	bic.w	r3, r3, #3
 80028da:	6293      	str	r3, [r2, #40]	@ 0x28
 80028dc:	e061      	b.n	80029a2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80028de:	4b33      	ldr	r3, [pc, #204]	@ (80029ac <HAL_RCC_OscConfig+0x86c>)
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028e4:	4b31      	ldr	r3, [pc, #196]	@ (80029ac <HAL_RCC_OscConfig+0x86c>)
 80028e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d031      	beq.n	8002956 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0203 	and.w	r2, r3, #3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d12a      	bne.n	8002956 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d122      	bne.n	8002956 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800291a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d11a      	bne.n	8002956 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	0a5b      	lsrs	r3, r3, #9
 8002924:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d111      	bne.n	8002956 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	0c1b      	lsrs	r3, r3, #16
 8002936:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d108      	bne.n	8002956 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	0e1b      	lsrs	r3, r3, #24
 8002948:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e024      	b.n	80029a4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800295a:	4b14      	ldr	r3, [pc, #80]	@ (80029ac <HAL_RCC_OscConfig+0x86c>)
 800295c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295e:	08db      	lsrs	r3, r3, #3
 8002960:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002968:	429a      	cmp	r2, r3
 800296a:	d01a      	beq.n	80029a2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800296c:	4b0f      	ldr	r3, [pc, #60]	@ (80029ac <HAL_RCC_OscConfig+0x86c>)
 800296e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002970:	4a0e      	ldr	r2, [pc, #56]	@ (80029ac <HAL_RCC_OscConfig+0x86c>)
 8002972:	f023 0310 	bic.w	r3, r3, #16
 8002976:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe ffc4 	bl	8001904 <HAL_GetTick>
 800297c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800297e:	bf00      	nop
 8002980:	f7fe ffc0 	bl	8001904 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	4293      	cmp	r3, r2
 800298a:	d0f9      	beq.n	8002980 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002990:	4a06      	ldr	r2, [pc, #24]	@ (80029ac <HAL_RCC_OscConfig+0x86c>)
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002996:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <HAL_RCC_OscConfig+0x86c>)
 8002998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299a:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <HAL_RCC_OscConfig+0x86c>)
 800299c:	f043 0310 	orr.w	r3, r3, #16
 80029a0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	44020c00 	.word	0x44020c00

080029b0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e19e      	b.n	8002d02 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029c4:	4b83      	ldr	r3, [pc, #524]	@ (8002bd4 <HAL_RCC_ClockConfig+0x224>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d910      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b80      	ldr	r3, [pc, #512]	@ (8002bd4 <HAL_RCC_ClockConfig+0x224>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 020f 	bic.w	r2, r3, #15
 80029da:	497e      	ldr	r1, [pc, #504]	@ (8002bd4 <HAL_RCC_ClockConfig+0x224>)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b7c      	ldr	r3, [pc, #496]	@ (8002bd4 <HAL_RCC_ClockConfig+0x224>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e186      	b.n	8002d02 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d012      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	4b74      	ldr	r3, [pc, #464]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d909      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002a12:	4b71      	ldr	r3, [pc, #452]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	496d      	ldr	r1, [pc, #436]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d012      	beq.n	8002a58 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	4b68      	ldr	r3, [pc, #416]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d909      	bls.n	8002a58 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002a44:	4b64      	ldr	r3, [pc, #400]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	4961      	ldr	r1, [pc, #388]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d010      	beq.n	8002a86 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d908      	bls.n	8002a86 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002a74:	4b58      	ldr	r3, [pc, #352]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4955      	ldr	r1, [pc, #340]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d010      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	4b50      	ldr	r3, [pc, #320]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d908      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002aa2:	4b4d      	ldr	r3, [pc, #308]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	f023 020f 	bic.w	r2, r3, #15
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	494a      	ldr	r1, [pc, #296]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8093 	beq.w	8002be8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002aca:	4b43      	ldr	r3, [pc, #268]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d121      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e113      	b.n	8002d02 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d115      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e107      	b.n	8002d02 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002afa:	4b37      	ldr	r3, [pc, #220]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0fb      	b.n	8002d02 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b0a:	4b33      	ldr	r3, [pc, #204]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0f3      	b.n	8002d02 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	492c      	ldr	r1, [pc, #176]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b2c:	f7fe feea 	bl	8001904 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d112      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3c:	f7fe fee2 	bl	8001904 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0d7      	b.n	8002d02 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b52:	4b21      	ldr	r3, [pc, #132]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f003 0318 	and.w	r3, r3, #24
 8002b5a:	2b18      	cmp	r3, #24
 8002b5c:	d1ee      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x18c>
 8002b5e:	e043      	b.n	8002be8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d112      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6a:	f7fe fecb 	bl	8001904 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e0c0      	b.n	8002d02 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b80:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f003 0318 	and.w	r3, r3, #24
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d1ee      	bne.n	8002b6a <HAL_RCC_ClockConfig+0x1ba>
 8002b8c:	e02c      	b.n	8002be8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d122      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b98:	f7fe feb4 	bl	8001904 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e0a9      	b.n	8002d02 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002bae:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <HAL_RCC_ClockConfig+0x228>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 0318 	and.w	r3, r3, #24
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d1ee      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x1e8>
 8002bba:	e015      	b.n	8002be8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbc:	f7fe fea2 	bl	8001904 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d906      	bls.n	8002bdc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e097      	b.n	8002d02 <HAL_RCC_ClockConfig+0x352>
 8002bd2:	bf00      	nop
 8002bd4:	40022000 	.word	0x40022000
 8002bd8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bdc:	4b4b      	ldr	r3, [pc, #300]	@ (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f003 0318 	and.w	r3, r3, #24
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e9      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	4b44      	ldr	r3, [pc, #272]	@ (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d208      	bcs.n	8002c16 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002c04:	4b41      	ldr	r3, [pc, #260]	@ (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f023 020f 	bic.w	r2, r3, #15
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	493e      	ldr	r1, [pc, #248]	@ (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c16:	4b3e      	ldr	r3, [pc, #248]	@ (8002d10 <HAL_RCC_ClockConfig+0x360>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d210      	bcs.n	8002c46 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c24:	4b3a      	ldr	r3, [pc, #232]	@ (8002d10 <HAL_RCC_ClockConfig+0x360>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f023 020f 	bic.w	r2, r3, #15
 8002c2c:	4938      	ldr	r1, [pc, #224]	@ (8002d10 <HAL_RCC_ClockConfig+0x360>)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c34:	4b36      	ldr	r3, [pc, #216]	@ (8002d10 <HAL_RCC_ClockConfig+0x360>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d001      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e05d      	b.n	8002d02 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d010      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	4b2d      	ldr	r3, [pc, #180]	@ (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d208      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002c62:	4b2a      	ldr	r3, [pc, #168]	@ (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	4927      	ldr	r1, [pc, #156]	@ (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d012      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	4b21      	ldr	r3, [pc, #132]	@ (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d209      	bcs.n	8002ca6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002c92:	4b1e      	ldr	r3, [pc, #120]	@ (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	491a      	ldr	r1, [pc, #104]	@ (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d012      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d209      	bcs.n	8002cd8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002cc4:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	490e      	ldr	r1, [pc, #56]	@ (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002cd8:	f000 f822 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	490b      	ldr	r1, [pc, #44]	@ (8002d14 <HAL_RCC_ClockConfig+0x364>)
 8002ce8:	5ccb      	ldrb	r3, [r1, r3]
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a0a      	ldr	r2, [pc, #40]	@ (8002d18 <HAL_RCC_ClockConfig+0x368>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <HAL_RCC_ClockConfig+0x36c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe f9d8 	bl	80010ac <HAL_InitTick>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002d00:	7afb      	ldrb	r3, [r7, #11]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	44020c00 	.word	0x44020c00
 8002d10:	40022000 	.word	0x40022000
 8002d14:	0800d29c 	.word	0x0800d29c
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000018 	.word	0x20000018

08002d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	@ 0x24
 8002d24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002d26:	4b8c      	ldr	r3, [pc, #560]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f003 0318 	and.w	r3, r3, #24
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d102      	bne.n	8002d38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002d32:	4b8a      	ldr	r3, [pc, #552]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x23c>)
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	e107      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d38:	4b87      	ldr	r3, [pc, #540]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	f003 0318 	and.w	r3, r3, #24
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d112      	bne.n	8002d6a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002d44:	4b84      	ldr	r3, [pc, #528]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d009      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d50:	4b81      	ldr	r3, [pc, #516]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	4a81      	ldr	r2, [pc, #516]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e0f1      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002d64:	4b7e      	ldr	r3, [pc, #504]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	e0ee      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 0318 	and.w	r3, r3, #24
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d102      	bne.n	8002d7c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d76:	4b7b      	ldr	r3, [pc, #492]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x244>)
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	e0e5      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d7c:	4b76      	ldr	r3, [pc, #472]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	f003 0318 	and.w	r3, r3, #24
 8002d84:	2b18      	cmp	r3, #24
 8002d86:	f040 80dd 	bne.w	8002f44 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002d8a:	4b73      	ldr	r3, [pc, #460]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002d94:	4b70      	ldr	r3, [pc, #448]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d9e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002da0:	4b6d      	ldr	r3, [pc, #436]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002dac:	4b6a      	ldr	r3, [pc, #424]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002db0:	08db      	lsrs	r3, r3, #3
 8002db2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	fb02 f303 	mul.w	r3, r2, r3
 8002dbc:	ee07 3a90 	vmov	s15, r3
 8002dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80b7 	beq.w	8002f3e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0xbe>
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d056      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x16a>
 8002ddc:	e077      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002dde:	4b5e      	ldr	r3, [pc, #376]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d02d      	beq.n	8002e46 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002dea:	4b5b      	ldr	r3, [pc, #364]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	08db      	lsrs	r3, r3, #3
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	4a5a      	ldr	r2, [pc, #360]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x240>)
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	ee07 3a90 	vmov	s15, r3
 8002e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e14:	4b50      	ldr	r3, [pc, #320]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e24:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e28:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002f68 <HAL_RCC_GetSysClockFreq+0x248>
 8002e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e40:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002e44:	e065      	b.n	8002f12 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	ee07 3a90 	vmov	s15, r3
 8002e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e50:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002f6c <HAL_RCC_GetSysClockFreq+0x24c>
 8002e54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e58:	4b3f      	ldr	r3, [pc, #252]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e60:	ee07 3a90 	vmov	s15, r3
 8002e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e68:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e6c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002f68 <HAL_RCC_GetSysClockFreq+0x248>
 8002e70:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e84:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002e88:	e043      	b.n	8002f12 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	ee07 3a90 	vmov	s15, r3
 8002e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e94:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002f70 <HAL_RCC_GetSysClockFreq+0x250>
 8002e98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea4:	ee07 3a90 	vmov	s15, r3
 8002ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eac:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eb0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002f68 <HAL_RCC_GetSysClockFreq+0x248>
 8002eb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002eb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ebc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002ecc:	e021      	b.n	8002f12 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	ee07 3a90 	vmov	s15, r3
 8002ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002f74 <HAL_RCC_GetSysClockFreq+0x254>
 8002edc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee8:	ee07 3a90 	vmov	s15, r3
 8002eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ef0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ef4:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002f68 <HAL_RCC_GetSysClockFreq+0x248>
 8002ef8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002efc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f04:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002f10:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002f12:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f16:	0a5b      	lsrs	r3, r3, #9
 8002f18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f2a:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f36:	ee17 3a90 	vmov	r3, s15
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	e004      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	e001      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002f44:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x240>)
 8002f46:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002f48:	69fb      	ldr	r3, [r7, #28]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3724      	adds	r7, #36	@ 0x24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	44020c00 	.word	0x44020c00
 8002f5c:	003d0900 	.word	0x003d0900
 8002f60:	03d09000 	.word	0x03d09000
 8002f64:	016e3600 	.word	0x016e3600
 8002f68:	46000000 	.word	0x46000000
 8002f6c:	4c742400 	.word	0x4c742400
 8002f70:	4bb71b00 	.word	0x4bb71b00
 8002f74:	4a742400 	.word	0x4a742400

08002f78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002f7c:	f7ff fed0 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b08      	ldr	r3, [pc, #32]	@ (8002fa4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002f86:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002f8a:	4907      	ldr	r1, [pc, #28]	@ (8002fa8 <HAL_RCC_GetHCLKFreq+0x30>)
 8002f8c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002f8e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	4a05      	ldr	r2, [pc, #20]	@ (8002fac <HAL_RCC_GetHCLKFreq+0x34>)
 8002f98:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002f9a:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <HAL_RCC_GetHCLKFreq+0x34>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	44020c00 	.word	0x44020c00
 8002fa8:	0800d29c 	.word	0x0800d29c
 8002fac:	20000000 	.word	0x20000000

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002fb4:	f7ff ffe0 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4904      	ldr	r1, [pc, #16]	@ (8002fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	44020c00 	.word	0x44020c00
 8002fd8:	0800d2ac 	.word	0x0800d2ac

08002fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002fe0:	f7ff ffca 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4904      	ldr	r1, [pc, #16]	@ (8003004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	44020c00 	.word	0x44020c00
 8003004:	0800d2ac 	.word	0x0800d2ac

08003008 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800300c:	f7ff ffb4 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b06      	ldr	r3, [pc, #24]	@ (800302c <HAL_RCC_GetPCLK3Freq+0x24>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	0b1b      	lsrs	r3, r3, #12
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4904      	ldr	r1, [pc, #16]	@ (8003030 <HAL_RCC_GetPCLK3Freq+0x28>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	44020c00 	.word	0x44020c00
 8003030:	0800d2ac 	.word	0x0800d2ac

08003034 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	221f      	movs	r2, #31
 8003042:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8003044:	4b15      	ldr	r3, [pc, #84]	@ (800309c <HAL_RCC_GetClockConfig+0x68>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8003050:	4b12      	ldr	r3, [pc, #72]	@ (800309c <HAL_RCC_GetClockConfig+0x68>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	0a1b      	lsrs	r3, r3, #8
 800307a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003082:	4b07      	ldr	r3, [pc, #28]	@ (80030a0 <HAL_RCC_GetClockConfig+0x6c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 020f 	and.w	r2, r3, #15
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	601a      	str	r2, [r3, #0]
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	44020c00 	.word	0x44020c00
 80030a0:	40022000 	.word	0x40022000

080030a4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80030a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a8:	b0aa      	sub	sp, #168	@ 0xa8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030b6:	2300      	movs	r3, #0
 80030b8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80030bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80030c8:	2500      	movs	r5, #0
 80030ca:	ea54 0305 	orrs.w	r3, r4, r5
 80030ce:	d00b      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80030d0:	4bb8      	ldr	r3, [pc, #736]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030d6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80030da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e0:	4ab4      	ldr	r2, [pc, #720]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030e2:	430b      	orrs	r3, r1
 80030e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f002 0801 	and.w	r8, r2, #1
 80030f4:	f04f 0900 	mov.w	r9, #0
 80030f8:	ea58 0309 	orrs.w	r3, r8, r9
 80030fc:	d038      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80030fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003104:	2b05      	cmp	r3, #5
 8003106:	d819      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003108:	a201      	add	r2, pc, #4	@ (adr r2, 8003110 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800310a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310e:	bf00      	nop
 8003110:	08003145 	.word	0x08003145
 8003114:	08003129 	.word	0x08003129
 8003118:	0800313d 	.word	0x0800313d
 800311c:	08003145 	.word	0x08003145
 8003120:	08003145 	.word	0x08003145
 8003124:	08003145 	.word	0x08003145
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003128:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800312c:	3308      	adds	r3, #8
 800312e:	4618      	mov	r0, r3
 8003130:	f001 fff2 	bl	8005118 <RCCEx_PLL2_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 800313a:	e004      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003142:	e000      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8003144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003146:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10c      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800314e:	4b99      	ldr	r3, [pc, #612]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003154:	f023 0107 	bic.w	r1, r3, #7
 8003158:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800315c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315e:	4a95      	ldr	r2, [pc, #596]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003160:	430b      	orrs	r3, r1
 8003162:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003166:	e003      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003168:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800316c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003170:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	f002 0a02 	and.w	sl, r2, #2
 800317c:	f04f 0b00 	mov.w	fp, #0
 8003180:	ea5a 030b 	orrs.w	r3, sl, fp
 8003184:	d03c      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003186:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800318a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318c:	2b28      	cmp	r3, #40	@ 0x28
 800318e:	d01b      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003190:	2b28      	cmp	r3, #40	@ 0x28
 8003192:	d815      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003194:	2b20      	cmp	r3, #32
 8003196:	d019      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003198:	2b20      	cmp	r3, #32
 800319a:	d811      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800319c:	2b18      	cmp	r3, #24
 800319e:	d017      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80031a0:	2b18      	cmp	r3, #24
 80031a2:	d80d      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d109      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031b0:	3308      	adds	r3, #8
 80031b2:	4618      	mov	r0, r3
 80031b4:	f001 ffb0 	bl	8005118 <RCCEx_PLL2_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80031be:	e00a      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80031c6:	e006      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80031c8:	bf00      	nop
 80031ca:	e004      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80031cc:	bf00      	nop
 80031ce:	e002      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80031d0:	bf00      	nop
 80031d2:	e000      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80031d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80031de:	4b75      	ldr	r3, [pc, #468]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80031e4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80031e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ee:	4a71      	ldr	r2, [pc, #452]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031f0:	430b      	orrs	r3, r1
 80031f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80031f6:	e003      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031fc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003200:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	f002 0304 	and.w	r3, r2, #4
 800320c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003210:	2300      	movs	r3, #0
 8003212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003216:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800321a:	460b      	mov	r3, r1
 800321c:	4313      	orrs	r3, r2
 800321e:	d040      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003220:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003226:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800322a:	d01e      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800322c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003230:	d817      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003236:	d01a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800323c:	d811      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800323e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003240:	d017      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003242:	2bc0      	cmp	r3, #192	@ 0xc0
 8003244:	d80d      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d015      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800324a:	2b40      	cmp	r3, #64	@ 0x40
 800324c:	d109      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800324e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003252:	3308      	adds	r3, #8
 8003254:	4618      	mov	r0, r3
 8003256:	f001 ff5f 	bl	8005118 <RCCEx_PLL2_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003260:	e00a      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003268:	e006      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800326a:	bf00      	nop
 800326c:	e004      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800326e:	bf00      	nop
 8003270:	e002      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003272:	bf00      	nop
 8003274:	e000      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003278:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10c      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003280:	4b4c      	ldr	r3, [pc, #304]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003282:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003286:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800328a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800328e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003290:	4a48      	ldr	r2, [pc, #288]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003292:	430b      	orrs	r3, r1
 8003294:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003298:	e003      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800329e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80032ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032b2:	2300      	movs	r3, #0
 80032b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032b8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80032bc:	460b      	mov	r3, r1
 80032be:	4313      	orrs	r3, r2
 80032c0:	d043      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80032c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80032cc:	d021      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80032ce:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80032d2:	d81a      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x266>
 80032d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032d8:	d01d      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80032da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032de:	d814      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x266>
 80032e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032e4:	d019      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80032e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032ea:	d80e      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x266>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d016      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80032f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032f4:	d109      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032fa:	3308      	adds	r3, #8
 80032fc:	4618      	mov	r0, r3
 80032fe:	f001 ff0b 	bl	8005118 <RCCEx_PLL2_Config>
 8003302:	4603      	mov	r3, r0
 8003304:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003308:	e00a      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003310:	e006      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003312:	bf00      	nop
 8003314:	e004      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003316:	bf00      	nop
 8003318:	e002      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800331a:	bf00      	nop
 800331c:	e000      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800331e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003320:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10c      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003328:	4b22      	ldr	r3, [pc, #136]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800332a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800332e:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003332:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	4a1e      	ldr	r2, [pc, #120]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800333a:	430b      	orrs	r3, r1
 800333c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003340:	e003      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003342:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003346:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800334a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003356:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003358:	2300      	movs	r3, #0
 800335a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800335c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003360:	460b      	mov	r3, r1
 8003362:	4313      	orrs	r3, r2
 8003364:	d03e      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003366:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800336a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003370:	d01b      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003372:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003376:	d814      	bhi.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003378:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800337c:	d017      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800337e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003382:	d80e      	bhi.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d017      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800338c:	d109      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800338e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003392:	3308      	adds	r3, #8
 8003394:	4618      	mov	r0, r3
 8003396:	f001 febf 	bl	8005118 <RCCEx_PLL2_Config>
 800339a:	4603      	mov	r3, r0
 800339c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80033a0:	e00b      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80033a8:	e007      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80033aa:	bf00      	nop
 80033ac:	e005      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80033ae:	bf00      	nop
 80033b0:	e003      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x316>
 80033b2:	bf00      	nop
 80033b4:	44020c00 	.word	0x44020c00
        break;
 80033b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ba:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10c      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80033c2:	4ba5      	ldr	r3, [pc, #660]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80033c8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80033cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d2:	4aa1      	ldr	r2, [pc, #644]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033d4:	430b      	orrs	r3, r1
 80033d6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80033da:	e003      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033dc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033e0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80033f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80033f2:	2300      	movs	r3, #0
 80033f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80033f6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80033fa:	460b      	mov	r3, r1
 80033fc:	4313      	orrs	r3, r2
 80033fe:	d03b      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003400:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003406:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800340a:	d01b      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800340c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003410:	d814      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003412:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003416:	d017      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003418:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800341c:	d80e      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x398>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d014      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003422:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003426:	d109      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003428:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800342c:	3308      	adds	r3, #8
 800342e:	4618      	mov	r0, r3
 8003430:	f001 fe72 	bl	8005118 <RCCEx_PLL2_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800343a:	e008      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003442:	e004      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003444:	bf00      	nop
 8003446:	e002      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003448:	bf00      	nop
 800344a:	e000      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800344c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800344e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10c      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003456:	4b80      	ldr	r3, [pc, #512]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003458:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800345c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003460:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003466:	4a7c      	ldr	r2, [pc, #496]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003468:	430b      	orrs	r3, r1
 800346a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800346e:	e003      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003470:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003474:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003478:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003484:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003486:	2300      	movs	r3, #0
 8003488:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800348a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800348e:	460b      	mov	r3, r1
 8003490:	4313      	orrs	r3, r2
 8003492:	d033      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003494:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800349e:	d015      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80034a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034a4:	d80e      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d012      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80034aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034ae:	d109      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034b4:	3308      	adds	r3, #8
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 fe2e 	bl	8005118 <RCCEx_PLL2_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80034c2:	e006      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80034ca:	e002      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80034cc:	bf00      	nop
 80034ce:	e000      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80034d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80034da:	4b5f      	ldr	r3, [pc, #380]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034e0:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80034e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034ec:	430b      	orrs	r3, r1
 80034ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80034f2:	e003      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034f8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80034fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	2100      	movs	r1, #0
 8003506:	6639      	str	r1, [r7, #96]	@ 0x60
 8003508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800350c:	667b      	str	r3, [r7, #100]	@ 0x64
 800350e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003512:	460b      	mov	r3, r1
 8003514:	4313      	orrs	r3, r2
 8003516:	d033      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003518:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800351c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003522:	d015      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003528:	d80e      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d012      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800352e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003532:	d109      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003534:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003538:	3308      	adds	r3, #8
 800353a:	4618      	mov	r0, r3
 800353c:	f001 fdec 	bl	8005118 <RCCEx_PLL2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003546:	e006      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800354e:	e002      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003550:	bf00      	nop
 8003552:	e000      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003554:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003556:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800355e:	4b3e      	ldr	r3, [pc, #248]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003560:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003564:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003568:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800356c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800356e:	4a3a      	ldr	r2, [pc, #232]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003570:	430b      	orrs	r3, r1
 8003572:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003576:	e003      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003578:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800357c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003580:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	2100      	movs	r1, #0
 800358a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800358c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003590:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003592:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003596:	460b      	mov	r3, r1
 8003598:	4313      	orrs	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800359c:	4b2e      	ldr	r3, [pc, #184]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80035a6:	61d3      	str	r3, [r2, #28]
 80035a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035aa:	69d9      	ldr	r1, [r3, #28]
 80035ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035b4:	4a28      	ldr	r2, [pc, #160]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035b6:	430b      	orrs	r3, r1
 80035b8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80035c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80035c8:	2300      	movs	r3, #0
 80035ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80035cc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80035d0:	460b      	mov	r3, r1
 80035d2:	4313      	orrs	r3, r2
 80035d4:	d046      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80035d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035dc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80035e0:	d021      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80035e2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80035e6:	d81a      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80035e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ec:	d01d      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x586>
 80035ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f2:	d814      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80035f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035f8:	d019      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80035fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035fe:	d80e      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d016      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8003604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003608:	d109      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800360a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800360e:	3308      	adds	r3, #8
 8003610:	4618      	mov	r0, r3
 8003612:	f001 fd81 	bl	8005118 <RCCEx_PLL2_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800361c:	e00a      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003624:	e006      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003626:	bf00      	nop
 8003628:	e004      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800362a:	bf00      	nop
 800362c:	e002      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800362e:	bf00      	nop
 8003630:	e000      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003634:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10f      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800363c:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800363e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003642:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003646:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800364a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364c:	4a02      	ldr	r2, [pc, #8]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800364e:	430b      	orrs	r3, r1
 8003650:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003654:	e006      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003656:	bf00      	nop
 8003658:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003660:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003664:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003670:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003672:	2300      	movs	r3, #0
 8003674:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003676:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800367a:	460b      	mov	r3, r1
 800367c:	4313      	orrs	r3, r2
 800367e:	d043      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003680:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003686:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800368a:	d021      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 800368c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003690:	d81a      	bhi.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003692:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003696:	d01d      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003698:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800369c:	d814      	bhi.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800369e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036a2:	d019      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80036a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036a8:	d80e      	bhi.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d016      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x638>
 80036ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b2:	d109      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036b8:	3308      	adds	r3, #8
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 fd2c 	bl	8005118 <RCCEx_PLL2_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80036c6:	e00a      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80036ce:	e006      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80036d0:	bf00      	nop
 80036d2:	e004      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80036d4:	bf00      	nop
 80036d6:	e002      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80036dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036de:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10c      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80036e6:	4bb6      	ldr	r3, [pc, #728]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80036ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f6:	4ab2      	ldr	r2, [pc, #712]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036f8:	430b      	orrs	r3, r1
 80036fa:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80036fe:	e003      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003700:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003704:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003708:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003714:	643b      	str	r3, [r7, #64]	@ 0x40
 8003716:	2300      	movs	r3, #0
 8003718:	647b      	str	r3, [r7, #68]	@ 0x44
 800371a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800371e:	460b      	mov	r3, r1
 8003720:	4313      	orrs	r3, r2
 8003722:	d030      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003724:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003728:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800372a:	2b05      	cmp	r3, #5
 800372c:	d80f      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800372e:	2b03      	cmp	r3, #3
 8003730:	d211      	bcs.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003732:	2b01      	cmp	r3, #1
 8003734:	d911      	bls.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003736:	2b02      	cmp	r3, #2
 8003738:	d109      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800373a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800373e:	3308      	adds	r3, #8
 8003740:	4618      	mov	r0, r3
 8003742:	f001 fce9 	bl	8005118 <RCCEx_PLL2_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800374c:	e006      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003754:	e002      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800375a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800375c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10c      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003764:	4b96      	ldr	r3, [pc, #600]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800376a:	f023 0107 	bic.w	r1, r3, #7
 800376e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003774:	4a92      	ldr	r2, [pc, #584]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003776:	430b      	orrs	r3, r1
 8003778:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800377c:	e003      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003782:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003786:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	2100      	movs	r1, #0
 8003790:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003792:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003798:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800379c:	460b      	mov	r3, r1
 800379e:	4313      	orrs	r3, r2
 80037a0:	d022      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80037a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d005      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80037b6:	e002      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80037b8:	bf00      	nop
 80037ba:	e000      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80037bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037be:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80037c6:	4b7e      	ldr	r3, [pc, #504]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037cc:	f023 0108 	bic.w	r1, r3, #8
 80037d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037d6:	4a7a      	ldr	r2, [pc, #488]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037d8:	430b      	orrs	r3, r1
 80037da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80037de:	e003      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037e4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80037f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037f6:	2300      	movs	r3, #0
 80037f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80037fe:	460b      	mov	r3, r1
 8003800:	4313      	orrs	r3, r2
 8003802:	f000 80b0 	beq.w	8003966 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003806:	4b6f      	ldr	r3, [pc, #444]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	4a6e      	ldr	r2, [pc, #440]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003812:	f7fe f877 	bl	8001904 <HAL_GetTick>
 8003816:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800381a:	e00b      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381c:	f7fe f872 	bl	8001904 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d903      	bls.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003832:	e005      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003834:	4b63      	ldr	r3, [pc, #396]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ed      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003840:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003844:	2b00      	cmp	r3, #0
 8003846:	f040 808a 	bne.w	800395e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800384a:	4b5d      	ldr	r3, [pc, #372]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800384c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003850:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003854:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003858:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d022      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003860:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003864:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003866:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800386a:	429a      	cmp	r2, r3
 800386c:	d01b      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800386e:	4b54      	ldr	r3, [pc, #336]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003874:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003878:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800387c:	4b50      	ldr	r3, [pc, #320]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800387e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003882:	4a4f      	ldr	r2, [pc, #316]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003888:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800388c:	4b4c      	ldr	r3, [pc, #304]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800388e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003892:	4a4b      	ldr	r2, [pc, #300]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003894:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003898:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800389c:	4a48      	ldr	r2, [pc, #288]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800389e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d019      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fe f827 	bl	8001904 <HAL_GetTick>
 80038b6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ba:	e00d      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fe f822 	bl	8001904 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d903      	bls.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 80038d6:	e006      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d8:	4b39      	ldr	r3, [pc, #228]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80038da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0ea      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 80038e6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d132      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80038ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038fc:	d10f      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80038fe:	4b30      	ldr	r3, [pc, #192]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003906:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800390a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003912:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003916:	4a2a      	ldr	r2, [pc, #168]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003918:	430b      	orrs	r3, r1
 800391a:	61d3      	str	r3, [r2, #28]
 800391c:	e005      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x886>
 800391e:	4b28      	ldr	r3, [pc, #160]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	4a27      	ldr	r2, [pc, #156]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003924:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003928:	61d3      	str	r3, [r2, #28]
 800392a:	4b25      	ldr	r3, [pc, #148]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800392c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003930:	4a23      	ldr	r2, [pc, #140]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003936:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800393a:	4b21      	ldr	r3, [pc, #132]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800393c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003940:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003944:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394a:	4a1d      	ldr	r2, [pc, #116]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800394c:	430b      	orrs	r3, r1
 800394e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003952:	e008      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003954:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003958:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 800395c:	e003      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003962:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003966:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003974:	2300      	movs	r3, #0
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003978:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800397c:	460b      	mov	r3, r1
 800397e:	4313      	orrs	r3, r2
 8003980:	d038      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003982:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003988:	2b30      	cmp	r3, #48	@ 0x30
 800398a:	d014      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800398c:	2b30      	cmp	r3, #48	@ 0x30
 800398e:	d80e      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003990:	2b20      	cmp	r3, #32
 8003992:	d012      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003994:	2b20      	cmp	r3, #32
 8003996:	d80a      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d015      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800399c:	2b10      	cmp	r3, #16
 800399e:	d106      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a0:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a4:	4a06      	ldr	r2, [pc, #24]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039aa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80039ac:	e00d      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039b4:	e009      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80039b6:	bf00      	nop
 80039b8:	e007      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80039ba:	bf00      	nop
 80039bc:	e005      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x926>
 80039be:	bf00      	nop
 80039c0:	44020c00 	.word	0x44020c00
 80039c4:	44020800 	.word	0x44020800
        break;
 80039c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10c      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80039d2:	4bb5      	ldr	r3, [pc, #724]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80039dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e2:	49b1      	ldr	r1, [pc, #708]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80039ea:	e003      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039f0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80039f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003a00:	623b      	str	r3, [r7, #32]
 8003a02:	2300      	movs	r3, #0
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a06:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	d03c      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003a10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d81d      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a20 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a35 	.word	0x08003a35
 8003a24:	08003a43 	.word	0x08003a43
 8003a28:	08003a57 	.word	0x08003a57
 8003a2c:	08003a5f 	.word	0x08003a5f
 8003a30:	08003a5f 	.word	0x08003a5f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a34:	4b9c      	ldr	r3, [pc, #624]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a38:	4a9b      	ldr	r2, [pc, #620]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a3e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003a40:	e00e      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a46:	3308      	adds	r3, #8
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 fb65 	bl	8005118 <RCCEx_PLL2_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003a54:	e004      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a5c:	e000      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a60:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10c      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003a68:	4b8f      	ldr	r3, [pc, #572]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a6e:	f023 0207 	bic.w	r2, r3, #7
 8003a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a78:	498b      	ldr	r1, [pc, #556]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003a80:	e003      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a82:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a86:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003a8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	d03c      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003aa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d01f      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d819      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003ab4:	2b18      	cmp	r3, #24
 8003ab6:	d01d      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003ab8:	2b18      	cmp	r3, #24
 8003aba:	d815      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d007      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003ac4:	e010      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac6:	4b78      	ldr	r3, [pc, #480]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aca:	4a77      	ldr	r2, [pc, #476]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ad0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003ad2:	e010      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ad8:	3308      	adds	r3, #8
 8003ada:	4618      	mov	r0, r3
 8003adc:	f001 fb1c 	bl	8005118 <RCCEx_PLL2_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003ae6:	e006      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003aee:	e002      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003af0:	bf00      	nop
 8003af2:	e000      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003afe:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b04:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003b08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0e:	4966      	ldr	r1, [pc, #408]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003b16:	e003      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b1c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003b20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b36:	460b      	mov	r3, r1
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	d03e      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003b3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b46:	d020      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b4c:	d819      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b50:	d01d      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003b52:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b54:	d815      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003b5a:	2b40      	cmp	r3, #64	@ 0x40
 8003b5c:	d007      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003b5e:	e010      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b60:	4b51      	ldr	r3, [pc, #324]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b64:	4a50      	ldr	r2, [pc, #320]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b6a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003b6c:	e010      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b72:	3308      	adds	r3, #8
 8003b74:	4618      	mov	r0, r3
 8003b76:	f001 facf 	bl	8005118 <RCCEx_PLL2_Config>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003b80:	e006      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003b88:	e002      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003b8a:	bf00      	nop
 8003b8c:	e000      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b90:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10c      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003b98:	4b43      	ldr	r3, [pc, #268]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b9e:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003ba2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba8:	493f      	ldr	r1, [pc, #252]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003bb0:	e003      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003bb6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	d038      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003bd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be0:	d00e      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be6:	d815      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d017      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf0:	d110      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bfc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003bfe:	e00e      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c04:	3308      	adds	r3, #8
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 fa86 	bl	8005118 <RCCEx_PLL2_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003c12:	e004      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c1a:	e000      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003c26:	4b20      	ldr	r3, [pc, #128]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c36:	491c      	ldr	r1, [pc, #112]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003c3e:	e003      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c44:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c50:	2100      	movs	r1, #0
 8003c52:	6039      	str	r1, [r7, #0]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4313      	orrs	r3, r2
 8003c62:	d039      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003c64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c6a:	2b30      	cmp	r3, #48	@ 0x30
 8003c6c:	d01e      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003c6e:	2b30      	cmp	r3, #48	@ 0x30
 8003c70:	d815      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d002      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d007      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003c7a:	e010      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c80:	4a09      	ldr	r2, [pc, #36]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c86:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c88:	e011      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c8e:	3308      	adds	r3, #8
 8003c90:	4618      	mov	r0, r3
 8003c92:	f001 fa41 	bl	8005118 <RCCEx_PLL2_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003c9c:	e007      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003ca4:	e003      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003ca6:	bf00      	nop
 8003ca8:	44020c00 	.word	0x44020c00
        break;
 8003cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cae:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003cb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003cbc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cc6:	4908      	ldr	r1, [pc, #32]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003cce:	e003      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cd4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003cd8:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	37a8      	adds	r7, #168	@ 0xa8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce6:	bf00      	nop
 8003ce8:	44020c00 	.word	0x44020c00

08003cec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b08b      	sub	sp, #44	@ 0x2c
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003cf4:	4bae      	ldr	r3, [pc, #696]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003cfe:	4bac      	ldr	r3, [pc, #688]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003d08:	4ba9      	ldr	r3, [pc, #676]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d12:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003d14:	4ba6      	ldr	r3, [pc, #664]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003d20:	4ba3      	ldr	r3, [pc, #652]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d24:	08db      	lsrs	r3, r3, #3
 8003d26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	fb02 f303 	mul.w	r3, r2, r3
 8003d30:	ee07 3a90 	vmov	s15, r3
 8003d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d38:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 8126 	beq.w	8003f90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d053      	beq.n	8003df2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d86f      	bhi.n	8003e30 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d003      	beq.n	8003d5e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d02b      	beq.n	8003db4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003d5c:	e068      	b.n	8003e30 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d5e:	4b94      	ldr	r3, [pc, #592]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	08db      	lsrs	r3, r3, #3
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	4a92      	ldr	r2, [pc, #584]	@ (8003fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	ee07 3a90 	vmov	s15, r3
 8003d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d92:	ed97 6a04 	vldr	s12, [r7, #16]
 8003d96:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003db2:	e068      	b.n	8003e86 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dbe:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003fbc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd0:	ed97 6a04 	vldr	s12, [r7, #16]
 8003dd4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003dd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ddc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003de4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003df0:	e049      	b.n	8003e86 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	ee07 3a90 	vmov	s15, r3
 8003df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8003e00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0e:	ed97 6a04 	vldr	s12, [r7, #16]
 8003e12:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003e2e:	e02a      	b.n	8003e86 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e30:	4b5f      	ldr	r3, [pc, #380]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	08db      	lsrs	r3, r3, #3
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	4a5e      	ldr	r2, [pc, #376]	@ (8003fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e40:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	ee07 3a90 	vmov	s15, r3
 8003e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	ee07 3a90 	vmov	s15, r3
 8003e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e64:	ed97 6a04 	vldr	s12, [r7, #16]
 8003e68:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003e6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003e84:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003e86:	4b4a      	ldr	r3, [pc, #296]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e92:	d121      	bne.n	8003ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003e94:	4b46      	ldr	r3, [pc, #280]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d017      	beq.n	8003ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003ea0:	4b43      	ldr	r3, [pc, #268]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea4:	0a5b      	lsrs	r3, r3, #9
 8003ea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003eb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eb6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003eba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e006      	b.n	8003ede <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e002      	b.n	8003ede <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003ede:	4b34      	ldr	r3, [pc, #208]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003eea:	d121      	bne.n	8003f30 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003eec:	4b30      	ldr	r3, [pc, #192]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d017      	beq.n	8003f28 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003efc:	0c1b      	lsrs	r3, r3, #16
 8003efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003f0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003f12:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f1e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	e006      	b.n	8003f36 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	e002      	b.n	8003f36 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003f36:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f42:	d121      	bne.n	8003f88 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003f44:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d017      	beq.n	8003f80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003f50:	4b17      	ldr	r3, [pc, #92]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f54:	0e1b      	lsrs	r3, r3, #24
 8003f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f5a:	ee07 3a90 	vmov	s15, r3
 8003f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003f62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f66:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003f6a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f76:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003f7e:	e010      	b.n	8003fa2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	609a      	str	r2, [r3, #8]
}
 8003f86:	e00c      	b.n	8003fa2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
}
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	609a      	str	r2, [r3, #8]
}
 8003fa2:	bf00      	nop
 8003fa4:	372c      	adds	r7, #44	@ 0x2c
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	44020c00 	.word	0x44020c00
 8003fb4:	03d09000 	.word	0x03d09000
 8003fb8:	46000000 	.word	0x46000000
 8003fbc:	4a742400 	.word	0x4a742400
 8003fc0:	4bb71b00 	.word	0x4bb71b00

08003fc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b08b      	sub	sp, #44	@ 0x2c
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003fcc:	4bae      	ldr	r3, [pc, #696]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003fd6:	4bac      	ldr	r3, [pc, #688]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003fe0:	4ba9      	ldr	r3, [pc, #676]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	0a1b      	lsrs	r3, r3, #8
 8003fe6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fea:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003fec:	4ba6      	ldr	r3, [pc, #664]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003ff8:	4ba3      	ldr	r3, [pc, #652]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	08db      	lsrs	r3, r3, #3
 8003ffe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	fb02 f303 	mul.w	r3, r2, r3
 8004008:	ee07 3a90 	vmov	s15, r3
 800400c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004010:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8126 	beq.w	8004268 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d053      	beq.n	80040ca <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	2b03      	cmp	r3, #3
 8004026:	d86f      	bhi.n	8004108 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d003      	beq.n	8004036 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	2b02      	cmp	r3, #2
 8004032:	d02b      	beq.n	800408c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004034:	e068      	b.n	8004108 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004036:	4b94      	ldr	r3, [pc, #592]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	08db      	lsrs	r3, r3, #3
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	4a92      	ldr	r2, [pc, #584]	@ (800428c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004042:	fa22 f303 	lsr.w	r3, r2, r3
 8004046:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	ee07 3a90 	vmov	s15, r3
 8004058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406a:	ed97 6a04 	vldr	s12, [r7, #16]
 800406e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800407a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800407e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004086:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800408a:	e068      	b.n	800415e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004096:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004294 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800409a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	ee07 3a90 	vmov	s15, r3
 80040a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a8:	ed97 6a04 	vldr	s12, [r7, #16]
 80040ac:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80040b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80040c8:	e049      	b.n	800415e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	ee07 3a90 	vmov	s15, r3
 80040d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80040d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e6:	ed97 6a04 	vldr	s12, [r7, #16]
 80040ea:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80040ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004102:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004106:	e02a      	b.n	800415e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004108:	4b5f      	ldr	r3, [pc, #380]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	08db      	lsrs	r3, r3, #3
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	4a5e      	ldr	r2, [pc, #376]	@ (800428c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
 8004118:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	ee07 3a90 	vmov	s15, r3
 8004120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	ee07 3a90 	vmov	s15, r3
 800412a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	ee07 3a90 	vmov	s15, r3
 8004138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004140:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004158:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800415c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800415e:	4b4a      	ldr	r3, [pc, #296]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004166:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800416a:	d121      	bne.n	80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800416c:	4b46      	ldr	r3, [pc, #280]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d017      	beq.n	80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004178:	4b43      	ldr	r3, [pc, #268]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800417a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417c:	0a5b      	lsrs	r3, r3, #9
 800417e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800418a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800418e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004192:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800419a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800419e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e006      	b.n	80041b6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e002      	b.n	80041b6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80041b6:	4b34      	ldr	r3, [pc, #208]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041c2:	d121      	bne.n	8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80041c4:	4b30      	ldr	r3, [pc, #192]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d017      	beq.n	8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80041d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d4:	0c1b      	lsrs	r3, r3, #16
 80041d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80041e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041e6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80041ea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80041ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	e006      	b.n	800420e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	e002      	b.n	800420e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800420e:	4b1e      	ldr	r3, [pc, #120]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004216:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800421a:	d121      	bne.n	8004260 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800421c:	4b1a      	ldr	r3, [pc, #104]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800421e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004220:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d017      	beq.n	8004258 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004228:	4b17      	ldr	r3, [pc, #92]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800422a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422c:	0e1b      	lsrs	r3, r3, #24
 800422e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800423a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800423e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004242:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800424a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800424e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004256:	e010      	b.n	800427a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	609a      	str	r2, [r3, #8]
}
 800425e:	e00c      	b.n	800427a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
}
 8004266:	e008      	b.n	800427a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	609a      	str	r2, [r3, #8]
}
 800427a:	bf00      	nop
 800427c:	372c      	adds	r7, #44	@ 0x2c
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	44020c00 	.word	0x44020c00
 800428c:	03d09000 	.word	0x03d09000
 8004290:	46000000 	.word	0x46000000
 8004294:	4a742400 	.word	0x4a742400
 8004298:	4bb71b00 	.word	0x4bb71b00

0800429c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08c      	sub	sp, #48	@ 0x30
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80042a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042aa:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80042ae:	430b      	orrs	r3, r1
 80042b0:	d14b      	bne.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80042b2:	4bc4      	ldr	r3, [pc, #784]	@ (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80042b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042bc:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80042be:	4bc1      	ldr	r3, [pc, #772]	@ (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80042c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d108      	bne.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80042cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042d2:	d104      	bne.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80042d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042da:	f000 bf14 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80042de:	4bb9      	ldr	r3, [pc, #740]	@ (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80042e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ec:	d108      	bne.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80042ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042f4:	d104      	bne.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80042f6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80042fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042fc:	f000 bf03 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004300:	4bb0      	ldr	r3, [pc, #704]	@ (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004308:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800430c:	d119      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800430e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004310:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004314:	d115      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004316:	4bab      	ldr	r3, [pc, #684]	@ (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800431e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004322:	d30a      	bcc.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004324:	4ba7      	ldr	r3, [pc, #668]	@ (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	0a1b      	lsrs	r3, r3, #8
 800432a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800432e:	4aa6      	ldr	r2, [pc, #664]	@ (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004336:	f000 bee6 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800433e:	f000 bee2 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004346:	f000 bede 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800434a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800434e:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8004352:	ea52 0301 	orrs.w	r3, r2, r1
 8004356:	f000 838e 	beq.w	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800435a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800435e:	2a01      	cmp	r2, #1
 8004360:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8004364:	f080 86cc 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800436c:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8004370:	ea52 0301 	orrs.w	r3, r2, r1
 8004374:	f000 82aa 	beq.w	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800437c:	2a01      	cmp	r2, #1
 800437e:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8004382:	f080 86bd 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004386:	e9d7 2300 	ldrd	r2, r3, [r7]
 800438a:	f1a3 0110 	sub.w	r1, r3, #16
 800438e:	ea52 0301 	orrs.w	r3, r2, r1
 8004392:	f000 8681 	beq.w	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8004396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800439a:	2a01      	cmp	r2, #1
 800439c:	f173 0310 	sbcs.w	r3, r3, #16
 80043a0:	f080 86ae 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80043a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043a8:	1f19      	subs	r1, r3, #4
 80043aa:	ea52 0301 	orrs.w	r3, r2, r1
 80043ae:	f000 84b1 	beq.w	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80043b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043b6:	2a01      	cmp	r2, #1
 80043b8:	f173 0304 	sbcs.w	r3, r3, #4
 80043bc:	f080 86a0 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80043c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043c4:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80043c8:	430b      	orrs	r3, r1
 80043ca:	f000 85aa 	beq.w	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 80043ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043d2:	497e      	ldr	r1, [pc, #504]	@ (80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80043d4:	428a      	cmp	r2, r1
 80043d6:	f173 0300 	sbcs.w	r3, r3, #0
 80043da:	f080 8691 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80043de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043e2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80043e6:	430b      	orrs	r3, r1
 80043e8:	f000 8532 	beq.w	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80043ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043f0:	4977      	ldr	r1, [pc, #476]	@ (80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80043f2:	428a      	cmp	r2, r1
 80043f4:	f173 0300 	sbcs.w	r3, r3, #0
 80043f8:	f080 8682 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80043fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004400:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8004404:	430b      	orrs	r3, r1
 8004406:	f000 84bc 	beq.w	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 800440a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800440e:	4971      	ldr	r1, [pc, #452]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8004410:	428a      	cmp	r2, r1
 8004412:	f173 0300 	sbcs.w	r3, r3, #0
 8004416:	f080 8673 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800441a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800441e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8004422:	430b      	orrs	r3, r1
 8004424:	f000 85f2 	beq.w	800500c <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8004428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800442c:	496a      	ldr	r1, [pc, #424]	@ (80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 800442e:	428a      	cmp	r2, r1
 8004430:	f173 0300 	sbcs.w	r3, r3, #0
 8004434:	f080 8664 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800443c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004440:	430b      	orrs	r3, r1
 8004442:	f000 81e5 	beq.w	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8004446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800444a:	4964      	ldr	r1, [pc, #400]	@ (80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 800444c:	428a      	cmp	r2, r1
 800444e:	f173 0300 	sbcs.w	r3, r3, #0
 8004452:	f080 8655 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800445a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800445e:	430b      	orrs	r3, r1
 8004460:	f000 83cc 	beq.w	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8004464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004468:	495d      	ldr	r1, [pc, #372]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800446a:	428a      	cmp	r2, r1
 800446c:	f173 0300 	sbcs.w	r3, r3, #0
 8004470:	f080 8646 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004478:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800447c:	430b      	orrs	r3, r1
 800447e:	f000 8331 	beq.w	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8004482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004486:	4957      	ldr	r1, [pc, #348]	@ (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8004488:	428a      	cmp	r2, r1
 800448a:	f173 0300 	sbcs.w	r3, r3, #0
 800448e:	f080 8637 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004496:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800449a:	430b      	orrs	r3, r1
 800449c:	f000 82bb 	beq.w	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 80044a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044a4:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 80044a8:	f173 0300 	sbcs.w	r3, r3, #0
 80044ac:	f080 8628 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80044b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044b4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80044b8:	430b      	orrs	r3, r1
 80044ba:	f000 826d 	beq.w	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 80044be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044c2:	f244 0101 	movw	r1, #16385	@ 0x4001
 80044c6:	428a      	cmp	r2, r1
 80044c8:	f173 0300 	sbcs.w	r3, r3, #0
 80044cc:	f080 8618 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80044d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044d4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80044d8:	430b      	orrs	r3, r1
 80044da:	f000 821e 	beq.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80044de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044e2:	f242 0101 	movw	r1, #8193	@ 0x2001
 80044e6:	428a      	cmp	r2, r1
 80044e8:	f173 0300 	sbcs.w	r3, r3, #0
 80044ec:	f080 8608 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80044f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044f4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80044f8:	430b      	orrs	r3, r1
 80044fa:	f000 8137 	beq.w	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80044fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004502:	f241 0101 	movw	r1, #4097	@ 0x1001
 8004506:	428a      	cmp	r2, r1
 8004508:	f173 0300 	sbcs.w	r3, r3, #0
 800450c:	f080 85f8 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004514:	1f11      	subs	r1, r2, #4
 8004516:	430b      	orrs	r3, r1
 8004518:	f000 80d2 	beq.w	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 800451c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004520:	2a05      	cmp	r2, #5
 8004522:	f173 0300 	sbcs.w	r3, r3, #0
 8004526:	f080 85eb 	bcs.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800452a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800452e:	1e51      	subs	r1, r2, #1
 8004530:	430b      	orrs	r3, r1
 8004532:	d006      	beq.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004538:	1e91      	subs	r1, r2, #2
 800453a:	430b      	orrs	r3, r1
 800453c:	d06c      	beq.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800453e:	f000 bddf 	b.w	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004542:	4b20      	ldr	r3, [pc, #128]	@ (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800454e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004550:	2b00      	cmp	r3, #0
 8004552:	d104      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004554:	f7fe fd42 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8004558:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800455a:	f000 bdd4 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800455e:	4b19      	ldr	r3, [pc, #100]	@ (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004566:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800456a:	d10a      	bne.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 800456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456e:	2b01      	cmp	r3, #1
 8004570:	d107      	bne.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004572:	f107 030c 	add.w	r3, r7, #12
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fd24 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004580:	e048      	b.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004582:	4b10      	ldr	r3, [pc, #64]	@ (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b02      	cmp	r3, #2
 800458c:	d10c      	bne.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800458e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004590:	2b03      	cmp	r3, #3
 8004592:	d109      	bne.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004594:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	08db      	lsrs	r3, r3, #3
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	4a12      	ldr	r2, [pc, #72]	@ (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80045a0:	fa22 f303 	lsr.w	r3, r2, r3
 80045a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045a6:	e035      	b.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80045a8:	4b06      	ldr	r3, [pc, #24]	@ (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b4:	d11c      	bne.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80045b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d119      	bne.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 80045bc:	4b0b      	ldr	r3, [pc, #44]	@ (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80045be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045c0:	e028      	b.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80045c2:	bf00      	nop
 80045c4:	44020c00 	.word	0x44020c00
 80045c8:	016e3600 	.word	0x016e3600
 80045cc:	20000001 	.word	0x20000001
 80045d0:	10000001 	.word	0x10000001
 80045d4:	08000001 	.word	0x08000001
 80045d8:	04000001 	.word	0x04000001
 80045dc:	00200001 	.word	0x00200001
 80045e0:	00040001 	.word	0x00040001
 80045e4:	00020001 	.word	0x00020001
 80045e8:	03d09000 	.word	0x03d09000
 80045ec:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80045f0:	4b9f      	ldr	r3, [pc, #636]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80045f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d106      	bne.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80045fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004600:	2b05      	cmp	r3, #5
 8004602:	d103      	bne.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8004604:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800460a:	e003      	b.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004610:	f000 bd79 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004614:	f000 bd77 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004618:	4b95      	ldr	r3, [pc, #596]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800461a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800461e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004622:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004626:	2b00      	cmp	r3, #0
 8004628:	d104      	bne.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800462a:	f7fe fcc1 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 800462e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004630:	f000 bd69 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004634:	4b8e      	ldr	r3, [pc, #568]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800463c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004640:	d10a      	bne.n	8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004644:	2b08      	cmp	r3, #8
 8004646:	d107      	bne.n	8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004648:	f107 030c 	add.w	r3, r7, #12
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff fcb9 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004656:	e031      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004658:	4b85      	ldr	r3, [pc, #532]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b02      	cmp	r3, #2
 8004662:	d10c      	bne.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004666:	2b18      	cmp	r3, #24
 8004668:	d109      	bne.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800466a:	4b81      	ldr	r3, [pc, #516]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	08db      	lsrs	r3, r3, #3
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	4a7f      	ldr	r2, [pc, #508]	@ (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004676:	fa22 f303 	lsr.w	r3, r2, r3
 800467a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800467c:	e01e      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800467e:	4b7c      	ldr	r3, [pc, #496]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004686:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800468a:	d105      	bne.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800468c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468e:	2b20      	cmp	r3, #32
 8004690:	d102      	bne.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8004692:	4b79      	ldr	r3, [pc, #484]	@ (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004694:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004696:	e011      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004698:	4b75      	ldr	r3, [pc, #468]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800469a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d106      	bne.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80046a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a8:	2b28      	cmp	r3, #40	@ 0x28
 80046aa:	d103      	bne.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 80046ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b2:	e003      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80046b8:	f000 bd25 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80046bc:	f000 bd23 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80046c0:	4b6b      	ldr	r3, [pc, #428]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80046c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046c6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80046ca:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80046cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80046d2:	f7fe fc6d 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 80046d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80046d8:	f000 bd15 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80046dc:	4b64      	ldr	r3, [pc, #400]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046e8:	d10a      	bne.n	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 80046ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ec:	2b40      	cmp	r3, #64	@ 0x40
 80046ee:	d107      	bne.n	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046f0:	f107 030c 	add.w	r3, r7, #12
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff fc65 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046fe:	e033      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004700:	4b5b      	ldr	r3, [pc, #364]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b02      	cmp	r3, #2
 800470a:	d10c      	bne.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800470c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004710:	d109      	bne.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004712:	4b57      	ldr	r3, [pc, #348]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	08db      	lsrs	r3, r3, #3
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	4a55      	ldr	r2, [pc, #340]	@ (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800471e:	fa22 f303 	lsr.w	r3, r2, r3
 8004722:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004724:	e020      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8004726:	4b52      	ldr	r3, [pc, #328]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800472e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004732:	d106      	bne.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800473a:	d102      	bne.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 800473c:	4b4e      	ldr	r3, [pc, #312]	@ (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800473e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004740:	e012      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004742:	4b4b      	ldr	r3, [pc, #300]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b02      	cmp	r3, #2
 800474e:	d107      	bne.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004752:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004756:	d103      	bne.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8004758:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800475c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800475e:	e003      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004764:	f000 bccf 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004768:	f000 bccd 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800476c:	4b40      	ldr	r3, [pc, #256]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800476e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004772:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004776:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800477e:	f7fe fc43 	bl	8003008 <HAL_RCC_GetPCLK3Freq>
 8004782:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004784:	f000 bcbf 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800478e:	d108      	bne.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004790:	f107 030c 	add.w	r3, r7, #12
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff fc15 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800479e:	f000 bcb2 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80047a2:	4b33      	ldr	r3, [pc, #204]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d10d      	bne.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 80047ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80047b4:	d109      	bne.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	08db      	lsrs	r3, r3, #3
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80047c2:	fa22 f303 	lsr.w	r3, r2, r3
 80047c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047c8:	e020      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80047ca:	4b29      	ldr	r3, [pc, #164]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047d6:	d106      	bne.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80047d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047de:	d102      	bne.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 80047e0:	4b25      	ldr	r3, [pc, #148]	@ (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80047e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047e4:	e012      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80047e6:	4b22      	ldr	r3, [pc, #136]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80047e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d107      	bne.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80047f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80047fa:	d103      	bne.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80047fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004800:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004802:	e003      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004808:	f000 bc7d 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800480c:	f000 bc7b 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004810:	4b17      	ldr	r3, [pc, #92]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800481c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481e:	2b00      	cmp	r3, #0
 8004820:	d104      	bne.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004822:	f7fe fba9 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8004826:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004828:	f000 bc6d 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	2b01      	cmp	r3, #1
 8004830:	d104      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004832:	f7fe fa75 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8004836:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8004838:	f000 bc65 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800483c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483e:	2b02      	cmp	r3, #2
 8004840:	d108      	bne.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004842:	f107 030c 	add.w	r3, r7, #12
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fbbc 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004850:	f000 bc59 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004854:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004860:	d10e      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8004862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004864:	2b03      	cmp	r3, #3
 8004866:	d10b      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8004868:	4b04      	ldr	r3, [pc, #16]	@ (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800486a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800486c:	e02c      	b.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800486e:	bf00      	nop
 8004870:	44020c00 	.word	0x44020c00
 8004874:	03d09000 	.word	0x03d09000
 8004878:	003d0900 	.word	0x003d0900
 800487c:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004880:	4b95      	ldr	r3, [pc, #596]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b02      	cmp	r3, #2
 800488a:	d10c      	bne.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 800488c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488e:	2b04      	cmp	r3, #4
 8004890:	d109      	bne.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004892:	4b91      	ldr	r3, [pc, #580]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	08db      	lsrs	r3, r3, #3
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	4a8f      	ldr	r2, [pc, #572]	@ (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800489e:	fa22 f303 	lsr.w	r3, r2, r3
 80048a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048a4:	e010      	b.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80048a6:	4b8c      	ldr	r3, [pc, #560]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b2:	d105      	bne.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80048b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	d102      	bne.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 80048ba:	4b89      	ldr	r3, [pc, #548]	@ (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80048bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048be:	e003      	b.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048c4:	f000 bc1f 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80048c8:	f000 bc1d 	b.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80048cc:	4b82      	ldr	r3, [pc, #520]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80048d8:	4b7f      	ldr	r3, [pc, #508]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d106      	bne.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80048e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d103      	bne.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 80048ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048f2:	e011      	b.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80048f4:	4b78      	ldr	r3, [pc, #480]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004902:	d106      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8004904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004906:	2b08      	cmp	r3, #8
 8004908:	d103      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 800490a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800490e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004910:	e002      	b.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004916:	e3f6      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004918:	e3f5      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800491a:	4b6f      	ldr	r3, [pc, #444]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800491c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004920:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004924:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	2b00      	cmp	r3, #0
 800492a:	d103      	bne.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800492c:	f7fe fb40 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8004930:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004932:	e3e8      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800493a:	d107      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800493c:	f107 030c 	add.w	r3, r7, #12
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fb3f 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800494a:	e3dc      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800494c:	4b62      	ldr	r3, [pc, #392]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b02      	cmp	r3, #2
 8004956:	d10d      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800495e:	d109      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004960:	4b5d      	ldr	r3, [pc, #372]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	08db      	lsrs	r3, r3, #3
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	4a5c      	ldr	r2, [pc, #368]	@ (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
 8004970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004972:	e010      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004974:	4b58      	ldr	r3, [pc, #352]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800497c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004980:	d106      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004984:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004988:	d102      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 800498a:	4b55      	ldr	r3, [pc, #340]	@ (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800498c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800498e:	e002      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004994:	e3b7      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004996:	e3b6      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004998:	4b4f      	ldr	r3, [pc, #316]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800499a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800499e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80049a2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80049a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d103      	bne.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80049aa:	f7fe fb01 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 80049ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80049b0:	e3a9      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 80049b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049b8:	d107      	bne.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ba:	f107 030c 	add.w	r3, r7, #12
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fb00 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049c8:	e39d      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80049ca:	4b43      	ldr	r3, [pc, #268]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d10d      	bne.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80049d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80049dc:	d109      	bne.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80049de:	4b3e      	ldr	r3, [pc, #248]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	08db      	lsrs	r3, r3, #3
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	4a3c      	ldr	r2, [pc, #240]	@ (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80049ea:	fa22 f303 	lsr.w	r3, r2, r3
 80049ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049f0:	e010      	b.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80049f2:	4b39      	ldr	r3, [pc, #228]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049fe:	d106      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a02:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a06:	d102      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004a08:	4b35      	ldr	r3, [pc, #212]	@ (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a0c:	e002      	b.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a12:	e378      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004a14:	e377      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004a16:	4b30      	ldr	r3, [pc, #192]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a1c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004a20:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d103      	bne.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a28:	f7fe fac2 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8004a2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004a2e:	e36a      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a36:	d107      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a38:	f107 030c 	add.w	r3, r7, #12
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff fac1 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a46:	e35e      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004a48:	4b23      	ldr	r3, [pc, #140]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d10d      	bne.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8004a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a5a:	d109      	bne.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	08db      	lsrs	r3, r3, #3
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	4a1d      	ldr	r2, [pc, #116]	@ (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a6e:	e34a      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a74:	e347      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004a76:	4b18      	ldr	r3, [pc, #96]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a7c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004a80:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d103      	bne.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004a88:	f7fe fabe 	bl	8003008 <HAL_RCC_GetPCLK3Freq>
 8004a8c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004a8e:	e33a      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a96:	d107      	bne.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a98:	f107 030c 	add.w	r3, r7, #12
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fa91 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004aa6:	e32e      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d10d      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aba:	d109      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004abc:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	08db      	lsrs	r3, r3, #3
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	4a05      	ldr	r2, [pc, #20]	@ (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8004acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ace:	e31a      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ad4:	e317      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004ad6:	bf00      	nop
 8004ad8:	44020c00 	.word	0x44020c00
 8004adc:	03d09000 	.word	0x03d09000
 8004ae0:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004ae4:	4b9b      	ldr	r3, [pc, #620]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ae6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004aea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004aee:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 8004af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004af6:	d044      	beq.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004afe:	d879      	bhi.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b06:	d02d      	beq.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b0e:	d871      	bhi.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b16:	d017      	beq.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b1e:	d869      	bhi.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d004      	beq.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b2c:	d004      	beq.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004b2e:	e061      	b.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004b30:	f7fe fa6a 	bl	8003008 <HAL_RCC_GetPCLK3Freq>
 8004b34:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004b36:	e060      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fa41 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004b46:	e058      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b48:	4b82      	ldr	r3, [pc, #520]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d103      	bne.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8004b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004b5c:	e04d      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004b62:	e04a      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004b64:	4b7b      	ldr	r3, [pc, #492]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b72:	d103      	bne.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8004b74:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004b7a:	e03e      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004b80:	e03b      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b82:	4b74      	ldr	r3, [pc, #464]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b88:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004b8c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b8e:	4b71      	ldr	r3, [pc, #452]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d109      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	08db      	lsrs	r3, r3, #3
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	4a6b      	ldr	r2, [pc, #428]	@ (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bb2:	e01e      	b.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004bb4:	4b67      	ldr	r3, [pc, #412]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bc0:	d106      	bne.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc8:	d102      	bne.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004bca:	4b64      	ldr	r3, [pc, #400]	@ (8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bce:	e010      	b.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004bd0:	4b60      	ldr	r3, [pc, #384]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bdc:	d106      	bne.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004be4:	d102      	bne.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004be6:	4b5e      	ldr	r3, [pc, #376]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bea:	e002      	b.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004bf0:	e003      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004bf2:	e002      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004bf8:	bf00      	nop
          }
        }
        break;
 8004bfa:	e284      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004bfc:	4b55      	ldr	r3, [pc, #340]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004bfe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c02:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004c06:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 8004c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c0e:	d044      	beq.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c12:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c16:	d879      	bhi.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c1e:	d02d      	beq.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c26:	d871      	bhi.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c2e:	d017      	beq.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c36:	d869      	bhi.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d004      	beq.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8004c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c44:	d004      	beq.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004c46:	e061      	b.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004c48:	f7fe f9b2 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8004c4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004c4e:	e060      	b.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c50:	f107 030c 	add.w	r3, r7, #12
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff f9b5 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c5e:	e058      	b.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c60:	4b3c      	ldr	r3, [pc, #240]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d103      	bne.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8004c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004c74:	e04d      	b.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c7a:	e04a      	b.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004c7c:	4b35      	ldr	r3, [pc, #212]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c8a:	d103      	bne.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004c8c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004c92:	e03e      	b.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c98:	e03b      	b.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ca0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004ca4:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d109      	bne.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cb8:	4b26      	ldr	r3, [pc, #152]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	08db      	lsrs	r3, r3, #3
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	4a25      	ldr	r2, [pc, #148]	@ (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cca:	e01e      	b.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ccc:	4b21      	ldr	r3, [pc, #132]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cd8:	d106      	bne.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce0:	d102      	bne.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ce6:	e010      	b.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cf4:	d106      	bne.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cfc:	d102      	bne.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004cfe:	4b18      	ldr	r3, [pc, #96]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d02:	e002      	b.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004d08:	e003      	b.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004d0a:	e002      	b.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d10:	bf00      	nop
          }
        }
        break;
 8004d12:	e1f8      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004d14:	4b0f      	ldr	r3, [pc, #60]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d1e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004d20:	4b0c      	ldr	r3, [pc, #48]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d2c:	d105      	bne.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8004d34:	4b0a      	ldr	r3, [pc, #40]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004d38:	e1e5      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d40:	d110      	bne.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d42:	f107 0318 	add.w	r3, r7, #24
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe ffd0 	bl	8003cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d50:	e1d9      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004d52:	bf00      	nop
 8004d54:	44020c00 	.word	0x44020c00
 8004d58:	03d09000 	.word	0x03d09000
 8004d5c:	003d0900 	.word	0x003d0900
 8004d60:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d6a:	d107      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d6c:	f107 030c 	add.w	r3, r7, #12
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff f927 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d7a:	e1c4      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d80:	e1c1      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004d82:	4b9d      	ldr	r3, [pc, #628]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d859      	bhi.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004d94:	a201      	add	r2, pc, #4	@ (adr r2, 8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004db1 	.word	0x08004db1
 8004da0:	08004dc1 	.word	0x08004dc1
 8004da4:	08004e49 	.word	0x08004e49
 8004da8:	08004dd1 	.word	0x08004dd1
 8004dac:	08004dd7 	.word	0x08004dd7
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004db0:	f107 0318 	add.w	r3, r7, #24
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fe ff99 	bl	8003cec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004dbe:	e046      	b.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dc0:	f107 030c 	add.w	r3, r7, #12
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff f8fd 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004dce:	e03e      	b.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004dd0:	4b8a      	ldr	r3, [pc, #552]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004dd4:	e03b      	b.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004dd6:	4b88      	ldr	r3, [pc, #544]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ddc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004de2:	4b85      	ldr	r3, [pc, #532]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d109      	bne.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004df4:	4b80      	ldr	r3, [pc, #512]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	08db      	lsrs	r3, r3, #3
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	4a80      	ldr	r2, [pc, #512]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004e00:	fa22 f303 	lsr.w	r3, r2, r3
 8004e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e06:	e01e      	b.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e08:	4b7b      	ldr	r3, [pc, #492]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e14:	d106      	bne.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e1c:	d102      	bne.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004e1e:	4b79      	ldr	r3, [pc, #484]	@ (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e22:	e010      	b.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e24:	4b74      	ldr	r3, [pc, #464]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e30:	d106      	bne.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e38:	d102      	bne.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004e3a:	4b73      	ldr	r3, [pc, #460]	@ (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e3e:	e002      	b.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004e44:	e003      	b.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8004e46:	e002      	b.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e4c:	bf00      	nop
          }
        }
        break;
 8004e4e:	e15a      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004e50:	4b69      	ldr	r3, [pc, #420]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d022      	beq.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8004e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d858      	bhi.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6a:	2b18      	cmp	r3, #24
 8004e6c:	d019      	beq.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8004e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e70:	2b18      	cmp	r3, #24
 8004e72:	d852      	bhi.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d008      	beq.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004e80:	e04b      	b.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e82:	f107 0318 	add.w	r3, r7, #24
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fe ff30 	bl	8003cec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e90:	e046      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e92:	f107 030c 	add.w	r3, r7, #12
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff f894 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ea0:	e03e      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004ea2:	4b56      	ldr	r3, [pc, #344]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ea6:	e03b      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ea8:	4b53      	ldr	r3, [pc, #332]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004eae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004eb4:	4b50      	ldr	r3, [pc, #320]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d10c      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d109      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	08db      	lsrs	r3, r3, #3
 8004ecc:	f003 0303 	and.w	r3, r3, #3
 8004ed0:	4a4b      	ldr	r2, [pc, #300]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ed8:	e01e      	b.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004eda:	4b47      	ldr	r3, [pc, #284]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee6:	d106      	bne.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eee:	d102      	bne.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004ef0:	4b44      	ldr	r3, [pc, #272]	@ (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ef4:	e010      	b.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ef6:	4b40      	ldr	r3, [pc, #256]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f02:	d106      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8004f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f0a:	d102      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f10:	e002      	b.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004f16:	e003      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8004f18:	e002      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f1e:	bf00      	nop
          }
        }
        break;
 8004f20:	e0f1      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004f22:	4b35      	ldr	r3, [pc, #212]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f28:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f34:	d023      	beq.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f3c:	d858      	bhi.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f40:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f42:	d019      	beq.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8004f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f46:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f48:	d852      	bhi.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8004f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f52:	2b40      	cmp	r3, #64	@ 0x40
 8004f54:	d008      	beq.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8004f56:	e04b      	b.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f58:	f107 0318 	add.w	r3, r7, #24
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fe fec5 	bl	8003cec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f66:	e046      	b.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f68:	f107 030c 	add.w	r3, r7, #12
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff f829 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f76:	e03e      	b.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004f78:	4b20      	ldr	r3, [pc, #128]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f7c:	e03b      	b.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f84:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004f88:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d10c      	bne.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d109      	bne.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f9c:	4b16      	ldr	r3, [pc, #88]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	08db      	lsrs	r3, r3, #3
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	4a16      	ldr	r2, [pc, #88]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fae:	e01e      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004fb0:	4b11      	ldr	r3, [pc, #68]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fbc:	d106      	bne.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc4:	d102      	bne.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fca:	e010      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fd8:	d106      	bne.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fe0:	d102      	bne.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004fe2:	4b09      	ldr	r3, [pc, #36]	@ (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fe6:	e002      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004fec:	e003      	b.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004fee:	e002      	b.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ff4:	bf00      	nop
          }
        }
        break;
 8004ff6:	e086      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004ff8:	44020c00 	.word	0x44020c00
 8004ffc:	00bb8000 	.word	0x00bb8000
 8005000:	03d09000 	.word	0x03d09000
 8005004:	003d0900 	.word	0x003d0900
 8005008:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800500c:	4b40      	ldr	r3, [pc, #256]	@ (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800500e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005012:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005016:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005018:	4b3d      	ldr	r3, [pc, #244]	@ (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005024:	d105      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8005026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005028:	2b00      	cmp	r3, #0
 800502a:	d102      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 800502c:	4b39      	ldr	r3, [pc, #228]	@ (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 800502e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005030:	e031      	b.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005032:	4b37      	ldr	r3, [pc, #220]	@ (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800503e:	d10a      	bne.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005042:	2b10      	cmp	r3, #16
 8005044:	d107      	bne.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005046:	f107 0318 	add.w	r3, r7, #24
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe fe4e 	bl	8003cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005054:	e01f      	b.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8005056:	4b2e      	ldr	r3, [pc, #184]	@ (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b02      	cmp	r3, #2
 8005062:	d106      	bne.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8005064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005066:	2b20      	cmp	r3, #32
 8005068:	d103      	bne.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800506a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800506e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005070:	e011      	b.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005072:	4b27      	ldr	r3, [pc, #156]	@ (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800507c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005080:	d106      	bne.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8005082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005084:	2b30      	cmp	r3, #48	@ 0x30
 8005086:	d103      	bne.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8005088:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800508c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800508e:	e002      	b.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8005094:	e037      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005096:	e036      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005098:	4b1d      	ldr	r3, [pc, #116]	@ (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800509a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800509e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80050a2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80050a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a6:	2b10      	cmp	r3, #16
 80050a8:	d107      	bne.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050aa:	f107 0318 	add.w	r3, r7, #24
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe fe1c 	bl	8003cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80050b8:	e025      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 80050ba:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050c6:	d10a      	bne.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 80050c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d107      	bne.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050ce:	f107 030c 	add.w	r3, r7, #12
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe ff76 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050dc:	e00f      	b.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80050de:	4b0c      	ldr	r3, [pc, #48]	@ (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ea:	d105      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 80050ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ee:	2b30      	cmp	r3, #48	@ 0x30
 80050f0:	d102      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80050f2:	4b08      	ldr	r3, [pc, #32]	@ (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80050f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050f6:	e002      	b.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 80050fc:	e003      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80050fe:	e002      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005104:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8005106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005108:	4618      	mov	r0, r3
 800510a:	3730      	adds	r7, #48	@ 0x30
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	44020c00 	.word	0x44020c00
 8005114:	02dc6c00 	.word	0x02dc6c00

08005118 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005120:	4b48      	ldr	r3, [pc, #288]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a47      	ldr	r2, [pc, #284]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 8005126:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800512a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800512c:	f7fc fbea 	bl	8001904 <HAL_GetTick>
 8005130:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005132:	e008      	b.n	8005146 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005134:	f7fc fbe6 	bl	8001904 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e07a      	b.n	800523c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005146:	4b3f      	ldr	r3, [pc, #252]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f0      	bne.n	8005134 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005152:	4b3c      	ldr	r3, [pc, #240]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 8005154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005156:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800515a:	f023 0303 	bic.w	r3, r3, #3
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6811      	ldr	r1, [r2, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6852      	ldr	r2, [r2, #4]
 8005166:	0212      	lsls	r2, r2, #8
 8005168:	430a      	orrs	r2, r1
 800516a:	4936      	ldr	r1, [pc, #216]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 800516c:	4313      	orrs	r3, r2
 800516e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	3b01      	subs	r3, #1
 8005176:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	3b01      	subs	r3, #1
 8005180:	025b      	lsls	r3, r3, #9
 8005182:	b29b      	uxth	r3, r3
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	3b01      	subs	r3, #1
 800518c:	041b      	lsls	r3, r3, #16
 800518e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	3b01      	subs	r3, #1
 800519a:	061b      	lsls	r3, r3, #24
 800519c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051a0:	4928      	ldr	r1, [pc, #160]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80051a6:	4b27      	ldr	r3, [pc, #156]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 80051a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051aa:	f023 020c 	bic.w	r2, r3, #12
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	4924      	ldr	r1, [pc, #144]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80051b8:	4b22      	ldr	r3, [pc, #136]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 80051ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051bc:	f023 0220 	bic.w	r2, r3, #32
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	491f      	ldr	r1, [pc, #124]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80051ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 80051cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d2:	491c      	ldr	r1, [pc, #112]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80051d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 80051da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051dc:	4a19      	ldr	r2, [pc, #100]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 80051de:	f023 0310 	bic.w	r3, r3, #16
 80051e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80051e4:	4b17      	ldr	r3, [pc, #92]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 80051e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051ec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6a12      	ldr	r2, [r2, #32]
 80051f4:	00d2      	lsls	r2, r2, #3
 80051f6:	4913      	ldr	r1, [pc, #76]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80051fc:	4b11      	ldr	r3, [pc, #68]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 80051fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005200:	4a10      	ldr	r2, [pc, #64]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 8005202:	f043 0310 	orr.w	r3, r3, #16
 8005206:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005208:	4b0e      	ldr	r3, [pc, #56]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a0d      	ldr	r2, [pc, #52]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 800520e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005212:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005214:	f7fc fb76 	bl	8001904 <HAL_GetTick>
 8005218:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800521a:	e008      	b.n	800522e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800521c:	f7fc fb72 	bl	8001904 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e006      	b.n	800523c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800522e:	4b05      	ldr	r3, [pc, #20]	@ (8005244 <RCCEx_PLL2_Config+0x12c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800523a:	2300      	movs	r3, #0

}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	44020c00 	.word	0x44020c00

08005248 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e0e9      	b.n	800542e <HAL_SPI_Init+0x1e6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a74      	ldr	r2, [pc, #464]	@ (8005438 <HAL_SPI_Init+0x1f0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d105      	bne.n	8005276 <HAL_SPI_Init+0x2e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b0f      	cmp	r3, #15
 8005270:	d901      	bls.n	8005276 <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e0db      	b.n	800542e <HAL_SPI_Init+0x1e6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fcfc 	bl	8005c74 <SPI_GetPacketSize>
 800527c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a6d      	ldr	r2, [pc, #436]	@ (8005438 <HAL_SPI_Init+0x1f0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d102      	bne.n	800528e <HAL_SPI_Init+0x46>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b08      	cmp	r3, #8
 800528c:	d811      	bhi.n	80052b2 <HAL_SPI_Init+0x6a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005292:	4a6a      	ldr	r2, [pc, #424]	@ (800543c <HAL_SPI_Init+0x1f4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d009      	beq.n	80052ac <HAL_SPI_Init+0x64>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a68      	ldr	r2, [pc, #416]	@ (8005440 <HAL_SPI_Init+0x1f8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d004      	beq.n	80052ac <HAL_SPI_Init+0x64>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a67      	ldr	r2, [pc, #412]	@ (8005444 <HAL_SPI_Init+0x1fc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d104      	bne.n	80052b6 <HAL_SPI_Init+0x6e>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b10      	cmp	r3, #16
 80052b0:	d901      	bls.n	80052b6 <HAL_SPI_Init+0x6e>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e0bb      	b.n	800542e <HAL_SPI_Init+0x1e6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_SPI_Init+0x88>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fb fd32 	bl	8000d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0201 	bic.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80052f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052fc:	d119      	bne.n	8005332 <HAL_SPI_Init+0xea>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005306:	d103      	bne.n	8005310 <HAL_SPI_Init+0xc8>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <HAL_SPI_Init+0xda>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10c      	bne.n	8005332 <HAL_SPI_Init+0xea>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800531c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005320:	d107      	bne.n	8005332 <HAL_SPI_Init+0xea>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005330:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00f      	beq.n	800535e <HAL_SPI_Init+0x116>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	2b06      	cmp	r3, #6
 8005344:	d90b      	bls.n	800535e <HAL_SPI_Init+0x116>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e007      	b.n	800536e <HAL_SPI_Init+0x126>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800536c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69da      	ldr	r2, [r3, #28]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005376:	431a      	orrs	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005380:	ea42 0103 	orr.w	r1, r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053da:	ea42 0103 	orr.w	r1, r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0201 	bic.w	r2, r2, #1
 80053f8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_SPI_Init+0x1d4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	deaddead 	.word	0xdeaddead
 800543c:	40013000 	.word	0x40013000
 8005440:	40003800 	.word	0x40003800
 8005444:	40003c00 	.word	0x40003c00

08005448 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08e      	sub	sp, #56	@ 0x38
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3320      	adds	r3, #32
 800545c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3330      	adds	r3, #48	@ 0x30
 8005464:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	b29b      	uxth	r3, r3
 800546e:	3301      	adds	r3, #1
 8005470:	83fb      	strh	r3, [r7, #30]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005472:	f7fc fa47 	bl	8001904 <HAL_GetTick>
 8005476:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8005478:	887b      	ldrh	r3, [r7, #2]
 800547a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800547c:	887b      	ldrh	r3, [r7, #2]
 800547e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b01      	cmp	r3, #1
 800548a:	d001      	beq.n	8005490 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800548c:	2302      	movs	r3, #2
 800548e:	e31e      	b.n	8005ace <HAL_SPI_TransmitReceive+0x686>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_SPI_TransmitReceive+0x5a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <HAL_SPI_TransmitReceive+0x5a>
 800549c:	887b      	ldrh	r3, [r7, #2]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e313      	b.n	8005ace <HAL_SPI_TransmitReceive+0x686>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_SPI_TransmitReceive+0x6c>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e30c      	b.n	8005ace <HAL_SPI_TransmitReceive+0x686>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2205      	movs	r2, #5
 80054c0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	887a      	ldrh	r2, [r7, #2]
 80054d6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	887a      	ldrh	r2, [r7, #2]
 80054de:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	887a      	ldrh	r2, [r7, #2]
 80054ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	887a      	ldrh	r2, [r7, #2]
 80054f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005512:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a78      	ldr	r2, [pc, #480]	@ (80056fc <HAL_SPI_TransmitReceive+0x2b4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d009      	beq.n	8005532 <HAL_SPI_TransmitReceive+0xea>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a77      	ldr	r2, [pc, #476]	@ (8005700 <HAL_SPI_TransmitReceive+0x2b8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d004      	beq.n	8005532 <HAL_SPI_TransmitReceive+0xea>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a75      	ldr	r2, [pc, #468]	@ (8005704 <HAL_SPI_TransmitReceive+0x2bc>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d102      	bne.n	8005538 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005532:	2310      	movs	r3, #16
 8005534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005536:	e001      	b.n	800553c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005538:	2308      	movs	r3, #8
 800553a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	0c1b      	lsrs	r3, r3, #16
 8005544:	041b      	lsls	r3, r3, #16
 8005546:	8879      	ldrh	r1, [r7, #2]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	6812      	ldr	r2, [r2, #0]
 800554c:	430b      	orrs	r3, r1
 800554e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005568:	d107      	bne.n	800557a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005578:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	2b0f      	cmp	r3, #15
 8005580:	f240 80b2 	bls.w	80056e8 <HAL_SPI_TransmitReceive+0x2a0>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a5c      	ldr	r2, [pc, #368]	@ (80056fc <HAL_SPI_TransmitReceive+0x2b4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00a      	beq.n	80055a4 <HAL_SPI_TransmitReceive+0x15c>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a5b      	ldr	r2, [pc, #364]	@ (8005700 <HAL_SPI_TransmitReceive+0x2b8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d005      	beq.n	80055a4 <HAL_SPI_TransmitReceive+0x15c>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a59      	ldr	r2, [pc, #356]	@ (8005704 <HAL_SPI_TransmitReceive+0x2bc>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	f040 80a2 	bne.w	80056e8 <HAL_SPI_TransmitReceive+0x2a0>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80055a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a6:	089b      	lsrs	r3, r3, #2
 80055a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80055aa:	e094      	b.n	80056d6 <HAL_SPI_TransmitReceive+0x28e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d120      	bne.n	80055fc <HAL_SPI_TransmitReceive+0x1b4>
 80055ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01d      	beq.n	80055fc <HAL_SPI_TransmitReceive+0x1b4>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80055c0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80055c2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80055c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d217      	bcs.n	80055fc <HAL_SPI_TransmitReceive+0x1b4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055dc:	1d1a      	adds	r2, r3, #4
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80055fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005604:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005606:	2b00      	cmp	r3, #0
 8005608:	d065      	beq.n	80056d6 <HAL_SPI_TransmitReceive+0x28e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b01      	cmp	r3, #1
 8005616:	d118      	bne.n	800564a <HAL_SPI_TransmitReceive+0x202>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005620:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005622:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005628:	1d1a      	adds	r2, r3, #4
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005646:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005648:	e045      	b.n	80056d6 <HAL_SPI_TransmitReceive+0x28e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800564a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800564c:	8bfb      	ldrh	r3, [r7, #30]
 800564e:	429a      	cmp	r2, r3
 8005650:	d21d      	bcs.n	800568e <HAL_SPI_TransmitReceive+0x246>
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d018      	beq.n	800568e <HAL_SPI_TransmitReceive+0x246>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005664:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005666:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800566c:	1d1a      	adds	r2, r3, #4
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005678:	b29b      	uxth	r3, r3
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800568a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800568c:	e023      	b.n	80056d6 <HAL_SPI_TransmitReceive+0x28e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800568e:	f7fc f939 	bl	8001904 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800569a:	429a      	cmp	r2, r3
 800569c:	d803      	bhi.n	80056a6 <HAL_SPI_TransmitReceive+0x25e>
 800569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d102      	bne.n	80056ac <HAL_SPI_TransmitReceive+0x264>
 80056a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d114      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x28e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 fa13 	bl	8005ad8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e1fb      	b.n	8005ace <HAL_SPI_TransmitReceive+0x686>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80056d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f47f af67 	bne.w	80055ac <HAL_SPI_TransmitReceive+0x164>
 80056de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f47f af63 	bne.w	80055ac <HAL_SPI_TransmitReceive+0x164>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80056e6:	e1cc      	b.n	8005a82 <HAL_SPI_TransmitReceive+0x63a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	2b07      	cmp	r3, #7
 80056ee:	f240 81c0 	bls.w	8005a72 <HAL_SPI_TransmitReceive+0x62a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80056f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f4:	085b      	lsrs	r3, r3, #1
 80056f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80056f8:	e0c7      	b.n	800588a <HAL_SPI_TransmitReceive+0x442>
 80056fa:	bf00      	nop
 80056fc:	40013000 	.word	0x40013000
 8005700:	40003800 	.word	0x40003800
 8005704:	40003c00 	.word	0x40003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b02      	cmp	r3, #2
 8005714:	d11f      	bne.n	8005756 <HAL_SPI_TransmitReceive+0x30e>
 8005716:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01c      	beq.n	8005756 <HAL_SPI_TransmitReceive+0x30e>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800571c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800571e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005722:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005724:	429a      	cmp	r2, r3
 8005726:	d216      	bcs.n	8005756 <HAL_SPI_TransmitReceive+0x30e>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800572c:	881a      	ldrh	r2, [r3, #0]
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005730:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005736:	1c9a      	adds	r2, r3, #2
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005754:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800575e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 8092 	beq.w	800588a <HAL_SPI_TransmitReceive+0x442>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b01      	cmp	r3, #1
 8005772:	d118      	bne.n	80057a6 <HAL_SPI_TransmitReceive+0x35e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005778:	6a3a      	ldr	r2, [r7, #32]
 800577a:	8812      	ldrh	r2, [r2, #0]
 800577c:	b292      	uxth	r2, r2
 800577e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005784:	1c9a      	adds	r2, r3, #2
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80057a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80057a4:	e071      	b.n	800588a <HAL_SPI_TransmitReceive+0x442>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80057a6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80057a8:	8bfb      	ldrh	r3, [r7, #30]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d228      	bcs.n	8005800 <HAL_SPI_TransmitReceive+0x3b8>
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d023      	beq.n	8005800 <HAL_SPI_TransmitReceive+0x3b8>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057bc:	6a3a      	ldr	r2, [r7, #32]
 80057be:	8812      	ldrh	r2, [r2, #0]
 80057c0:	b292      	uxth	r2, r2
 80057c2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057c8:	1c9a      	adds	r2, r3, #2
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d2:	6a3a      	ldr	r2, [r7, #32]
 80057d4:	8812      	ldrh	r2, [r2, #0]
 80057d6:	b292      	uxth	r2, r2
 80057d8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057de:	1c9a      	adds	r2, r3, #2
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b02      	subs	r3, #2
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80057fc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80057fe:	e044      	b.n	800588a <HAL_SPI_TransmitReceive+0x442>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005800:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005802:	2b01      	cmp	r3, #1
 8005804:	d11d      	bne.n	8005842 <HAL_SPI_TransmitReceive+0x3fa>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d018      	beq.n	8005842 <HAL_SPI_TransmitReceive+0x3fa>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	8812      	ldrh	r2, [r2, #0]
 8005818:	b292      	uxth	r2, r2
 800581a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005820:	1c9a      	adds	r2, r3, #2
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800583e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005840:	e023      	b.n	800588a <HAL_SPI_TransmitReceive+0x442>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005842:	f7fc f85f 	bl	8001904 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800584e:	429a      	cmp	r2, r3
 8005850:	d803      	bhi.n	800585a <HAL_SPI_TransmitReceive+0x412>
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d102      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x418>
 800585a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585c:	2b00      	cmp	r3, #0
 800585e:	d114      	bne.n	800588a <HAL_SPI_TransmitReceive+0x442>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f939 	bl	8005ad8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800586c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e121      	b.n	8005ace <HAL_SPI_TransmitReceive+0x686>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800588a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800588c:	2b00      	cmp	r3, #0
 800588e:	f47f af3b 	bne.w	8005708 <HAL_SPI_TransmitReceive+0x2c0>
 8005892:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005894:	2b00      	cmp	r3, #0
 8005896:	f47f af37 	bne.w	8005708 <HAL_SPI_TransmitReceive+0x2c0>
 800589a:	e0f2      	b.n	8005a82 <HAL_SPI_TransmitReceive+0x63a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d121      	bne.n	80058ee <HAL_SPI_TransmitReceive+0x4a6>
 80058aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01e      	beq.n	80058ee <HAL_SPI_TransmitReceive+0x4a6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80058b0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80058b2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80058b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d218      	bcs.n	80058ee <HAL_SPI_TransmitReceive+0x4a6>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3320      	adds	r3, #32
 80058c6:	7812      	ldrb	r2, [r2, #0]
 80058c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80058da:	b29b      	uxth	r3, r3
 80058dc:	3b01      	subs	r3, #1
 80058de:	b29a      	uxth	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80058ec:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80058f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 80ba 	beq.w	8005a72 <HAL_SPI_TransmitReceive+0x62a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b01      	cmp	r3, #1
 800590a:	d11b      	bne.n	8005944 <HAL_SPI_TransmitReceive+0x4fc>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005918:	7812      	ldrb	r2, [r2, #0]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800592e:	b29b      	uxth	r3, r3
 8005930:	3b01      	subs	r3, #1
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005940:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005942:	e096      	b.n	8005a72 <HAL_SPI_TransmitReceive+0x62a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005944:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005946:	8bfb      	ldrh	r3, [r7, #30]
 8005948:	429a      	cmp	r2, r3
 800594a:	d24a      	bcs.n	80059e2 <HAL_SPI_TransmitReceive+0x59a>
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d045      	beq.n	80059e2 <HAL_SPI_TransmitReceive+0x59a>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005962:	7812      	ldrb	r2, [r2, #0]
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800597e:	7812      	ldrb	r2, [r2, #0]
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800599a:	7812      	ldrb	r2, [r2, #0]
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059b6:	7812      	ldrb	r2, [r2, #0]
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b04      	subs	r3, #4
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80059de:	853b      	strh	r3, [r7, #40]	@ 0x28
 80059e0:	e047      	b.n	8005a72 <HAL_SPI_TransmitReceive+0x62a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80059e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d820      	bhi.n	8005a2a <HAL_SPI_TransmitReceive+0x5e2>
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d01b      	beq.n	8005a2a <HAL_SPI_TransmitReceive+0x5e2>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059fe:	7812      	ldrb	r2, [r2, #0]
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005a26:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a28:	e023      	b.n	8005a72 <HAL_SPI_TransmitReceive+0x62a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a2a:	f7fb ff6b 	bl	8001904 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d803      	bhi.n	8005a42 <HAL_SPI_TransmitReceive+0x5fa>
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d102      	bne.n	8005a48 <HAL_SPI_TransmitReceive+0x600>
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d114      	bne.n	8005a72 <HAL_SPI_TransmitReceive+0x62a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f845 	bl	8005ad8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e02d      	b.n	8005ace <HAL_SPI_TransmitReceive+0x686>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f47f af11 	bne.w	800589c <HAL_SPI_TransmitReceive+0x454>
 8005a7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f47f af0d 	bne.w	800589c <HAL_SPI_TransmitReceive+0x454>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a88:	2200      	movs	r2, #0
 8005a8a:	2108      	movs	r1, #8
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 f8c3 	bl	8005c18 <SPI_WaitOnFlagUntilTimeout>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d007      	beq.n	8005aa8 <HAL_SPI_TransmitReceive+0x660>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a9e:	f043 0220 	orr.w	r2, r3, #32
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f815 	bl	8005ad8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <HAL_SPI_TransmitReceive+0x684>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <HAL_SPI_TransmitReceive+0x686>
  }
  else
  {
    return HAL_OK;
 8005acc:	2300      	movs	r3, #0
  }
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3730      	adds	r7, #48	@ 0x30
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop

08005ad8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0208 	orr.w	r2, r2, #8
 8005af6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0210 	orr.w	r2, r2, #16
 8005b06:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0201 	bic.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005b3a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d014      	beq.n	8005b72 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 0320 	and.w	r3, r3, #32
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00f      	beq.n	8005b72 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	699a      	ldr	r2, [r3, #24]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0220 	orr.w	r2, r2, #32
 8005b70:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d014      	beq.n	8005ba8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00f      	beq.n	8005ba8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b8e:	f043 0204 	orr.w	r2, r3, #4
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ba6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00f      	beq.n	8005bd2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bb8:	f043 0201 	orr.w	r2, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699a      	ldr	r2, [r3, #24]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bd0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00f      	beq.n	8005bfc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005be2:	f043 0208 	orr.w	r2, r3, #8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bfa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8005c0c:	bf00      	nop
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	4613      	mov	r3, r2
 8005c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005c28:	e010      	b.n	8005c4c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c2a:	f7fb fe6b 	bl	8001904 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d803      	bhi.n	8005c42 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	d102      	bne.n	8005c48 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e00f      	b.n	8005c6c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	4013      	ands	r3, r2
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2301      	moveq	r3, #1
 8005c5e:	2300      	movne	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d0df      	beq.n	8005c2a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	3307      	adds	r3, #7
 8005c92:	08db      	lsrs	r3, r3, #3
 8005c94:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	fb02 f303 	mul.w	r3, r2, r3
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e049      	b.n	8005d50 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d106      	bne.n	8005cd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f841 	bl	8005d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f000 fa0b 	bl	8006104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d001      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e03b      	b.n	8005dfc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a19      	ldr	r2, [pc, #100]	@ (8005e08 <HAL_TIM_Base_Start_IT+0x9c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_TIM_Base_Start_IT+0x4e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dae:	d004      	beq.n	8005dba <HAL_TIM_Base_Start_IT+0x4e>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a15      	ldr	r2, [pc, #84]	@ (8005e0c <HAL_TIM_Base_Start_IT+0xa0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d115      	bne.n	8005de6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	4b13      	ldr	r3, [pc, #76]	@ (8005e10 <HAL_TIM_Base_Start_IT+0xa4>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b06      	cmp	r3, #6
 8005dca:	d015      	beq.n	8005df8 <HAL_TIM_Base_Start_IT+0x8c>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd2:	d011      	beq.n	8005df8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de4:	e008      	b.n	8005df8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0201 	orr.w	r2, r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	e000      	b.n	8005dfa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	40012c00 	.word	0x40012c00
 8005e0c:	40000400 	.word	0x40000400
 8005e10:	00010007 	.word	0x00010007

08005e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d020      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01b      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0202 	mvn.w	r2, #2
 8005e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f931 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005e64:	e005      	b.n	8005e72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f923 	bl	80060b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f934 	bl	80060da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d020      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01b      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0204 	mvn.w	r2, #4
 8005e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f90b 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005eb0:	e005      	b.n	8005ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f8fd 	bl	80060b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f90e 	bl	80060da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d020      	beq.n	8005f10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01b      	beq.n	8005f10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0208 	mvn.w	r2, #8
 8005ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2204      	movs	r2, #4
 8005ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f8e5 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005efc:	e005      	b.n	8005f0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f8d7 	bl	80060b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f8e8 	bl	80060da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 0310 	and.w	r3, r3, #16
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d020      	beq.n	8005f5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 0310 	and.w	r3, r3, #16
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01b      	beq.n	8005f5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0210 	mvn.w	r2, #16
 8005f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2208      	movs	r2, #8
 8005f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f8bf 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005f48:	e005      	b.n	8005f56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f8b1 	bl	80060b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f8c2 	bl	80060da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00c      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d007      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0201 	mvn.w	r2, #1
 8005f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fa fea4 	bl	8000cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d104      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00c      	beq.n	8005fae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f91b 	bl	80061e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00c      	beq.n	8005fd2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d007      	beq.n	8005fd2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f913 	bl	80061f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00c      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f87c 	bl	80060ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00c      	beq.n	800601a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d007      	beq.n	800601a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f06f 0220 	mvn.w	r2, #32
 8006012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f8db 	bl	80061d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00c      	beq.n	800603e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f8e7 	bl	800620c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00c      	beq.n	8006062 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800605a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f8df 	bl	8006220 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00c      	beq.n	8006086 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800607e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f8d7 	bl	8006234 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00c      	beq.n	80060aa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80060a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f8cf 	bl	8006248 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a2c      	ldr	r2, [pc, #176]	@ (80061c8 <TIM_Base_SetConfig+0xc4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <TIM_Base_SetConfig+0x28>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006122:	d003      	beq.n	800612c <TIM_Base_SetConfig+0x28>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a29      	ldr	r2, [pc, #164]	@ (80061cc <TIM_Base_SetConfig+0xc8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d108      	bne.n	800613e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a21      	ldr	r2, [pc, #132]	@ (80061c8 <TIM_Base_SetConfig+0xc4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d007      	beq.n	8006156 <TIM_Base_SetConfig+0x52>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800614c:	d003      	beq.n	8006156 <TIM_Base_SetConfig+0x52>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a1e      	ldr	r2, [pc, #120]	@ (80061cc <TIM_Base_SetConfig+0xc8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d108      	bne.n	8006168 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a0e      	ldr	r2, [pc, #56]	@ (80061c8 <TIM_Base_SetConfig+0xc4>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d103      	bne.n	800619c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d105      	bne.n	80061ba <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f023 0201 	bic.w	r2, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	611a      	str	r2, [r3, #16]
  }
}
 80061ba:	bf00      	nop
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40012c00 	.word	0x40012c00
 80061cc:	40000400 	.word	0x40000400

080061d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e042      	b.n	80062f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7fa fe85 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2224      	movs	r2, #36	@ 0x24
 800628a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0201 	bic.w	r2, r2, #1
 800629c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa44 	bl	8006734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f8c3 	bl	8006438 <UART_SetConfig>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e01b      	b.n	80062f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fac3 	bl	8006878 <UART_CheckIdleState>
 80062f2:	4603      	mov	r3, r0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08a      	sub	sp, #40	@ 0x28
 8006300:	af02      	add	r7, sp, #8
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	4613      	mov	r3, r2
 800630a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006312:	2b20      	cmp	r3, #32
 8006314:	f040 808b 	bne.w	800642e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <HAL_UART_Transmit+0x28>
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e083      	b.n	8006430 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006332:	2b80      	cmp	r3, #128	@ 0x80
 8006334:	d107      	bne.n	8006346 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006344:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2221      	movs	r2, #33	@ 0x21
 8006352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006356:	f7fb fad5 	bl	8001904 <HAL_GetTick>
 800635a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	88fa      	ldrh	r2, [r7, #6]
 8006360:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	88fa      	ldrh	r2, [r7, #6]
 8006368:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006374:	d108      	bne.n	8006388 <HAL_UART_Transmit+0x8c>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d104      	bne.n	8006388 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800637e:	2300      	movs	r3, #0
 8006380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	e003      	b.n	8006390 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800638c:	2300      	movs	r3, #0
 800638e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006390:	e030      	b.n	80063f4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2200      	movs	r2, #0
 800639a:	2180      	movs	r1, #128	@ 0x80
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 fb15 	bl	80069cc <UART_WaitOnFlagUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e03d      	b.n	8006430 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10b      	bne.n	80063d2 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	3302      	adds	r3, #2
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	e007      	b.n	80063e2 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	781a      	ldrb	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	3301      	adds	r3, #1
 80063e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	3b01      	subs	r3, #1
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1c8      	bne.n	8006392 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2200      	movs	r2, #0
 8006408:	2140      	movs	r1, #64	@ 0x40
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 fade 	bl	80069cc <UART_WaitOnFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d005      	beq.n	8006422 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2220      	movs	r2, #32
 800641a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e006      	b.n	8006430 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e000      	b.n	8006430 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800642e:	2302      	movs	r3, #2
  }
}
 8006430:	4618      	mov	r0, r3
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800643c:	b094      	sub	sp, #80	@ 0x50
 800643e:	af00      	add	r7, sp, #0
 8006440:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	431a      	orrs	r2, r3
 8006452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	431a      	orrs	r2, r3
 8006458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	4313      	orrs	r3, r2
 800645e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	498a      	ldr	r1, [pc, #552]	@ (8006690 <UART_SetConfig+0x258>)
 8006468:	4019      	ands	r1, r3
 800646a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006470:	430b      	orrs	r3, r1
 8006472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800647e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006480:	68d9      	ldr	r1, [r3, #12]
 8006482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	ea40 0301 	orr.w	r3, r0, r1
 800648a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800648c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4b7f      	ldr	r3, [pc, #508]	@ (8006694 <UART_SetConfig+0x25c>)
 8006498:	429a      	cmp	r2, r3
 800649a:	d004      	beq.n	80064a6 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800649c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649e:	6a1a      	ldr	r2, [r3, #32]
 80064a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064a2:	4313      	orrs	r3, r2
 80064a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80064b0:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80064b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064ba:	430b      	orrs	r3, r1
 80064bc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c4:	f023 000f 	bic.w	r0, r3, #15
 80064c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80064cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	ea40 0301 	orr.w	r3, r0, r1
 80064d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	4b6f      	ldr	r3, [pc, #444]	@ (8006698 <UART_SetConfig+0x260>)
 80064dc:	429a      	cmp	r2, r3
 80064de:	d102      	bne.n	80064e6 <UART_SetConfig+0xae>
 80064e0:	2301      	movs	r3, #1
 80064e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064e4:	e01a      	b.n	800651c <UART_SetConfig+0xe4>
 80064e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	4b6c      	ldr	r3, [pc, #432]	@ (800669c <UART_SetConfig+0x264>)
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d102      	bne.n	80064f6 <UART_SetConfig+0xbe>
 80064f0:	2302      	movs	r3, #2
 80064f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064f4:	e012      	b.n	800651c <UART_SetConfig+0xe4>
 80064f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	4b69      	ldr	r3, [pc, #420]	@ (80066a0 <UART_SetConfig+0x268>)
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d102      	bne.n	8006506 <UART_SetConfig+0xce>
 8006500:	2304      	movs	r3, #4
 8006502:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006504:	e00a      	b.n	800651c <UART_SetConfig+0xe4>
 8006506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4b62      	ldr	r3, [pc, #392]	@ (8006694 <UART_SetConfig+0x25c>)
 800650c:	429a      	cmp	r2, r3
 800650e:	d103      	bne.n	8006518 <UART_SetConfig+0xe0>
 8006510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006514:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006516:	e001      	b.n	800651c <UART_SetConfig+0xe4>
 8006518:	2300      	movs	r3, #0
 800651a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	4b5c      	ldr	r3, [pc, #368]	@ (8006694 <UART_SetConfig+0x25c>)
 8006522:	429a      	cmp	r2, r3
 8006524:	d171      	bne.n	800660a <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006528:	2200      	movs	r2, #0
 800652a:	623b      	str	r3, [r7, #32]
 800652c:	627a      	str	r2, [r7, #36]	@ 0x24
 800652e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006532:	f7fd feb3 	bl	800429c <HAL_RCCEx_GetPeriphCLKFreq>
 8006536:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 80e2 	beq.w	8006704 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006544:	4a57      	ldr	r2, [pc, #348]	@ (80066a4 <UART_SetConfig+0x26c>)
 8006546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800654a:	461a      	mov	r2, r3
 800654c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800654e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006552:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	4613      	mov	r3, r2
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	4413      	add	r3, r2
 800655e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006560:	429a      	cmp	r2, r3
 8006562:	d305      	bcc.n	8006570 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800656a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800656c:	429a      	cmp	r2, r3
 800656e:	d903      	bls.n	8006578 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006576:	e0c5      	b.n	8006704 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800657a:	2200      	movs	r2, #0
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	61fa      	str	r2, [r7, #28]
 8006580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006584:	4a47      	ldr	r2, [pc, #284]	@ (80066a4 <UART_SetConfig+0x26c>)
 8006586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800658a:	b29b      	uxth	r3, r3
 800658c:	2200      	movs	r2, #0
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	617a      	str	r2, [r7, #20]
 8006592:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006596:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800659a:	f7f9 fe81 	bl	80002a0 <__aeabi_uldivmod>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4610      	mov	r0, r2
 80065a4:	4619      	mov	r1, r3
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	f04f 0300 	mov.w	r3, #0
 80065ae:	020b      	lsls	r3, r1, #8
 80065b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065b4:	0202      	lsls	r2, r0, #8
 80065b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065b8:	6849      	ldr	r1, [r1, #4]
 80065ba:	0849      	lsrs	r1, r1, #1
 80065bc:	2000      	movs	r0, #0
 80065be:	460c      	mov	r4, r1
 80065c0:	4605      	mov	r5, r0
 80065c2:	eb12 0804 	adds.w	r8, r2, r4
 80065c6:	eb43 0905 	adc.w	r9, r3, r5
 80065ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	60fa      	str	r2, [r7, #12]
 80065d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065d8:	4640      	mov	r0, r8
 80065da:	4649      	mov	r1, r9
 80065dc:	f7f9 fe60 	bl	80002a0 <__aeabi_uldivmod>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4613      	mov	r3, r2
 80065e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065ee:	d308      	bcc.n	8006602 <UART_SetConfig+0x1ca>
 80065f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065f6:	d204      	bcs.n	8006602 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 80065f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80065fe:	60da      	str	r2, [r3, #12]
 8006600:	e080      	b.n	8006704 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006608:	e07c      	b.n	8006704 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800660a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006612:	d149      	bne.n	80066a8 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006614:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006616:	2200      	movs	r2, #0
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006620:	f7fd fe3c 	bl	800429c <HAL_RCCEx_GetPeriphCLKFreq>
 8006624:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d06b      	beq.n	8006704 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800662c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006630:	4a1c      	ldr	r2, [pc, #112]	@ (80066a4 <UART_SetConfig+0x26c>)
 8006632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006636:	461a      	mov	r2, r3
 8006638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800663a:	fbb3 f3f2 	udiv	r3, r3, r2
 800663e:	005a      	lsls	r2, r3, #1
 8006640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	085b      	lsrs	r3, r3, #1
 8006646:	441a      	add	r2, r3
 8006648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006650:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006654:	2b0f      	cmp	r3, #15
 8006656:	d916      	bls.n	8006686 <UART_SetConfig+0x24e>
 8006658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800665a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800665e:	d212      	bcs.n	8006686 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006662:	b29b      	uxth	r3, r3
 8006664:	f023 030f 	bic.w	r3, r3, #15
 8006668:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800666a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	b29b      	uxth	r3, r3
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	b29a      	uxth	r2, r3
 8006676:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006678:	4313      	orrs	r3, r2
 800667a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800667c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006682:	60da      	str	r2, [r3, #12]
 8006684:	e03e      	b.n	8006704 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800668c:	e03a      	b.n	8006704 <UART_SetConfig+0x2cc>
 800668e:	bf00      	nop
 8006690:	cfff69f3 	.word	0xcfff69f3
 8006694:	44002400 	.word	0x44002400
 8006698:	40013800 	.word	0x40013800
 800669c:	40004400 	.word	0x40004400
 80066a0:	40004800 	.word	0x40004800
 80066a4:	0800d2b8 	.word	0x0800d2b8
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80066a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066aa:	2200      	movs	r2, #0
 80066ac:	469a      	mov	sl, r3
 80066ae:	4693      	mov	fp, r2
 80066b0:	4650      	mov	r0, sl
 80066b2:	4659      	mov	r1, fp
 80066b4:	f7fd fdf2 	bl	800429c <HAL_RCCEx_GetPeriphCLKFreq>
 80066b8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80066ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d021      	beq.n	8006704 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006730 <UART_SetConfig+0x2f8>)
 80066c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ca:	461a      	mov	r2, r3
 80066cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80066d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	085b      	lsrs	r3, r3, #1
 80066d8:	441a      	add	r2, r3
 80066da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e6:	2b0f      	cmp	r3, #15
 80066e8:	d909      	bls.n	80066fe <UART_SetConfig+0x2c6>
 80066ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066f0:	d205      	bcs.n	80066fe <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	60da      	str	r2, [r3, #12]
 80066fc:	e002      	b.n	8006704 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006706:	2201      	movs	r2, #1
 8006708:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800670c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670e:	2201      	movs	r2, #1
 8006710:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006716:	2200      	movs	r2, #0
 8006718:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800671a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671c:	2200      	movs	r2, #0
 800671e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006720:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006724:	4618      	mov	r0, r3
 8006726:	3750      	adds	r7, #80	@ 0x50
 8006728:	46bd      	mov	sp, r7
 800672a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800672e:	bf00      	nop
 8006730:	0800d2b8 	.word	0x0800d2b8

08006734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a6:	f003 0304 	and.w	r3, r3, #4
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01a      	beq.n	800684a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006832:	d10a      	bne.n	800684a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	605a      	str	r2, [r3, #4]
  }
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b098      	sub	sp, #96	@ 0x60
 800687c:	af02      	add	r7, sp, #8
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006888:	f7fb f83c 	bl	8001904 <HAL_GetTick>
 800688c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b08      	cmp	r3, #8
 800689a:	d12f      	bne.n	80068fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800689c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068a4:	2200      	movs	r2, #0
 80068a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f88e 	bl	80069cc <UART_WaitOnFlagUntilTimeout>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d022      	beq.n	80068fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80068d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e6      	bne.n	80068b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e063      	b.n	80069c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b04      	cmp	r3, #4
 8006908:	d149      	bne.n	800699e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800690a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006912:	2200      	movs	r2, #0
 8006914:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f857 	bl	80069cc <UART_WaitOnFlagUntilTimeout>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d03c      	beq.n	800699e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	623b      	str	r3, [r7, #32]
   return(result);
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006942:	633b      	str	r3, [r7, #48]	@ 0x30
 8006944:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e6      	bne.n	8006924 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3308      	adds	r3, #8
 800695c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	60fb      	str	r3, [r7, #12]
   return(result);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3308      	adds	r3, #8
 8006974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006976:	61fa      	str	r2, [r7, #28]
 8006978:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	69b9      	ldr	r1, [r7, #24]
 800697c:	69fa      	ldr	r2, [r7, #28]
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	617b      	str	r3, [r7, #20]
   return(result);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e5      	bne.n	8006956 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e012      	b.n	80069c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3758      	adds	r7, #88	@ 0x58
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	4613      	mov	r3, r2
 80069da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069dc:	e04f      	b.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d04b      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e6:	f7fa ff8d 	bl	8001904 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d302      	bcc.n	80069fc <UART_WaitOnFlagUntilTimeout+0x30>
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e04e      	b.n	8006a9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d037      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b80      	cmp	r3, #128	@ 0x80
 8006a12:	d034      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b40      	cmp	r3, #64	@ 0x40
 8006a18:	d031      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d110      	bne.n	8006a4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 f838 	bl	8006aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2208      	movs	r2, #8
 8006a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e029      	b.n	8006a9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a58:	d111      	bne.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 f81e 	bl	8006aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e00f      	b.n	8006a9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4013      	ands	r3, r2
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	bf0c      	ite	eq
 8006a8e:	2301      	moveq	r3, #1
 8006a90:	2300      	movne	r3, #0
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d0a0      	beq.n	80069de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b095      	sub	sp, #84	@ 0x54
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006acc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ace:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ad2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e6      	bne.n	8006aae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3308      	adds	r3, #8
 8006ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006af6:	f023 0301 	bic.w	r3, r3, #1
 8006afa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3308      	adds	r3, #8
 8006b02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e3      	bne.n	8006ae0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d118      	bne.n	8006b52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f023 0310 	bic.w	r3, r3, #16
 8006b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b3e:	61bb      	str	r3, [r7, #24]
 8006b40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	6979      	ldr	r1, [r7, #20]
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e6      	bne.n	8006b20 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b66:	bf00      	nop
 8006b68:	3754      	adds	r7, #84	@ 0x54
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d101      	bne.n	8006b88 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b84:	2302      	movs	r3, #2
 8006b86:	e027      	b.n	8006bd8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2224      	movs	r2, #36	@ 0x24
 8006b94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0201 	bic.w	r2, r2, #1
 8006bae:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006bb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e02d      	b.n	8006c58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2224      	movs	r2, #36	@ 0x24
 8006c08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0201 	bic.w	r2, r2, #1
 8006c22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f84f 	bl	8006cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d101      	bne.n	8006c78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c74:	2302      	movs	r3, #2
 8006c76:	e02d      	b.n	8006cd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2224      	movs	r2, #36	@ 0x24
 8006c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0201 	bic.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f811 	bl	8006cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d108      	bne.n	8006cfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cfc:	e031      	b.n	8006d62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cfe:	2308      	movs	r3, #8
 8006d00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d02:	2308      	movs	r3, #8
 8006d04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	0e5b      	lsrs	r3, r3, #25
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	0f5b      	lsrs	r3, r3, #29
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	7b3a      	ldrb	r2, [r7, #12]
 8006d2a:	4911      	ldr	r1, [pc, #68]	@ (8006d70 <UARTEx_SetNbDataToProcess+0x94>)
 8006d2c:	5c8a      	ldrb	r2, [r1, r2]
 8006d2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d32:	7b3a      	ldrb	r2, [r7, #12]
 8006d34:	490f      	ldr	r1, [pc, #60]	@ (8006d74 <UARTEx_SetNbDataToProcess+0x98>)
 8006d36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d38:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	7b7a      	ldrb	r2, [r7, #13]
 8006d48:	4909      	ldr	r1, [pc, #36]	@ (8006d70 <UARTEx_SetNbDataToProcess+0x94>)
 8006d4a:	5c8a      	ldrb	r2, [r1, r2]
 8006d4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d50:	7b7a      	ldrb	r2, [r7, #13]
 8006d52:	4908      	ldr	r1, [pc, #32]	@ (8006d74 <UARTEx_SetNbDataToProcess+0x98>)
 8006d54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d56:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d62:	bf00      	nop
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	0800d2d0 	.word	0x0800d2d0
 8006d74:	0800d2d8 	.word	0x0800d2d8

08006d78 <__NVIC_SetPriority>:
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	6039      	str	r1, [r7, #0]
 8006d82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	db0a      	blt.n	8006da2 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	490c      	ldr	r1, [pc, #48]	@ (8006dc4 <__NVIC_SetPriority+0x4c>)
 8006d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d96:	0112      	lsls	r2, r2, #4
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	440b      	add	r3, r1
 8006d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006da0:	e00a      	b.n	8006db8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	4908      	ldr	r1, [pc, #32]	@ (8006dc8 <__NVIC_SetPriority+0x50>)
 8006da8:	88fb      	ldrh	r3, [r7, #6]
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	3b04      	subs	r3, #4
 8006db0:	0112      	lsls	r2, r2, #4
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	440b      	add	r3, r1
 8006db6:	761a      	strb	r2, [r3, #24]
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	e000e100 	.word	0xe000e100
 8006dc8:	e000ed00 	.word	0xe000ed00

08006dcc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8006dd0:	4b05      	ldr	r3, [pc, #20]	@ (8006de8 <SysTick_Handler+0x1c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006dd4:	f001 fba6 	bl	8008524 <xTaskGetSchedulerState>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d001      	beq.n	8006de2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006dde:	f001 ff51 	bl	8008c84 <xPortSysTickHandler>
  }
}
 8006de2:	bf00      	nop
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	e000e010 	.word	0xe000e010

08006dec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8006df0:	2100      	movs	r1, #0
 8006df2:	f06f 0004 	mvn.w	r0, #4
 8006df6:	f7ff ffbf 	bl	8006d78 <__NVIC_SetPriority>
#endif
}
 8006dfa:	bf00      	nop
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b086      	sub	sp, #24
 8006e02:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e08:	f3ef 8305 	mrs	r3, IPSR
 8006e0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e0e:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8006e14:	2301      	movs	r3, #1
 8006e16:	617b      	str	r3, [r7, #20]
 8006e18:	e013      	b.n	8006e42 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8006e1a:	f001 fb83 	bl	8008524 <xTaskGetSchedulerState>
 8006e1e:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d00d      	beq.n	8006e42 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e26:	f3ef 8310 	mrs	r3, PRIMASK
 8006e2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d105      	bne.n	8006e3e <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e32:	f3ef 8311 	mrs	r3, BASEPRI
 8006e36:	607b      	str	r3, [r7, #4]
  return(result);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8006e42:	697b      	ldr	r3, [r7, #20]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8006e52:	f7ff ffd4 	bl	8006dfe <IRQ_Context>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8006e5c:	f06f 0305 	mvn.w	r3, #5
 8006e60:	607b      	str	r3, [r7, #4]
 8006e62:	e012      	b.n	8006e8a <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8006e64:	f001 fb5e 	bl	8008524 <xTaskGetSchedulerState>
 8006e68:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d109      	bne.n	8006e84 <osKernelInitialize+0x38>
 8006e70:	4b08      	ldr	r3, [pc, #32]	@ (8006e94 <osKernelInitialize+0x48>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d105      	bne.n	8006e84 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e78:	4b06      	ldr	r3, [pc, #24]	@ (8006e94 <osKernelInitialize+0x48>)
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	607b      	str	r3, [r7, #4]
 8006e82:	e002      	b.n	8006e8a <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8006e84:	f04f 33ff 	mov.w	r3, #4294967295
 8006e88:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8006e8a:	687b      	ldr	r3, [r7, #4]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20000368 	.word	0x20000368

08006e98 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8006e9e:	f7ff ffae 	bl	8006dfe <IRQ_Context>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <osKernelStart+0x18>
    stat = osErrorISR;
 8006ea8:	f06f 0305 	mvn.w	r3, #5
 8006eac:	607b      	str	r3, [r7, #4]
 8006eae:	e016      	b.n	8006ede <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8006eb0:	f001 fb38 	bl	8008524 <xTaskGetSchedulerState>
 8006eb4:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d10d      	bne.n	8006ed8 <osKernelStart+0x40>
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee8 <osKernelStart+0x50>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d109      	bne.n	8006ed8 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ec4:	f7ff ff92 	bl	8006dec <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8006ec8:	4b07      	ldr	r3, [pc, #28]	@ (8006ee8 <osKernelStart+0x50>)
 8006eca:	2202      	movs	r2, #2
 8006ecc:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ece:	f000 fdf7 	bl	8007ac0 <vTaskStartScheduler>
      stat = osOK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	607b      	str	r3, [r7, #4]
 8006ed6:	e002      	b.n	8006ede <osKernelStart+0x46>
    } else {
      stat = osError;
 8006ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8006edc:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8006ede:	687b      	ldr	r3, [r7, #4]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	20000368 	.word	0x20000368

08006eec <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08e      	sub	sp, #56	@ 0x38
 8006ef0:	af04      	add	r7, sp, #16
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8006efc:	f7ff ff7f 	bl	8006dfe <IRQ_Context>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d17e      	bne.n	8007004 <osThreadNew+0x118>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d07b      	beq.n	8007004 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8006f0c:	2380      	movs	r3, #128	@ 0x80
 8006f0e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006f10:	2318      	movs	r3, #24
 8006f12:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006f18:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d045      	beq.n	8006fb0 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <osThreadNew+0x46>
        name = attr->name;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d008      	beq.n	8006f58 <osThreadNew+0x6c>
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	2b38      	cmp	r3, #56	@ 0x38
 8006f4a:	d805      	bhi.n	8006f58 <osThreadNew+0x6c>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e054      	b.n	8007006 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	089b      	lsrs	r3, r3, #2
 8006f6a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00e      	beq.n	8006f92 <osThreadNew+0xa6>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	2b5b      	cmp	r3, #91	@ 0x5b
 8006f7a:	d90a      	bls.n	8006f92 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d006      	beq.n	8006f92 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	61bb      	str	r3, [r7, #24]
 8006f90:	e010      	b.n	8006fb4 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10c      	bne.n	8006fb4 <osThreadNew+0xc8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d108      	bne.n	8006fb4 <osThreadNew+0xc8>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	e001      	b.n	8006fb4 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d110      	bne.n	8006fdc <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fc2:	9202      	str	r2, [sp, #8]
 8006fc4:	9301      	str	r3, [sp, #4]
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	6a3a      	ldr	r2, [r7, #32]
 8006fce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f000 fba5 	bl	8007720 <xTaskCreateStatic>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	617b      	str	r3, [r7, #20]
 8006fda:	e013      	b.n	8007004 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d110      	bne.n	8007004 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	f107 0314 	add.w	r3, r7, #20
 8006fea:	9301      	str	r3, [sp, #4]
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 fbe0 	bl	80077ba <xTaskCreate>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d001      	beq.n	8007004 <osThreadNew+0x118>
            hTask = NULL;
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8007004:	697b      	ldr	r3, [r7, #20]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3728      	adds	r7, #40	@ 0x28
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8007016:	f7ff fef2 	bl	8006dfe <IRQ_Context>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <osDelay+0x1a>
    stat = osErrorISR;
 8007020:	f06f 0305 	mvn.w	r3, #5
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	e007      	b.n	8007038 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8007028:	2300      	movs	r3, #0
 800702a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <osDelay+0x2a>
      vTaskDelay(ticks);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fd1e 	bl	8007a74 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8007038:	68fb      	ldr	r3, [r7, #12]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4a07      	ldr	r2, [pc, #28]	@ (8007070 <vApplicationGetIdleTaskMemory+0x2c>)
 8007054:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	4a06      	ldr	r2, [pc, #24]	@ (8007074 <vApplicationGetIdleTaskMemory+0x30>)
 800705a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2280      	movs	r2, #128	@ 0x80
 8007060:	601a      	str	r2, [r3, #0]
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	2000036c 	.word	0x2000036c
 8007074:	200003c8 	.word	0x200003c8

08007078 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4a07      	ldr	r2, [pc, #28]	@ (80070a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007088:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	4a06      	ldr	r2, [pc, #24]	@ (80070a8 <vApplicationGetTimerTaskMemory+0x30>)
 800708e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2280      	movs	r2, #128	@ 0x80
 8007094:	601a      	str	r2, [r3, #0]
}
 8007096:	bf00      	nop
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	200005c8 	.word	0x200005c8
 80070a8:	20000624 	.word	0x20000624

080070ac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f103 0208 	add.w	r2, r3, #8
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f04f 32ff 	mov.w	r2, #4294967295
 80070c4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f103 0208 	add.w	r2, r3, #8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f103 0208 	add.w	r2, r3, #8
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711c:	d103      	bne.n	8007126 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	e00c      	b.n	8007140 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3308      	adds	r3, #8
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	e002      	b.n	8007134 <vListInsert+0x2e>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	429a      	cmp	r2, r3
 800713e:	d2f6      	bcs.n	800712e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	601a      	str	r2, [r3, #0]
}
 800716c:	bf00      	nop
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6892      	ldr	r2, [r2, #8]
 800718e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6852      	ldr	r2, [r2, #4]
 8007198:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d103      	bne.n	80071ac <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	1e5a      	subs	r2, r3, #1
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80071d6:	2301      	movs	r3, #1
 80071d8:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d103      	bne.n	80071ec <xQueueGenericReset+0x20>
 80071e4:	f001 feb8 	bl	8008f58 <ulSetInterruptMask>
 80071e8:	bf00      	nop
 80071ea:	e7fd      	b.n	80071e8 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d057      	beq.n	80072a2 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d053      	beq.n	80072a2 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007202:	2100      	movs	r1, #0
 8007204:	fba3 2302 	umull	r2, r3, r3, r2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d000      	beq.n	800720e <xQueueGenericReset+0x42>
 800720c:	2101      	movs	r1, #1
 800720e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8007210:	2b00      	cmp	r3, #0
 8007212:	d146      	bne.n	80072a2 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 8007214:	f001 fd0a 	bl	8008c2c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007220:	68b9      	ldr	r1, [r7, #8]
 8007222:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007224:	fb01 f303 	mul.w	r3, r1, r3
 8007228:	441a      	add	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2200      	movs	r2, #0
 8007232:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007244:	3b01      	subs	r3, #1
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800724a:	fb01 f303 	mul.w	r3, r1, r3
 800724e:	441a      	add	r2, r3
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	22ff      	movs	r2, #255	@ 0xff
 8007258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	22ff      	movs	r2, #255	@ 0xff
 8007260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10e      	bne.n	8007288 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d014      	beq.n	800729c <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	3310      	adds	r3, #16
 8007276:	4618      	mov	r0, r3
 8007278:	f000 ff4a 	bl	8008110 <xTaskRemoveFromEventList>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00c      	beq.n	800729c <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007282:	f001 fcc1 	bl	8008c08 <vPortYield>
 8007286:	e009      	b.n	800729c <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	3310      	adds	r3, #16
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff ff0d 	bl	80070ac <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	3324      	adds	r3, #36	@ 0x24
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff ff08 	bl	80070ac <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800729c:	f001 fcd8 	bl	8008c50 <vPortExitCritical>
 80072a0:	e001      	b.n	80072a6 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d103      	bne.n	80072b4 <xQueueGenericReset+0xe8>
 80072ac:	f001 fe54 	bl	8008f58 <ulSetInterruptMask>
 80072b0:	bf00      	nop
 80072b2:	e7fd      	b.n	80072b0 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80072b4:	68fb      	ldr	r3, [r7, #12]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80072be:	b580      	push	{r7, lr}
 80072c0:	b088      	sub	sp, #32
 80072c2:	af02      	add	r7, sp, #8
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	607a      	str	r2, [r7, #4]
 80072ca:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80072cc:	2300      	movs	r3, #0
 80072ce:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d103      	bne.n	80072de <xQueueGenericCreateStatic+0x20>
 80072d6:	f001 fe3f 	bl	8008f58 <ulSetInterruptMask>
 80072da:	bf00      	nop
 80072dc:	e7fd      	b.n	80072da <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d029      	beq.n	8007338 <xQueueGenericCreateStatic+0x7a>
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d026      	beq.n	8007338 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d020      	beq.n	8007338 <xQueueGenericCreateStatic+0x7a>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d102      	bne.n	8007302 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d11a      	bne.n	8007338 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8007302:	2350      	movs	r3, #80	@ 0x50
 8007304:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	2b50      	cmp	r3, #80	@ 0x50
 800730a:	d003      	beq.n	8007314 <xQueueGenericCreateStatic+0x56>
 800730c:	f001 fe24 	bl	8008f58 <ulSetInterruptMask>
 8007310:	bf00      	nop
 8007312:	e7fd      	b.n	8007310 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8007314:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007322:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	4613      	mov	r3, r2
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 f80d 	bl	8007350 <prvInitialiseNewQueue>
 8007336:	e006      	b.n	8007346 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d103      	bne.n	8007346 <xQueueGenericCreateStatic+0x88>
 800733e:	f001 fe0b 	bl	8008f58 <ulSetInterruptMask>
 8007342:	bf00      	nop
 8007344:	e7fd      	b.n	8007342 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8007346:	697b      	ldr	r3, [r7, #20]
    }
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d103      	bne.n	800736c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	e002      	b.n	8007372 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800737e:	2101      	movs	r1, #1
 8007380:	69b8      	ldr	r0, [r7, #24]
 8007382:	f7ff ff23 	bl	80071cc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	78fa      	ldrb	r2, [r7, #3]
 800738a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800738e:	bf00      	nop
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b08a      	sub	sp, #40	@ 0x28
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80073a2:	2300      	movs	r3, #0
 80073a4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d103      	bne.n	80073b8 <xQueueReceive+0x22>
 80073b0:	f001 fdd2 	bl	8008f58 <ulSetInterruptMask>
 80073b4:	bf00      	nop
 80073b6:	e7fd      	b.n	80073b4 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d103      	bne.n	80073c6 <xQueueReceive+0x30>
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <xQueueReceive+0x34>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e000      	b.n	80073cc <xQueueReceive+0x36>
 80073ca:	2300      	movs	r3, #0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d103      	bne.n	80073d8 <xQueueReceive+0x42>
 80073d0:	f001 fdc2 	bl	8008f58 <ulSetInterruptMask>
 80073d4:	bf00      	nop
 80073d6:	e7fd      	b.n	80073d4 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073d8:	f001 f8a4 	bl	8008524 <xTaskGetSchedulerState>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d102      	bne.n	80073e8 <xQueueReceive+0x52>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <xQueueReceive+0x56>
 80073e8:	2301      	movs	r3, #1
 80073ea:	e000      	b.n	80073ee <xQueueReceive+0x58>
 80073ec:	2300      	movs	r3, #0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d103      	bne.n	80073fa <xQueueReceive+0x64>
 80073f2:	f001 fdb1 	bl	8008f58 <ulSetInterruptMask>
 80073f6:	bf00      	nop
 80073f8:	e7fd      	b.n	80073f6 <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80073fa:	f001 fc17 	bl	8008c2c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007402:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d019      	beq.n	800743e <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	6a38      	ldr	r0, [r7, #32]
 800740e:	f000 f87e 	bl	800750e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	1e5a      	subs	r2, r3, #1
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d009      	beq.n	8007436 <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	3310      	adds	r3, #16
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fe72 	bl	8008110 <xTaskRemoveFromEventList>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007432:	f001 fbe9 	bl	8008c08 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8007436:	f001 fc0b 	bl	8008c50 <vPortExitCritical>
                return pdPASS;
 800743a:	2301      	movs	r3, #1
 800743c:	e063      	b.n	8007506 <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d103      	bne.n	800744c <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007444:	f001 fc04 	bl	8008c50 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8007448:	2300      	movs	r3, #0
 800744a:	e05c      	b.n	8007506 <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800744c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744e:	2b00      	cmp	r3, #0
 8007450:	d106      	bne.n	8007460 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007452:	f107 0314 	add.w	r3, r7, #20
 8007456:	4618      	mov	r0, r3
 8007458:	f000 ff28 	bl	80082ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800745c:	2301      	movs	r3, #1
 800745e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007460:	f001 fbf6 	bl	8008c50 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007464:	f000 fb88 	bl	8007b78 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007468:	f001 fbe0 	bl	8008c2c <vPortEnterCritical>
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007472:	b25b      	sxtb	r3, r3
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d103      	bne.n	8007482 <xQueueReceive+0xec>
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007488:	b25b      	sxtb	r3, r3
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748e:	d103      	bne.n	8007498 <xQueueReceive+0x102>
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007498:	f001 fbda 	bl	8008c50 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800749c:	1d3a      	adds	r2, r7, #4
 800749e:	f107 0314 	add.w	r3, r7, #20
 80074a2:	4611      	mov	r1, r2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 ff17 	bl	80082d8 <xTaskCheckForTimeOut>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d11d      	bne.n	80074ec <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074b0:	6a38      	ldr	r0, [r7, #32]
 80074b2:	f000 f8a4 	bl	80075fe <prvIsQueueEmpty>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d011      	beq.n	80074e0 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	3324      	adds	r3, #36	@ 0x24
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	4611      	mov	r1, r2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fdc7 	bl	8008058 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80074ca:	6a38      	ldr	r0, [r7, #32]
 80074cc:	f000 f845 	bl	800755a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80074d0:	f000 fb60 	bl	8007b94 <xTaskResumeAll>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d18f      	bne.n	80073fa <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 80074da:	f001 fb95 	bl	8008c08 <vPortYield>
 80074de:	e78c      	b.n	80073fa <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80074e0:	6a38      	ldr	r0, [r7, #32]
 80074e2:	f000 f83a 	bl	800755a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80074e6:	f000 fb55 	bl	8007b94 <xTaskResumeAll>
 80074ea:	e786      	b.n	80073fa <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80074ec:	6a38      	ldr	r0, [r7, #32]
 80074ee:	f000 f834 	bl	800755a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80074f2:	f000 fb4f 	bl	8007b94 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074f6:	6a38      	ldr	r0, [r7, #32]
 80074f8:	f000 f881 	bl	80075fe <prvIsQueueEmpty>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f43f af7b 	beq.w	80073fa <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8007504:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8007506:	4618      	mov	r0, r3
 8007508:	3728      	adds	r7, #40	@ 0x28
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b082      	sub	sp, #8
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d018      	beq.n	8007552 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007528:	441a      	add	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	429a      	cmp	r2, r3
 8007538:	d303      	bcc.n	8007542 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68d9      	ldr	r1, [r3, #12]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754a:	461a      	mov	r2, r3
 800754c:	6838      	ldr	r0, [r7, #0]
 800754e:	f005 f972 	bl	800c836 <memcpy>
    }
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8007562:	f001 fb63 	bl	8008c2c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800756c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800756e:	e011      	b.n	8007594 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007574:	2b00      	cmp	r3, #0
 8007576:	d012      	beq.n	800759e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3324      	adds	r3, #36	@ 0x24
 800757c:	4618      	mov	r0, r3
 800757e:	f000 fdc7 	bl	8008110 <xTaskRemoveFromEventList>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8007588:	f000 fefe 	bl	8008388 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	3b01      	subs	r3, #1
 8007590:	b2db      	uxtb	r3, r3
 8007592:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007598:	2b00      	cmp	r3, #0
 800759a:	dce9      	bgt.n	8007570 <prvUnlockQueue+0x16>
 800759c:	e000      	b.n	80075a0 <prvUnlockQueue+0x46>
                    break;
 800759e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	22ff      	movs	r2, #255	@ 0xff
 80075a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80075a8:	f001 fb52 	bl	8008c50 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80075ac:	f001 fb3e 	bl	8008c2c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075b6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80075b8:	e011      	b.n	80075de <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d012      	beq.n	80075e8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3310      	adds	r3, #16
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fda2 	bl	8008110 <xTaskRemoveFromEventList>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80075d2:	f000 fed9 	bl	8008388 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80075d6:	7bbb      	ldrb	r3, [r7, #14]
 80075d8:	3b01      	subs	r3, #1
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80075de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dce9      	bgt.n	80075ba <prvUnlockQueue+0x60>
 80075e6:	e000      	b.n	80075ea <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80075e8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	22ff      	movs	r2, #255	@ 0xff
 80075ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80075f2:	f001 fb2d 	bl	8008c50 <vPortExitCritical>
}
 80075f6:	bf00      	nop
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007606:	f001 fb11 	bl	8008c2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760e:	2b00      	cmp	r3, #0
 8007610:	d102      	bne.n	8007618 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8007612:	2301      	movs	r3, #1
 8007614:	60fb      	str	r3, [r7, #12]
 8007616:	e001      	b.n	800761c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8007618:	2300      	movs	r3, #0
 800761a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800761c:	f001 fb18 	bl	8008c50 <vPortExitCritical>

    return xReturn;
 8007620:	68fb      	ldr	r3, [r7, #12]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
	...

0800762c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d103      	bne.n	8007648 <vQueueAddToRegistry+0x1c>
 8007640:	f001 fc8a 	bl	8008f58 <ulSetInterruptMask>
 8007644:	bf00      	nop
 8007646:	e7fd      	b.n	8007644 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d024      	beq.n	8007698 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800764e:	2300      	movs	r3, #0
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	e01e      	b.n	8007692 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8007654:	4a17      	ldr	r2, [pc, #92]	@ (80076b4 <vQueueAddToRegistry+0x88>)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	4413      	add	r3, r2
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	d105      	bne.n	8007670 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	4a12      	ldr	r2, [pc, #72]	@ (80076b4 <vQueueAddToRegistry+0x88>)
 800766a:	4413      	add	r3, r2
 800766c:	60bb      	str	r3, [r7, #8]
                    break;
 800766e:	e013      	b.n	8007698 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10a      	bne.n	800768c <vQueueAddToRegistry+0x60>
 8007676:	4a0f      	ldr	r2, [pc, #60]	@ (80076b4 <vQueueAddToRegistry+0x88>)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d104      	bne.n	800768c <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	4a0b      	ldr	r2, [pc, #44]	@ (80076b4 <vQueueAddToRegistry+0x88>)
 8007688:	4413      	add	r3, r2
 800768a:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3301      	adds	r3, #1
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b07      	cmp	r3, #7
 8007696:	d9dd      	bls.n	8007654 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80076aa:	bf00      	nop
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20000824 	.word	0x20000824

080076b8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80076c8:	f001 fab0 	bl	8008c2c <vPortEnterCritical>
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076d2:	b25b      	sxtb	r3, r3
 80076d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d8:	d103      	bne.n	80076e2 <vQueueWaitForMessageRestricted+0x2a>
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076e8:	b25b      	sxtb	r3, r3
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	d103      	bne.n	80076f8 <vQueueWaitForMessageRestricted+0x40>
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076f8:	f001 faaa 	bl	8008c50 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	3324      	adds	r3, #36	@ 0x24
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	68b9      	ldr	r1, [r7, #8]
 800770c:	4618      	mov	r0, r3
 800770e:	f000 fcc1 	bl	8008094 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8007712:	6978      	ldr	r0, [r7, #20]
 8007714:	f7ff ff21 	bl	800755a <prvUnlockQueue>
    }
 8007718:	bf00      	nop
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8007720:	b580      	push	{r7, lr}
 8007722:	b08c      	sub	sp, #48	@ 0x30
 8007724:	af04      	add	r7, sp, #16
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800772e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007730:	2b00      	cmp	r3, #0
 8007732:	d103      	bne.n	800773c <xTaskCreateStatic+0x1c>
 8007734:	f001 fc10 	bl	8008f58 <ulSetInterruptMask>
 8007738:	bf00      	nop
 800773a:	e7fd      	b.n	8007738 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	2b00      	cmp	r3, #0
 8007740:	d103      	bne.n	800774a <xTaskCreateStatic+0x2a>
 8007742:	f001 fc09 	bl	8008f58 <ulSetInterruptMask>
 8007746:	bf00      	nop
 8007748:	e7fd      	b.n	8007746 <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800774a:	235c      	movs	r3, #92	@ 0x5c
 800774c:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2b5c      	cmp	r3, #92	@ 0x5c
 8007752:	d003      	beq.n	800775c <xTaskCreateStatic+0x3c>
 8007754:	f001 fc00 	bl	8008f58 <ulSetInterruptMask>
 8007758:	bf00      	nop
 800775a:	e7fd      	b.n	8007758 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800775c:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800775e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007760:	2b00      	cmp	r3, #0
 8007762:	d023      	beq.n	80077ac <xTaskCreateStatic+0x8c>
 8007764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007766:	2b00      	cmp	r3, #0
 8007768:	d020      	beq.n	80077ac <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800776a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776c:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800776e:	225c      	movs	r2, #92	@ 0x5c
 8007770:	2100      	movs	r1, #0
 8007772:	69f8      	ldr	r0, [r7, #28]
 8007774:	f004 ffd4 	bl	800c720 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800777c:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	2202      	movs	r2, #2
 8007782:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007786:	2300      	movs	r3, #0
 8007788:	9303      	str	r3, [sp, #12]
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	9302      	str	r3, [sp, #8]
 800778e:	f107 0318 	add.w	r3, r7, #24
 8007792:	9301      	str	r3, [sp, #4]
 8007794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	68b9      	ldr	r1, [r7, #8]
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 f855 	bl	800784e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80077a4:	69f8      	ldr	r0, [r7, #28]
 80077a6:	f000 f8d5 	bl	8007954 <prvAddNewTaskToReadyList>
 80077aa:	e001      	b.n	80077b0 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 80077ac:	2300      	movs	r3, #0
 80077ae:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80077b0:	69bb      	ldr	r3, [r7, #24]
    }
 80077b2:	4618      	mov	r0, r3
 80077b4:	3720      	adds	r7, #32
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b08c      	sub	sp, #48	@ 0x30
 80077be:	af04      	add	r7, sp, #16
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	603b      	str	r3, [r7, #0]
 80077c6:	4613      	mov	r3, r2
 80077c8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80077ca:	88fb      	ldrh	r3, [r7, #6]
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f001 fc22 	bl	8009018 <pvPortMalloc>
 80077d4:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d013      	beq.n	8007804 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80077dc:	205c      	movs	r0, #92	@ 0x5c
 80077de:	f001 fc1b 	bl	8009018 <pvPortMalloc>
 80077e2:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d008      	beq.n	80077fc <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80077ea:	225c      	movs	r2, #92	@ 0x5c
 80077ec:	2100      	movs	r1, #0
 80077ee:	69f8      	ldr	r0, [r7, #28]
 80077f0:	f004 ff96 	bl	800c720 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80077fa:	e005      	b.n	8007808 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80077fc:	6978      	ldr	r0, [r7, #20]
 80077fe:	f001 fcc7 	bl	8009190 <vPortFree>
 8007802:	e001      	b.n	8007808 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8007804:	2300      	movs	r3, #0
 8007806:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d017      	beq.n	800783e <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007816:	88fa      	ldrh	r2, [r7, #6]
 8007818:	2300      	movs	r3, #0
 800781a:	9303      	str	r3, [sp, #12]
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	9302      	str	r3, [sp, #8]
 8007820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007822:	9301      	str	r3, [sp, #4]
 8007824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	68b9      	ldr	r1, [r7, #8]
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 f80e 	bl	800784e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007832:	69f8      	ldr	r0, [r7, #28]
 8007834:	f000 f88e 	bl	8007954 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8007838:	2301      	movs	r3, #1
 800783a:	61bb      	str	r3, [r7, #24]
 800783c:	e002      	b.n	8007844 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800783e:	f04f 33ff 	mov.w	r3, #4294967295
 8007842:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007844:	69bb      	ldr	r3, [r7, #24]
    }
 8007846:	4618      	mov	r0, r3
 8007848:	3720      	adds	r7, #32
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b086      	sub	sp, #24
 8007852:	af00      	add	r7, sp, #0
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	607a      	str	r2, [r7, #4]
 800785a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800785c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	461a      	mov	r2, r3
 8007866:	21a5      	movs	r1, #165	@ 0xa5
 8007868:	f004 ff5a 	bl	800c720 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800786c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007876:	3b01      	subs	r3, #1
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f023 0307 	bic.w	r3, r3, #7
 8007884:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f003 0307 	and.w	r3, r3, #7
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <prvInitialiseNewTask+0x4a>
 8007890:	f001 fb62 	bl	8008f58 <ulSetInterruptMask>
 8007894:	bf00      	nop
 8007896:	e7fd      	b.n	8007894 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d01e      	beq.n	80078dc <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800789e:	2300      	movs	r3, #0
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	e012      	b.n	80078ca <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	4413      	add	r3, r2
 80078aa:	7819      	ldrb	r1, [r3, #0]
 80078ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	4413      	add	r3, r2
 80078b2:	3334      	adds	r3, #52	@ 0x34
 80078b4:	460a      	mov	r2, r1
 80078b6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	4413      	add	r3, r2
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d006      	beq.n	80078d2 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	3301      	adds	r3, #1
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b0f      	cmp	r3, #15
 80078ce:	d9e9      	bls.n	80078a4 <prvInitialiseNewTask+0x56>
 80078d0:	e000      	b.n	80078d4 <prvInitialiseNewTask+0x86>
            {
                break;
 80078d2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	2b37      	cmp	r3, #55	@ 0x37
 80078e0:	d903      	bls.n	80078ea <prvInitialiseNewTask+0x9c>
 80078e2:	f001 fb39 	bl	8008f58 <ulSetInterruptMask>
 80078e6:	bf00      	nop
 80078e8:	e7fd      	b.n	80078e6 <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	2b37      	cmp	r3, #55	@ 0x37
 80078ee:	d901      	bls.n	80078f4 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078f0:	2337      	movs	r3, #55	@ 0x37
 80078f2:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80078f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f6:	6a3a      	ldr	r2, [r7, #32]
 80078f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80078fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fc:	6a3a      	ldr	r2, [r7, #32]
 80078fe:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007902:	3304      	adds	r3, #4
 8007904:	4618      	mov	r0, r3
 8007906:	f7ff fbf1 	bl	80070ec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800790a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790c:	3318      	adds	r3, #24
 800790e:	4618      	mov	r0, r3
 8007910:	f7ff fbec 	bl	80070ec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007918:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007922:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007926:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007928:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800792a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	6938      	ldr	r0, [r7, #16]
 8007934:	f001 f9d8 	bl	8008ce8 <pxPortInitialiseStack>
 8007938:	4602      	mov	r2, r0
 800793a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800793e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007946:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007948:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800794a:	bf00      	nop
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
	...

08007954 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800795c:	f001 f966 	bl	8008c2c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007960:	4b3e      	ldr	r3, [pc, #248]	@ (8007a5c <prvAddNewTaskToReadyList+0x108>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3301      	adds	r3, #1
 8007966:	4a3d      	ldr	r2, [pc, #244]	@ (8007a5c <prvAddNewTaskToReadyList+0x108>)
 8007968:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800796a:	4b3d      	ldr	r3, [pc, #244]	@ (8007a60 <prvAddNewTaskToReadyList+0x10c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d109      	bne.n	8007986 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8007972:	4a3b      	ldr	r2, [pc, #236]	@ (8007a60 <prvAddNewTaskToReadyList+0x10c>)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007978:	4b38      	ldr	r3, [pc, #224]	@ (8007a5c <prvAddNewTaskToReadyList+0x108>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d110      	bne.n	80079a2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007980:	f000 fd1e 	bl	80083c0 <prvInitialiseTaskLists>
 8007984:	e00d      	b.n	80079a2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8007986:	4b37      	ldr	r3, [pc, #220]	@ (8007a64 <prvAddNewTaskToReadyList+0x110>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d109      	bne.n	80079a2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800798e:	4b34      	ldr	r3, [pc, #208]	@ (8007a60 <prvAddNewTaskToReadyList+0x10c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007998:	429a      	cmp	r2, r3
 800799a:	d802      	bhi.n	80079a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800799c:	4a30      	ldr	r2, [pc, #192]	@ (8007a60 <prvAddNewTaskToReadyList+0x10c>)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80079a2:	4b31      	ldr	r3, [pc, #196]	@ (8007a68 <prvAddNewTaskToReadyList+0x114>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3301      	adds	r3, #1
 80079a8:	4a2f      	ldr	r2, [pc, #188]	@ (8007a68 <prvAddNewTaskToReadyList+0x114>)
 80079aa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80079ac:	4b2e      	ldr	r3, [pc, #184]	@ (8007a68 <prvAddNewTaskToReadyList+0x114>)
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b8:	4b2c      	ldr	r3, [pc, #176]	@ (8007a6c <prvAddNewTaskToReadyList+0x118>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d903      	bls.n	80079c8 <prvAddNewTaskToReadyList+0x74>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c4:	4a29      	ldr	r2, [pc, #164]	@ (8007a6c <prvAddNewTaskToReadyList+0x118>)
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079cc:	4928      	ldr	r1, [pc, #160]	@ (8007a70 <prvAddNewTaskToReadyList+0x11c>)
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	440b      	add	r3, r1
 80079d8:	3304      	adds	r3, #4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	60fb      	str	r3, [r7, #12]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	609a      	str	r2, [r3, #8]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	60da      	str	r2, [r3, #12]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	3204      	adds	r2, #4
 80079f4:	605a      	str	r2, [r3, #4]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	1d1a      	adds	r2, r3, #4
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	609a      	str	r2, [r3, #8]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4a19      	ldr	r2, [pc, #100]	@ (8007a70 <prvAddNewTaskToReadyList+0x11c>)
 8007a0c:	441a      	add	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	615a      	str	r2, [r3, #20]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a16:	4916      	ldr	r1, [pc, #88]	@ (8007a70 <prvAddNewTaskToReadyList+0x11c>)
 8007a18:	4613      	mov	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	1c59      	adds	r1, r3, #1
 8007a26:	4812      	ldr	r0, [pc, #72]	@ (8007a70 <prvAddNewTaskToReadyList+0x11c>)
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4403      	add	r3, r0
 8007a32:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8007a34:	f001 f90c 	bl	8008c50 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007a38:	4b0a      	ldr	r3, [pc, #40]	@ (8007a64 <prvAddNewTaskToReadyList+0x110>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d008      	beq.n	8007a52 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a40:	4b07      	ldr	r3, [pc, #28]	@ (8007a60 <prvAddNewTaskToReadyList+0x10c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d201      	bcs.n	8007a52 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007a4e:	f001 f8db 	bl	8008c08 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007a52:	bf00      	nop
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000d38 	.word	0x20000d38
 8007a60:	20000864 	.word	0x20000864
 8007a64:	20000d44 	.word	0x20000d44
 8007a68:	20000d54 	.word	0x20000d54
 8007a6c:	20000d40 	.word	0x20000d40
 8007a70:	20000868 	.word	0x20000868

08007a74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d010      	beq.n	8007aa8 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8007a86:	4b0d      	ldr	r3, [pc, #52]	@ (8007abc <vTaskDelay+0x48>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <vTaskDelay+0x22>
 8007a8e:	f001 fa63 	bl	8008f58 <ulSetInterruptMask>
 8007a92:	bf00      	nop
 8007a94:	e7fd      	b.n	8007a92 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8007a96:	f000 f86f 	bl	8007b78 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fd5f 	bl	8008560 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8007aa2:	f000 f877 	bl	8007b94 <xTaskResumeAll>
 8007aa6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8007aae:	f001 f8ab 	bl	8008c08 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007ab2:	bf00      	nop
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20000d60 	.word	0x20000d60

08007ac0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ace:	463a      	mov	r2, r7
 8007ad0:	1d39      	adds	r1, r7, #4
 8007ad2:	f107 0308 	add.w	r3, r7, #8
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff fab4 	bl	8007044 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	9202      	str	r2, [sp, #8]
 8007ae4:	9301      	str	r3, [sp, #4]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	2300      	movs	r3, #0
 8007aec:	460a      	mov	r2, r1
 8007aee:	491b      	ldr	r1, [pc, #108]	@ (8007b5c <vTaskStartScheduler+0x9c>)
 8007af0:	481b      	ldr	r0, [pc, #108]	@ (8007b60 <vTaskStartScheduler+0xa0>)
 8007af2:	f7ff fe15 	bl	8007720 <xTaskCreateStatic>
 8007af6:	4603      	mov	r3, r0
 8007af8:	4a1a      	ldr	r2, [pc, #104]	@ (8007b64 <vTaskStartScheduler+0xa4>)
 8007afa:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8007afc:	4b19      	ldr	r3, [pc, #100]	@ (8007b64 <vTaskStartScheduler+0xa4>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8007b04:	2301      	movs	r3, #1
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	e001      	b.n	8007b0e <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d102      	bne.n	8007b1a <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8007b14:	f000 fd92 	bl	800863c <xTimerCreateTimerTask>
 8007b18:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d10e      	bne.n	8007b3e <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8007b20:	f001 fa1a 	bl	8008f58 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8007b24:	4b10      	ldr	r3, [pc, #64]	@ (8007b68 <vTaskStartScheduler+0xa8>)
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8007b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b6c <vTaskStartScheduler+0xac>)
 8007b2e:	2201      	movs	r2, #1
 8007b30:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b32:	4b0f      	ldr	r3, [pc, #60]	@ (8007b70 <vTaskStartScheduler+0xb0>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8007b38:	f001 f960 	bl	8008dfc <xPortStartScheduler>
 8007b3c:	e007      	b.n	8007b4e <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b44:	d103      	bne.n	8007b4e <vTaskStartScheduler+0x8e>
 8007b46:	f001 fa07 	bl	8008f58 <ulSetInterruptMask>
 8007b4a:	bf00      	nop
 8007b4c:	e7fd      	b.n	8007b4a <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007b4e:	4b09      	ldr	r3, [pc, #36]	@ (8007b74 <vTaskStartScheduler+0xb4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
}
 8007b52:	bf00      	nop
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	0800d260 	.word	0x0800d260
 8007b60:	080083a1 	.word	0x080083a1
 8007b64:	20000d5c 	.word	0x20000d5c
 8007b68:	20000d58 	.word	0x20000d58
 8007b6c:	20000d44 	.word	0x20000d44
 8007b70:	20000d3c 	.word	0x20000d3c
 8007b74:	0800d2e0 	.word	0x0800d2e0

08007b78 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b78:	b480      	push	{r7}
 8007b7a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007b7c:	4b04      	ldr	r3, [pc, #16]	@ (8007b90 <vTaskSuspendAll+0x18>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	4a03      	ldr	r2, [pc, #12]	@ (8007b90 <vTaskSuspendAll+0x18>)
 8007b84:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8007b86:	bf00      	nop
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	20000d60 	.word	0x20000d60

08007b94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8007ba2:	4b6b      	ldr	r3, [pc, #428]	@ (8007d50 <xTaskResumeAll+0x1bc>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d103      	bne.n	8007bb2 <xTaskResumeAll+0x1e>
 8007baa:	f001 f9d5 	bl	8008f58 <ulSetInterruptMask>
 8007bae:	bf00      	nop
 8007bb0:	e7fd      	b.n	8007bae <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8007bb2:	f001 f83b 	bl	8008c2c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8007bb6:	4b66      	ldr	r3, [pc, #408]	@ (8007d50 <xTaskResumeAll+0x1bc>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	4a64      	ldr	r2, [pc, #400]	@ (8007d50 <xTaskResumeAll+0x1bc>)
 8007bbe:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007bc0:	4b63      	ldr	r3, [pc, #396]	@ (8007d50 <xTaskResumeAll+0x1bc>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f040 80bb 	bne.w	8007d40 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bca:	4b62      	ldr	r3, [pc, #392]	@ (8007d54 <xTaskResumeAll+0x1c0>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 80b6 	beq.w	8007d40 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bd4:	e08b      	b.n	8007cee <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd6:	4b60      	ldr	r3, [pc, #384]	@ (8007d58 <xTaskResumeAll+0x1c4>)
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be2:	60bb      	str	r3, [r7, #8]
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	6a12      	ldr	r2, [r2, #32]
 8007bec:	609a      	str	r2, [r3, #8]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	69d2      	ldr	r2, [r2, #28]
 8007bf6:	605a      	str	r2, [r3, #4]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	3318      	adds	r3, #24
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d103      	bne.n	8007c0c <xTaskResumeAll+0x78>
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	6a1a      	ldr	r2, [r3, #32]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	605a      	str	r2, [r3, #4]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	1e5a      	subs	r2, r3, #1
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	607b      	str	r3, [r7, #4]
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	68d2      	ldr	r2, [r2, #12]
 8007c2a:	609a      	str	r2, [r3, #8]
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	6892      	ldr	r2, [r2, #8]
 8007c34:	605a      	str	r2, [r3, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d103      	bne.n	8007c4a <xTaskResumeAll+0xb6>
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	605a      	str	r2, [r3, #4]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	615a      	str	r2, [r3, #20]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	1e5a      	subs	r2, r3, #1
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8007d5c <xTaskResumeAll+0x1c8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d903      	bls.n	8007c6e <xTaskResumeAll+0xda>
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6a:	4a3c      	ldr	r2, [pc, #240]	@ (8007d5c <xTaskResumeAll+0x1c8>)
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c72:	493b      	ldr	r1, [pc, #236]	@ (8007d60 <xTaskResumeAll+0x1cc>)
 8007c74:	4613      	mov	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	440b      	add	r3, r1
 8007c7e:	3304      	adds	r3, #4
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	609a      	str	r2, [r3, #8]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	689a      	ldr	r2, [r3, #8]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	60da      	str	r2, [r3, #12]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	3204      	adds	r2, #4
 8007c9a:	605a      	str	r2, [r3, #4]
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	1d1a      	adds	r2, r3, #4
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	609a      	str	r2, [r3, #8]
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8007d60 <xTaskResumeAll+0x1cc>)
 8007cb2:	441a      	add	r2, r3
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	615a      	str	r2, [r3, #20]
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cbc:	4928      	ldr	r1, [pc, #160]	@ (8007d60 <xTaskResumeAll+0x1cc>)
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	440b      	add	r3, r1
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	1c59      	adds	r1, r3, #1
 8007ccc:	4824      	ldr	r0, [pc, #144]	@ (8007d60 <xTaskResumeAll+0x1cc>)
 8007cce:	4613      	mov	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4403      	add	r3, r0
 8007cd8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cde:	4b21      	ldr	r3, [pc, #132]	@ (8007d64 <xTaskResumeAll+0x1d0>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d902      	bls.n	8007cee <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8007ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8007d68 <xTaskResumeAll+0x1d4>)
 8007cea:	2201      	movs	r2, #1
 8007cec:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cee:	4b1a      	ldr	r3, [pc, #104]	@ (8007d58 <xTaskResumeAll+0x1c4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f47f af6f 	bne.w	8007bd6 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007cfe:	f000 fbf5 	bl	80084ec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d02:	4b1a      	ldr	r3, [pc, #104]	@ (8007d6c <xTaskResumeAll+0x1d8>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d010      	beq.n	8007d30 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007d0e:	f000 f83f 	bl	8007d90 <xTaskIncrementTick>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 8007d18:	4b13      	ldr	r3, [pc, #76]	@ (8007d68 <xTaskResumeAll+0x1d4>)
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1f1      	bne.n	8007d0e <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 8007d2a:	4b10      	ldr	r3, [pc, #64]	@ (8007d6c <xTaskResumeAll+0x1d8>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007d30:	4b0d      	ldr	r3, [pc, #52]	@ (8007d68 <xTaskResumeAll+0x1d4>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007d3c:	f000 ff64 	bl	8008c08 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007d40:	f000 ff86 	bl	8008c50 <vPortExitCritical>

    return xAlreadyYielded;
 8007d44:	693b      	ldr	r3, [r7, #16]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000d60 	.word	0x20000d60
 8007d54:	20000d38 	.word	0x20000d38
 8007d58:	20000cf8 	.word	0x20000cf8
 8007d5c:	20000d40 	.word	0x20000d40
 8007d60:	20000868 	.word	0x20000868
 8007d64:	20000864 	.word	0x20000864
 8007d68:	20000d4c 	.word	0x20000d4c
 8007d6c:	20000d48 	.word	0x20000d48

08007d70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8007d76:	4b05      	ldr	r3, [pc, #20]	@ (8007d8c <xTaskGetTickCount+0x1c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007d7c:	687b      	ldr	r3, [r7, #4]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	20000d3c 	.word	0x20000d3c

08007d90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007d96:	2300      	movs	r3, #0
 8007d98:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007d9a:	4b7a      	ldr	r3, [pc, #488]	@ (8007f84 <xTaskIncrementTick+0x1f4>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f040 80e6 	bne.w	8007f70 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007da4:	4b78      	ldr	r3, [pc, #480]	@ (8007f88 <xTaskIncrementTick+0x1f8>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3301      	adds	r3, #1
 8007daa:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007dac:	4a76      	ldr	r2, [pc, #472]	@ (8007f88 <xTaskIncrementTick+0x1f8>)
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d119      	bne.n	8007dec <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 8007db8:	4b74      	ldr	r3, [pc, #464]	@ (8007f8c <xTaskIncrementTick+0x1fc>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <xTaskIncrementTick+0x3a>
 8007dc2:	f001 f8c9 	bl	8008f58 <ulSetInterruptMask>
 8007dc6:	bf00      	nop
 8007dc8:	e7fd      	b.n	8007dc6 <xTaskIncrementTick+0x36>
 8007dca:	4b70      	ldr	r3, [pc, #448]	@ (8007f8c <xTaskIncrementTick+0x1fc>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8007f90 <xTaskIncrementTick+0x200>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a6d      	ldr	r2, [pc, #436]	@ (8007f8c <xTaskIncrementTick+0x1fc>)
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	4a6d      	ldr	r2, [pc, #436]	@ (8007f90 <xTaskIncrementTick+0x200>)
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	4b6d      	ldr	r3, [pc, #436]	@ (8007f94 <xTaskIncrementTick+0x204>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3301      	adds	r3, #1
 8007de4:	4a6b      	ldr	r2, [pc, #428]	@ (8007f94 <xTaskIncrementTick+0x204>)
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	f000 fb80 	bl	80084ec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007dec:	4b6a      	ldr	r3, [pc, #424]	@ (8007f98 <xTaskIncrementTick+0x208>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	f0c0 80a7 	bcc.w	8007f46 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007df8:	4b64      	ldr	r3, [pc, #400]	@ (8007f8c <xTaskIncrementTick+0x1fc>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d104      	bne.n	8007e0c <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e02:	4b65      	ldr	r3, [pc, #404]	@ (8007f98 <xTaskIncrementTick+0x208>)
 8007e04:	f04f 32ff 	mov.w	r2, #4294967295
 8007e08:	601a      	str	r2, [r3, #0]
                    break;
 8007e0a:	e09c      	b.n	8007f46 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e0c:	4b5f      	ldr	r3, [pc, #380]	@ (8007f8c <xTaskIncrementTick+0x1fc>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d203      	bcs.n	8007e2c <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007e24:	4a5c      	ldr	r2, [pc, #368]	@ (8007f98 <xTaskIncrementTick+0x208>)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007e2a:	e08c      	b.n	8007f46 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	60bb      	str	r3, [r7, #8]
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	68d2      	ldr	r2, [r2, #12]
 8007e3a:	609a      	str	r2, [r3, #8]
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	6892      	ldr	r2, [r2, #8]
 8007e44:	605a      	str	r2, [r3, #4]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d103      	bne.n	8007e5a <xTaskIncrementTick+0xca>
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	605a      	str	r2, [r3, #4]
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	615a      	str	r2, [r3, #20]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	1e5a      	subs	r2, r3, #1
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d01e      	beq.n	8007eb0 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e76:	607b      	str	r3, [r7, #4]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	6a12      	ldr	r2, [r2, #32]
 8007e80:	609a      	str	r2, [r3, #8]
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	69d2      	ldr	r2, [r2, #28]
 8007e8a:	605a      	str	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	3318      	adds	r3, #24
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d103      	bne.n	8007ea0 <xTaskIncrementTick+0x110>
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	6a1a      	ldr	r2, [r3, #32]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	605a      	str	r2, [r3, #4]
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	1e5a      	subs	r2, r3, #1
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb4:	4b39      	ldr	r3, [pc, #228]	@ (8007f9c <xTaskIncrementTick+0x20c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d903      	bls.n	8007ec4 <xTaskIncrementTick+0x134>
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec0:	4a36      	ldr	r2, [pc, #216]	@ (8007f9c <xTaskIncrementTick+0x20c>)
 8007ec2:	6013      	str	r3, [r2, #0]
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec8:	4935      	ldr	r1, [pc, #212]	@ (8007fa0 <xTaskIncrementTick+0x210>)
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	603b      	str	r3, [r7, #0]
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	609a      	str	r2, [r3, #8]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	60da      	str	r2, [r3, #12]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	3204      	adds	r2, #4
 8007ef0:	605a      	str	r2, [r3, #4]
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1d1a      	adds	r2, r3, #4
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	609a      	str	r2, [r3, #8]
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4a26      	ldr	r2, [pc, #152]	@ (8007fa0 <xTaskIncrementTick+0x210>)
 8007f08:	441a      	add	r2, r3
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	615a      	str	r2, [r3, #20]
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f12:	4923      	ldr	r1, [pc, #140]	@ (8007fa0 <xTaskIncrementTick+0x210>)
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	1c59      	adds	r1, r3, #1
 8007f22:	481f      	ldr	r0, [pc, #124]	@ (8007fa0 <xTaskIncrementTick+0x210>)
 8007f24:	4613      	mov	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4403      	add	r3, r0
 8007f2e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f34:	4b1b      	ldr	r3, [pc, #108]	@ (8007fa4 <xTaskIncrementTick+0x214>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	f67f af5c 	bls.w	8007df8 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 8007f40:	2301      	movs	r3, #1
 8007f42:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f44:	e758      	b.n	8007df8 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f46:	4b17      	ldr	r3, [pc, #92]	@ (8007fa4 <xTaskIncrementTick+0x214>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f4c:	4914      	ldr	r1, [pc, #80]	@ (8007fa0 <xTaskIncrementTick+0x210>)
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	440b      	add	r3, r1
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d901      	bls.n	8007f62 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8007f62:	4b11      	ldr	r3, [pc, #68]	@ (8007fa8 <xTaskIncrementTick+0x218>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d007      	beq.n	8007f7a <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	61fb      	str	r3, [r7, #28]
 8007f6e:	e004      	b.n	8007f7a <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007f70:	4b0e      	ldr	r3, [pc, #56]	@ (8007fac <xTaskIncrementTick+0x21c>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	4a0d      	ldr	r2, [pc, #52]	@ (8007fac <xTaskIncrementTick+0x21c>)
 8007f78:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8007f7a:	69fb      	ldr	r3, [r7, #28]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3720      	adds	r7, #32
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	20000d60 	.word	0x20000d60
 8007f88:	20000d3c 	.word	0x20000d3c
 8007f8c:	20000cf0 	.word	0x20000cf0
 8007f90:	20000cf4 	.word	0x20000cf4
 8007f94:	20000d50 	.word	0x20000d50
 8007f98:	20000d58 	.word	0x20000d58
 8007f9c:	20000d40 	.word	0x20000d40
 8007fa0:	20000868 	.word	0x20000868
 8007fa4:	20000864 	.word	0x20000864
 8007fa8:	20000d4c 	.word	0x20000d4c
 8007fac:	20000d48 	.word	0x20000d48

08007fb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8007fb6:	4b23      	ldr	r3, [pc, #140]	@ (8008044 <vTaskSwitchContext+0x94>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007fbe:	4b22      	ldr	r3, [pc, #136]	@ (8008048 <vTaskSwitchContext+0x98>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007fc4:	e039      	b.n	800803a <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8007fc6:	4b20      	ldr	r3, [pc, #128]	@ (8008048 <vTaskSwitchContext+0x98>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800804c <vTaskSwitchContext+0x9c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	607b      	str	r3, [r7, #4]
 8007fd2:	e009      	b.n	8007fe8 <vTaskSwitchContext+0x38>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d103      	bne.n	8007fe2 <vTaskSwitchContext+0x32>
 8007fda:	f000 ffbd 	bl	8008f58 <ulSetInterruptMask>
 8007fde:	bf00      	nop
 8007fe0:	e7fd      	b.n	8007fde <vTaskSwitchContext+0x2e>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	607b      	str	r3, [r7, #4]
 8007fe8:	4919      	ldr	r1, [pc, #100]	@ (8008050 <vTaskSwitchContext+0xa0>)
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	4613      	mov	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	440b      	add	r3, r1
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d0eb      	beq.n	8007fd4 <vTaskSwitchContext+0x24>
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4a12      	ldr	r2, [pc, #72]	@ (8008050 <vTaskSwitchContext+0xa0>)
 8008008:	4413      	add	r3, r2
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	605a      	str	r2, [r3, #4]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	3308      	adds	r3, #8
 800801e:	429a      	cmp	r2, r3
 8008020:	d103      	bne.n	800802a <vTaskSwitchContext+0x7a>
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	605a      	str	r2, [r3, #4]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	4a08      	ldr	r2, [pc, #32]	@ (8008054 <vTaskSwitchContext+0xa4>)
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	4a05      	ldr	r2, [pc, #20]	@ (800804c <vTaskSwitchContext+0x9c>)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6013      	str	r3, [r2, #0]
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20000d60 	.word	0x20000d60
 8008048:	20000d4c 	.word	0x20000d4c
 800804c:	20000d40 	.word	0x20000d40
 8008050:	20000868 	.word	0x20000868
 8008054:	20000864 	.word	0x20000864

08008058 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d103      	bne.n	8008070 <vTaskPlaceOnEventList+0x18>
 8008068:	f000 ff76 	bl	8008f58 <ulSetInterruptMask>
 800806c:	bf00      	nop
 800806e:	e7fd      	b.n	800806c <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008070:	4b07      	ldr	r3, [pc, #28]	@ (8008090 <vTaskPlaceOnEventList+0x38>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3318      	adds	r3, #24
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff f844 	bl	8007106 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800807e:	2101      	movs	r1, #1
 8008080:	6838      	ldr	r0, [r7, #0]
 8008082:	f000 fa6d 	bl	8008560 <prvAddCurrentTaskToDelayedList>
}
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	20000864 	.word	0x20000864

08008094 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d103      	bne.n	80080ae <vTaskPlaceOnEventListRestricted+0x1a>
 80080a6:	f000 ff57 	bl	8008f58 <ulSetInterruptMask>
 80080aa:	bf00      	nop
 80080ac:	e7fd      	b.n	80080aa <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	4b15      	ldr	r3, [pc, #84]	@ (800810c <vTaskPlaceOnEventListRestricted+0x78>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	61da      	str	r2, [r3, #28]
 80080bc:	4b13      	ldr	r3, [pc, #76]	@ (800810c <vTaskPlaceOnEventListRestricted+0x78>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	6892      	ldr	r2, [r2, #8]
 80080c4:	621a      	str	r2, [r3, #32]
 80080c6:	4b11      	ldr	r3, [pc, #68]	@ (800810c <vTaskPlaceOnEventListRestricted+0x78>)
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	3218      	adds	r2, #24
 80080d0:	605a      	str	r2, [r3, #4]
 80080d2:	4b0e      	ldr	r3, [pc, #56]	@ (800810c <vTaskPlaceOnEventListRestricted+0x78>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f103 0218 	add.w	r2, r3, #24
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	609a      	str	r2, [r3, #8]
 80080de:	4b0b      	ldr	r3, [pc, #44]	@ (800810c <vTaskPlaceOnEventListRestricted+0x78>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 80080f6:	f04f 33ff 	mov.w	r3, #4294967295
 80080fa:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080fc:	6879      	ldr	r1, [r7, #4]
 80080fe:	68b8      	ldr	r0, [r7, #8]
 8008100:	f000 fa2e 	bl	8008560 <prvAddCurrentTaskToDelayedList>
    }
 8008104:	bf00      	nop
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20000864 	.word	0x20000864

08008110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d103      	bne.n	800812e <xTaskRemoveFromEventList+0x1e>
 8008126:	f000 ff17 	bl	8008f58 <ulSetInterruptMask>
 800812a:	bf00      	nop
 800812c:	e7fd      	b.n	800812a <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	6a12      	ldr	r2, [r2, #32]
 800813c:	609a      	str	r2, [r3, #8]
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	69d2      	ldr	r2, [r2, #28]
 8008146:	605a      	str	r2, [r3, #4]
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	3318      	adds	r3, #24
 8008150:	429a      	cmp	r2, r3
 8008152:	d103      	bne.n	800815c <xTaskRemoveFromEventList+0x4c>
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	6a1a      	ldr	r2, [r3, #32]
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	605a      	str	r2, [r3, #4]
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	2200      	movs	r2, #0
 8008160:	629a      	str	r2, [r3, #40]	@ 0x28
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	1e5a      	subs	r2, r3, #1
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800816c:	4b49      	ldr	r3, [pc, #292]	@ (8008294 <xTaskRemoveFromEventList+0x184>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d15f      	bne.n	8008234 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	60fb      	str	r3, [r7, #12]
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	68d2      	ldr	r2, [r2, #12]
 8008182:	609a      	str	r2, [r3, #8]
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	69ba      	ldr	r2, [r7, #24]
 800818a:	6892      	ldr	r2, [r2, #8]
 800818c:	605a      	str	r2, [r3, #4]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	3304      	adds	r3, #4
 8008196:	429a      	cmp	r2, r3
 8008198:	d103      	bne.n	80081a2 <xTaskRemoveFromEventList+0x92>
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	605a      	str	r2, [r3, #4]
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	2200      	movs	r2, #0
 80081a6:	615a      	str	r2, [r3, #20]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	1e5a      	subs	r2, r3, #1
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b6:	4b38      	ldr	r3, [pc, #224]	@ (8008298 <xTaskRemoveFromEventList+0x188>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d903      	bls.n	80081c6 <xTaskRemoveFromEventList+0xb6>
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c2:	4a35      	ldr	r2, [pc, #212]	@ (8008298 <xTaskRemoveFromEventList+0x188>)
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ca:	4934      	ldr	r1, [pc, #208]	@ (800829c <xTaskRemoveFromEventList+0x18c>)
 80081cc:	4613      	mov	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	440b      	add	r3, r1
 80081d6:	3304      	adds	r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60bb      	str	r3, [r7, #8]
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	609a      	str	r2, [r3, #8]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	689a      	ldr	r2, [r3, #8]
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	60da      	str	r2, [r3, #12]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	3204      	adds	r2, #4
 80081f2:	605a      	str	r2, [r3, #4]
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	1d1a      	adds	r2, r3, #4
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	609a      	str	r2, [r3, #8]
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008200:	4613      	mov	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4a24      	ldr	r2, [pc, #144]	@ (800829c <xTaskRemoveFromEventList+0x18c>)
 800820a:	441a      	add	r2, r3
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	615a      	str	r2, [r3, #20]
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008214:	4921      	ldr	r1, [pc, #132]	@ (800829c <xTaskRemoveFromEventList+0x18c>)
 8008216:	4613      	mov	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	440b      	add	r3, r1
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	1c59      	adds	r1, r3, #1
 8008224:	481d      	ldr	r0, [pc, #116]	@ (800829c <xTaskRemoveFromEventList+0x18c>)
 8008226:	4613      	mov	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4403      	add	r3, r0
 8008230:	6019      	str	r1, [r3, #0]
 8008232:	e01b      	b.n	800826c <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008234:	4b1a      	ldr	r3, [pc, #104]	@ (80082a0 <xTaskRemoveFromEventList+0x190>)
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	613b      	str	r3, [r7, #16]
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	61da      	str	r2, [r3, #28]
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	689a      	ldr	r2, [r3, #8]
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	621a      	str	r2, [r3, #32]
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	3218      	adds	r2, #24
 8008250:	605a      	str	r2, [r3, #4]
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	f103 0218 	add.w	r2, r3, #24
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	609a      	str	r2, [r3, #8]
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	4a10      	ldr	r2, [pc, #64]	@ (80082a0 <xTaskRemoveFromEventList+0x190>)
 8008260:	629a      	str	r2, [r3, #40]	@ 0x28
 8008262:	4b0f      	ldr	r3, [pc, #60]	@ (80082a0 <xTaskRemoveFromEventList+0x190>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3301      	adds	r3, #1
 8008268:	4a0d      	ldr	r2, [pc, #52]	@ (80082a0 <xTaskRemoveFromEventList+0x190>)
 800826a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008270:	4b0c      	ldr	r3, [pc, #48]	@ (80082a4 <xTaskRemoveFromEventList+0x194>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008276:	429a      	cmp	r2, r3
 8008278:	d905      	bls.n	8008286 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800827a:	2301      	movs	r3, #1
 800827c:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800827e:	4b0a      	ldr	r3, [pc, #40]	@ (80082a8 <xTaskRemoveFromEventList+0x198>)
 8008280:	2201      	movs	r2, #1
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	e001      	b.n	800828a <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 8008286:	2300      	movs	r3, #0
 8008288:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800828a:	69fb      	ldr	r3, [r7, #28]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3720      	adds	r7, #32
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20000d60 	.word	0x20000d60
 8008298:	20000d40 	.word	0x20000d40
 800829c:	20000868 	.word	0x20000868
 80082a0:	20000cf8 	.word	0x20000cf8
 80082a4:	20000864 	.word	0x20000864
 80082a8:	20000d4c 	.word	0x20000d4c

080082ac <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082b4:	4b06      	ldr	r3, [pc, #24]	@ (80082d0 <vTaskInternalSetTimeOutState+0x24>)
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80082bc:	4b05      	ldr	r3, [pc, #20]	@ (80082d4 <vTaskInternalSetTimeOutState+0x28>)
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	605a      	str	r2, [r3, #4]
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	20000d50 	.word	0x20000d50
 80082d4:	20000d3c 	.word	0x20000d3c

080082d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d103      	bne.n	80082f0 <xTaskCheckForTimeOut+0x18>
 80082e8:	f000 fe36 	bl	8008f58 <ulSetInterruptMask>
 80082ec:	bf00      	nop
 80082ee:	e7fd      	b.n	80082ec <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d103      	bne.n	80082fe <xTaskCheckForTimeOut+0x26>
 80082f6:	f000 fe2f 	bl	8008f58 <ulSetInterruptMask>
 80082fa:	bf00      	nop
 80082fc:	e7fd      	b.n	80082fa <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 80082fe:	f000 fc95 	bl	8008c2c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8008302:	4b1f      	ldr	r3, [pc, #124]	@ (8008380 <xTaskCheckForTimeOut+0xa8>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831a:	d102      	bne.n	8008322 <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	e026      	b.n	8008370 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	4b17      	ldr	r3, [pc, #92]	@ (8008384 <xTaskCheckForTimeOut+0xac>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d00a      	beq.n	8008344 <xTaskCheckForTimeOut+0x6c>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	429a      	cmp	r2, r3
 8008336:	d305      	bcc.n	8008344 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008338:	2301      	movs	r3, #1
 800833a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2200      	movs	r2, #0
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	e015      	b.n	8008370 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	429a      	cmp	r2, r3
 800834c:	d20b      	bcs.n	8008366 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	1ad2      	subs	r2, r2, r3
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff ffa6 	bl	80082ac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008360:	2300      	movs	r3, #0
 8008362:	617b      	str	r3, [r7, #20]
 8008364:	e004      	b.n	8008370 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800836c:	2301      	movs	r3, #1
 800836e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8008370:	f000 fc6e 	bl	8008c50 <vPortExitCritical>

    return xReturn;
 8008374:	697b      	ldr	r3, [r7, #20]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	20000d3c 	.word	0x20000d3c
 8008384:	20000d50 	.word	0x20000d50

08008388 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800838c:	4b03      	ldr	r3, [pc, #12]	@ (800839c <vTaskMissedYield+0x14>)
 800838e:	2201      	movs	r2, #1
 8008390:	601a      	str	r2, [r3, #0]
}
 8008392:	bf00      	nop
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	20000d4c 	.word	0x20000d4c

080083a0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80083a8:	f000 f84a 	bl	8008440 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083ac:	4b03      	ldr	r3, [pc, #12]	@ (80083bc <prvIdleTask+0x1c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d9f9      	bls.n	80083a8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80083b4:	f000 fc28 	bl	8008c08 <vPortYield>
        prvCheckTasksWaitingTermination();
 80083b8:	e7f6      	b.n	80083a8 <prvIdleTask+0x8>
 80083ba:	bf00      	nop
 80083bc:	20000868 	.word	0x20000868

080083c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083c6:	2300      	movs	r3, #0
 80083c8:	607b      	str	r3, [r7, #4]
 80083ca:	e00c      	b.n	80083e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	4613      	mov	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4a12      	ldr	r2, [pc, #72]	@ (8008420 <prvInitialiseTaskLists+0x60>)
 80083d8:	4413      	add	r3, r2
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fe66 	bl	80070ac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3301      	adds	r3, #1
 80083e4:	607b      	str	r3, [r7, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b37      	cmp	r3, #55	@ 0x37
 80083ea:	d9ef      	bls.n	80083cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80083ec:	480d      	ldr	r0, [pc, #52]	@ (8008424 <prvInitialiseTaskLists+0x64>)
 80083ee:	f7fe fe5d 	bl	80070ac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80083f2:	480d      	ldr	r0, [pc, #52]	@ (8008428 <prvInitialiseTaskLists+0x68>)
 80083f4:	f7fe fe5a 	bl	80070ac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80083f8:	480c      	ldr	r0, [pc, #48]	@ (800842c <prvInitialiseTaskLists+0x6c>)
 80083fa:	f7fe fe57 	bl	80070ac <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80083fe:	480c      	ldr	r0, [pc, #48]	@ (8008430 <prvInitialiseTaskLists+0x70>)
 8008400:	f7fe fe54 	bl	80070ac <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8008404:	480b      	ldr	r0, [pc, #44]	@ (8008434 <prvInitialiseTaskLists+0x74>)
 8008406:	f7fe fe51 	bl	80070ac <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800840a:	4b0b      	ldr	r3, [pc, #44]	@ (8008438 <prvInitialiseTaskLists+0x78>)
 800840c:	4a05      	ldr	r2, [pc, #20]	@ (8008424 <prvInitialiseTaskLists+0x64>)
 800840e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008410:	4b0a      	ldr	r3, [pc, #40]	@ (800843c <prvInitialiseTaskLists+0x7c>)
 8008412:	4a05      	ldr	r2, [pc, #20]	@ (8008428 <prvInitialiseTaskLists+0x68>)
 8008414:	601a      	str	r2, [r3, #0]
}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000868 	.word	0x20000868
 8008424:	20000cc8 	.word	0x20000cc8
 8008428:	20000cdc 	.word	0x20000cdc
 800842c:	20000cf8 	.word	0x20000cf8
 8008430:	20000d0c 	.word	0x20000d0c
 8008434:	20000d24 	.word	0x20000d24
 8008438:	20000cf0 	.word	0x20000cf0
 800843c:	20000cf4 	.word	0x20000cf4

08008440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008446:	e019      	b.n	800847c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8008448:	f000 fbf0 	bl	8008c2c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800844c:	4b10      	ldr	r3, [pc, #64]	@ (8008490 <prvCheckTasksWaitingTermination+0x50>)
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3304      	adds	r3, #4
 8008458:	4618      	mov	r0, r3
 800845a:	f7fe fe8d 	bl	8007178 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800845e:	4b0d      	ldr	r3, [pc, #52]	@ (8008494 <prvCheckTasksWaitingTermination+0x54>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3b01      	subs	r3, #1
 8008464:	4a0b      	ldr	r2, [pc, #44]	@ (8008494 <prvCheckTasksWaitingTermination+0x54>)
 8008466:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8008468:	4b0b      	ldr	r3, [pc, #44]	@ (8008498 <prvCheckTasksWaitingTermination+0x58>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3b01      	subs	r3, #1
 800846e:	4a0a      	ldr	r2, [pc, #40]	@ (8008498 <prvCheckTasksWaitingTermination+0x58>)
 8008470:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8008472:	f000 fbed 	bl	8008c50 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f810 	bl	800849c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800847c:	4b06      	ldr	r3, [pc, #24]	@ (8008498 <prvCheckTasksWaitingTermination+0x58>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e1      	bne.n	8008448 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	20000d0c 	.word	0x20000d0c
 8008494:	20000d38 	.word	0x20000d38
 8008498:	20000d20 	.word	0x20000d20

0800849c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d108      	bne.n	80084c0 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 fe6c 	bl	8009190 <vPortFree>
                vPortFree( pxTCB );
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fe69 	bl	8009190 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80084be:	e011      	b.n	80084e4 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d103      	bne.n	80084d2 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fe60 	bl	8009190 <vPortFree>
    }
 80084d0:	e008      	b.n	80084e4 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d003      	beq.n	80084e4 <prvDeleteTCB+0x48>
 80084dc:	f000 fd3c 	bl	8008f58 <ulSetInterruptMask>
 80084e0:	bf00      	nop
 80084e2:	e7fd      	b.n	80084e0 <prvDeleteTCB+0x44>
    }
 80084e4:	bf00      	nop
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084ec:	b480      	push	{r7}
 80084ee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084f0:	4b0a      	ldr	r3, [pc, #40]	@ (800851c <prvResetNextTaskUnblockTime+0x30>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d104      	bne.n	8008504 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80084fa:	4b09      	ldr	r3, [pc, #36]	@ (8008520 <prvResetNextTaskUnblockTime+0x34>)
 80084fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008500:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008502:	e005      	b.n	8008510 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008504:	4b05      	ldr	r3, [pc, #20]	@ (800851c <prvResetNextTaskUnblockTime+0x30>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a04      	ldr	r2, [pc, #16]	@ (8008520 <prvResetNextTaskUnblockTime+0x34>)
 800850e:	6013      	str	r3, [r2, #0]
}
 8008510:	bf00      	nop
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	20000cf0 	.word	0x20000cf0
 8008520:	20000d58 	.word	0x20000d58

08008524 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800852a:	4b0b      	ldr	r3, [pc, #44]	@ (8008558 <xTaskGetSchedulerState+0x34>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d102      	bne.n	8008538 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8008532:	2301      	movs	r3, #1
 8008534:	607b      	str	r3, [r7, #4]
 8008536:	e008      	b.n	800854a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008538:	4b08      	ldr	r3, [pc, #32]	@ (800855c <xTaskGetSchedulerState+0x38>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d102      	bne.n	8008546 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8008540:	2302      	movs	r3, #2
 8008542:	607b      	str	r3, [r7, #4]
 8008544:	e001      	b.n	800854a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8008546:	2300      	movs	r3, #0
 8008548:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800854a:	687b      	ldr	r3, [r7, #4]
    }
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	20000d44 	.word	0x20000d44
 800855c:	20000d60 	.word	0x20000d60

08008560 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800856a:	4b2e      	ldr	r3, [pc, #184]	@ (8008624 <prvAddCurrentTaskToDelayedList+0xc4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008570:	4b2d      	ldr	r3, [pc, #180]	@ (8008628 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3304      	adds	r3, #4
 8008576:	4618      	mov	r0, r3
 8008578:	f7fe fdfe 	bl	8007178 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008582:	d124      	bne.n	80085ce <prvAddCurrentTaskToDelayedList+0x6e>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d021      	beq.n	80085ce <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800858a:	4b28      	ldr	r3, [pc, #160]	@ (800862c <prvAddCurrentTaskToDelayedList+0xcc>)
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	613b      	str	r3, [r7, #16]
 8008590:	4b25      	ldr	r3, [pc, #148]	@ (8008628 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	609a      	str	r2, [r3, #8]
 8008598:	4b23      	ldr	r3, [pc, #140]	@ (8008628 <prvAddCurrentTaskToDelayedList+0xc8>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	6892      	ldr	r2, [r2, #8]
 80085a0:	60da      	str	r2, [r3, #12]
 80085a2:	4b21      	ldr	r3, [pc, #132]	@ (8008628 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	3204      	adds	r2, #4
 80085ac:	605a      	str	r2, [r3, #4]
 80085ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008628 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	1d1a      	adds	r2, r3, #4
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	609a      	str	r2, [r3, #8]
 80085b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008628 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a1b      	ldr	r2, [pc, #108]	@ (800862c <prvAddCurrentTaskToDelayedList+0xcc>)
 80085be:	615a      	str	r2, [r3, #20]
 80085c0:	4b1a      	ldr	r3, [pc, #104]	@ (800862c <prvAddCurrentTaskToDelayedList+0xcc>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3301      	adds	r3, #1
 80085c6:	4a19      	ldr	r2, [pc, #100]	@ (800862c <prvAddCurrentTaskToDelayedList+0xcc>)
 80085c8:	6013      	str	r3, [r2, #0]
 80085ca:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80085cc:	e026      	b.n	800861c <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4413      	add	r3, r2
 80085d4:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085d6:	4b14      	ldr	r3, [pc, #80]	@ (8008628 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d209      	bcs.n	80085fa <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085e6:	4b12      	ldr	r3, [pc, #72]	@ (8008630 <prvAddCurrentTaskToDelayedList+0xd0>)
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008628 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3304      	adds	r3, #4
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f7fe fd87 	bl	8007106 <vListInsert>
}
 80085f8:	e010      	b.n	800861c <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008634 <prvAddCurrentTaskToDelayedList+0xd4>)
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008628 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3304      	adds	r3, #4
 8008604:	4619      	mov	r1, r3
 8008606:	4610      	mov	r0, r2
 8008608:	f7fe fd7d 	bl	8007106 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800860c:	4b0a      	ldr	r3, [pc, #40]	@ (8008638 <prvAddCurrentTaskToDelayedList+0xd8>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	429a      	cmp	r2, r3
 8008614:	d202      	bcs.n	800861c <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8008616:	4a08      	ldr	r2, [pc, #32]	@ (8008638 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6013      	str	r3, [r2, #0]
}
 800861c:	bf00      	nop
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20000d3c 	.word	0x20000d3c
 8008628:	20000864 	.word	0x20000864
 800862c:	20000d24 	.word	0x20000d24
 8008630:	20000cf4 	.word	0x20000cf4
 8008634:	20000cf0 	.word	0x20000cf0
 8008638:	20000d58 	.word	0x20000d58

0800863c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800863c:	b580      	push	{r7, lr}
 800863e:	b088      	sub	sp, #32
 8008640:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8008642:	2300      	movs	r3, #0
 8008644:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8008646:	f000 fa5f 	bl	8008b08 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800864a:	4b18      	ldr	r3, [pc, #96]	@ (80086ac <xTimerCreateTimerTask+0x70>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d020      	beq.n	8008694 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8008656:	2300      	movs	r3, #0
 8008658:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800865a:	463a      	mov	r2, r7
 800865c:	1d39      	adds	r1, r7, #4
 800865e:	f107 0308 	add.w	r3, r7, #8
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fd08 	bl	8007078 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	9202      	str	r2, [sp, #8]
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	2302      	movs	r3, #2
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	2300      	movs	r3, #0
 8008678:	460a      	mov	r2, r1
 800867a:	490d      	ldr	r1, [pc, #52]	@ (80086b0 <xTimerCreateTimerTask+0x74>)
 800867c:	480d      	ldr	r0, [pc, #52]	@ (80086b4 <xTimerCreateTimerTask+0x78>)
 800867e:	f7ff f84f 	bl	8007720 <xTaskCreateStatic>
 8008682:	4603      	mov	r3, r0
 8008684:	4a0c      	ldr	r2, [pc, #48]	@ (80086b8 <xTimerCreateTimerTask+0x7c>)
 8008686:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8008688:	4b0b      	ldr	r3, [pc, #44]	@ (80086b8 <xTimerCreateTimerTask+0x7c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8008690:	2301      	movs	r3, #1
 8008692:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d103      	bne.n	80086a2 <xTimerCreateTimerTask+0x66>
 800869a:	f000 fc5d 	bl	8008f58 <ulSetInterruptMask>
 800869e:	bf00      	nop
 80086a0:	e7fd      	b.n	800869e <xTimerCreateTimerTask+0x62>
        return xReturn;
 80086a2:	68fb      	ldr	r3, [r7, #12]
    }
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20000d94 	.word	0x20000d94
 80086b0:	0800d268 	.word	0x0800d268
 80086b4:	08008761 	.word	0x08008761
 80086b8:	20000d98 	.word	0x20000d98

080086bc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80086c8:	e008      	b.n	80086dc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	4413      	add	r3, r2
 80086d2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	699a      	ldr	r2, [r3, #24]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	18d1      	adds	r1, r2, r3
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 f8d7 	bl	800889c <prvInsertTimerInActiveList>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1ea      	bne.n	80086ca <prvReloadTimer+0xe>
        }
    }
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
	...

08008700 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800870a:	4b14      	ldr	r3, [pc, #80]	@ (800875c <prvProcessExpiredTimer+0x5c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3304      	adds	r3, #4
 8008718:	4618      	mov	r0, r3
 800871a:	f7fe fd2d 	bl	8007178 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b00      	cmp	r3, #0
 800872a:	d005      	beq.n	8008738 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7ff ffc3 	bl	80086bc <prvReloadTimer>
 8008736:	e008      	b.n	800874a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800873e:	f023 0301 	bic.w	r3, r3, #1
 8008742:	b2da      	uxtb	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	4798      	blx	r3
    }
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20000d8c 	.word	0x20000d8c

08008760 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008768:	f107 0308 	add.w	r3, r7, #8
 800876c:	4618      	mov	r0, r3
 800876e:	f000 f851 	bl	8008814 <prvGetNextExpireTime>
 8008772:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	4619      	mov	r1, r3
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 f805 	bl	8008788 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800877e:	f000 f8cf 	bl	8008920 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008782:	bf00      	nop
 8008784:	e7f0      	b.n	8008768 <prvTimerTask+0x8>
	...

08008788 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8008792:	f7ff f9f1 	bl	8007b78 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008796:	f107 0308 	add.w	r3, r7, #8
 800879a:	4618      	mov	r0, r3
 800879c:	f000 f85e 	bl	800885c <prvSampleTimeNow>
 80087a0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d12a      	bne.n	80087fe <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <prvProcessTimerOrBlockTask+0x3c>
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d806      	bhi.n	80087c4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80087b6:	f7ff f9ed 	bl	8007b94 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80087ba:	68f9      	ldr	r1, [r7, #12]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff ff9f 	bl	8008700 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80087c2:	e01e      	b.n	8008802 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d008      	beq.n	80087dc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80087ca:	4b10      	ldr	r3, [pc, #64]	@ (800880c <prvProcessTimerOrBlockTask+0x84>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <prvProcessTimerOrBlockTask+0x50>
 80087d4:	2301      	movs	r3, #1
 80087d6:	e000      	b.n	80087da <prvProcessTimerOrBlockTask+0x52>
 80087d8:	2300      	movs	r3, #0
 80087da:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80087dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008810 <prvProcessTimerOrBlockTask+0x88>)
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	4619      	mov	r1, r3
 80087ea:	f7fe ff65 	bl	80076b8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80087ee:	f7ff f9d1 	bl	8007b94 <xTaskResumeAll>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d104      	bne.n	8008802 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 80087f8:	f000 fa06 	bl	8008c08 <vPortYield>
    }
 80087fc:	e001      	b.n	8008802 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 80087fe:	f7ff f9c9 	bl	8007b94 <xTaskResumeAll>
    }
 8008802:	bf00      	nop
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	20000d90 	.word	0x20000d90
 8008810:	20000d94 	.word	0x20000d94

08008814 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800881c:	4b0e      	ldr	r3, [pc, #56]	@ (8008858 <prvGetNextExpireTime+0x44>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <prvGetNextExpireTime+0x16>
 8008826:	2201      	movs	r2, #1
 8008828:	e000      	b.n	800882c <prvGetNextExpireTime+0x18>
 800882a:	2200      	movs	r2, #0
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d105      	bne.n	8008844 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008838:	4b07      	ldr	r3, [pc, #28]	@ (8008858 <prvGetNextExpireTime+0x44>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	60fb      	str	r3, [r7, #12]
 8008842:	e001      	b.n	8008848 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008844:	2300      	movs	r3, #0
 8008846:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008848:	68fb      	ldr	r3, [r7, #12]
    }
 800884a:	4618      	mov	r0, r3
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	20000d8c 	.word	0x20000d8c

0800885c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008864:	f7ff fa84 	bl	8007d70 <xTaskGetTickCount>
 8008868:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800886a:	4b0b      	ldr	r3, [pc, #44]	@ (8008898 <prvSampleTimeNow+0x3c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	429a      	cmp	r2, r3
 8008872:	d205      	bcs.n	8008880 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008874:	f000 f922 	bl	8008abc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	e002      	b.n	8008886 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8008886:	4a04      	ldr	r2, [pc, #16]	@ (8008898 <prvSampleTimeNow+0x3c>)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800888c:	68fb      	ldr	r3, [r7, #12]
    }
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000d9c 	.word	0x20000d9c

0800889c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d812      	bhi.n	80088e8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	1ad2      	subs	r2, r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d302      	bcc.n	80088d6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80088d0:	2301      	movs	r3, #1
 80088d2:	617b      	str	r3, [r7, #20]
 80088d4:	e01b      	b.n	800890e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80088d6:	4b10      	ldr	r3, [pc, #64]	@ (8008918 <prvInsertTimerInActiveList+0x7c>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3304      	adds	r3, #4
 80088de:	4619      	mov	r1, r3
 80088e0:	4610      	mov	r0, r2
 80088e2:	f7fe fc10 	bl	8007106 <vListInsert>
 80088e6:	e012      	b.n	800890e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d206      	bcs.n	80088fe <prvInsertTimerInActiveList+0x62>
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d302      	bcc.n	80088fe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80088f8:	2301      	movs	r3, #1
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	e007      	b.n	800890e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088fe:	4b07      	ldr	r3, [pc, #28]	@ (800891c <prvInsertTimerInActiveList+0x80>)
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3304      	adds	r3, #4
 8008906:	4619      	mov	r1, r3
 8008908:	4610      	mov	r0, r2
 800890a:	f7fe fbfc 	bl	8007106 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800890e:	697b      	ldr	r3, [r7, #20]
    }
 8008910:	4618      	mov	r0, r3
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	20000d90 	.word	0x20000d90
 800891c:	20000d8c 	.word	0x20000d8c

08008920 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008926:	e0b7      	b.n	8008a98 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	da11      	bge.n	8008952 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800892e:	1d3b      	adds	r3, r7, #4
 8008930:	3304      	adds	r3, #4
 8008932:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d103      	bne.n	8008942 <prvProcessReceivedCommands+0x22>
 800893a:	f000 fb0d 	bl	8008f58 <ulSetInterruptMask>
 800893e:	bf00      	nop
 8008940:	e7fd      	b.n	800893e <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	69fa      	ldr	r2, [r7, #28]
 8008948:	6850      	ldr	r0, [r2, #4]
 800894a:	69fa      	ldr	r2, [r7, #28]
 800894c:	6892      	ldr	r2, [r2, #8]
 800894e:	4611      	mov	r1, r2
 8008950:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	f2c0 809f 	blt.w	8008a98 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d004      	beq.n	8008970 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	3304      	adds	r3, #4
 800896a:	4618      	mov	r0, r3
 800896c:	f7fe fc04 	bl	8007178 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008970:	463b      	mov	r3, r7
 8008972:	4618      	mov	r0, r3
 8008974:	f7ff ff72 	bl	800885c <prvSampleTimeNow>
 8008978:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	3b01      	subs	r3, #1
 800897e:	2b08      	cmp	r3, #8
 8008980:	f200 8087 	bhi.w	8008a92 <prvProcessReceivedCommands+0x172>
 8008984:	a201      	add	r2, pc, #4	@ (adr r2, 800898c <prvProcessReceivedCommands+0x6c>)
 8008986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898a:	bf00      	nop
 800898c:	080089b1 	.word	0x080089b1
 8008990:	080089b1 	.word	0x080089b1
 8008994:	08008a19 	.word	0x08008a19
 8008998:	08008a2d 	.word	0x08008a2d
 800899c:	08008a69 	.word	0x08008a69
 80089a0:	080089b1 	.word	0x080089b1
 80089a4:	080089b1 	.word	0x080089b1
 80089a8:	08008a19 	.word	0x08008a19
 80089ac:	08008a2d 	.word	0x08008a2d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089b6:	f043 0301 	orr.w	r3, r3, #1
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	18d1      	adds	r1, r2, r3
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	69b8      	ldr	r0, [r7, #24]
 80089d0:	f7ff ff64 	bl	800889c <prvInsertTimerInActiveList>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d05d      	beq.n	8008a96 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d009      	beq.n	80089fc <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	4413      	add	r3, r2
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	4619      	mov	r1, r3
 80089f4:	69b8      	ldr	r0, [r7, #24]
 80089f6:	f7ff fe61 	bl	80086bc <prvReloadTimer>
 80089fa:	e008      	b.n	8008a0e <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a02:	f023 0301 	bic.w	r3, r3, #1
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	69b8      	ldr	r0, [r7, #24]
 8008a14:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8008a16:	e03e      	b.n	8008a96 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a1e:	f023 0301 	bic.w	r3, r3, #1
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008a2a:	e035      	b.n	8008a98 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a32:	f043 0301 	orr.w	r3, r3, #1
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d103      	bne.n	8008a54 <prvProcessReceivedCommands+0x134>
 8008a4c:	f000 fa84 	bl	8008f58 <ulSetInterruptMask>
 8008a50:	bf00      	nop
 8008a52:	e7fd      	b.n	8008a50 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	699a      	ldr	r2, [r3, #24]
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	18d1      	adds	r1, r2, r3
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	69b8      	ldr	r0, [r7, #24]
 8008a62:	f7ff ff1b 	bl	800889c <prvInsertTimerInActiveList>
                        break;
 8008a66:	e017      	b.n	8008a98 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a6e:	f003 0302 	and.w	r3, r3, #2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d103      	bne.n	8008a7e <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 8008a76:	69b8      	ldr	r0, [r7, #24]
 8008a78:	f000 fb8a 	bl	8009190 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008a7c:	e00c      	b.n	8008a98 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a84:	f023 0301 	bic.w	r3, r3, #1
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008a90:	e002      	b.n	8008a98 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 8008a92:	bf00      	nop
 8008a94:	e000      	b.n	8008a98 <prvProcessReceivedCommands+0x178>
                        break;
 8008a96:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a98:	4b07      	ldr	r3, [pc, #28]	@ (8008ab8 <prvProcessReceivedCommands+0x198>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	1d39      	adds	r1, r7, #4
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fe fc78 	bl	8007396 <xQueueReceive>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f47f af3d 	bne.w	8008928 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8008aae:	bf00      	nop
 8008ab0:	bf00      	nop
 8008ab2:	3720      	adds	r7, #32
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	20000d94 	.word	0x20000d94

08008abc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ac2:	e009      	b.n	8008ad8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8008b00 <prvSwitchTimerLists+0x44>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8008ace:	f04f 31ff 	mov.w	r1, #4294967295
 8008ad2:	6838      	ldr	r0, [r7, #0]
 8008ad4:	f7ff fe14 	bl	8008700 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ad8:	4b09      	ldr	r3, [pc, #36]	@ (8008b00 <prvSwitchTimerLists+0x44>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1f0      	bne.n	8008ac4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008ae2:	4b07      	ldr	r3, [pc, #28]	@ (8008b00 <prvSwitchTimerLists+0x44>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8008ae8:	4b06      	ldr	r3, [pc, #24]	@ (8008b04 <prvSwitchTimerLists+0x48>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a04      	ldr	r2, [pc, #16]	@ (8008b00 <prvSwitchTimerLists+0x44>)
 8008aee:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008af0:	4a04      	ldr	r2, [pc, #16]	@ (8008b04 <prvSwitchTimerLists+0x48>)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6013      	str	r3, [r2, #0]
    }
 8008af6:	bf00      	nop
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	20000d8c 	.word	0x20000d8c
 8008b04:	20000d90 	.word	0x20000d90

08008b08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008b0e:	f000 f88d 	bl	8008c2c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008b12:	4b15      	ldr	r3, [pc, #84]	@ (8008b68 <prvCheckForValidListAndQueue+0x60>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d120      	bne.n	8008b5c <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8008b1a:	4814      	ldr	r0, [pc, #80]	@ (8008b6c <prvCheckForValidListAndQueue+0x64>)
 8008b1c:	f7fe fac6 	bl	80070ac <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008b20:	4813      	ldr	r0, [pc, #76]	@ (8008b70 <prvCheckForValidListAndQueue+0x68>)
 8008b22:	f7fe fac3 	bl	80070ac <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008b26:	4b13      	ldr	r3, [pc, #76]	@ (8008b74 <prvCheckForValidListAndQueue+0x6c>)
 8008b28:	4a10      	ldr	r2, [pc, #64]	@ (8008b6c <prvCheckForValidListAndQueue+0x64>)
 8008b2a:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008b2c:	4b12      	ldr	r3, [pc, #72]	@ (8008b78 <prvCheckForValidListAndQueue+0x70>)
 8008b2e:	4a10      	ldr	r2, [pc, #64]	@ (8008b70 <prvCheckForValidListAndQueue+0x68>)
 8008b30:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b32:	2300      	movs	r3, #0
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	4b11      	ldr	r3, [pc, #68]	@ (8008b7c <prvCheckForValidListAndQueue+0x74>)
 8008b38:	4a11      	ldr	r2, [pc, #68]	@ (8008b80 <prvCheckForValidListAndQueue+0x78>)
 8008b3a:	2110      	movs	r1, #16
 8008b3c:	200a      	movs	r0, #10
 8008b3e:	f7fe fbbe 	bl	80072be <xQueueGenericCreateStatic>
 8008b42:	4603      	mov	r3, r0
 8008b44:	4a08      	ldr	r2, [pc, #32]	@ (8008b68 <prvCheckForValidListAndQueue+0x60>)
 8008b46:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8008b48:	4b07      	ldr	r3, [pc, #28]	@ (8008b68 <prvCheckForValidListAndQueue+0x60>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d005      	beq.n	8008b5c <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b50:	4b05      	ldr	r3, [pc, #20]	@ (8008b68 <prvCheckForValidListAndQueue+0x60>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	490b      	ldr	r1, [pc, #44]	@ (8008b84 <prvCheckForValidListAndQueue+0x7c>)
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe fd68 	bl	800762c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008b5c:	f000 f878 	bl	8008c50 <vPortExitCritical>
    }
 8008b60:	bf00      	nop
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20000d94 	.word	0x20000d94
 8008b6c:	20000d64 	.word	0x20000d64
 8008b70:	20000d78 	.word	0x20000d78
 8008b74:	20000d8c 	.word	0x20000d8c
 8008b78:	20000d90 	.word	0x20000d90
 8008b7c:	20000e40 	.word	0x20000e40
 8008b80:	20000da0 	.word	0x20000da0
 8008b84:	0800d270 	.word	0x0800d270

08008b88 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8008bbc <vPortSetupTimerInterrupt+0x34>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b92:	4b0b      	ldr	r3, [pc, #44]	@ (8008bc0 <vPortSetupTimerInterrupt+0x38>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b98:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc4 <vPortSetupTimerInterrupt+0x3c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8008bc8 <vPortSetupTimerInterrupt+0x40>)
 8008b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba2:	099b      	lsrs	r3, r3, #6
 8008ba4:	4a09      	ldr	r2, [pc, #36]	@ (8008bcc <vPortSetupTimerInterrupt+0x44>)
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8008baa:	4b04      	ldr	r3, [pc, #16]	@ (8008bbc <vPortSetupTimerInterrupt+0x34>)
 8008bac:	2207      	movs	r2, #7
 8008bae:	601a      	str	r2, [r3, #0]
}
 8008bb0:	bf00      	nop
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	e000e010 	.word	0xe000e010
 8008bc0:	e000e018 	.word	0xe000e018
 8008bc4:	20000000 	.word	0x20000000
 8008bc8:	10624dd3 	.word	0x10624dd3
 8008bcc:	e000e014 	.word	0xe000e014

08008bd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8008bda:	4b0a      	ldr	r3, [pc, #40]	@ (8008c04 <prvTaskExitError+0x34>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be2:	d003      	beq.n	8008bec <prvTaskExitError+0x1c>
 8008be4:	f000 f9b8 	bl	8008f58 <ulSetInterruptMask>
 8008be8:	bf00      	nop
 8008bea:	e7fd      	b.n	8008be8 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 8008bec:	f000 f9b4 	bl	8008f58 <ulSetInterruptMask>

    while( ulDummy == 0 )
 8008bf0:	bf00      	nop
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0fc      	beq.n	8008bf2 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8008bf8:	bf00      	nop
 8008bfa:	bf00      	nop
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000020 	.word	0x20000020

08008c08 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8008c08:	b480      	push	{r7}
 8008c0a:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c0c:	4b06      	ldr	r3, [pc, #24]	@ (8008c28 <vPortYield+0x20>)
 8008c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c12:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8008c14:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8008c18:	f3bf 8f6f 	isb	sy
}
 8008c1c:	bf00      	nop
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	e000ed04 	.word	0xe000ed04

08008c2c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008c30:	f000 f992 	bl	8008f58 <ulSetInterruptMask>
    ulCriticalNesting++;
 8008c34:	4b05      	ldr	r3, [pc, #20]	@ (8008c4c <vPortEnterCritical+0x20>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	4a04      	ldr	r2, [pc, #16]	@ (8008c4c <vPortEnterCritical+0x20>)
 8008c3c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8008c3e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8008c42:	f3bf 8f6f 	isb	sy
}
 8008c46:	bf00      	nop
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20000020 	.word	0x20000020

08008c50 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 8008c54:	4b0a      	ldr	r3, [pc, #40]	@ (8008c80 <vPortExitCritical+0x30>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d103      	bne.n	8008c64 <vPortExitCritical+0x14>
 8008c5c:	f000 f97c 	bl	8008f58 <ulSetInterruptMask>
 8008c60:	bf00      	nop
 8008c62:	e7fd      	b.n	8008c60 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 8008c64:	4b06      	ldr	r3, [pc, #24]	@ (8008c80 <vPortExitCritical+0x30>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	4a05      	ldr	r2, [pc, #20]	@ (8008c80 <vPortExitCritical+0x30>)
 8008c6c:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 8008c6e:	4b04      	ldr	r3, [pc, #16]	@ (8008c80 <vPortExitCritical+0x30>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d102      	bne.n	8008c7c <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 8008c76:	2000      	movs	r0, #0
 8008c78:	f000 f97b 	bl	8008f72 <vClearInterruptMask>
    }
}
 8008c7c:	bf00      	nop
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	20000020 	.word	0x20000020

08008c84 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c8a:	f000 f965 	bl	8008f58 <ulSetInterruptMask>
 8008c8e:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008c90:	f7ff f87e 	bl	8007d90 <xTaskIncrementTick>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c9a:	4b05      	ldr	r3, [pc, #20]	@ (8008cb0 <xPortSysTickHandler+0x2c>)
 8008c9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ca0:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f965 	bl	8008f72 <vClearInterruptMask>
}
 8008ca8:	bf00      	nop
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	e000ed04 	.word	0xe000ed04

08008cb4 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	3b02      	subs	r3, #2
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 8008cca:	7afb      	ldrb	r3, [r7, #11]
 8008ccc:	2b66      	cmp	r3, #102	@ 0x66
 8008cce:	d102      	bne.n	8008cd6 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 8008cd0:	f000 f90e 	bl	8008ef0 <vRestoreContextOfFirstTask>
            break;
 8008cd4:	e003      	b.n	8008cde <vPortSVCHandler_C+0x2a>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 8008cd6:	f000 f93f 	bl	8008f58 <ulSetInterruptMask>
 8008cda:	bf00      	nop
 8008cdc:	e7fd      	b.n	8008cda <vPortSVCHandler_C+0x26>
    }
}
 8008cde:	bf00      	nop
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	3b04      	subs	r3, #4
 8008cfa:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008d02:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3b04      	subs	r3, #4
 8008d08:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3b04      	subs	r3, #4
 8008d14:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 8008d16:	4a38      	ldr	r2, [pc, #224]	@ (8008df8 <pxPortInitialiseStack+0x110>)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3b04      	subs	r3, #4
 8008d20:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8008d28:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3b04      	subs	r3, #4
 8008d2e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8008d36:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3b04      	subs	r3, #4
 8008d3c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8008d44:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3b04      	subs	r3, #4
 8008d4a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8008d52:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3b04      	subs	r3, #4
 8008d58:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3b04      	subs	r3, #4
 8008d64:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8008d6c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	3b04      	subs	r3, #4
 8008d72:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8008d7a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3b04      	subs	r3, #4
 8008d80:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8008d88:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3b04      	subs	r3, #4
 8008d8e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8008d96:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	3b04      	subs	r3, #4
 8008d9c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8008da4:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3b04      	subs	r3, #4
 8008daa:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8008db2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3b04      	subs	r3, #4
 8008db8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8008dc0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	3b04      	subs	r3, #4
 8008dc6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8008dce:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	3b04      	subs	r3, #4
 8008dd4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 8008ddc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3b04      	subs	r3, #4
 8008de2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 8008dea:	68fb      	ldr	r3, [r7, #12]
    }
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	08008bd1 	.word	0x08008bd1

08008dfc <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 8008e06:	4b35      	ldr	r3, [pc, #212]	@ (8008edc <xPortStartScheduler+0xe0>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 8008e0c:	4b33      	ldr	r3, [pc, #204]	@ (8008edc <xPortStartScheduler+0xe0>)
 8008e0e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8008e12:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 8008e14:	4b31      	ldr	r3, [pc, #196]	@ (8008edc <xPortStartScheduler+0xe0>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	0e1b      	lsrs	r3, r3, #24
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e1e:	79fb      	ldrb	r3, [r7, #7]
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	4b2d      	ldr	r3, [pc, #180]	@ (8008ee0 <xPortStartScheduler+0xe4>)
 8008e2a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8008e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8008ee0 <xPortStartScheduler+0xe4>)
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d103      	bne.n	8008e3c <xPortStartScheduler+0x40>
 8008e34:	f000 f890 	bl	8008f58 <ulSetInterruptMask>
 8008e38:	bf00      	nop
 8008e3a:	e7fd      	b.n	8008e38 <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8008e3c:	79fb      	ldrb	r3, [r7, #7]
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	43db      	mvns	r3, r3
 8008e42:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00b      	beq.n	8008e62 <xPortStartScheduler+0x66>
 8008e4a:	f000 f885 	bl	8008f58 <ulSetInterruptMask>
 8008e4e:	bf00      	nop
 8008e50:	e7fd      	b.n	8008e4e <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	3301      	adds	r3, #1
 8008e56:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e58:	79fb      	ldrb	r3, [r7, #7]
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	005b      	lsls	r3, r3, #1
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e62:	79fb      	ldrb	r3, [r7, #7]
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e6a:	2b80      	cmp	r3, #128	@ 0x80
 8008e6c:	d0f1      	beq.n	8008e52 <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	2b08      	cmp	r3, #8
 8008e72:	d103      	bne.n	8008e7c <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8008e74:	4b1b      	ldr	r3, [pc, #108]	@ (8008ee4 <xPortStartScheduler+0xe8>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	601a      	str	r2, [r3, #0]
 8008e7a:	e004      	b.n	8008e86 <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f1c3 0307 	rsb	r3, r3, #7
 8008e82:	4a18      	ldr	r2, [pc, #96]	@ (8008ee4 <xPortStartScheduler+0xe8>)
 8008e84:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e86:	4b17      	ldr	r3, [pc, #92]	@ (8008ee4 <xPortStartScheduler+0xe8>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	021b      	lsls	r3, r3, #8
 8008e8c:	4a15      	ldr	r2, [pc, #84]	@ (8008ee4 <xPortStartScheduler+0xe8>)
 8008e8e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e90:	4b14      	ldr	r3, [pc, #80]	@ (8008ee4 <xPortStartScheduler+0xe8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e98:	4a12      	ldr	r2, [pc, #72]	@ (8008ee4 <xPortStartScheduler+0xe8>)
 8008e9a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 8008e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8008edc <xPortStartScheduler+0xe0>)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008ea2:	4b11      	ldr	r3, [pc, #68]	@ (8008ee8 <xPortStartScheduler+0xec>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a10      	ldr	r2, [pc, #64]	@ (8008ee8 <xPortStartScheduler+0xec>)
 8008ea8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eac:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008eae:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee8 <xPortStartScheduler+0xec>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8008ee8 <xPortStartScheduler+0xec>)
 8008eb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eb8:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008eba:	f7ff fe65 	bl	8008b88 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8008ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8008eec <xPortStartScheduler+0xf0>)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 8008ec4:	f000 f834 	bl	8008f30 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008ec8:	f7ff f872 	bl	8007fb0 <vTaskSwitchContext>
    prvTaskExitError();
 8008ecc:	f7ff fe80 	bl	8008bd0 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	e000ed1c 	.word	0xe000ed1c
 8008ee0:	20000e90 	.word	0x20000e90
 8008ee4:	20000e94 	.word	0x20000e94
 8008ee8:	e000ed20 	.word	0xe000ed20
 8008eec:	20000020 	.word	0x20000020

08008ef0 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8008ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8008f20 <pxCurrentTCBConst2>)
 8008ef2:	6811      	ldr	r1, [r2, #0]
 8008ef4:	6808      	ldr	r0, [r1, #0]
 8008ef6:	c806      	ldmia	r0!, {r1, r2}
 8008ef8:	f381 880b 	msr	PSPLIM, r1
 8008efc:	2102      	movs	r1, #2
 8008efe:	f381 8814 	msr	CONTROL, r1
 8008f02:	3020      	adds	r0, #32
 8008f04:	f380 8809 	msr	PSP, r0
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f04f 0000 	mov.w	r0, #0
 8008f10:	f380 8811 	msr	BASEPRI, r0
 8008f14:	4710      	bx	r2
 8008f16:	bf00      	nop
 8008f18:	f3af 8000 	nop.w
 8008f1c:	f3af 8000 	nop.w

08008f20 <pxCurrentTCBConst2>:
 8008f20:	20000864 	.word	0x20000864
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop
	...

08008f30 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8008f30:	4807      	ldr	r0, [pc, #28]	@ (8008f50 <xVTORConst>)
 8008f32:	6800      	ldr	r0, [r0, #0]
 8008f34:	6800      	ldr	r0, [r0, #0]
 8008f36:	f380 8808 	msr	MSP, r0
 8008f3a:	b662      	cpsie	i
 8008f3c:	b661      	cpsie	f
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	df66      	svc	102	@ 0x66
 8008f48:	bf00      	nop
 8008f4a:	bf00      	nop
 8008f4c:	f3af 8000 	nop.w

08008f50 <xVTORConst>:
 8008f50:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8008f54:	bf00      	nop
 8008f56:	bf00      	nop

08008f58 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8008f58:	f3ef 8011 	mrs	r0, BASEPRI
 8008f5c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8008f60:	f381 8811 	msr	BASEPRI, r1
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8008f6e:	bf00      	nop
 8008f70:	4618      	mov	r0, r3

08008f72 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8008f72:	f380 8811 	msr	BASEPRI, r0
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 8008f80:	bf00      	nop
	...

08008f90 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8008f90:	f3ef 8009 	mrs	r0, PSP
 8008f94:	f3ef 820b 	mrs	r2, PSPLIM
 8008f98:	4673      	mov	r3, lr
 8008f9a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8008f9e:	4a10      	ldr	r2, [pc, #64]	@ (8008fe0 <pxCurrentTCBConst>)
 8008fa0:	6811      	ldr	r1, [r2, #0]
 8008fa2:	6008      	str	r0, [r1, #0]
 8008fa4:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008fa8:	f380 8811 	msr	BASEPRI, r0
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f7fe fffc 	bl	8007fb0 <vTaskSwitchContext>
 8008fb8:	f04f 0000 	mov.w	r0, #0
 8008fbc:	f380 8811 	msr	BASEPRI, r0
 8008fc0:	4a07      	ldr	r2, [pc, #28]	@ (8008fe0 <pxCurrentTCBConst>)
 8008fc2:	6811      	ldr	r1, [r2, #0]
 8008fc4:	6808      	ldr	r0, [r1, #0]
 8008fc6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8008fca:	f382 880b 	msr	PSPLIM, r2
 8008fce:	f380 8809 	msr	PSP, r0
 8008fd2:	4718      	bx	r3
 8008fd4:	f3af 8000 	nop.w
 8008fd8:	f3af 8000 	nop.w
 8008fdc:	f3af 8000 	nop.w

08008fe0 <pxCurrentTCBConst>:
 8008fe0:	20000864 	.word	0x20000864
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop
	...

08008ff0 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8008ff0:	f01e 0f04 	tst.w	lr, #4
 8008ff4:	bf0c      	ite	eq
 8008ff6:	f3ef 8008 	mrseq	r0, MSP
 8008ffa:	f3ef 8009 	mrsne	r0, PSP
 8008ffe:	4904      	ldr	r1, [pc, #16]	@ (8009010 <svchandler_address_const>)
 8009000:	4708      	bx	r1
 8009002:	bf00      	nop
 8009004:	f3af 8000 	nop.w
 8009008:	f3af 8000 	nop.w
 800900c:	f3af 8000 	nop.w

08009010 <svchandler_address_const>:
 8009010:	08008cb5 	.word	0x08008cb5
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 8009014:	bf00      	nop
 8009016:	bf00      	nop

08009018 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8009020:	2300      	movs	r3, #0
 8009022:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8009024:	f7fe fda8 	bl	8007b78 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8009028:	4b54      	ldr	r3, [pc, #336]	@ (800917c <pvPortMalloc+0x164>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8009030:	f000 f8f8 	bl	8009224 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d022      	beq.n	8009080 <pvPortMalloc+0x68>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800903a:	2308      	movs	r3, #8
 800903c:	43db      	mvns	r3, r3
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	429a      	cmp	r2, r3
 8009042:	d81b      	bhi.n	800907c <pvPortMalloc+0x64>
            {
                xWantedSize += xHeapStructSize;
 8009044:	2208      	movs	r2, #8
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4413      	add	r3, r2
 800904a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	2b00      	cmp	r3, #0
 8009054:	d014      	beq.n	8009080 <pvPortMalloc+0x68>
                {
                    /* Byte alignment required. */
                    xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f003 0307 	and.w	r3, r3, #7
 800905c:	f1c3 0308 	rsb	r3, r3, #8
 8009060:	613b      	str	r3, [r7, #16]

                    if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	43db      	mvns	r3, r3
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	429a      	cmp	r2, r3
 800906a:	d804      	bhi.n	8009076 <pvPortMalloc+0x5e>
                    {
                        xWantedSize += xAdditionalRequiredSize;
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	4413      	add	r3, r2
 8009072:	607b      	str	r3, [r7, #4]
 8009074:	e004      	b.n	8009080 <pvPortMalloc+0x68>
                    }
                    else
                    {
                        xWantedSize = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	607b      	str	r3, [r7, #4]
 800907a:	e001      	b.n	8009080 <pvPortMalloc+0x68>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	db69      	blt.n	800915a <pvPortMalloc+0x142>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d066      	beq.n	800915a <pvPortMalloc+0x142>
 800908c:	4b3c      	ldr	r3, [pc, #240]	@ (8009180 <pvPortMalloc+0x168>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	429a      	cmp	r2, r3
 8009094:	d861      	bhi.n	800915a <pvPortMalloc+0x142>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009096:	4b3b      	ldr	r3, [pc, #236]	@ (8009184 <pvPortMalloc+0x16c>)
 8009098:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800909a:	4b3a      	ldr	r3, [pc, #232]	@ (8009184 <pvPortMalloc+0x16c>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090a0:	e004      	b.n	80090ac <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d903      	bls.n	80090be <pvPortMalloc+0xa6>
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1f1      	bne.n	80090a2 <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80090be:	4b2f      	ldr	r3, [pc, #188]	@ (800917c <pvPortMalloc+0x164>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	69fa      	ldr	r2, [r7, #28]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d048      	beq.n	800915a <pvPortMalloc+0x142>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2208      	movs	r2, #8
 80090ce:	4413      	add	r3, r2
 80090d0:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	1ad2      	subs	r2, r2, r3
 80090e2:	2308      	movs	r3, #8
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d918      	bls.n	800911c <pvPortMalloc+0x104>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090ea:	69fa      	ldr	r2, [r7, #28]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4413      	add	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f003 0307 	and.w	r3, r3, #7
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <pvPortMalloc+0xec>
 80090fc:	f7ff ff2c 	bl	8008f58 <ulSetInterruptMask>
 8009100:	bf00      	nop
 8009102:	e7fd      	b.n	8009100 <pvPortMalloc+0xe8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	1ad2      	subs	r2, r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f000 f8e0 	bl	80092dc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800911c:	4b18      	ldr	r3, [pc, #96]	@ (8009180 <pvPortMalloc+0x168>)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	4a16      	ldr	r2, [pc, #88]	@ (8009180 <pvPortMalloc+0x168>)
 8009128:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800912a:	4b15      	ldr	r3, [pc, #84]	@ (8009180 <pvPortMalloc+0x168>)
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	4b16      	ldr	r3, [pc, #88]	@ (8009188 <pvPortMalloc+0x170>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	429a      	cmp	r2, r3
 8009134:	d203      	bcs.n	800913e <pvPortMalloc+0x126>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009136:	4b12      	ldr	r3, [pc, #72]	@ (8009180 <pvPortMalloc+0x168>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a13      	ldr	r2, [pc, #76]	@ (8009188 <pvPortMalloc+0x170>)
 800913c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8009150:	4b0e      	ldr	r3, [pc, #56]	@ (800918c <pvPortMalloc+0x174>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3301      	adds	r3, #1
 8009156:	4a0d      	ldr	r2, [pc, #52]	@ (800918c <pvPortMalloc+0x174>)
 8009158:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800915a:	f7fe fd1b 	bl	8007b94 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f003 0307 	and.w	r3, r3, #7
 8009164:	2b00      	cmp	r3, #0
 8009166:	d003      	beq.n	8009170 <pvPortMalloc+0x158>
 8009168:	f7ff fef6 	bl	8008f58 <ulSetInterruptMask>
 800916c:	bf00      	nop
 800916e:	e7fd      	b.n	800916c <pvPortMalloc+0x154>
    return pvReturn;
 8009170:	697b      	ldr	r3, [r7, #20]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3720      	adds	r7, #32
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20002ea0 	.word	0x20002ea0
 8009180:	20002ea4 	.word	0x20002ea4
 8009184:	20002e98 	.word	0x20002e98
 8009188:	20002ea8 	.word	0x20002ea8
 800918c:	20002eac 	.word	0x20002eac

08009190 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d037      	beq.n	8009212 <vPortFree+0x82>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80091a2:	2308      	movs	r3, #8
 80091a4:	425b      	negs	r3, r3
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	4413      	add	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	db03      	blt.n	80091c0 <vPortFree+0x30>
 80091b8:	f7ff fece 	bl	8008f58 <ulSetInterruptMask>
 80091bc:	bf00      	nop
 80091be:	e7fd      	b.n	80091bc <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d003      	beq.n	80091d0 <vPortFree+0x40>
 80091c8:	f7ff fec6 	bl	8008f58 <ulSetInterruptMask>
 80091cc:	bf00      	nop
 80091ce:	e7fd      	b.n	80091cc <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	da1c      	bge.n	8009212 <vPortFree+0x82>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d118      	bne.n	8009212 <vPortFree+0x82>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80091ec:	f7fe fcc4 	bl	8007b78 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	4b09      	ldr	r3, [pc, #36]	@ (800921c <vPortFree+0x8c>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4413      	add	r3, r2
 80091fa:	4a08      	ldr	r2, [pc, #32]	@ (800921c <vPortFree+0x8c>)
 80091fc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091fe:	68b8      	ldr	r0, [r7, #8]
 8009200:	f000 f86c 	bl	80092dc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8009204:	4b06      	ldr	r3, [pc, #24]	@ (8009220 <vPortFree+0x90>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3301      	adds	r3, #1
 800920a:	4a05      	ldr	r2, [pc, #20]	@ (8009220 <vPortFree+0x90>)
 800920c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800920e:	f7fe fcc1 	bl	8007b94 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8009212:	bf00      	nop
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	20002ea4 	.word	0x20002ea4
 8009220:	20002eb0 	.word	0x20002eb0

08009224 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800922a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800922e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009230:	4b25      	ldr	r3, [pc, #148]	@ (80092c8 <prvHeapInit+0xa4>)
 8009232:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f003 0307 	and.w	r3, r3, #7
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00c      	beq.n	8009258 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3307      	adds	r3, #7
 8009242:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f023 0307 	bic.w	r3, r3, #7
 800924a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	4a1d      	ldr	r2, [pc, #116]	@ (80092c8 <prvHeapInit+0xa4>)
 8009254:	4413      	add	r3, r2
 8009256:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800925c:	4a1b      	ldr	r2, [pc, #108]	@ (80092cc <prvHeapInit+0xa8>)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8009262:	4b1a      	ldr	r3, [pc, #104]	@ (80092cc <prvHeapInit+0xa8>)
 8009264:	2200      	movs	r2, #0
 8009266:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ( pucAlignedHeap + xTotalHeapSize );
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	4413      	add	r3, r2
 800926e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8009270:	2208      	movs	r2, #8
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	1a9b      	subs	r3, r3, r2
 8009276:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 0307 	bic.w	r3, r3, #7
 800927e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4a13      	ldr	r2, [pc, #76]	@ (80092d0 <prvHeapInit+0xac>)
 8009284:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009286:	4b12      	ldr	r3, [pc, #72]	@ (80092d0 <prvHeapInit+0xac>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2200      	movs	r2, #0
 800928c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800928e:	4b10      	ldr	r3, [pc, #64]	@ (80092d0 <prvHeapInit+0xac>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2200      	movs	r2, #0
 8009294:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	1ad2      	subs	r2, r2, r3
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092a4:	4b0a      	ldr	r3, [pc, #40]	@ (80092d0 <prvHeapInit+0xac>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	4a08      	ldr	r2, [pc, #32]	@ (80092d4 <prvHeapInit+0xb0>)
 80092b2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	4a07      	ldr	r2, [pc, #28]	@ (80092d8 <prvHeapInit+0xb4>)
 80092ba:	6013      	str	r3, [r2, #0]
}
 80092bc:	bf00      	nop
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	20000e98 	.word	0x20000e98
 80092cc:	20002e98 	.word	0x20002e98
 80092d0:	20002ea0 	.word	0x20002ea0
 80092d4:	20002ea8 	.word	0x20002ea8
 80092d8:	20002ea4 	.word	0x20002ea4

080092dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092e4:	4b28      	ldr	r3, [pc, #160]	@ (8009388 <prvInsertBlockIntoFreeList+0xac>)
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	e002      	b.n	80092f0 <prvInsertBlockIntoFreeList+0x14>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	60fb      	str	r3, [r7, #12]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d8f7      	bhi.n	80092ea <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	4413      	add	r3, r2
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	429a      	cmp	r2, r3
 800930a:	d108      	bne.n	800931e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	441a      	add	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	441a      	add	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	429a      	cmp	r2, r3
 8009330:	d118      	bne.n	8009364 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	4b15      	ldr	r3, [pc, #84]	@ (800938c <prvInsertBlockIntoFreeList+0xb0>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	429a      	cmp	r2, r3
 800933c:	d00d      	beq.n	800935a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	441a      	add	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	601a      	str	r2, [r3, #0]
 8009358:	e008      	b.n	800936c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800935a:	4b0c      	ldr	r3, [pc, #48]	@ (800938c <prvInsertBlockIntoFreeList+0xb0>)
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	e003      	b.n	800936c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	429a      	cmp	r2, r3
 8009372:	d002      	beq.n	800937a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800937a:	bf00      	nop
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	20002e98 	.word	0x20002e98
 800938c:	20002ea0 	.word	0x20002ea0

08009390 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009396:	1d3b      	adds	r3, r7, #4
 8009398:	2200      	movs	r2, #0
 800939a:	601a      	str	r2, [r3, #0]
 800939c:	605a      	str	r2, [r3, #4]
 800939e:	609a      	str	r2, [r3, #8]
 80093a0:	60da      	str	r2, [r3, #12]
 80093a2:	611a      	str	r2, [r3, #16]

    /* ---- RESET (active low) ---- */
    GPIO_InitStruct.Pin   = RESET_WINC_Pin;
 80093a4:	2301      	movs	r3, #1
 80093a6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80093a8:	2301      	movs	r3, #1
 80093aa:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093b0:	2300      	movs	r3, #0
 80093b2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(RESET_WINC_GPIO_Port, &GPIO_InitStruct);
 80093b4:	1d3b      	adds	r3, r7, #4
 80093b6:	4619      	mov	r1, r3
 80093b8:	4815      	ldr	r0, [pc, #84]	@ (8009410 <init_chip_pins+0x80>)
 80093ba:	f7f8 fcc5 	bl	8001d48 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(RESET_WINC_GPIO_Port, RESET_WINC_Pin, GPIO_PIN_RESET);
 80093be:	2200      	movs	r2, #0
 80093c0:	2101      	movs	r1, #1
 80093c2:	4813      	ldr	r0, [pc, #76]	@ (8009410 <init_chip_pins+0x80>)
 80093c4:	f7f8 fe1e 	bl	8002004 <HAL_GPIO_WritePin>

    /* ---- CHIP ENABLE ---- */
    GPIO_InitStruct.Pin = CHIP_EN_WINC_Pin;
 80093c8:	2302      	movs	r3, #2
 80093ca:	607b      	str	r3, [r7, #4]
    /* same Mode/Pull/Speed as above */
    HAL_GPIO_Init(CHIP_EN_WINC_GPIO_Port, &GPIO_InitStruct);
 80093cc:	1d3b      	adds	r3, r7, #4
 80093ce:	4619      	mov	r1, r3
 80093d0:	480f      	ldr	r0, [pc, #60]	@ (8009410 <init_chip_pins+0x80>)
 80093d2:	f7f8 fcb9 	bl	8001d48 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(CHIP_EN_WINC_GPIO_Port, CHIP_EN_WINC_Pin, GPIO_PIN_RESET);
 80093d6:	2200      	movs	r2, #0
 80093d8:	2102      	movs	r1, #2
 80093da:	480d      	ldr	r0, [pc, #52]	@ (8009410 <init_chip_pins+0x80>)
 80093dc:	f7f8 fe12 	bl	8002004 <HAL_GPIO_WritePin>

    /* perform a hardware reset pulse */
    HAL_Delay(50);
 80093e0:	2032      	movs	r0, #50	@ 0x32
 80093e2:	f7f8 fa9b 	bl	800191c <HAL_Delay>
    HAL_GPIO_WritePin(CHIP_EN_WINC_GPIO_Port, CHIP_EN_WINC_Pin, GPIO_PIN_SET);
 80093e6:	2201      	movs	r2, #1
 80093e8:	2102      	movs	r1, #2
 80093ea:	4809      	ldr	r0, [pc, #36]	@ (8009410 <init_chip_pins+0x80>)
 80093ec:	f7f8 fe0a 	bl	8002004 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80093f0:	2032      	movs	r0, #50	@ 0x32
 80093f2:	f7f8 fa93 	bl	800191c <HAL_Delay>
    HAL_GPIO_WritePin(RESET_WINC_GPIO_Port, RESET_WINC_Pin, GPIO_PIN_SET);
 80093f6:	2201      	movs	r2, #1
 80093f8:	2101      	movs	r1, #1
 80093fa:	4805      	ldr	r0, [pc, #20]	@ (8009410 <init_chip_pins+0x80>)
 80093fc:	f7f8 fe02 	bl	8002004 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8009400:	2064      	movs	r0, #100	@ 0x64
 8009402:	f7f8 fa8b 	bl	800191c <HAL_Delay>
}
 8009406:	bf00      	nop
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	42020400 	.word	0x42020400

08009414 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 8009418:	f7ff ffba 	bl	8009390 <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 800941c:	f000 f804 	bl	8009428 <nm_bsp_reset>

	return M2M_SUCCESS;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
    /* Set Power sequence of GPIO lines */
    /* -------------------------------- */

    /* Power enable (3.3V) - 3V3_DC2DC_EN output */
    HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_SET);
 800942c:	2201      	movs	r2, #1
 800942e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009432:	4811      	ldr	r0, [pc, #68]	@ (8009478 <nm_bsp_reset+0x50>)
 8009434:	f7f8 fde6 	bl	8002004 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8009438:	2064      	movs	r0, #100	@ 0x64
 800943a:	f7f8 fa6f 	bl	800191c <HAL_Delay>

    /* Level Shifter Translate enable - LEVEL_TRNSLT_EN output */
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_RESET);
 800943e:	2200      	movs	r2, #0
 8009440:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009444:	480d      	ldr	r0, [pc, #52]	@ (800947c <nm_bsp_reset+0x54>)
 8009446:	f7f8 fddd 	bl	8002004 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800944a:	2064      	movs	r0, #100	@ 0x64
 800944c:	f7f8 fa66 	bl	800191c <HAL_Delay>

    /* Set CHIP enable */
   // HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 8009450:	2201      	movs	r2, #1
 8009452:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009456:	4808      	ldr	r0, [pc, #32]	@ (8009478 <nm_bsp_reset+0x50>)
 8009458:	f7f8 fdd4 	bl	8002004 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800945c:	2064      	movs	r0, #100	@ 0x64
 800945e:	f7f8 fa5d 	bl	800191c <HAL_Delay>

    /* Set RSTN 1.8V */
    HAL_GPIO_WritePin(GPIOC,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 8009462:	2201      	movs	r2, #1
 8009464:	2180      	movs	r1, #128	@ 0x80
 8009466:	4805      	ldr	r0, [pc, #20]	@ (800947c <nm_bsp_reset+0x54>)
 8009468:	f7f8 fdcc 	bl	8002004 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800946c:	2064      	movs	r0, #100	@ 0x64
 800946e:	f7f8 fa55 	bl	800191c <HAL_Delay>

}
 8009472:	bf00      	nop
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	42020000 	.word	0x42020000
 800947c:	42020800 	.word	0x42020800

08009480 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f7f8 fa47 	bl	800191c <HAL_Delay>
}
 800948e:	bf00      	nop
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b088      	sub	sp, #32
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    /* EXTI2 init ISR function - called from nm_bsp_register_isr() */

     __GPIOC_CLK_ENABLE();
 80094a0:	4b13      	ldr	r3, [pc, #76]	@ (80094f0 <nm_bsp_register_isr+0x58>)
 80094a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094a6:	4a12      	ldr	r2, [pc, #72]	@ (80094f0 <nm_bsp_register_isr+0x58>)
 80094a8:	f043 0304 	orr.w	r3, r3, #4
 80094ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80094b0:	4b0f      	ldr	r3, [pc, #60]	@ (80094f0 <nm_bsp_register_isr+0x58>)
 80094b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094b6:	f003 0304 	and.w	r3, r3, #4
 80094ba:	60bb      	str	r3, [r7, #8]
 80094bc:	68bb      	ldr	r3, [r7, #8]
	 //__GPIOA_CLK_ENABLE();

    /*Configure GPIO pin : PA2 */
    GPIO_InitStruct.Pin   = CONF_WINC_SPI_INT_PIN;
 80094be:	2301      	movs	r3, #1
 80094c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80094c2:	4b0c      	ldr	r3, [pc, #48]	@ (80094f4 <nm_bsp_register_isr+0x5c>)
 80094c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80094c6:	2300      	movs	r3, #0
 80094c8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094ca:	f107 030c 	add.w	r3, r7, #12
 80094ce:	4619      	mov	r1, r3
 80094d0:	4809      	ldr	r0, [pc, #36]	@ (80094f8 <nm_bsp_register_isr+0x60>)
 80094d2:	f7f8 fc39 	bl	8001d48 <HAL_GPIO_Init>

    /* EXTI 2 (PA2) interrupt init*/
    HAL_NVIC_SetPriority(CONF_WINC_EXTI_IRQN, 0x00, 0);
 80094d6:	2200      	movs	r2, #0
 80094d8:	2100      	movs	r1, #0
 80094da:	200b      	movs	r0, #11
 80094dc:	f7f8 fb1e 	bl	8001b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CONF_WINC_EXTI_IRQN);
 80094e0:	200b      	movs	r0, #11
 80094e2:	f7f8 fb35 	bl	8001b50 <HAL_NVIC_EnableIRQ>
	/* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
#endif

}
 80094e6:	bf00      	nop
 80094e8:	3720      	adds	r7, #32
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	44020c00 	.word	0x44020c00
 80094f4:	10210000 	.word	0x10210000
 80094f8:	42020400 	.word	0x42020400

080094fc <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	4603      	mov	r3, r0
 8009504:	71fb      	strb	r3, [r7, #7]
    if (1 == u8Enable)
 8009506:	79fb      	ldrb	r3, [r7, #7]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d108      	bne.n	800951e <nm_bsp_interrupt_ctrl+0x22>
    {
        HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x01, 0);
 800950c:	2200      	movs	r2, #0
 800950e:	2101      	movs	r1, #1
 8009510:	200b      	movs	r0, #11
 8009512:	f7f8 fb03 	bl	8001b1c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 8009516:	200b      	movs	r0, #11
 8009518:	f7f8 fb1a 	bl	8001b50 <HAL_NVIC_EnableIRQ>
    }
    else
    {
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
    }
}
 800951c:	e002      	b.n	8009524 <nm_bsp_interrupt_ctrl+0x28>
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 800951e:	200b      	movs	r0, #11
 8009520:	f7f8 fb24 	bl	8001b6c <HAL_NVIC_DisableIRQ>
}
 8009524:	bf00      	nop
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	4603      	mov	r3, r0
 8009534:	71fb      	strb	r3, [r7, #7]
    if (select)
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d005      	beq.n	8009548 <spi_select_slave+0x1c>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 800953c:	2200      	movs	r2, #0
 800953e:	2110      	movs	r1, #16
 8009540:	4806      	ldr	r0, [pc, #24]	@ (800955c <spi_select_slave+0x30>)
 8009542:	f7f8 fd5f 	bl	8002004 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 8009546:	e004      	b.n	8009552 <spi_select_slave+0x26>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 8009548:	2201      	movs	r2, #1
 800954a:	2110      	movs	r1, #16
 800954c:	4803      	ldr	r0, [pc, #12]	@ (800955c <spi_select_slave+0x30>)
 800954e:	f7f8 fd59 	bl	8002004 <HAL_GPIO_WritePin>
}
 8009552:	bf00      	nop
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	42020000 	.word	0x42020000

08009560 <spi_rw>:
	return M2M_SUCCESS;
}
#else

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b088      	sub	sp, #32
 8009564:	af02      	add	r7, sp, #8
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	4613      	mov	r3, r2
 800956c:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;
   
    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 800956e:	2001      	movs	r0, #1
 8009570:	f7ff ffdc 	bl	800952c <spi_select_slave>
    
    
    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10b      	bne.n	8009592 <spi_rw+0x32>
	{
		status = HAL_SPI_TransmitReceive(&hspiWifi,spiDummyBuf,pu8Miso,u16Sz,1000);
 800957a:	88fb      	ldrh	r3, [r7, #6]
 800957c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009580:	9200      	str	r2, [sp, #0]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	491a      	ldr	r1, [pc, #104]	@ (80095f0 <spi_rw+0x90>)
 8009586:	481b      	ldr	r0, [pc, #108]	@ (80095f4 <spi_rw+0x94>)
 8009588:	f7fb ff5e 	bl	8005448 <HAL_SPI_TransmitReceive>
 800958c:	4603      	mov	r3, r0
 800958e:	75fb      	strb	r3, [r7, #23]
 8009590:	e01f      	b.n	80095d2 <spi_rw+0x72>
    }
    else if(pu8Miso == NULL)
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d111      	bne.n	80095bc <spi_rw+0x5c>
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,spiDummyBuf,u16Sz,1000);
 8009598:	88fb      	ldrh	r3, [r7, #6]
 800959a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800959e:	9200      	str	r2, [sp, #0]
 80095a0:	4a13      	ldr	r2, [pc, #76]	@ (80095f0 <spi_rw+0x90>)
 80095a2:	68f9      	ldr	r1, [r7, #12]
 80095a4:	4813      	ldr	r0, [pc, #76]	@ (80095f4 <spi_rw+0x94>)
 80095a6:	f7fb ff4f 	bl	8005448 <HAL_SPI_TransmitReceive>
 80095aa:	4603      	mov	r3, r0
 80095ac:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 80095ae:	88fb      	ldrh	r3, [r7, #6]
 80095b0:	461a      	mov	r2, r3
 80095b2:	2100      	movs	r1, #0
 80095b4:	480e      	ldr	r0, [pc, #56]	@ (80095f0 <spi_rw+0x90>)
 80095b6:	f003 f8b3 	bl	800c720 <memset>
 80095ba:	e00a      	b.n	80095d2 <spi_rw+0x72>
    }
    else
    {     
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,pu8Miso,u16Sz,1000);
 80095bc:	88fb      	ldrh	r3, [r7, #6]
 80095be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80095c2:	9200      	str	r2, [sp, #0]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	68f9      	ldr	r1, [r7, #12]
 80095c8:	480a      	ldr	r0, [pc, #40]	@ (80095f4 <spi_rw+0x94>)
 80095ca:	f7fb ff3d 	bl	8005448 <HAL_SPI_TransmitReceive>
 80095ce:	4603      	mov	r3, r0
 80095d0:	75fb      	strb	r3, [r7, #23]
    } 
    
    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 80095d2:	7dfb      	ldrb	r3, [r7, #23]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <spi_rw+0x7e>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
        return status;
 80095d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095dc:	e003      	b.n	80095e6 <spi_rw+0x86>
    }
    
  	spi_select_slave(false);
 80095de:	2000      	movs	r0, #0
 80095e0:	f7ff ffa4 	bl	800952c <spi_select_slave>

	return M2M_SUCCESS;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20002f44 	.word	0x20002f44
 80095f4:	20002eb4 	.word	0x20002eb4

080095f8 <nm_spi_rw>:

/**
 * @brief  Expose nm_spi_rw to the WINC1500 driver.
 */
sint8 nm_spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4613      	mov	r3, r2
 8009604:	80fb      	strh	r3, [r7, #6]
    return spi_rw(pu8Mosi, pu8Miso, u16Sz);
 8009606:	88fb      	ldrh	r3, [r7, #6]
 8009608:	461a      	mov	r2, r3
 800960a:	68b9      	ldr	r1, [r7, #8]
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7ff ffa7 	bl	8009560 <spi_rw>
 8009612:	4603      	mov	r3, r0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]

	 /* WiFi SPI init function - called from nm_bus_init() */

	hspiWifi.Instance			   = SPI_WIFI;
 8009628:	4b19      	ldr	r3, [pc, #100]	@ (8009690 <nm_bus_init+0x74>)
 800962a:	4a1a      	ldr	r2, [pc, #104]	@ (8009694 <nm_bus_init+0x78>)
 800962c:	601a      	str	r2, [r3, #0]
	hspiWifi.Init.Mode			   = SPI_MODE_MASTER;
 800962e:	4b18      	ldr	r3, [pc, #96]	@ (8009690 <nm_bus_init+0x74>)
 8009630:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8009634:	605a      	str	r2, [r3, #4]
	hspiWifi.Init.Direction 	   = SPI_DIRECTION_2LINES;
 8009636:	4b16      	ldr	r3, [pc, #88]	@ (8009690 <nm_bus_init+0x74>)
 8009638:	2200      	movs	r2, #0
 800963a:	609a      	str	r2, [r3, #8]
	hspiWifi.Init.DataSize		   = SPI_DATASIZE_8BIT;
 800963c:	4b14      	ldr	r3, [pc, #80]	@ (8009690 <nm_bus_init+0x74>)
 800963e:	2207      	movs	r2, #7
 8009640:	60da      	str	r2, [r3, #12]
	hspiWifi.Init.CLKPolarity	   = SPI_POLARITY_LOW;
 8009642:	4b13      	ldr	r3, [pc, #76]	@ (8009690 <nm_bus_init+0x74>)
 8009644:	2200      	movs	r2, #0
 8009646:	611a      	str	r2, [r3, #16]
	hspiWifi.Init.CLKPhase		   = SPI_PHASE_1EDGE;
 8009648:	4b11      	ldr	r3, [pc, #68]	@ (8009690 <nm_bus_init+0x74>)
 800964a:	2200      	movs	r2, #0
 800964c:	615a      	str	r2, [r3, #20]
	hspiWifi.Init.NSS			   = SPI_NSS_SOFT;
 800964e:	4b10      	ldr	r3, [pc, #64]	@ (8009690 <nm_bus_init+0x74>)
 8009650:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8009654:	619a      	str	r2, [r3, #24]
	hspiWifi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8009656:	4b0e      	ldr	r3, [pc, #56]	@ (8009690 <nm_bus_init+0x74>)
 8009658:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800965c:	61da      	str	r2, [r3, #28]
	hspiWifi.Init.FirstBit		   = SPI_FIRSTBIT_MSB;
 800965e:	4b0c      	ldr	r3, [pc, #48]	@ (8009690 <nm_bus_init+0x74>)
 8009660:	2200      	movs	r2, #0
 8009662:	621a      	str	r2, [r3, #32]
	hspiWifi.Init.TIMode		   = SPI_TIMODE_DISABLE;
 8009664:	4b0a      	ldr	r3, [pc, #40]	@ (8009690 <nm_bus_init+0x74>)
 8009666:	2200      	movs	r2, #0
 8009668:	625a      	str	r2, [r3, #36]	@ 0x24
	hspiWifi.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 800966a:	4b09      	ldr	r3, [pc, #36]	@ (8009690 <nm_bus_init+0x74>)
 800966c:	2200      	movs	r2, #0
 800966e:	629a      	str	r2, [r3, #40]	@ 0x28
	hspiWifi.Init.CRCPolynomial    = 10;
 8009670:	4b07      	ldr	r3, [pc, #28]	@ (8009690 <nm_bus_init+0x74>)
 8009672:	220a      	movs	r2, #10
 8009674:	62da      	str	r2, [r3, #44]	@ 0x2c
//	  hspiWifi.Init.CRCLength		 = SPI_CRC_LENGTH_DATASIZE;
//	  hspiWifi.Init.NSSPMode		 = SPI_NSS_PULSE_DISABLE;
	if (HAL_SPI_Init(&hspiWifi) != HAL_OK)
 8009676:	4806      	ldr	r0, [pc, #24]	@ (8009690 <nm_bus_init+0x74>)
 8009678:	f7fb fde6 	bl	8005248 <HAL_SPI_Init>
	{
		M2M_ERR("SPI bus Initialization error\r\n");
	}

	HAL_SPI_MspInit(&hspiWifi);
 800967c:	4804      	ldr	r0, [pc, #16]	@ (8009690 <nm_bus_init+0x74>)
 800967e:	f7f7 fb59 	bl	8000d34 <HAL_SPI_MspInit>
	return result;
 8009682:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20002eb4 	.word	0x20002eb4
 8009694:	40013000 	.word	0x40013000

08009698 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 8009698:	b480      	push	{r7}
 800969a:	af00      	add	r7, sp, #0
	return M2M_SUCCESS;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d010      	beq.n	80096dc <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	781a      	ldrb	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	701a      	strb	r2, [r3, #0]
		pDst++;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3301      	adds	r3, #1
 80096c6:	60fb      	str	r3, [r7, #12]
		pSrc++;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	3301      	adds	r3, #1
 80096cc:	60bb      	str	r3, [r7, #8]
	}while(--sz);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	3b01      	subs	r3, #1
 80096d2:	607b      	str	r3, [r7, #4]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1ef      	bne.n	80096ba <m2m_memcpy+0x12>
 80096da:	e000      	b.n	80096de <m2m_memcpy+0x36>
	if(sz == 0) return;
 80096dc:	bf00      	nop
}
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	460b      	mov	r3, r1
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	72fb      	strb	r3, [r7, #11]
	if(sz == 0) return;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00c      	beq.n	8009716 <m2m_memset+0x2e>
	do
	{
		*pBuf = val;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	7afa      	ldrb	r2, [r7, #11]
 8009700:	701a      	strb	r2, [r3, #0]
		pBuf++;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3301      	adds	r3, #1
 8009706:	60fb      	str	r3, [r7, #12]
	}while(--sz);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	3b01      	subs	r3, #1
 800970c:	607b      	str	r3, [r7, #4]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1f3      	bne.n	80096fc <m2m_memset+0x14>
 8009714:	e000      	b.n	8009718 <m2m_memset+0x30>
	if(sz == 0) return;
 8009716:	bf00      	nop
}
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
 8009722:	b480      	push	{r7}
 8009724:	b085      	sub	sp, #20
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	81fb      	strh	r3, [r7, #14]
	while(*pcStr)
 800972e:	e005      	b.n	800973c <m2m_strlen+0x1a>
	{
		u16StrLen ++;
 8009730:	89fb      	ldrh	r3, [r7, #14]
 8009732:	3301      	adds	r3, #1
 8009734:	81fb      	strh	r3, [r7, #14]
		pcStr++;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	3301      	adds	r3, #1
 800973a:	607b      	str	r3, [r7, #4]
	while(*pcStr)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1f5      	bne.n	8009730 <m2m_strlen+0xe>
	}
	return u16StrLen;
 8009744:	89fb      	ldrh	r3, [r7, #14]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <hexchar_2_val>:
	return s8Result;
}

/* Convert hexchar to value 0-15 */
static uint8 hexchar_2_val(uint8 ch)
{
 8009752:	b480      	push	{r7}
 8009754:	b083      	sub	sp, #12
 8009756:	af00      	add	r7, sp, #0
 8009758:	4603      	mov	r3, r0
 800975a:	71fb      	strb	r3, [r7, #7]
    /* ch -= '0' */
    ch -= 0x30;
 800975c:	79fb      	ldrb	r3, [r7, #7]
 800975e:	3b30      	subs	r3, #48	@ 0x30
 8009760:	71fb      	strb	r3, [r7, #7]
    if(ch <= 9)
 8009762:	79fb      	ldrb	r3, [r7, #7]
 8009764:	2b09      	cmp	r3, #9
 8009766:	d801      	bhi.n	800976c <hexchar_2_val+0x1a>
        return ch;
 8009768:	79fb      	ldrb	r3, [r7, #7]
 800976a:	e00e      	b.n	800978a <hexchar_2_val+0x38>
    /* OR with 0x20 to convert upper case to lower case. */
    ch |= 0x20;
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	f043 0320 	orr.w	r3, r3, #32
 8009772:	71fb      	strb	r3, [r7, #7]
    /* ch -= ('a'-'0') */
    ch -= 0x31;
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	3b31      	subs	r3, #49	@ 0x31
 8009778:	71fb      	strb	r3, [r7, #7]
    if(ch <= 5)
 800977a:	79fb      	ldrb	r3, [r7, #7]
 800977c:	2b05      	cmp	r3, #5
 800977e:	d803      	bhi.n	8009788 <hexchar_2_val+0x36>
        return ch + 10;
 8009780:	79fb      	ldrb	r3, [r7, #7]
 8009782:	330a      	adds	r3, #10
 8009784:	b2db      	uxtb	r3, r3
 8009786:	e000      	b.n	800978a <hexchar_2_val+0x38>
    return 0xFF;
 8009788:	23ff      	movs	r3, #255	@ 0xff
}
 800978a:	4618      	mov	r0, r3
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <hexstr_2_bytes>:

/* Convert hexstring to bytes */
sint8 hexstr_2_bytes(uint8 *pu8Out, uint8 *pu8In, uint8 u8SizeOut)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b086      	sub	sp, #24
 800979a:	af00      	add	r7, sp, #0
 800979c:	60f8      	str	r0, [r7, #12]
 800979e:	60b9      	str	r1, [r7, #8]
 80097a0:	4613      	mov	r3, r2
 80097a2:	71fb      	strb	r3, [r7, #7]
    while(u8SizeOut--)
 80097a4:	e02c      	b.n	8009800 <hexstr_2_bytes+0x6a>
    {
        uint8   u8Out = hexchar_2_val(*pu8In++);
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	60ba      	str	r2, [r7, #8]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff ffcf 	bl	8009752 <hexchar_2_val>
 80097b4:	4603      	mov	r3, r0
 80097b6:	75fb      	strb	r3, [r7, #23]
        if(u8Out > 0xF)
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	2b0f      	cmp	r3, #15
 80097bc:	d902      	bls.n	80097c4 <hexstr_2_bytes+0x2e>
            return M2M_ERR_INVALID_ARG;
 80097be:	f06f 030e 	mvn.w	r3, #14
 80097c2:	e023      	b.n	800980c <hexstr_2_bytes+0x76>
        *pu8Out = u8Out * 0x10;
 80097c4:	7dfb      	ldrb	r3, [r7, #23]
 80097c6:	011b      	lsls	r3, r3, #4
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	701a      	strb	r2, [r3, #0]
        u8Out = hexchar_2_val(*pu8In++);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	1c5a      	adds	r2, r3, #1
 80097d2:	60ba      	str	r2, [r7, #8]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7ff ffbb 	bl	8009752 <hexchar_2_val>
 80097dc:	4603      	mov	r3, r0
 80097de:	75fb      	strb	r3, [r7, #23]
        if(u8Out > 0xF)
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	2b0f      	cmp	r3, #15
 80097e4:	d902      	bls.n	80097ec <hexstr_2_bytes+0x56>
            return M2M_ERR_INVALID_ARG;
 80097e6:	f06f 030e 	mvn.w	r3, #14
 80097ea:	e00f      	b.n	800980c <hexstr_2_bytes+0x76>
        *pu8Out += u8Out;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	781a      	ldrb	r2, [r3, #0]
 80097f0:	7dfb      	ldrb	r3, [r7, #23]
 80097f2:	4413      	add	r3, r2
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	701a      	strb	r2, [r3, #0]
        pu8Out++;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3301      	adds	r3, #1
 80097fe:	60fb      	str	r3, [r7, #12]
    while(u8SizeOut--)
 8009800:	79fb      	ldrb	r3, [r7, #7]
 8009802:	1e5a      	subs	r2, r3, #1
 8009804:	71fa      	strb	r2, [r7, #7]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1cd      	bne.n	80097a6 <hexstr_2_bytes+0x10>
    }
    return M2M_SUCCESS;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
 8009814:	b480      	push	{r7}
 8009816:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
 8009818:	4b05      	ldr	r3, [pc, #20]	@ (8009830 <isr+0x1c>)
 800981a:	78db      	ldrb	r3, [r3, #3]
 800981c:	b2db      	uxtb	r3, r3
 800981e:	3301      	adds	r3, #1
 8009820:	b2da      	uxtb	r2, r3
 8009822:	4b03      	ldr	r3, [pc, #12]	@ (8009830 <isr+0x1c>)
 8009824:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 8009826:	bf00      	nop
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	20003070 	.word	0x20003070

08009834 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800983a:	2300      	movs	r3, #0
 800983c:	71fb      	strb	r3, [r7, #7]

	gstrHifCxt.u8HifRXDone = 0;
 800983e:	4b14      	ldr	r3, [pc, #80]	@ (8009890 <hif_set_rx_done+0x5c>)
 8009840:	2200      	movs	r2, #0
 8009842:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
 8009844:	2001      	movs	r0, #1
 8009846:	f7ff fe59 	bl	80094fc <nm_bsp_interrupt_ctrl>
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
 800984a:	463b      	mov	r3, r7
 800984c:	4619      	mov	r1, r3
 800984e:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009852:	f001 fc5d 	bl	800b110 <nm_read_reg_with_ret>
 8009856:	4603      	mov	r3, r0
 8009858:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800985a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10f      	bne.n	8009882 <hif_set_rx_done+0x4e>
	/* Set RX Done */
	reg |= NBIT1;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	f043 0302 	orr.w	r3, r3, #2
 8009868:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	4619      	mov	r1, r3
 800986e:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009872:	f001 fc5b 	bl	800b12c <nm_write_reg>
 8009876:	4603      	mov	r3, r0
 8009878:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800987a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800987e:	2b00      	cmp	r3, #0
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
 8009880:	e000      	b.n	8009884 <hif_set_rx_done+0x50>
	if(ret != M2M_SUCCESS)goto ERR1;
 8009882:	bf00      	nop
	return ret;
 8009884:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	20003070 	.word	0x20003070

08009894 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	603a      	str	r2, [r7, #0]
 800989e:	71fb      	strb	r3, [r7, #7]
 80098a0:	460b      	mov	r3, r1
 80098a2:	80bb      	strh	r3, [r7, #4]


}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 80098b6:	2300      	movs	r3, #0
 80098b8:	71fb      	strb	r3, [r7, #7]
	if(gstrHifCxt.u8HifRXDone)
 80098ba:	4b14      	ldr	r3, [pc, #80]	@ (800990c <hif_chip_wake+0x5c>)
 80098bc:	789b      	ldrb	r3, [r3, #2]
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d002      	beq.n	80098ca <hif_chip_wake+0x1a>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
 80098c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098c8:	e01c      	b.n	8009904 <hif_chip_wake+0x54>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
 80098ca:	4b10      	ldr	r3, [pc, #64]	@ (800990c <hif_chip_wake+0x5c>)
 80098cc:	785b      	ldrb	r3, [r3, #1]
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10c      	bne.n	80098ee <hif_chip_wake+0x3e>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 80098d4:	4b0d      	ldr	r3, [pc, #52]	@ (800990c <hif_chip_wake+0x5c>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d007      	beq.n	80098ee <hif_chip_wake+0x3e>
		{
			ret = chip_wake();
 80098de:	f001 fa61 	bl	800ada4 <chip_wake>
 80098e2:	4603      	mov	r3, r0
 80098e4:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 80098e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d107      	bne.n	80098fe <hif_chip_wake+0x4e>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
 80098ee:	4b07      	ldr	r3, [pc, #28]	@ (800990c <hif_chip_wake+0x5c>)
 80098f0:	785b      	ldrb	r3, [r3, #1]
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	3301      	adds	r3, #1
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	4b04      	ldr	r3, [pc, #16]	@ (800990c <hif_chip_wake+0x5c>)
 80098fa:	705a      	strb	r2, [r3, #1]
 80098fc:	e000      	b.n	8009900 <hif_chip_wake+0x50>
			if(ret != M2M_SUCCESS)goto ERR1;
 80098fe:	bf00      	nop
ERR1:
	return ret;
 8009900:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	20003070 	.word	0x20003070

08009910 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
 8009914:	4b08      	ldr	r3, [pc, #32]	@ (8009938 <hif_chip_sleep_sc+0x28>)
 8009916:	785b      	ldrb	r3, [r3, #1]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d006      	beq.n	800992c <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
 800991e:	4b06      	ldr	r3, [pc, #24]	@ (8009938 <hif_chip_sleep_sc+0x28>)
 8009920:	785b      	ldrb	r3, [r3, #1]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	3b01      	subs	r3, #1
 8009926:	b2da      	uxtb	r2, r3
 8009928:	4b03      	ldr	r3, [pc, #12]	@ (8009938 <hif_chip_sleep_sc+0x28>)
 800992a:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	20003070 	.word	0x20003070

0800993c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8009942:	2300      	movs	r3, #0
 8009944:	71fb      	strb	r3, [r7, #7]

	if(gstrHifCxt.u8ChipSleep >= 1)
 8009946:	4b12      	ldr	r3, [pc, #72]	@ (8009990 <hif_chip_sleep+0x54>)
 8009948:	785b      	ldrb	r3, [r3, #1]
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b00      	cmp	r3, #0
 800994e:	d006      	beq.n	800995e <hif_chip_sleep+0x22>
	{
		gstrHifCxt.u8ChipSleep--;
 8009950:	4b0f      	ldr	r3, [pc, #60]	@ (8009990 <hif_chip_sleep+0x54>)
 8009952:	785b      	ldrb	r3, [r3, #1]
 8009954:	b2db      	uxtb	r3, r3
 8009956:	3b01      	subs	r3, #1
 8009958:	b2da      	uxtb	r2, r3
 800995a:	4b0d      	ldr	r3, [pc, #52]	@ (8009990 <hif_chip_sleep+0x54>)
 800995c:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
 800995e:	4b0c      	ldr	r3, [pc, #48]	@ (8009990 <hif_chip_sleep+0x54>)
 8009960:	785b      	ldrb	r3, [r3, #1]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10c      	bne.n	8009982 <hif_chip_sleep+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 8009968:	4b09      	ldr	r3, [pc, #36]	@ (8009990 <hif_chip_sleep+0x54>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d007      	beq.n	8009982 <hif_chip_sleep+0x46>
		{
			ret = chip_sleep();
 8009972:	f001 f9b3 	bl	800acdc <chip_sleep>
 8009976:	4603      	mov	r3, r0
 8009978:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800997a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800997e:	2b00      	cmp	r3, #0
 8009980:	e000      	b.n	8009984 <hif_chip_sleep+0x48>
		}
		else
		{
		}
	}
ERR1:
 8009982:	bf00      	nop
	return ret;
 8009984:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	20003070 	.word	0x20003070

08009994 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
 800999c:	222c      	movs	r2, #44	@ 0x2c
 800999e:	2100      	movs	r1, #0
 80099a0:	4807      	ldr	r0, [pc, #28]	@ (80099c0 <hif_init+0x2c>)
 80099a2:	f7ff fea1 	bl	80096e8 <m2m_memset>
	nm_bsp_register_isr(isr);
 80099a6:	4807      	ldr	r0, [pc, #28]	@ (80099c4 <hif_init+0x30>)
 80099a8:	f7ff fd76 	bl	8009498 <nm_bsp_register_isr>
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
 80099ac:	4906      	ldr	r1, [pc, #24]	@ (80099c8 <hif_init+0x34>)
 80099ae:	2003      	movs	r0, #3
 80099b0:	f000 fad8 	bl	8009f64 <hif_register_cb>
	return M2M_SUCCESS;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20003070 	.word	0x20003070
 80099c4:	08009815 	.word	0x08009815
 80099c8:	08009895 	.word	0x08009895

080099cc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b088      	sub	sp, #32
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	603a      	str	r2, [r7, #0]
 80099d4:	461a      	mov	r2, r3
 80099d6:	4603      	mov	r3, r0
 80099d8:	71fb      	strb	r3, [r7, #7]
 80099da:	460b      	mov	r3, r1
 80099dc:	71bb      	strb	r3, [r7, #6]
 80099de:	4613      	mov	r3, r2
 80099e0:	80bb      	strh	r3, [r7, #4]
	sint8		ret = M2M_ERR_SEND;
 80099e2:	23ff      	movs	r3, #255	@ 0xff
 80099e4:	77fb      	strb	r3, [r7, #31]
	tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 80099e6:	79bb      	ldrb	r3, [r7, #6]
 80099e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
 80099f0:	79fb      	ldrb	r3, [r7, #7]
 80099f2:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 80099f4:	2308      	movs	r3, #8
 80099f6:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
 80099f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d008      	beq.n	8009a10 <hif_send+0x44>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
 80099fe:	8b7a      	ldrh	r2, [r7, #26]
 8009a00:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8009a02:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009a04:	440b      	add	r3, r1
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	4413      	add	r3, r2
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	837b      	strh	r3, [r7, #26]
 8009a0e:	e004      	b.n	8009a1a <hif_send+0x4e>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 8009a10:	8b7a      	ldrh	r2, [r7, #26]
 8009a12:	88bb      	ldrh	r3, [r7, #4]
 8009a14:	4413      	add	r3, r2
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	837b      	strh	r3, [r7, #26]
	}
    if (strHif.u16Length <= M2M_HIF_MAX_PACKET_SIZE)
 8009a1a:	8b7b      	ldrh	r3, [r7, #26]
 8009a1c:	f240 623c 	movw	r2, #1596	@ 0x63c
 8009a20:	4293      	cmp	r3, r2
 8009a22:	f200 80d9 	bhi.w	8009bd8 <hif_send+0x20c>
    {
	ret = hif_chip_wake();
 8009a26:	f7ff ff43 	bl	80098b0 <hif_chip_wake>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
 8009a2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f040 80e6 	bne.w	8009c04 <hif_send+0x238>
	{
		volatile uint32 reg, dma_addr = 0;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	81fb      	strh	r3, [r7, #14]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 8009a40:	2300      	movs	r3, #0
 8009a42:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
 8009a44:	79fa      	ldrb	r2, [r7, #7]
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
 8009a4c:	79bb      	ldrb	r3, [r7, #6]
 8009a4e:	021a      	lsls	r2, r3, #8
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
 8009a56:	8b7b      	ldrh	r3, [r7, #26]
 8009a58:	041a      	lsls	r2, r3, #16
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	4619      	mov	r1, r3
 8009a64:	f241 008c 	movw	r0, #4236	@ 0x108c
 8009a68:	f001 fb60 	bl	800b12c <nm_write_reg>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 8009a70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f040 80b9 	bne.w	8009bec <hif_send+0x220>

		reg = 0UL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f043 0302 	orr.w	r3, r3, #2
 8009a84:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	f241 0078 	movw	r0, #4216	@ 0x1078
 8009a8e:	f001 fb4d 	bl	800b12c <nm_write_reg>
 8009a92:	4603      	mov	r3, r0
 8009a94:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 8009a96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f040 80a8 	bne.w	8009bf0 <hif_send+0x224>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	81fb      	strh	r3, [r7, #14]
 8009aa8:	e02e      	b.n	8009b08 <hif_send+0x13c>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
 8009aaa:	f107 0314 	add.w	r3, r7, #20
 8009aae:	4619      	mov	r1, r3
 8009ab0:	f241 0078 	movw	r0, #4216	@ 0x1078
 8009ab4:	f001 fb2c 	bl	800b110 <nm_read_reg_with_ret>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
 8009abc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d127      	bne.n	8009b14 <hif_send+0x148>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
 8009ac4:	89fb      	ldrh	r3, [r7, #14]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009acc:	d303      	bcc.n	8009ad6 <hif_send+0x10a>
				if(cnt < 501) {
 8009ace:	89fb      	ldrh	r3, [r7, #14]
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
 8009ad0:	2001      	movs	r0, #1
 8009ad2:	f7ff fcd5 	bl	8009480 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f003 0302 	and.w	r3, r3, #2
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10e      	bne.n	8009afe <hif_send+0x132>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
 8009ae0:	f107 0310 	add.w	r3, r7, #16
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	484b      	ldr	r0, [pc, #300]	@ (8009c14 <hif_send+0x248>)
 8009ae8:	f001 fb12 	bl	800b110 <nm_read_reg_with_ret>
 8009aec:	4603      	mov	r3, r0
 8009aee:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
 8009af0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00f      	beq.n	8009b18 <hif_send+0x14c>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	613b      	str	r3, [r7, #16]
					goto ERR1;
 8009afc:	e07f      	b.n	8009bfe <hif_send+0x232>
		for(cnt = 0; cnt < 1000; cnt ++)
 8009afe:	89fb      	ldrh	r3, [r7, #14]
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	3301      	adds	r3, #1
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	81fb      	strh	r3, [r7, #14]
 8009b08:	89fb      	ldrh	r3, [r7, #14]
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b10:	d3cb      	bcc.n	8009aaa <hif_send+0xde>
 8009b12:	e002      	b.n	8009b1a <hif_send+0x14e>
			if(ret != M2M_SUCCESS) break;
 8009b14:	bf00      	nop
 8009b16:	e000      	b.n	8009b1a <hif_send+0x14e>
				}
				/*in case of success break */
				break;
 8009b18:	bf00      	nop
			}
		}

		if (dma_addr != 0)
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d054      	beq.n	8009bca <hif_send+0x1fe>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 8009b24:	8b7b      	ldrh	r3, [r7, #26]
 8009b26:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	f107 0118 	add.w	r1, r7, #24
 8009b2e:	2208      	movs	r2, #8
 8009b30:	4618      	mov	r0, r3
 8009b32:	f001 fb77 	bl	800b224 <nm_write_block>
 8009b36:	4603      	mov	r3, r0
 8009b38:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 8009b3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d158      	bne.n	8009bf4 <hif_send+0x228>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	3308      	adds	r3, #8
 8009b46:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00f      	beq.n	8009b6e <hif_send+0x1a2>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	88ba      	ldrh	r2, [r7, #4]
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f001 fb65 	bl	800b224 <nm_write_block>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 8009b5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d148      	bne.n	8009bf8 <hif_send+0x22c>
				u32CurrAddr += u16CtrlBufSize;
 8009b66:	88ba      	ldrh	r2, [r7, #4]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
 8009b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d016      	beq.n	8009ba2 <hif_send+0x1d6>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
 8009b74:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009b76:	88bb      	ldrh	r3, [r7, #4]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	4413      	add	r3, r2
 8009b80:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009b86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f001 fb4b 	bl	800b224 <nm_write_block>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 8009b92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d130      	bne.n	8009bfc <hif_send+0x230>
				u32CurrAddr += u16DataSize;
 8009b9a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f043 0302 	orr.w	r3, r3, #2
 8009bae:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	f241 006c 	movw	r0, #4204	@ 0x106c
 8009bb8:	f001 fab8 	bl	800b12c <nm_write_reg>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 8009bc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00a      	beq.n	8009bde <hif_send+0x212>
 8009bc8:	e019      	b.n	8009bfe <hif_send+0x232>
		}
		else
		{
			ret = hif_chip_sleep();
 8009bca:	f7ff feb7 	bl	800993c <hif_chip_sleep>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	77fb      	strb	r3, [r7, #31]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
 8009bd2:	23fd      	movs	r3, #253	@ 0xfd
 8009bd4:	77fb      	strb	r3, [r7, #31]
			goto ERR2;
 8009bd6:	e016      	b.n	8009c06 <hif_send+0x23a>
        }
	}
	else
	{
        M2M_ERR("HIF message length (%d) exceeds max length (%d)\n",strHif.u16Length, M2M_HIF_MAX_PACKET_SIZE);
        ret = M2M_ERR_SEND;
 8009bd8:	23ff      	movs	r3, #255	@ 0xff
 8009bda:	77fb      	strb	r3, [r7, #31]
		goto ERR2;
 8009bdc:	e013      	b.n	8009c06 <hif_send+0x23a>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
 8009bde:	f7ff fead 	bl	800993c <hif_chip_sleep>
 8009be2:	4603      	mov	r3, r0
 8009be4:	77fb      	strb	r3, [r7, #31]
	return ret;
 8009be6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bea:	e00e      	b.n	8009c0a <hif_send+0x23e>
		if(M2M_SUCCESS != ret) goto ERR1;
 8009bec:	bf00      	nop
 8009bee:	e006      	b.n	8009bfe <hif_send+0x232>
		if(M2M_SUCCESS != ret) goto ERR1;
 8009bf0:	bf00      	nop
 8009bf2:	e004      	b.n	8009bfe <hif_send+0x232>
			if(M2M_SUCCESS != ret) goto ERR1;
 8009bf4:	bf00      	nop
 8009bf6:	e002      	b.n	8009bfe <hif_send+0x232>
				if(M2M_SUCCESS != ret) goto ERR1;
 8009bf8:	bf00      	nop
 8009bfa:	e000      	b.n	8009bfe <hif_send+0x232>
				if(M2M_SUCCESS != ret) goto ERR1;
 8009bfc:	bf00      	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
 8009bfe:	f7ff fe87 	bl	8009910 <hif_chip_sleep_sc>
 8009c02:	e000      	b.n	8009c06 <hif_send+0x23a>
            goto ERR2;
 8009c04:	bf00      	nop
ERR2:
	/*logical error*/
	return ret;
 8009c06:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3720      	adds	r7, #32
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	00150400 	.word	0x00150400

08009c18 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	73fb      	strb	r3, [r7, #15]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 8009c22:	f107 0308 	add.w	r3, r7, #8
 8009c26:	4619      	mov	r1, r3
 8009c28:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009c2c:	f001 fa70 	bl	800b110 <nm_read_reg_with_ret>
 8009c30:	4603      	mov	r3, r0
 8009c32:	73fb      	strb	r3, [r7, #15]
	if(M2M_SUCCESS == ret)
 8009c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f040 80e2 	bne.w	8009e02 <hif_isr+0x1ea>
	{
		if(reg & 0x1)	/* New interrupt has been received */
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 80de 	beq.w	8009e06 <hif_isr+0x1ee>
		{
			uint16 size;

			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	f023 0301 	bic.w	r3, r3, #1
 8009c50:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	4619      	mov	r1, r3
 8009c56:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009c5a:	f001 fa67 	bl	800b12c <nm_write_reg>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	73fb      	strb	r3, [r7, #15]
			if(ret != M2M_SUCCESS)goto ERR1;
 8009c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f040 80cf 	bne.w	8009e0a <hif_isr+0x1f2>
			gstrHifCxt.u8HifRXDone = 1;
 8009c6c:	4b6c      	ldr	r3, [pc, #432]	@ (8009e20 <hif_isr+0x208>)
 8009c6e:	2201      	movs	r2, #1
 8009c70:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	089b      	lsrs	r3, r3, #2
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c7c:	81bb      	strh	r3, [r7, #12]
			if (size > 0) {
 8009c7e:	89bb      	ldrh	r3, [r7, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 80bb 	beq.w	8009dfc <hif_isr+0x1e4>
				uint32 address = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 8009c8a:	463b      	mov	r3, r7
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	f241 0084 	movw	r0, #4228	@ 0x1084
 8009c92:	f001 fa3d 	bl	800b110 <nm_read_reg_with_ret>
 8009c96:	4603      	mov	r3, r0
 8009c98:	73fb      	strb	r3, [r7, #15]
				if(M2M_SUCCESS != ret)
 8009c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f040 80b5 	bne.w	8009e0e <hif_isr+0x1f6>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
					goto ERR1;
				}
				gstrHifCxt.u32RxAddr = address;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	4a5e      	ldr	r2, [pc, #376]	@ (8009e20 <hif_isr+0x208>)
 8009ca8:	6093      	str	r3, [r2, #8]
				gstrHifCxt.u32RxSize = size;
 8009caa:	89bb      	ldrh	r3, [r7, #12]
 8009cac:	4a5c      	ldr	r2, [pc, #368]	@ (8009e20 <hif_isr+0x208>)
 8009cae:	60d3      	str	r3, [r2, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	1d39      	adds	r1, r7, #4
 8009cb4:	2204      	movs	r2, #4
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f001 fa58 	bl	800b16c <nm_read_block>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 8009cc0:	88fb      	ldrh	r3, [r7, #6]
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	80fb      	strh	r3, [r7, #6]
				if(M2M_SUCCESS != ret)
 8009cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f040 80a1 	bne.w	8009e12 <hif_isr+0x1fa>
				{
					M2M_ERR("(hif) address bus fail\n");
					goto ERR1;
				}
				if(strHif.u16Length != size)
 8009cd0:	88fb      	ldrh	r3, [r7, #6]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	89ba      	ldrh	r2, [r7, #12]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d008      	beq.n	8009cec <hif_isr+0xd4>
				{
					if((size - strHif.u16Length) > 4)
 8009cda:	89bb      	ldrh	r3, [r7, #12]
 8009cdc:	88fa      	ldrh	r2, [r7, #6]
 8009cde:	b292      	uxth	r2, r2
 8009ce0:	1a9b      	subs	r3, r3, r2
 8009ce2:	2b04      	cmp	r3, #4
 8009ce4:	dd02      	ble.n	8009cec <hif_isr+0xd4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						ret = M2M_ERR_BUS_FAIL;
 8009ce6:	23fa      	movs	r3, #250	@ 0xfa
 8009ce8:	73fb      	strb	r3, [r7, #15]
						goto ERR1;
 8009cea:	e093      	b.n	8009e14 <hif_isr+0x1fc>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 8009cec:	793b      	ldrb	r3, [r7, #4]
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d10f      	bne.n	8009d14 <hif_isr+0xfc>
				{
					if(gstrHifCxt.pfWifiCb)
 8009cf4:	4b4a      	ldr	r3, [pc, #296]	@ (8009e20 <hif_isr+0x208>)
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d072      	beq.n	8009de2 <hif_isr+0x1ca>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009cfc:	4b48      	ldr	r3, [pc, #288]	@ (8009e20 <hif_isr+0x208>)
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	797a      	ldrb	r2, [r7, #5]
 8009d02:	b2d0      	uxtb	r0, r2
 8009d04:	88fa      	ldrh	r2, [r7, #6]
 8009d06:	b292      	uxth	r2, r2
 8009d08:	3a08      	subs	r2, #8
 8009d0a:	b291      	uxth	r1, r2
 8009d0c:	683a      	ldr	r2, [r7, #0]
 8009d0e:	3208      	adds	r2, #8
 8009d10:	4798      	blx	r3
 8009d12:	e066      	b.n	8009de2 <hif_isr+0x1ca>
					else
						M2M_ERR("WIFI callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 8009d14:	793b      	ldrb	r3, [r7, #4]
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d10f      	bne.n	8009d3c <hif_isr+0x124>
				{
					if(gstrHifCxt.pfIpCb)
 8009d1c:	4b40      	ldr	r3, [pc, #256]	@ (8009e20 <hif_isr+0x208>)
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d05e      	beq.n	8009de2 <hif_isr+0x1ca>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009d24:	4b3e      	ldr	r3, [pc, #248]	@ (8009e20 <hif_isr+0x208>)
 8009d26:	695b      	ldr	r3, [r3, #20]
 8009d28:	797a      	ldrb	r2, [r7, #5]
 8009d2a:	b2d0      	uxtb	r0, r2
 8009d2c:	88fa      	ldrh	r2, [r7, #6]
 8009d2e:	b292      	uxth	r2, r2
 8009d30:	3a08      	subs	r2, #8
 8009d32:	b291      	uxth	r1, r2
 8009d34:	683a      	ldr	r2, [r7, #0]
 8009d36:	3208      	adds	r2, #8
 8009d38:	4798      	blx	r3
 8009d3a:	e052      	b.n	8009de2 <hif_isr+0x1ca>
					else
						M2M_ERR("Socket callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 8009d3c:	793b      	ldrb	r3, [r7, #4]
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	2b04      	cmp	r3, #4
 8009d42:	d10f      	bne.n	8009d64 <hif_isr+0x14c>
				{
					if(gstrHifCxt.pfOtaCb)
 8009d44:	4b36      	ldr	r3, [pc, #216]	@ (8009e20 <hif_isr+0x208>)
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d04a      	beq.n	8009de2 <hif_isr+0x1ca>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009d4c:	4b34      	ldr	r3, [pc, #208]	@ (8009e20 <hif_isr+0x208>)
 8009d4e:	699b      	ldr	r3, [r3, #24]
 8009d50:	797a      	ldrb	r2, [r7, #5]
 8009d52:	b2d0      	uxtb	r0, r2
 8009d54:	88fa      	ldrh	r2, [r7, #6]
 8009d56:	b292      	uxth	r2, r2
 8009d58:	3a08      	subs	r2, #8
 8009d5a:	b291      	uxth	r1, r2
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	3208      	adds	r2, #8
 8009d60:	4798      	blx	r3
 8009d62:	e03e      	b.n	8009de2 <hif_isr+0x1ca>
					else
						M2M_ERR("Ota callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 8009d64:	793b      	ldrb	r3, [r7, #4]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b06      	cmp	r3, #6
 8009d6a:	d10f      	bne.n	8009d8c <hif_isr+0x174>
				{
					if(gstrHifCxt.pfCryptoCb)
 8009d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8009e20 <hif_isr+0x208>)
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d036      	beq.n	8009de2 <hif_isr+0x1ca>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009d74:	4b2a      	ldr	r3, [pc, #168]	@ (8009e20 <hif_isr+0x208>)
 8009d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d78:	797a      	ldrb	r2, [r7, #5]
 8009d7a:	b2d0      	uxtb	r0, r2
 8009d7c:	88fa      	ldrh	r2, [r7, #6]
 8009d7e:	b292      	uxth	r2, r2
 8009d80:	3a08      	subs	r2, #8
 8009d82:	b291      	uxth	r1, r2
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	3208      	adds	r2, #8
 8009d88:	4798      	blx	r3
 8009d8a:	e02a      	b.n	8009de2 <hif_isr+0x1ca>
					else
						M2M_ERR("Crypto callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 8009d8c:	793b      	ldrb	r3, [r7, #4]
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b07      	cmp	r3, #7
 8009d92:	d10f      	bne.n	8009db4 <hif_isr+0x19c>
				{
					if(gstrHifCxt.pfSigmaCb)
 8009d94:	4b22      	ldr	r3, [pc, #136]	@ (8009e20 <hif_isr+0x208>)
 8009d96:	69db      	ldr	r3, [r3, #28]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d022      	beq.n	8009de2 <hif_isr+0x1ca>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009d9c:	4b20      	ldr	r3, [pc, #128]	@ (8009e20 <hif_isr+0x208>)
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	797a      	ldrb	r2, [r7, #5]
 8009da2:	b2d0      	uxtb	r0, r2
 8009da4:	88fa      	ldrh	r2, [r7, #6]
 8009da6:	b292      	uxth	r2, r2
 8009da8:	3a08      	subs	r2, #8
 8009daa:	b291      	uxth	r1, r2
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	3208      	adds	r2, #8
 8009db0:	4798      	blx	r3
 8009db2:	e016      	b.n	8009de2 <hif_isr+0x1ca>
					else
						M2M_ERR("Sigma callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 8009db4:	793b      	ldrb	r3, [r7, #4]
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b05      	cmp	r3, #5
 8009dba:	d10f      	bne.n	8009ddc <hif_isr+0x1c4>
				{
				    if(gstrHifCxt.pfSslCb)
 8009dbc:	4b18      	ldr	r3, [pc, #96]	@ (8009e20 <hif_isr+0x208>)
 8009dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00e      	beq.n	8009de2 <hif_isr+0x1ca>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009dc4:	4b16      	ldr	r3, [pc, #88]	@ (8009e20 <hif_isr+0x208>)
 8009dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc8:	797a      	ldrb	r2, [r7, #5]
 8009dca:	b2d0      	uxtb	r0, r2
 8009dcc:	88fa      	ldrh	r2, [r7, #6]
 8009dce:	b292      	uxth	r2, r2
 8009dd0:	3a08      	subs	r2, #8
 8009dd2:	b291      	uxth	r1, r2
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	3208      	adds	r2, #8
 8009dd8:	4798      	blx	r3
 8009dda:	e002      	b.n	8009de2 <hif_isr+0x1ca>
                        M2M_ERR("SSL callback is not registered\n");
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
					ret = M2M_ERR_BUS_FAIL;
 8009ddc:	23fa      	movs	r3, #250	@ 0xfa
 8009dde:	73fb      	strb	r3, [r7, #15]
					goto ERR1;
 8009de0:	e018      	b.n	8009e14 <hif_isr+0x1fc>
				}
				if(gstrHifCxt.u8HifRXDone)
 8009de2:	4b0f      	ldr	r3, [pc, #60]	@ (8009e20 <hif_isr+0x208>)
 8009de4:	789b      	ldrb	r3, [r3, #2]
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d013      	beq.n	8009e14 <hif_isr+0x1fc>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
					ret = hif_set_rx_done();
 8009dec:	f7ff fd22 	bl	8009834 <hif_set_rx_done>
 8009df0:	4603      	mov	r3, r0
 8009df2:	73fb      	strb	r3, [r7, #15]
					if(ret != M2M_SUCCESS) goto ERR1;
 8009df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	e00b      	b.n	8009e14 <hif_isr+0x1fc>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
				ret = M2M_ERR_RCV;
 8009dfc:	23fe      	movs	r3, #254	@ 0xfe
 8009dfe:	73fb      	strb	r3, [r7, #15]
				goto ERR1;
 8009e00:	e008      	b.n	8009e14 <hif_isr+0x1fc>
		}
	}
	else
	{
		M2M_ERR("(hif) Failed to Read interrupt reg\n");
		goto ERR1;
 8009e02:	bf00      	nop
 8009e04:	e006      	b.n	8009e14 <hif_isr+0x1fc>
			goto ERR1;
 8009e06:	bf00      	nop
 8009e08:	e004      	b.n	8009e14 <hif_isr+0x1fc>
			if(ret != M2M_SUCCESS)goto ERR1;
 8009e0a:	bf00      	nop
 8009e0c:	e002      	b.n	8009e14 <hif_isr+0x1fc>
					goto ERR1;
 8009e0e:	bf00      	nop
 8009e10:	e000      	b.n	8009e14 <hif_isr+0x1fc>
					goto ERR1;
 8009e12:	bf00      	nop
	}

ERR1:
	return ret;
 8009e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	20003070 	.word	0x20003070

08009e24 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	71fb      	strb	r3, [r7, #7]
	
	gstrHifCxt.u8Yield = 0;
 8009e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8009e98 <hif_handle_isr+0x74>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	711a      	strb	r2, [r3, #4]
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 8009e34:	e020      	b.n	8009e78 <hif_handle_isr+0x54>
         * during which the ISR could fire again.
         * If LEVEL interrupt is used instead of EDGE then the atomicity isn't needed since the interrupt
         * is turned off in the ISR and back on again only after the interrupt has been serviced in hif_isr(). */

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(0);
 8009e36:	2000      	movs	r0, #0
 8009e38:	f7ff fb60 	bl	80094fc <nm_bsp_interrupt_ctrl>
#endif

		gstrHifCxt.u8Interrupt--;
 8009e3c:	4b16      	ldr	r3, [pc, #88]	@ (8009e98 <hif_handle_isr+0x74>)
 8009e3e:	78db      	ldrb	r3, [r3, #3]
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	3b01      	subs	r3, #1
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	4b14      	ldr	r3, [pc, #80]	@ (8009e98 <hif_handle_isr+0x74>)
 8009e48:	70da      	strb	r2, [r3, #3]

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(1);
 8009e4a:	2001      	movs	r0, #1
 8009e4c:	f7ff fb56 	bl	80094fc <nm_bsp_interrupt_ctrl>
#endif

		uint8 retries = 5;
 8009e50:	2305      	movs	r3, #5
 8009e52:	71bb      	strb	r3, [r7, #6]
		while(1)
		{
			ret = hif_isr();
 8009e54:	f7ff fee0 	bl	8009c18 <hif_isr>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	71fb      	strb	r3, [r7, #7]
			if(ret == M2M_SUCCESS) {
 8009e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d006      	beq.n	8009e72 <hif_handle_isr+0x4e>
				/*we will try forever until we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				retries--;
 8009e64:	79bb      	ldrb	r3, [r7, #6]
 8009e66:	3b01      	subs	r3, #1
 8009e68:	71bb      	strb	r3, [r7, #6]
				if(!retries)
 8009e6a:	79bb      	ldrb	r3, [r7, #6]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <hif_handle_isr+0x52>
			ret = hif_isr();
 8009e70:	e7f0      	b.n	8009e54 <hif_handle_isr+0x30>
				break;
 8009e72:	bf00      	nop
 8009e74:	e000      	b.n	8009e78 <hif_handle_isr+0x54>
				{
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
					break;
 8009e76:	bf00      	nop
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 8009e78:	4b07      	ldr	r3, [pc, #28]	@ (8009e98 <hif_handle_isr+0x74>)
 8009e7a:	78db      	ldrb	r3, [r3, #3]
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d004      	beq.n	8009e8c <hif_handle_isr+0x68>
 8009e82:	4b05      	ldr	r3, [pc, #20]	@ (8009e98 <hif_handle_isr+0x74>)
 8009e84:	791b      	ldrb	r3, [r3, #4]
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d0d4      	beq.n	8009e36 <hif_handle_isr+0x12>
					M2M_ERR("(HIF) Failed to handle interrupt %d try again... (%u)\n", ret, retries);
			}
		}
	}

	return ret;
 8009e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20003070 	.word	0x20003070

08009e9c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	460b      	mov	r3, r1
 8009eac:	80fb      	strh	r3, [r7, #6]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	717b      	strb	r3, [r7, #5]
	sint8 ret = M2M_SUCCESS;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	75fb      	strb	r3, [r7, #23]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d005      	beq.n	8009ec8 <hif_receive+0x2c>
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d002      	beq.n	8009ec8 <hif_receive+0x2c>
 8009ec2:	88fb      	ldrh	r3, [r7, #6]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10a      	bne.n	8009ede <hif_receive+0x42>
	{
		if(isDone)
 8009ec8:	797b      	ldrb	r3, [r7, #5]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d004      	beq.n	8009ed8 <hif_receive+0x3c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
 8009ece:	f7ff fcb1 	bl	8009834 <hif_set_rx_done>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	75fb      	strb	r3, [r7, #23]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
 8009ed6:	e03d      	b.n	8009f54 <hif_receive+0xb8>
			ret = M2M_ERR_FAIL;
 8009ed8:	23f4      	movs	r3, #244	@ 0xf4
 8009eda:	75fb      	strb	r3, [r7, #23]
		goto ERR1;
 8009edc:	e03a      	b.n	8009f54 <hif_receive+0xb8>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
 8009ede:	88fa      	ldrh	r2, [r7, #6]
 8009ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8009f60 <hif_receive+0xc4>)
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d902      	bls.n	8009eee <hif_receive+0x52>
	{
		ret = M2M_ERR_FAIL;
 8009ee8:	23f4      	movs	r3, #244	@ 0xf4
 8009eea:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Size is larger than the received buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
 8009eec:	e032      	b.n	8009f54 <hif_receive+0xb8>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 8009eee:	4b1c      	ldr	r3, [pc, #112]	@ (8009f60 <hif_receive+0xc4>)
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d309      	bcc.n	8009f0c <hif_receive+0x70>
 8009ef8:	88fa      	ldrh	r2, [r7, #6]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	441a      	add	r2, r3
 8009efe:	4b18      	ldr	r3, [pc, #96]	@ (8009f60 <hif_receive+0xc4>)
 8009f00:	6899      	ldr	r1, [r3, #8]
 8009f02:	4b17      	ldr	r3, [pc, #92]	@ (8009f60 <hif_receive+0xc4>)
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	440b      	add	r3, r1
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d902      	bls.n	8009f12 <hif_receive+0x76>
	{
		ret = M2M_ERR_FAIL;
 8009f0c:	23f4      	movs	r3, #244	@ 0xf4
 8009f0e:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Address beyond the received buffer address and length\n");
		goto ERR1;
 8009f10:	e020      	b.n	8009f54 <hif_receive+0xb8>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 8009f12:	88fb      	ldrh	r3, [r7, #6]
 8009f14:	461a      	mov	r2, r3
 8009f16:	68b9      	ldr	r1, [r7, #8]
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f001 f927 	bl	800b16c <nm_read_block>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	75fb      	strb	r3, [r7, #23]
	if(ret != M2M_SUCCESS)goto ERR1;
 8009f22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d111      	bne.n	8009f4e <hif_receive+0xb2>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 8009f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f60 <hif_receive+0xc4>)
 8009f2c:	689a      	ldr	r2, [r3, #8]
 8009f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8009f60 <hif_receive+0xc4>)
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	441a      	add	r2, r3
 8009f34:	88f9      	ldrh	r1, [r7, #6]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	440b      	add	r3, r1
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d002      	beq.n	8009f44 <hif_receive+0xa8>
 8009f3e:	797b      	ldrb	r3, [r7, #5]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d006      	beq.n	8009f52 <hif_receive+0xb6>
	{
		/* set RX done */
		ret = hif_set_rx_done();
 8009f44:	f7ff fc76 	bl	8009834 <hif_set_rx_done>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	75fb      	strb	r3, [r7, #23]
 8009f4c:	e002      	b.n	8009f54 <hif_receive+0xb8>
	if(ret != M2M_SUCCESS)goto ERR1;
 8009f4e:	bf00      	nop
 8009f50:	e000      	b.n	8009f54 <hif_receive+0xb8>
	}

ERR1:
 8009f52:	bf00      	nop
	return ret;
 8009f54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20003070 	.word	0x20003070

08009f64 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	6039      	str	r1, [r7, #0]
 8009f6e:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73fb      	strb	r3, [r7, #15]
	switch(u8Grp)
 8009f74:	79fb      	ldrb	r3, [r7, #7]
 8009f76:	3b01      	subs	r3, #1
 8009f78:	2b06      	cmp	r3, #6
 8009f7a:	d82d      	bhi.n	8009fd8 <hif_register_cb+0x74>
 8009f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f84 <hif_register_cb+0x20>)
 8009f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f82:	bf00      	nop
 8009f84:	08009fa9 	.word	0x08009fa9
 8009f88:	08009fa1 	.word	0x08009fa1
 8009f8c:	08009fb9 	.word	0x08009fb9
 8009f90:	08009fb1 	.word	0x08009fb1
 8009f94:	08009fd1 	.word	0x08009fd1
 8009f98:	08009fc1 	.word	0x08009fc1
 8009f9c:	08009fc9 	.word	0x08009fc9
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
 8009fa0:	4a13      	ldr	r2, [pc, #76]	@ (8009ff0 <hif_register_cb+0x8c>)
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	6153      	str	r3, [r2, #20]
			break;
 8009fa6:	e01a      	b.n	8009fde <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
 8009fa8:	4a11      	ldr	r2, [pc, #68]	@ (8009ff0 <hif_register_cb+0x8c>)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	6113      	str	r3, [r2, #16]
			break;
 8009fae:	e016      	b.n	8009fde <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
 8009fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8009ff0 <hif_register_cb+0x8c>)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	6193      	str	r3, [r2, #24]
			break;
 8009fb6:	e012      	b.n	8009fde <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 8009fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8009ff0 <hif_register_cb+0x8c>)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	6213      	str	r3, [r2, #32]
			break;
 8009fbe:	e00e      	b.n	8009fde <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
 8009fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8009ff0 <hif_register_cb+0x8c>)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	6253      	str	r3, [r2, #36]	@ 0x24
			break;
 8009fc6:	e00a      	b.n	8009fde <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
 8009fc8:	4a09      	ldr	r2, [pc, #36]	@ (8009ff0 <hif_register_cb+0x8c>)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	61d3      	str	r3, [r2, #28]
			break;
 8009fce:	e006      	b.n	8009fde <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
 8009fd0:	4a07      	ldr	r2, [pc, #28]	@ (8009ff0 <hif_register_cb+0x8c>)
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	6293      	str	r3, [r2, #40]	@ 0x28
			break;
 8009fd6:	e002      	b.n	8009fde <hif_register_cb+0x7a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
 8009fd8:	23f4      	movs	r3, #244	@ 0xf4
 8009fda:	73fb      	strb	r3, [r7, #15]
			break;
 8009fdc:	bf00      	nop
	}
	return ret;
 8009fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	20003070 	.word	0x20003070

08009ff4 <m2m_wifi_cb>:
                HIF address.
@param[in]  grp
                HIF group type.
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b0ac      	sub	sp, #176	@ 0xb0
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	603a      	str	r2, [r7, #0]
 8009ffe:	71fb      	strb	r3, [r7, #7]
 800a000:	460b      	mov	r3, r1
 800a002:	80bb      	strh	r3, [r7, #4]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 800a004:	79fb      	ldrb	r3, [r7, #7]
 800a006:	2b2c      	cmp	r3, #44	@ 0x2c
 800a008:	d117      	bne.n	800a03a <m2m_wifi_cb+0x46>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 800a00a:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800a00e:	2300      	movs	r3, #0
 800a010:	2204      	movs	r2, #4
 800a012:	6838      	ldr	r0, [r7, #0]
 800a014:	f7ff ff42 	bl	8009e9c <hif_receive>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f040 819d 	bne.w	800a35a <m2m_wifi_cb+0x366>
		{
			if (gpfAppWifiCb)
 800a020:	4bac      	ldr	r3, [pc, #688]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 8198 	beq.w	800a35a <m2m_wifi_cb+0x366>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 800a02a:	4baa      	ldr	r3, [pc, #680]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800a032:	4611      	mov	r1, r2
 800a034:	202c      	movs	r0, #44	@ 0x2c
 800a036:	4798      	blx	r3
#endif  /* ETH_MODE */
    else
    {
        M2M_ERR("REQ Not defined %d\n", u8OpCode);
    }
}
 800a038:	e18f      	b.n	800a35a <m2m_wifi_cb+0x366>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 800a03a:	79fb      	ldrb	r3, [r7, #7]
 800a03c:	2b1b      	cmp	r3, #27
 800a03e:	d117      	bne.n	800a070 <m2m_wifi_cb+0x7c>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 800a040:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 800a044:	2300      	movs	r3, #0
 800a046:	2208      	movs	r2, #8
 800a048:	6838      	ldr	r0, [r7, #0]
 800a04a:	f7ff ff27 	bl	8009e9c <hif_receive>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	f040 8182 	bne.w	800a35a <m2m_wifi_cb+0x366>
			if (gpfAppWifiCb)
 800a056:	4b9f      	ldr	r3, [pc, #636]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 817d 	beq.w	800a35a <m2m_wifi_cb+0x366>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 800a060:	4b9c      	ldr	r3, [pc, #624]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800a068:	4611      	mov	r1, r2
 800a06a:	201b      	movs	r0, #27
 800a06c:	4798      	blx	r3
}
 800a06e:	e174      	b.n	800a35a <m2m_wifi_cb+0x366>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 800a070:	79fb      	ldrb	r3, [r7, #7]
 800a072:	2b06      	cmp	r3, #6
 800a074:	d117      	bne.n	800a0a6 <m2m_wifi_cb+0xb2>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 800a076:	f107 0108 	add.w	r1, r7, #8
 800a07a:	2301      	movs	r3, #1
 800a07c:	2230      	movs	r2, #48	@ 0x30
 800a07e:	6838      	ldr	r0, [r7, #0]
 800a080:	f7ff ff0c 	bl	8009e9c <hif_receive>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	f040 8167 	bne.w	800a35a <m2m_wifi_cb+0x366>
			if(gpfAppWifiCb)
 800a08c:	4b91      	ldr	r3, [pc, #580]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 8162 	beq.w	800a35a <m2m_wifi_cb+0x366>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 800a096:	4b8f      	ldr	r3, [pc, #572]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f107 0208 	add.w	r2, r7, #8
 800a09e:	4611      	mov	r1, r2
 800a0a0:	2006      	movs	r0, #6
 800a0a2:	4798      	blx	r3
}
 800a0a4:	e159      	b.n	800a35a <m2m_wifi_cb+0x366>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 800a0a6:	79fb      	ldrb	r3, [r7, #7]
 800a0a8:	2b0e      	cmp	r3, #14
 800a0aa:	f000 8156 	beq.w	800a35a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 800a0ae:	79fb      	ldrb	r3, [r7, #7]
 800a0b0:	2b32      	cmp	r3, #50	@ 0x32
 800a0b2:	d117      	bne.n	800a0e4 <m2m_wifi_cb+0xf0>
        if(hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 800a0b4:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	2218      	movs	r2, #24
 800a0bc:	6838      	ldr	r0, [r7, #0]
 800a0be:	f7ff feed 	bl	8009e9c <hif_receive>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f040 8148 	bne.w	800a35a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a0ca:	4b82      	ldr	r3, [pc, #520]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 8143 	beq.w	800a35a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 800a0d4:	4b7f      	ldr	r3, [pc, #508]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 800a0dc:	4611      	mov	r1, r2
 800a0de:	2032      	movs	r0, #50	@ 0x32
 800a0e0:	4798      	blx	r3
}
 800a0e2:	e13a      	b.n	800a35a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_REQ_DHCP_FAILURE)
 800a0e4:	79fb      	ldrb	r3, [r7, #7]
 800a0e6:	2b3d      	cmp	r3, #61	@ 0x3d
 800a0e8:	d114      	bne.n	800a114 <m2m_wifi_cb+0x120>
        if(hif_receive(u32Addr, NULL, 0, 1) == M2M_SUCCESS)
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	6838      	ldr	r0, [r7, #0]
 800a0f2:	f7ff fed3 	bl	8009e9c <hif_receive>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f040 812e 	bne.w	800a35a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a0fe:	4b75      	ldr	r3, [pc, #468]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 8129 	beq.w	800a35a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_REQ_DHCP_FAILURE, NULL);
 800a108:	4b72      	ldr	r3, [pc, #456]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2100      	movs	r1, #0
 800a10e:	203d      	movs	r0, #61	@ 0x3d
 800a110:	4798      	blx	r3
}
 800a112:	e122      	b.n	800a35a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_REQ_WPS)
 800a114:	79fb      	ldrb	r3, [r7, #7]
 800a116:	2b2f      	cmp	r3, #47	@ 0x2f
 800a118:	d11e      	bne.n	800a158 <m2m_wifi_cb+0x164>
        m2m_memset((uint8 *)&strWps, 0, sizeof(tstrM2MWPSInfo));
 800a11a:	f107 0308 	add.w	r3, r7, #8
 800a11e:	2264      	movs	r2, #100	@ 0x64
 800a120:	2100      	movs	r1, #0
 800a122:	4618      	mov	r0, r3
 800a124:	f7ff fae0 	bl	80096e8 <m2m_memset>
        if(hif_receive(u32Addr, (uint8 *)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 800a128:	f107 0108 	add.w	r1, r7, #8
 800a12c:	2300      	movs	r3, #0
 800a12e:	2264      	movs	r2, #100	@ 0x64
 800a130:	6838      	ldr	r0, [r7, #0]
 800a132:	f7ff feb3 	bl	8009e9c <hif_receive>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f040 810e 	bne.w	800a35a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a13e:	4b65      	ldr	r3, [pc, #404]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	f000 8109 	beq.w	800a35a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 800a148:	4b62      	ldr	r3, [pc, #392]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f107 0208 	add.w	r2, r7, #8
 800a150:	4611      	mov	r1, r2
 800a152:	202f      	movs	r0, #47	@ 0x2f
 800a154:	4798      	blx	r3
}
 800a156:	e100      	b.n	800a35a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	2b34      	cmp	r3, #52	@ 0x34
 800a15c:	d115      	bne.n	800a18a <m2m_wifi_cb+0x196>
        if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 800a15e:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800a162:	2300      	movs	r3, #0
 800a164:	2204      	movs	r2, #4
 800a166:	6838      	ldr	r0, [r7, #0]
 800a168:	f7ff fe98 	bl	8009e9c <hif_receive>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f040 80f3 	bne.w	800a35a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a174:	4b57      	ldr	r3, [pc, #348]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f000 80ee 	beq.w	800a35a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 800a17e:	4b55      	ldr	r3, [pc, #340]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2100      	movs	r1, #0
 800a184:	2034      	movs	r0, #52	@ 0x34
 800a186:	4798      	blx	r3
}
 800a188:	e0e7      	b.n	800a35a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 800a18a:	79fb      	ldrb	r3, [r7, #7]
 800a18c:	2b11      	cmp	r3, #17
 800a18e:	d11e      	bne.n	800a1ce <m2m_wifi_cb+0x1da>
        gu8scanInProgress = 0;
 800a190:	4b51      	ldr	r3, [pc, #324]	@ (800a2d8 <m2m_wifi_cb+0x2e4>)
 800a192:	2200      	movs	r2, #0
 800a194:	701a      	strb	r2, [r3, #0]
        if(hif_receive(u32Addr, (uint8 *)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 800a196:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800a19a:	2300      	movs	r3, #0
 800a19c:	2204      	movs	r2, #4
 800a19e:	6838      	ldr	r0, [r7, #0]
 800a1a0:	f7ff fe7c 	bl	8009e9c <hif_receive>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f040 80d7 	bne.w	800a35a <m2m_wifi_cb+0x366>
            gu8ChNum = strState.u8NumofCh;
 800a1ac:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 800a1b0:	4b4a      	ldr	r3, [pc, #296]	@ (800a2dc <m2m_wifi_cb+0x2e8>)
 800a1b2:	701a      	strb	r2, [r3, #0]
            if(gpfAppWifiCb)
 800a1b4:	4b47      	ldr	r3, [pc, #284]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 80ce 	beq.w	800a35a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 800a1be:	4b45      	ldr	r3, [pc, #276]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800a1c6:	4611      	mov	r1, r2
 800a1c8:	2011      	movs	r0, #17
 800a1ca:	4798      	blx	r3
}
 800a1cc:	e0c5      	b.n	800a35a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 800a1ce:	79fb      	ldrb	r3, [r7, #7]
 800a1d0:	2b13      	cmp	r3, #19
 800a1d2:	d117      	bne.n	800a204 <m2m_wifi_cb+0x210>
        if(hif_receive(u32Addr, (uint8 *)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 800a1d4:	f107 0108 	add.w	r1, r7, #8
 800a1d8:	2300      	movs	r3, #0
 800a1da:	222c      	movs	r2, #44	@ 0x2c
 800a1dc:	6838      	ldr	r0, [r7, #0]
 800a1de:	f7ff fe5d 	bl	8009e9c <hif_receive>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f040 80b8 	bne.w	800a35a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a1ea:	4b3a      	ldr	r3, [pc, #232]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f000 80b3 	beq.w	800a35a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 800a1f4:	4b37      	ldr	r3, [pc, #220]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f107 0208 	add.w	r2, r7, #8
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	2013      	movs	r0, #19
 800a200:	4798      	blx	r3
}
 800a202:	e0aa      	b.n	800a35a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 800a204:	79fb      	ldrb	r3, [r7, #7]
 800a206:	2b04      	cmp	r3, #4
 800a208:	d117      	bne.n	800a23a <m2m_wifi_cb+0x246>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800a20a:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800a20e:	2300      	movs	r3, #0
 800a210:	2204      	movs	r2, #4
 800a212:	6838      	ldr	r0, [r7, #0]
 800a214:	f7ff fe42 	bl	8009e9c <hif_receive>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f040 809d 	bne.w	800a35a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a220:	4b2c      	ldr	r3, [pc, #176]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	f000 8098 	beq.w	800a35a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 800a22a:	4b2a      	ldr	r3, [pc, #168]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800a232:	4611      	mov	r1, r2
 800a234:	2004      	movs	r0, #4
 800a236:	4798      	blx	r3
}
 800a238:	e08f      	b.n	800a35a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 800a23a:	79fb      	ldrb	r3, [r7, #7]
 800a23c:	2b65      	cmp	r3, #101	@ 0x65
 800a23e:	d116      	bne.n	800a26e <m2m_wifi_cb+0x27a>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800a240:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800a244:	2300      	movs	r3, #0
 800a246:	2204      	movs	r2, #4
 800a248:	6838      	ldr	r0, [r7, #0]
 800a24a:	f7ff fe27 	bl	8009e9c <hif_receive>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	f040 8082 	bne.w	800a35a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a256:	4b1f      	ldr	r3, [pc, #124]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d07d      	beq.n	800a35a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 800a25e:	4b1d      	ldr	r3, [pc, #116]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800a266:	4611      	mov	r1, r2
 800a268:	2065      	movs	r0, #101	@ 0x65
 800a26a:	4798      	blx	r3
}
 800a26c:	e075      	b.n	800a35a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 800a26e:	79fb      	ldrb	r3, [r7, #7]
 800a270:	2b09      	cmp	r3, #9
 800a272:	d115      	bne.n	800a2a0 <m2m_wifi_cb+0x2ac>
        if(hif_receive(u32Addr, (uint8 *)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 800a274:	f107 0108 	add.w	r1, r7, #8
 800a278:	2301      	movs	r3, #1
 800a27a:	2264      	movs	r2, #100	@ 0x64
 800a27c:	6838      	ldr	r0, [r7, #0]
 800a27e:	f7ff fe0d 	bl	8009e9c <hif_receive>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d168      	bne.n	800a35a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a288:	4b12      	ldr	r3, [pc, #72]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d064      	beq.n	800a35a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 800a290:	4b10      	ldr	r3, [pc, #64]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f107 0208 	add.w	r2, r7, #8
 800a298:	4611      	mov	r1, r2
 800a29a:	2009      	movs	r0, #9
 800a29c:	4798      	blx	r3
}
 800a29e:	e05c      	b.n	800a35a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 800a2a0:	79fb      	ldrb	r3, [r7, #7]
 800a2a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2a4:	d11c      	bne.n	800a2e0 <m2m_wifi_cb+0x2ec>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 800a2a6:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	2204      	movs	r2, #4
 800a2ae:	6838      	ldr	r0, [r7, #0]
 800a2b0:	f7ff fdf4 	bl	8009e9c <hif_receive>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d14f      	bne.n	800a35a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a2ba:	4b06      	ldr	r3, [pc, #24]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d04b      	beq.n	800a35a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 800a2c2:	4b04      	ldr	r3, [pc, #16]	@ (800a2d4 <m2m_wifi_cb+0x2e0>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800a2ca:	4611      	mov	r1, r2
 800a2cc:	202a      	movs	r0, #42	@ 0x2a
 800a2ce:	4798      	blx	r3
}
 800a2d0:	e043      	b.n	800a35a <m2m_wifi_cb+0x366>
 800a2d2:	bf00      	nop
 800a2d4:	200030a0 	.word	0x200030a0
 800a2d8:	200030a4 	.word	0x200030a4
 800a2dc:	2000309c 	.word	0x2000309c
    else if(u8OpCode == M2M_WIFI_REQRSP_DELETE_APID)
 800a2e0:	79fb      	ldrb	r3, [r7, #7]
 800a2e2:	2b27      	cmp	r3, #39	@ 0x27
 800a2e4:	d115      	bne.n	800a312 <m2m_wifi_cb+0x31e>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MGenericResp), 0) == M2M_SUCCESS)
 800a2e6:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	2204      	movs	r2, #4
 800a2ee:	6838      	ldr	r0, [r7, #0]
 800a2f0:	f7ff fdd4 	bl	8009e9c <hif_receive>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d12f      	bne.n	800a35a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a2fa:	4b1a      	ldr	r3, [pc, #104]	@ (800a364 <m2m_wifi_cb+0x370>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d02b      	beq.n	800a35a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_REQRSP_DELETE_APID, &strResp);
 800a302:	4b18      	ldr	r3, [pc, #96]	@ (800a364 <m2m_wifi_cb+0x370>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800a30a:	4611      	mov	r1, r2
 800a30c:	2027      	movs	r0, #39	@ 0x27
 800a30e:	4798      	blx	r3
}
 800a310:	e023      	b.n	800a35a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 800a312:	79fb      	ldrb	r3, [r7, #7]
 800a314:	2b20      	cmp	r3, #32
 800a316:	d120      	bne.n	800a35a <m2m_wifi_cb+0x366>
        if(hif_receive(u32Addr, (uint8 *)&strPrng, sizeof(tstrPrng), 0) == M2M_SUCCESS)
 800a318:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800a31c:	2300      	movs	r3, #0
 800a31e:	2208      	movs	r2, #8
 800a320:	6838      	ldr	r0, [r7, #0]
 800a322:	f7ff fdbb 	bl	8009e9c <hif_receive>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d116      	bne.n	800a35a <m2m_wifi_cb+0x366>
            if(hif_receive(u32Addr + sizeof(tstrPrng), strPrng.pu8RngBuff, strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	f103 0008 	add.w	r0, r3, #8
 800a332:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a334:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 800a338:	2301      	movs	r3, #1
 800a33a:	f7ff fdaf 	bl	8009e9c <hif_receive>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10a      	bne.n	800a35a <m2m_wifi_cb+0x366>
                if(gpfAppWifiCb)
 800a344:	4b07      	ldr	r3, [pc, #28]	@ (800a364 <m2m_wifi_cb+0x370>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d006      	beq.n	800a35a <m2m_wifi_cb+0x366>
                    gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG, &strPrng);
 800a34c:	4b05      	ldr	r3, [pc, #20]	@ (800a364 <m2m_wifi_cb+0x370>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800a354:	4611      	mov	r1, r2
 800a356:	2020      	movs	r0, #32
 800a358:	4798      	blx	r3
}
 800a35a:	bf00      	nop
 800a35c:	37b0      	adds	r7, #176	@ 0xb0
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	200030a0 	.word	0x200030a0

0800a368 <m2m_wifi_init_hold>:
    s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8 *)pCRL, sizeof(tstrTlsCrlInfo), 0);
    return s8Ret;
}

sint8 m2m_wifi_init_hold(void)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
    sint8 ret = M2M_ERR_FAIL;
 800a36e:	23f4      	movs	r3, #244	@ 0xf4
 800a370:	71fb      	strb	r3, [r7, #7]

    /* Apply device specific initialization. */
    ret = nm_drv_init_hold();
 800a372:	f001 f845 	bl	800b400 <nm_drv_init_hold>
 800a376:	4603      	mov	r3, r0
 800a378:	71fb      	strb	r3, [r7, #7]

    if(M2M_SUCCESS == ret)
 800a37a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d102      	bne.n	800a388 <m2m_wifi_init_hold+0x20>
        gu8WifiState = WIFI_STATE_INIT;
 800a382:	4b04      	ldr	r3, [pc, #16]	@ (800a394 <m2m_wifi_init_hold+0x2c>)
 800a384:	2201      	movs	r2, #1
 800a386:	701a      	strb	r2, [r3, #0]

    return ret;
 800a388:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	2000309d 	.word	0x2000309d

0800a398 <m2m_wifi_init_start>:

sint8 m2m_wifi_init_start(tstrWifiInitParam *pWifiInitParam)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b08e      	sub	sp, #56	@ 0x38
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
    tstrM2mRev strtmp;
    sint8 ret = M2M_SUCCESS;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	72fb      	strb	r3, [r7, #11]

    if(pWifiInitParam == NULL) {
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d103      	bne.n	800a3b8 <m2m_wifi_init_start+0x20>
        ret = M2M_ERR_FAIL;
 800a3b0:	23f4      	movs	r3, #244	@ 0xf4
 800a3b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        goto _EXIT0;
 800a3b6:	e035      	b.n	800a424 <m2m_wifi_init_start+0x8c>
    }

    gpfAppWifiCb = pWifiInitParam->pfAppWifiCb;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a1c      	ldr	r2, [pc, #112]	@ (800a430 <m2m_wifi_init_start+0x98>)
 800a3be:	6013      	str	r3, [r2, #0]
    gu16ethRcvBufSize = pWifiInitParam->strEthInitParam.u16ethRcvBufSize;
	if (pWifiInitParam->strEthInitParam.u8EthernetEnable)		
		u8WifiMode = M2M_WIFI_MODE_ETHERNET;
#endif /* ETH_MODE */

    gu8scanInProgress = 0;
 800a3c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a434 <m2m_wifi_init_start+0x9c>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	701a      	strb	r2, [r3, #0]
    /* Apply device specific initialization. */
    ret = nm_drv_init_start(&u8WifiMode);
 800a3c6:	f107 030b 	add.w	r3, r7, #11
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 f832 	bl	800b434 <nm_drv_init_start>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if(ret != M2M_SUCCESS) goto _EXIT0;
 800a3d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d121      	bne.n	800a422 <m2m_wifi_init_start+0x8a>

    gu8WifiState = WIFI_STATE_START;
 800a3de:	4b16      	ldr	r3, [pc, #88]	@ (800a438 <m2m_wifi_init_start+0xa0>)
 800a3e0:	2202      	movs	r2, #2
 800a3e2:	701a      	strb	r2, [r3, #0]

    /* Initialize host interface module */
    ret = hif_init(NULL);
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	f7ff fad5 	bl	8009994 <hif_init>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if(ret != M2M_SUCCESS) goto _EXIT1;
 800a3f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10c      	bne.n	800a412 <m2m_wifi_init_start+0x7a>

    hif_register_cb(M2M_REQ_GROUP_WIFI, m2m_wifi_cb);
 800a3f8:	4910      	ldr	r1, [pc, #64]	@ (800a43c <m2m_wifi_init_start+0xa4>)
 800a3fa:	2001      	movs	r0, #1
 800a3fc:	f7ff fdb2 	bl	8009f64 <hif_register_cb>

    ret = nm_get_firmware_full_info(&strtmp);
 800a400:	f107 030c 	add.w	r3, r7, #12
 800a404:	4618      	mov	r0, r3
 800a406:	f000 ff57 	bl	800b2b8 <nm_get_firmware_full_info>
 800a40a:	4603      	mov	r3, r0
 800a40c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmware Version\n");
	}

    goto _EXIT0;
 800a410:	e008      	b.n	800a424 <m2m_wifi_init_start+0x8c>
    if(ret != M2M_SUCCESS) goto _EXIT1;
 800a412:	bf00      	nop

_EXIT1:
    gu8WifiState = WIFI_STATE_DEINIT;
 800a414:	4b08      	ldr	r3, [pc, #32]	@ (800a438 <m2m_wifi_init_start+0xa0>)
 800a416:	2200      	movs	r2, #0
 800a418:	701a      	strb	r2, [r3, #0]
    nm_drv_deinit(NULL);
 800a41a:	2000      	movs	r0, #0
 800a41c:	f001 f856 	bl	800b4cc <nm_drv_deinit>
 800a420:	e000      	b.n	800a424 <m2m_wifi_init_start+0x8c>
    if(ret != M2M_SUCCESS) goto _EXIT0;
 800a422:	bf00      	nop
_EXIT0:

    return ret;
 800a424:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3738      	adds	r7, #56	@ 0x38
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	200030a0 	.word	0x200030a0
 800a434:	200030a4 	.word	0x200030a4
 800a438:	2000309d 	.word	0x2000309d
 800a43c:	08009ff5 	.word	0x08009ff5

0800a440 <m2m_wifi_init>:

sint8 m2m_wifi_init(tstrWifiInitParam *pWifiInitParam)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 800a448:	2300      	movs	r3, #0
 800a44a:	73fb      	strb	r3, [r7, #15]

    ret = m2m_wifi_init_hold();
 800a44c:	f7ff ff8c 	bl	800a368 <m2m_wifi_init_hold>
 800a450:	4603      	mov	r3, r0
 800a452:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 800a454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d104      	bne.n	800a466 <m2m_wifi_init+0x26>
    {
        ret = m2m_wifi_init_start(pWifiInitParam);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7ff ff9b 	bl	800a398 <m2m_wifi_init_start>
 800a462:	4603      	mov	r3, r0
 800a464:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 800a466:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <m2m_wifi_handle_events>:
{
    hif_yield();
}

sint8 m2m_wifi_handle_events(void *arg)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
    return hif_handle_isr();
 800a47a:	f7ff fcd3 	bl	8009e24 <hif_handle_isr>
 800a47e:	4603      	mov	r3, r0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <m2m_wifi_connect_prepare_msg>:
    tenuM2mSecType      enuAuthType,
    uint16              u16AuthSize,
    tstrNetworkId       *pstrNetworkId,
    tstrM2mWifiConnHdr  *pstrWifiConn
)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	603b      	str	r3, [r7, #0]
 800a490:	4603      	mov	r3, r0
 800a492:	71fb      	strb	r3, [r7, #7]
 800a494:	460b      	mov	r3, r1
 800a496:	71bb      	strb	r3, [r7, #6]
 800a498:	4613      	mov	r3, r2
 800a49a:	80bb      	strh	r3, [r7, #4]
    sint8   ret = M2M_ERR_FAIL;
 800a49c:	23f4      	movs	r3, #244	@ 0xf4
 800a49e:	75fb      	strb	r3, [r7, #23]
    uint16  u16CredSize = sizeof(tstrM2mConnCredCmn) + u16AuthSize;
 800a4a0:	88bb      	ldrh	r3, [r7, #4]
 800a4a2:	332c      	adds	r3, #44	@ 0x2c
 800a4a4:	82bb      	strh	r3, [r7, #20]

    /* Check application params. */
    if(
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d074      	beq.n	800a596 <m2m_wifi_connect_prepare_msg+0x10e>
        (pstrNetworkId == NULL)
        || (pstrNetworkId->pu8Ssid == NULL)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d070      	beq.n	800a596 <m2m_wifi_connect_prepare_msg+0x10e>
        || (pstrNetworkId->u8SsidLen >= M2M_MAX_SSID_LEN)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	7a1b      	ldrb	r3, [r3, #8]
 800a4b8:	2b20      	cmp	r3, #32
 800a4ba:	d86c      	bhi.n	800a596 <m2m_wifi_connect_prepare_msg+0x10e>
    )
        goto INVALID_ARG;

    if(pstrWifiConn != NULL)
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d066      	beq.n	800a590 <m2m_wifi_connect_prepare_msg+0x108>
    {
        tstrM2mConnCredHdr  *pstrHdr = &pstrWifiConn->strConnCredHdr;
 800a4c2:	6a3b      	ldr	r3, [r7, #32]
 800a4c4:	613b      	str	r3, [r7, #16]
        tstrM2mConnCredCmn  *pstrCmn = &pstrWifiConn->strConnCredCmn;
 800a4c6:	6a3b      	ldr	r3, [r7, #32]
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	60fb      	str	r3, [r7, #12]

        m2m_memset((uint8 *)pstrWifiConn, 0, sizeof(tstrM2mWifiConnHdr));
 800a4cc:	2230      	movs	r2, #48	@ 0x30
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	6a38      	ldr	r0, [r7, #32]
 800a4d2:	f7ff f909 	bl	80096e8 <m2m_memset>

        pstrHdr->u16CredSize = u16CredSize;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	8aba      	ldrh	r2, [r7, #20]
 800a4da:	801a      	strh	r2, [r3, #0]
        switch(enuCredStoreOption)
 800a4dc:	79fb      	ldrb	r3, [r7, #7]
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	d006      	beq.n	800a4f0 <m2m_wifi_connect_prepare_msg+0x68>
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	dc59      	bgt.n	800a59a <m2m_wifi_connect_prepare_msg+0x112>
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d010      	beq.n	800a50c <m2m_wifi_connect_prepare_msg+0x84>
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d007      	beq.n	800a4fe <m2m_wifi_connect_prepare_msg+0x76>
            pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
        // intentional fall through...
        case WIFI_CRED_DONTSAVE:
            break;
        default:
            goto INVALID_ARG;
 800a4ee:	e054      	b.n	800a59a <m2m_wifi_connect_prepare_msg+0x112>
            pstrHdr->u8CredStoreFlags |= M2M_CRED_ENCRYPT_FLAG;
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	789b      	ldrb	r3, [r3, #2]
 800a4f4:	f043 0302 	orr.w	r3, r3, #2
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	709a      	strb	r2, [r3, #2]
            pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	789b      	ldrb	r3, [r3, #2]
 800a502:	f043 0301 	orr.w	r3, r3, #1
 800a506:	b2da      	uxtb	r2, r3
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	709a      	strb	r2, [r3, #2]
            break;
 800a50c:	bf00      	nop
        }

        if(pstrNetworkId->enuChannel == M2M_WIFI_CH_ALL)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	7a5b      	ldrb	r3, [r3, #9]
 800a512:	2bff      	cmp	r3, #255	@ 0xff
 800a514:	d104      	bne.n	800a520 <m2m_wifi_connect_prepare_msg+0x98>
            pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	7a5a      	ldrb	r2, [r3, #9]
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	70da      	strb	r2, [r3, #3]
 800a51e:	e00d      	b.n	800a53c <m2m_wifi_connect_prepare_msg+0xb4>
        else if((pstrNetworkId->enuChannel <= M2M_WIFI_CH_14) && (pstrNetworkId->enuChannel >= M2M_WIFI_CH_1))
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	7a5b      	ldrb	r3, [r3, #9]
 800a524:	2b0e      	cmp	r3, #14
 800a526:	d83a      	bhi.n	800a59e <m2m_wifi_connect_prepare_msg+0x116>
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	7a5b      	ldrb	r3, [r3, #9]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d036      	beq.n	800a59e <m2m_wifi_connect_prepare_msg+0x116>
            pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel) - 1;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	7a5b      	ldrb	r3, [r3, #9]
 800a534:	3b01      	subs	r3, #1
 800a536:	b2da      	uxtb	r2, r3
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	70da      	strb	r2, [r3, #3]
        else
            goto INVALID_ARG;

        if((enuAuthType == M2M_WIFI_SEC_INVALID) || (enuAuthType >= M2M_WIFI_NUM_AUTH_TYPES))
 800a53c:	79bb      	ldrb	r3, [r7, #6]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d02f      	beq.n	800a5a2 <m2m_wifi_connect_prepare_msg+0x11a>
 800a542:	79bb      	ldrb	r3, [r7, #6]
 800a544:	2b04      	cmp	r3, #4
 800a546:	d82c      	bhi.n	800a5a2 <m2m_wifi_connect_prepare_msg+0x11a>
            goto INVALID_ARG;
        pstrCmn->u8AuthType = (uint8)enuAuthType;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	79ba      	ldrb	r2, [r7, #6]
 800a54c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        pstrCmn->u8SsidLen = pstrNetworkId->u8SsidLen;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	7a1a      	ldrb	r2, [r3, #8]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	701a      	strb	r2, [r3, #0]
        m2m_memcpy(pstrCmn->au8Ssid, pstrNetworkId->pu8Ssid, pstrNetworkId->u8SsidLen);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	1c58      	adds	r0, r3, #1
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	6859      	ldr	r1, [r3, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	7a1b      	ldrb	r3, [r3, #8]
 800a564:	461a      	mov	r2, r3
 800a566:	f7ff f89f 	bl	80096a8 <m2m_memcpy>
        if(pstrNetworkId->pu8Bssid != NULL)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00c      	beq.n	800a58c <m2m_wifi_connect_prepare_msg+0x104>
        {
            pstrCmn->u8Options = M2M_WIFI_CONN_BSSID_FLAG;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            m2m_memcpy(pstrCmn->au8Bssid, pstrNetworkId->pu8Bssid, M2M_MAC_ADDRES_LEN);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f103 0022 	add.w	r0, r3, #34	@ 0x22
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2206      	movs	r2, #6
 800a586:	4619      	mov	r1, r3
 800a588:	f7ff f88e 	bl	80096a8 <m2m_memcpy>
        }
        /* Everything is ok, set return value. */
        ret = M2M_SUCCESS;
 800a58c:	2300      	movs	r3, #0
 800a58e:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 800a590:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a594:	e008      	b.n	800a5a8 <m2m_wifi_connect_prepare_msg+0x120>
        goto INVALID_ARG;
 800a596:	bf00      	nop
 800a598:	e004      	b.n	800a5a4 <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800a59a:	bf00      	nop
 800a59c:	e002      	b.n	800a5a4 <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800a59e:	bf00      	nop
 800a5a0:	e000      	b.n	800a5a4 <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800a5a2:	bf00      	nop
INVALID_ARG:
    return M2M_ERR_INVALID_ARG;
 800a5a4:	f06f 030e 	mvn.w	r3, #14
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <m2m_wifi_connect_open>:
/*************************************************************************************************/
sint8 m2m_wifi_connect_open(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId      *pstrNetworkId
)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b094      	sub	sp, #80	@ 0x50
 800a5b4:	af04      	add	r7, sp, #16
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	6039      	str	r1, [r7, #0]
 800a5ba:	71fb      	strb	r3, [r7, #7]
    sint8               ret = M2M_ERR_INVALID_ARG;
 800a5bc:	23f1      	movs	r3, #241	@ 0xf1
 800a5be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    tstrM2mWifiConnHdr  strConnHdr;

    ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption, M2M_WIFI_SEC_OPEN, 0, pstrNetworkId, &strConnHdr);
 800a5c2:	79f8      	ldrb	r0, [r7, #7]
 800a5c4:	f107 030c 	add.w	r3, r7, #12
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	2101      	movs	r1, #1
 800a5d0:	f7ff ff5a 	bl	800a488 <m2m_wifi_connect_prepare_msg>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if(ret == M2M_SUCCESS)
 800a5da:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10f      	bne.n	800a602 <m2m_wifi_connect_open+0x52>
    {
        ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN,
 800a5e2:	f107 020c 	add.w	r2, r7, #12
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	9302      	str	r3, [sp, #8]
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	2330      	movs	r3, #48	@ 0x30
 800a5f4:	213b      	movs	r1, #59	@ 0x3b
 800a5f6:	2001      	movs	r0, #1
 800a5f8:	f7ff f9e8 	bl	80099cc <hif_send>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                       (uint8 *)&strConnHdr, sizeof(strConnHdr),
                       NULL, 0, 0);
    }
    return ret;
 800a602:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a606:	4618      	mov	r0, r3
 800a608:	3740      	adds	r7, #64	@ 0x40
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <m2m_wifi_connect_wep>:
sint8 m2m_wifi_connect_wep(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuthWep         *pstrAuthWep
)
{
 800a60e:	b480      	push	{r7}
 800a610:	b085      	sub	sp, #20
 800a612:	af00      	add	r7, sp, #0
 800a614:	4603      	mov	r3, r0
 800a616:	60b9      	str	r1, [r7, #8]
 800a618:	607a      	str	r2, [r7, #4]
 800a61a:	73fb      	strb	r3, [r7, #15]
    /* As of 19.7.5 the WEP protocol is deprecated */
    return M2M_ERR_INVALID;
 800a61c:	f06f 030f 	mvn.w	r3, #15
}
 800a620:	4618      	mov	r0, r3
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <m2m_wifi_connect_psk>:
sint8 m2m_wifi_connect_psk(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuthPsk         *pstrAuthPsk
)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b096      	sub	sp, #88	@ 0x58
 800a630:	af04      	add	r7, sp, #16
 800a632:	4603      	mov	r3, r0
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	73fb      	strb	r3, [r7, #15]
    sint8   ret = M2M_ERR_INVALID_ARG;
 800a63a:	23f1      	movs	r3, #241	@ 0xf1
 800a63c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if(pstrAuthPsk != NULL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d07e      	beq.n	800a744 <m2m_wifi_connect_psk+0x118>
    {
        tstrM2mWifiConnHdr  strConnHdr;

        ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption,
 800a646:	7bf8      	ldrb	r0, [r7, #15]
 800a648:	f107 0310 	add.w	r3, r7, #16
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	226c      	movs	r2, #108	@ 0x6c
 800a652:	2102      	movs	r1, #2
 800a654:	f7ff ff18 	bl	800a488 <m2m_wifi_connect_prepare_msg>
 800a658:	4603      	mov	r3, r0
 800a65a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                           M2M_WIFI_SEC_WPA_PSK,
                                           sizeof(tstrM2mWifiPsk),
                                           pstrNetworkId,
                                           &strConnHdr);

        if(ret == M2M_SUCCESS)
 800a65e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800a662:	2b00      	cmp	r3, #0
 800a664:	d16e      	bne.n	800a744 <m2m_wifi_connect_psk+0x118>
        {
            tstrM2mWifiPsk  *pstrPsk = (tstrM2mWifiPsk *)malloc(sizeof(tstrM2mWifiPsk));
 800a666:	206c      	movs	r0, #108	@ 0x6c
 800a668:	f001 fd92 	bl	800c190 <malloc>
 800a66c:	4603      	mov	r3, r0
 800a66e:	643b      	str	r3, [r7, #64]	@ 0x40
            if(pstrPsk != NULL)
 800a670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a672:	2b00      	cmp	r3, #0
 800a674:	d063      	beq.n	800a73e <m2m_wifi_connect_psk+0x112>
            {
                m2m_memset((uint8 *)pstrPsk, 0, sizeof(tstrM2mWifiPsk));
 800a676:	226c      	movs	r2, #108	@ 0x6c
 800a678:	2100      	movs	r1, #0
 800a67a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a67c:	f7ff f834 	bl	80096e8 <m2m_memset>
                if(pstrAuthPsk->pu8Psk != NULL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d025      	beq.n	800a6d4 <m2m_wifi_connect_psk+0xa8>
                {
                    if(pstrAuthPsk->pu8Passphrase != NULL)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <m2m_wifi_connect_psk+0x6c>
                        ret = M2M_ERR_INVALID_ARG;
 800a690:	23f1      	movs	r3, #241	@ 0xf1
 800a692:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a696:	e03a      	b.n	800a70e <m2m_wifi_connect_psk+0xe2>
                    else
                    {
                        pstrPsk->u8PassphraseLen = M2M_MAX_PSK_LEN-1;
 800a698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a69a:	2240      	movs	r2, #64	@ 0x40
 800a69c:	701a      	strb	r2, [r3, #0]
                        /* Use hexstr_2_bytes to verify pu8Psk input. */
                        if(M2M_SUCCESS != hexstr_2_bytes(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen/2))
 800a69e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6a0:	1c58      	adds	r0, r3, #1
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6819      	ldr	r1, [r3, #0]
 800a6a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	085b      	lsrs	r3, r3, #1
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	f7ff f871 	bl	8009796 <hexstr_2_bytes>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <m2m_wifi_connect_psk+0x94>
                            ret = M2M_ERR_INVALID_ARG;
 800a6ba:	23f1      	movs	r3, #241	@ 0xf1
 800a6bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                        m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen);
 800a6c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6c2:	1c58      	adds	r0, r3, #1
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6819      	ldr	r1, [r3, #0]
 800a6c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	f7fe ffeb 	bl	80096a8 <m2m_memcpy>
 800a6d2:	e01c      	b.n	800a70e <m2m_wifi_connect_psk+0xe2>
                    }
                }
                else if(pstrAuthPsk->pu8Passphrase != NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d015      	beq.n	800a708 <m2m_wifi_connect_psk+0xdc>
                {
                    if(pstrAuthPsk->u8PassphraseLen > M2M_MAX_PSK_LEN-1)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	7a1b      	ldrb	r3, [r3, #8]
 800a6e0:	2b40      	cmp	r3, #64	@ 0x40
 800a6e2:	d903      	bls.n	800a6ec <m2m_wifi_connect_psk+0xc0>
                        ret = M2M_ERR_INVALID_ARG;
 800a6e4:	23f1      	movs	r3, #241	@ 0xf1
 800a6e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a6ea:	e010      	b.n	800a70e <m2m_wifi_connect_psk+0xe2>
                    else
                    {
                        pstrPsk->u8PassphraseLen = pstrAuthPsk->u8PassphraseLen;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	7a1a      	ldrb	r2, [r3, #8]
 800a6f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6f2:	701a      	strb	r2, [r3, #0]
                        m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Passphrase, pstrPsk->u8PassphraseLen);
 800a6f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6f6:	1c58      	adds	r0, r3, #1
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6859      	ldr	r1, [r3, #4]
 800a6fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	461a      	mov	r2, r3
 800a702:	f7fe ffd1 	bl	80096a8 <m2m_memcpy>
 800a706:	e002      	b.n	800a70e <m2m_wifi_connect_psk+0xe2>
                    }
                }
                else
                    ret = M2M_ERR_INVALID_ARG;
 800a708:	23f1      	movs	r3, #241	@ 0xf1
 800a70a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                if(ret == M2M_SUCCESS)
 800a70e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10f      	bne.n	800a736 <m2m_wifi_connect_psk+0x10a>
                {
                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
 800a716:	f107 0210 	add.w	r2, r7, #16
 800a71a:	2330      	movs	r3, #48	@ 0x30
 800a71c:	9302      	str	r3, [sp, #8]
 800a71e:	236c      	movs	r3, #108	@ 0x6c
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	2330      	movs	r3, #48	@ 0x30
 800a728:	21bb      	movs	r1, #187	@ 0xbb
 800a72a:	2001      	movs	r0, #1
 800a72c:	f7ff f94e 	bl	80099cc <hif_send>
 800a730:	4603      	mov	r3, r0
 800a732:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                   (uint8 *)&strConnHdr, sizeof(tstrM2mWifiConnHdr),
                                   (uint8 *)pstrPsk, sizeof(tstrM2mWifiPsk), sizeof(tstrM2mWifiConnHdr));
                }
                free(pstrPsk);
 800a736:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a738:	f001 fd32 	bl	800c1a0 <free>
 800a73c:	e002      	b.n	800a744 <m2m_wifi_connect_psk+0x118>
            }
            else
                ret = M2M_ERR_MEM_ALLOC;
 800a73e:	23fd      	movs	r3, #253	@ 0xfd
 800a740:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }
    return ret;
 800a744:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3748      	adds	r7, #72	@ 0x48
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <m2m_wifi_connect_1x_mschap2>:
sint8 m2m_wifi_connect_1x_mschap2(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuth1xMschap2   *pstrAuth1xMschap2
)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b098      	sub	sp, #96	@ 0x60
 800a754:	af04      	add	r7, sp, #16
 800a756:	4603      	mov	r3, r0
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
 800a75c:	73fb      	strb	r3, [r7, #15]
    sint8 ret = M2M_ERR_INVALID_ARG;
 800a75e:	23f1      	movs	r3, #241	@ 0xf1
 800a760:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if(pstrAuth1xMschap2 != NULL)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	f000 80d3 	beq.w	800a912 <m2m_wifi_connect_1x_mschap2+0x1c2>
    {
        if(pstrAuth1xMschap2->pu8Domain == NULL)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d102      	bne.n	800a77a <m2m_wifi_connect_1x_mschap2+0x2a>
            pstrAuth1xMschap2->u16DomainLen = 0;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	819a      	strh	r2, [r3, #12]
        if(
            (pstrAuth1xMschap2->pu8UserName != NULL)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685b      	ldr	r3, [r3, #4]
        if(
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f000 80c7 	beq.w	800a912 <m2m_wifi_connect_1x_mschap2+0x1c2>
            && (pstrAuth1xMschap2->pu8Password != NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f000 80c2 	beq.w	800a912 <m2m_wifi_connect_1x_mschap2+0x1c2>
            && ((uint32)(pstrAuth1xMschap2->u16DomainLen) + pstrAuth1xMschap2->u16UserNameLen <= M2M_AUTH_1X_USER_LEN_MAX)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	899b      	ldrh	r3, [r3, #12]
 800a792:	461a      	mov	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	89db      	ldrh	r3, [r3, #14]
 800a798:	4413      	add	r3, r2
 800a79a:	2b64      	cmp	r3, #100	@ 0x64
 800a79c:	f200 80b9 	bhi.w	800a912 <m2m_wifi_connect_1x_mschap2+0x1c2>
            && (pstrAuth1xMschap2->u16PasswordLen <= M2M_AUTH_1X_PASSWORD_LEN_MAX)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	8a1b      	ldrh	r3, [r3, #16]
 800a7a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7a8:	f200 80b3 	bhi.w	800a912 <m2m_wifi_connect_1x_mschap2+0x1c2>
        )
        {
            tstrM2mWifiConnHdr  strConnHdr;
            uint16              u16AuthSize =   sizeof(tstrM2mWifi1xHdr) +
                                                pstrAuth1xMschap2->u16DomainLen +
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	899a      	ldrh	r2, [r3, #12]
                                                pstrAuth1xMschap2->u16UserNameLen +
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	89db      	ldrh	r3, [r3, #14]
                                                pstrAuth1xMschap2->u16DomainLen +
 800a7b4:	4413      	add	r3, r2
 800a7b6:	b29a      	uxth	r2, r3
                                                pstrAuth1xMschap2->u16PasswordLen;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	8a1b      	ldrh	r3, [r3, #16]
                                                pstrAuth1xMschap2->u16UserNameLen +
 800a7bc:	4413      	add	r3, r2
 800a7be:	b29b      	uxth	r3, r3
            uint16              u16AuthSize =   sizeof(tstrM2mWifi1xHdr) +
 800a7c0:	332c      	adds	r3, #44	@ 0x2c
 800a7c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

            ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption,
 800a7c6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a7ca:	7bf8      	ldrb	r0, [r7, #15]
 800a7cc:	f107 0310 	add.w	r3, r7, #16
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	2104      	movs	r1, #4
 800a7d6:	f7ff fe57 	bl	800a488 <m2m_wifi_connect_prepare_msg>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                                               M2M_WIFI_SEC_802_1X,
                                               u16AuthSize,
                                               pstrNetworkId,
                                               &strConnHdr);

            if(ret == M2M_SUCCESS)
 800a7e0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f040 8094 	bne.w	800a912 <m2m_wifi_connect_1x_mschap2+0x1c2>
            {
                tstrM2mWifi1xHdr    *pstr1xHdr = (tstrM2mWifi1xHdr *)malloc(u16AuthSize);
 800a7ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f001 fcce 	bl	800c190 <malloc>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	643b      	str	r3, [r7, #64]	@ 0x40
                if(pstr1xHdr != NULL)
 800a7f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f000 8086 	beq.w	800a90c <m2m_wifi_connect_1x_mschap2+0x1bc>
                {
                    uint8   *pu8AuthPtr = pstr1xHdr->au81xAuthDetails;
 800a800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a802:	332c      	adds	r3, #44	@ 0x2c
 800a804:	64bb      	str	r3, [r7, #72]	@ 0x48
                    m2m_memset((uint8 *)pstr1xHdr, 0, u16AuthSize);
 800a806:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a80a:	461a      	mov	r2, r3
 800a80c:	2100      	movs	r1, #0
 800a80e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a810:	f7fe ff6a 	bl	80096e8 <m2m_memset>

                    pstr1xHdr->u8Flags = M2M_802_1X_MSCHAP2_FLAG;
 800a814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a816:	2201      	movs	r2, #1
 800a818:	701a      	strb	r2, [r3, #0]
                    if(pstrAuth1xMschap2->bUnencryptedUserName == true)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	7c9b      	ldrb	r3, [r3, #18]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d006      	beq.n	800a830 <m2m_wifi_connect_1x_mschap2+0xe0>
                        pstr1xHdr->u8Flags |= M2M_802_1X_UNENCRYPTED_USERNAME_FLAG;
 800a822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a82e:	701a      	strb	r2, [r3, #0]
                    if(pstrAuth1xMschap2->bPrependDomain == true)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	7cdb      	ldrb	r3, [r3, #19]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d006      	beq.n	800a846 <m2m_wifi_connect_1x_mschap2+0xf6>
                        pstr1xHdr->u8Flags |= M2M_802_1X_PREPEND_DOMAIN_FLAG;
 800a838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a840:	b2da      	uxtb	r2, r3
 800a842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a844:	701a      	strb	r2, [r3, #0]

                    pstr1xHdr->u8HdrLength = sizeof(tstrM2mWifi1xHdr);
 800a846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a848:	222c      	movs	r2, #44	@ 0x2c
 800a84a:	70da      	strb	r2, [r3, #3]
                    pstr1xHdr->u32TlsHsFlags = gu321xTlsHsFlags;
 800a84c:	4b34      	ldr	r3, [pc, #208]	@ (800a920 <m2m_wifi_connect_1x_mschap2+0x1d0>)
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a852:	625a      	str	r2, [r3, #36]	@ 0x24
                    m2m_memcpy(pstr1xHdr->au8TlsSpecificRootNameSha1, gau81xRootSha1, sizeof(gau81xRootSha1));
 800a854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a856:	330c      	adds	r3, #12
 800a858:	2214      	movs	r2, #20
 800a85a:	4932      	ldr	r1, [pc, #200]	@ (800a924 <m2m_wifi_connect_1x_mschap2+0x1d4>)
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fe ff23 	bl	80096a8 <m2m_memcpy>

                    pstr1xHdr->u8DomainLength = 0;
 800a862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a864:	2200      	movs	r2, #0
 800a866:	705a      	strb	r2, [r3, #1]
                    if(pstrAuth1xMschap2->pu8Domain != NULL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d012      	beq.n	800a896 <m2m_wifi_connect_1x_mschap2+0x146>
                    {
                        pstr1xHdr->u8DomainLength = (uint8)(pstrAuth1xMschap2->u16DomainLen);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	899b      	ldrh	r3, [r3, #12]
 800a874:	b2da      	uxtb	r2, r3
 800a876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a878:	705a      	strb	r2, [r3, #1]
                        m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8Domain, pstr1xHdr->u8DomainLength);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6819      	ldr	r1, [r3, #0]
 800a87e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a880:	785b      	ldrb	r3, [r3, #1]
 800a882:	461a      	mov	r2, r3
 800a884:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a886:	f7fe ff0f 	bl	80096a8 <m2m_memcpy>
                        pu8AuthPtr += pstr1xHdr->u8DomainLength;
 800a88a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a88c:	785b      	ldrb	r3, [r3, #1]
 800a88e:	461a      	mov	r2, r3
 800a890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a892:	4413      	add	r3, r2
 800a894:	64bb      	str	r3, [r7, #72]	@ 0x48
                    }

                    pstr1xHdr->u8UserNameLength = (pstrAuth1xMschap2->u16UserNameLen);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	89db      	ldrh	r3, [r3, #14]
 800a89a:	b2da      	uxtb	r2, r3
 800a89c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a89e:	709a      	strb	r2, [r3, #2]
                    m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8UserName, pstr1xHdr->u8UserNameLength);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6859      	ldr	r1, [r3, #4]
 800a8a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8a6:	789b      	ldrb	r3, [r3, #2]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a8ac:	f7fe fefc 	bl	80096a8 <m2m_memcpy>
                    pu8AuthPtr += pstr1xHdr->u8UserNameLength;
 800a8b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8b2:	789b      	ldrb	r3, [r3, #2]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8b8:	4413      	add	r3, r2
 800a8ba:	64bb      	str	r3, [r7, #72]	@ 0x48

                    pstr1xHdr->u16PrivateKeyOffset = pu8AuthPtr - pstr1xHdr->au81xAuthDetails;
 800a8bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8be:	332c      	adds	r3, #44	@ 0x2c
 800a8c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	b29a      	uxth	r2, r3
 800a8c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8c8:	809a      	strh	r2, [r3, #4]
                    pstr1xHdr->u16PrivateKeyLength = pstrAuth1xMschap2->u16PasswordLen;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	8a1a      	ldrh	r2, [r3, #16]
 800a8ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8d0:	80da      	strh	r2, [r3, #6]
                    m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8Password, pstr1xHdr->u16PrivateKeyLength);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6899      	ldr	r1, [r3, #8]
 800a8d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8d8:	88db      	ldrh	r3, [r3, #6]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a8de:	f7fe fee3 	bl	80096a8 <m2m_memcpy>

                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
 800a8e2:	f107 0210 	add.w	r2, r7, #16
 800a8e6:	2330      	movs	r3, #48	@ 0x30
 800a8e8:	9302      	str	r3, [sp, #8]
 800a8ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	2330      	movs	r3, #48	@ 0x30
 800a8f6:	21bb      	movs	r1, #187	@ 0xbb
 800a8f8:	2001      	movs	r0, #1
 800a8fa:	f7ff f867 	bl	80099cc <hif_send>
 800a8fe:	4603      	mov	r3, r0
 800a900:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                                   (uint8 *)&strConnHdr, sizeof(tstrM2mWifiConnHdr),
                                   (uint8 *)pstr1xHdr, u16AuthSize,
                                   sizeof(tstrM2mWifiConnHdr));
                    free(pstr1xHdr);
 800a904:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a906:	f001 fc4b 	bl	800c1a0 <free>
 800a90a:	e002      	b.n	800a912 <m2m_wifi_connect_1x_mschap2+0x1c2>
                }
                else
                    ret = M2M_ERR_MEM_ALLOC;
 800a90c:	23fd      	movs	r3, #253	@ 0xfd
 800a90e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            }
        }
    }
    return ret;
 800a912:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800a916:	4618      	mov	r0, r3
 800a918:	3750      	adds	r7, #80	@ 0x50
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20000028 	.word	0x20000028
 800a924:	200030a8 	.word	0x200030a8

0800a928 <m2m_wifi_connect>:
    }
    return ret;
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b086      	sub	sp, #24
 800a92c:	af02      	add	r7, sp, #8
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	607b      	str	r3, [r7, #4]
 800a932:	460b      	mov	r3, r1
 800a934:	72fb      	strb	r3, [r7, #11]
 800a936:	4613      	mov	r3, r2
 800a938:	72bb      	strb	r3, [r7, #10]
    return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch, 0);
 800a93a:	7aba      	ldrb	r2, [r7, #10]
 800a93c:	7af9      	ldrb	r1, [r7, #11]
 800a93e:	2300      	movs	r3, #0
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	8b3b      	ldrh	r3, [r7, #24]
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f000 f805 	bl	800a958 <m2m_wifi_connect_sc>
 800a94e:	4603      	mov	r3, r0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <m2m_wifi_connect_sc>:

sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b096      	sub	sp, #88	@ 0x58
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	607b      	str	r3, [r7, #4]
 800a962:	460b      	mov	r3, r1
 800a964:	72fb      	strb	r3, [r7, #11]
 800a966:	4613      	mov	r3, r2
 800a968:	72bb      	strb	r3, [r7, #10]
    sint8               s8Ret              = M2M_ERR_INVALID_ARG;
 800a96a:	23f1      	movs	r3, #241	@ 0xf1
 800a96c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    tstrNetworkId       strNetworkId       = {NULL, (uint8 *)pcSsid, u8SsidLen, (tenuM2mScanCh)u16Ch};
 800a970:	2300      	movs	r3, #0
 800a972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	643b      	str	r3, [r7, #64]	@ 0x40
 800a978:	7afb      	ldrb	r3, [r7, #11]
 800a97a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800a97e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800a982:	b2db      	uxtb	r3, r3
 800a984:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    tenuCredStoreOption enuCredStoreOption = u8NoSaveCred ? WIFI_CRED_DONTSAVE : WIFI_CRED_SAVE_ENCRYPTED;
 800a988:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <m2m_wifi_connect_sc+0x3c>
 800a990:	2300      	movs	r3, #0
 800a992:	e000      	b.n	800a996 <m2m_wifi_connect_sc+0x3e>
 800a994:	2302      	movs	r3, #2
 800a996:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    /* This API does not support SSIDs which contain '\0'. If there is a '\0' character within the
     * first u8SsidLen characters, then assume that the input u8SsidLen was incorrect - set length
     * to strlen(pcSsid) and continue. This is to avoid a change from the behaviour of previously
     * released drivers. */
    if(u8SsidLen < M2M_MAX_SSID_LEN)
 800a99a:	7afb      	ldrb	r3, [r7, #11]
 800a99c:	2b20      	cmp	r3, #32
 800a99e:	d80e      	bhi.n	800a9be <m2m_wifi_connect_sc+0x66>
        while(u8SsidLen--)
 800a9a0:	e008      	b.n	800a9b4 <m2m_wifi_connect_sc+0x5c>
            if(strNetworkId.pu8Ssid[u8SsidLen] == 0)
 800a9a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a9a4:	7afb      	ldrb	r3, [r7, #11]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d102      	bne.n	800a9b4 <m2m_wifi_connect_sc+0x5c>
                strNetworkId.u8SsidLen = u8SsidLen;
 800a9ae:	7afb      	ldrb	r3, [r7, #11]
 800a9b0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        while(u8SsidLen--)
 800a9b4:	7afb      	ldrb	r3, [r7, #11]
 800a9b6:	1e5a      	subs	r2, r3, #1
 800a9b8:	72fa      	strb	r2, [r7, #11]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1f1      	bne.n	800a9a2 <m2m_wifi_connect_sc+0x4a>

    switch((tenuM2mSecType)u8SecType)
 800a9be:	7abb      	ldrb	r3, [r7, #10]
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	2b03      	cmp	r3, #3
 800a9c4:	f200 808e 	bhi.w	800aae4 <m2m_wifi_connect_sc+0x18c>
 800a9c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a9d0 <m2m_wifi_connect_sc+0x78>)
 800a9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ce:	bf00      	nop
 800a9d0:	0800a9e1 	.word	0x0800a9e1
 800a9d4:	0800a9f9 	.word	0x0800a9f9
 800a9d8:	0800aa4f 	.word	0x0800aa4f
 800a9dc:	0800aa8d 	.word	0x0800aa8d
    {
    case M2M_WIFI_SEC_OPEN:
        s8Ret = m2m_wifi_connect_open(enuCredStoreOption, &strNetworkId);
 800a9e0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800a9e4:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7ff fde0 	bl	800a5b0 <m2m_wifi_connect_open>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        break;
 800a9f6:	e07c      	b.n	800aaf2 <m2m_wifi_connect_sc+0x19a>
    case M2M_WIFI_SEC_WPA_PSK:
        if(pvAuthInfo != NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d074      	beq.n	800aae8 <m2m_wifi_connect_sc+0x190>
        {
            tstrAuthPsk strAuthPsk = {NULL, NULL, 0};
 800a9fe:	2300      	movs	r3, #0
 800aa00:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa02:	2300      	movs	r3, #0
 800aa04:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa06:	2300      	movs	r3, #0
 800aa08:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            uint16      len        = m2m_strlen((uint8 *)pvAuthInfo);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7fe fe88 	bl	8009722 <m2m_strlen>
 800aa12:	4603      	mov	r3, r0
 800aa14:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

            if(len == M2M_MAX_PSK_LEN-1)
 800aa18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800aa1c:	2b40      	cmp	r3, #64	@ 0x40
 800aa1e:	d102      	bne.n	800aa26 <m2m_wifi_connect_sc+0xce>
            {
                strAuthPsk.pu8Psk = (uint8 *)pvAuthInfo;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa24:	e006      	b.n	800aa34 <m2m_wifi_connect_sc+0xdc>
            }
            else
            {
                strAuthPsk.pu8Passphrase   = (uint8 *)pvAuthInfo;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	637b      	str	r3, [r7, #52]	@ 0x34
                strAuthPsk.u8PassphraseLen = len;
 800aa2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            }
            s8Ret = m2m_wifi_connect_psk(enuCredStoreOption, &strNetworkId, &strAuthPsk);
 800aa34:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800aa38:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800aa3c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7ff fdf3 	bl	800a62c <m2m_wifi_connect_psk>
 800aa46:	4603      	mov	r3, r0
 800aa48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800aa4c:	e04c      	b.n	800aae8 <m2m_wifi_connect_sc+0x190>
    case M2M_WIFI_SEC_WEP:
        if(pvAuthInfo != NULL)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d04b      	beq.n	800aaec <m2m_wifi_connect_sc+0x194>
        {
            tstrM2mWifiWepParams    *pstrWepParams = (tstrM2mWifiWepParams *)pvAuthInfo;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	64fb      	str	r3, [r7, #76]	@ 0x4c
            tstrAuthWep             strAuthWep     = {pstrWepParams->au8WepKey, pstrWepParams->u8KeySz-1, pstrWepParams->u8KeyIndx};
 800aa58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa5a:	3302      	adds	r3, #2
 800aa5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa60:	785b      	ldrb	r3, [r3, #1]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800aa6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

            s8Ret = m2m_wifi_connect_wep(enuCredStoreOption, &strNetworkId, &strAuthWep);
 800aa72:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800aa76:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800aa7a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7ff fdc5 	bl	800a60e <m2m_wifi_connect_wep>
 800aa84:	4603      	mov	r3, r0
 800aa86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800aa8a:	e02f      	b.n	800aaec <m2m_wifi_connect_sc+0x194>
    case M2M_WIFI_SEC_802_1X:
        if(pvAuthInfo != NULL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d02e      	beq.n	800aaf0 <m2m_wifi_connect_sc+0x198>
        {
            tstr1xAuthCredentials   *pstr1xParams    = (tstr1xAuthCredentials *)pvAuthInfo;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	653b      	str	r3, [r7, #80]	@ 0x50
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800aa96:	f107 0314 	add.w	r3, r7, #20
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	605a      	str	r2, [r3, #4]
 800aaa0:	609a      	str	r2, [r3, #8]
 800aaa2:	60da      	str	r2, [r3, #12]
 800aaa4:	611a      	str	r2, [r3, #16]
                                                        pstr1xParams->au8UserName,
 800aaa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800aaa8:	61bb      	str	r3, [r7, #24]
                                                        pstr1xParams->au8Passwd,
 800aaaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aaac:	3315      	adds	r3, #21
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800aaae:	61fb      	str	r3, [r7, #28]
                                                        0,
                                                        m2m_strlen(pstr1xParams->au8UserName),
 800aab0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fe fe35 	bl	8009722 <m2m_strlen>
 800aab8:	4603      	mov	r3, r0
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800aaba:	847b      	strh	r3, [r7, #34]	@ 0x22
                                                        m2m_strlen(pstr1xParams->au8Passwd),
 800aabc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aabe:	3315      	adds	r3, #21
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fe fe2e 	bl	8009722 <m2m_strlen>
 800aac6:	4603      	mov	r3, r0
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800aac8:	84bb      	strh	r3, [r7, #36]	@ 0x24
                                                        false};

            s8Ret = m2m_wifi_connect_1x_mschap2(enuCredStoreOption, &strNetworkId, &strAuth1xMschap2);
 800aaca:	f107 0214 	add.w	r2, r7, #20
 800aace:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800aad2:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7ff fe3a 	bl	800a750 <m2m_wifi_connect_1x_mschap2>
 800aadc:	4603      	mov	r3, r0
 800aade:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800aae2:	e005      	b.n	800aaf0 <m2m_wifi_connect_sc+0x198>
    default:
        break;
 800aae4:	bf00      	nop
 800aae6:	e004      	b.n	800aaf2 <m2m_wifi_connect_sc+0x19a>
        break;
 800aae8:	bf00      	nop
 800aaea:	e002      	b.n	800aaf2 <m2m_wifi_connect_sc+0x19a>
        break;
 800aaec:	bf00      	nop
 800aaee:	e000      	b.n	800aaf2 <m2m_wifi_connect_sc+0x19a>
        break;
 800aaf0:	bf00      	nop
    }
    return s8Ret;
 800aaf2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3758      	adds	r7, #88	@ 0x58
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop

0800ab00 <chip_apply_conf>:

#define TIMEOUT						(0x2000ul)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	75fb      	strb	r3, [r7, #23]
	uint32 val32 = u32Conf;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab16:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
 800ab18:	6939      	ldr	r1, [r7, #16]
 800ab1a:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800ab1e:	f000 fb05 	bl	800b12c <nm_write_reg>
		if(val32 != 0) {		
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d013      	beq.n	800ab50 <chip_apply_conf+0x50>
			uint32 reg = 0;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 800ab2c:	f107 030c 	add.w	r3, r7, #12
 800ab30:	4619      	mov	r1, r3
 800ab32:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800ab36:	f000 faeb 	bl	800b110 <nm_read_reg_with_ret>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	75fb      	strb	r3, [r7, #23]
			if(ret == M2M_SUCCESS) {
 800ab3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1e8      	bne.n	800ab18 <chip_apply_conf+0x18>
				if(reg == val32)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	693a      	ldr	r2, [r7, #16]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d002      	beq.n	800ab54 <chip_apply_conf+0x54>
		nm_write_reg(rNMI_GP_REG_1, val32);
 800ab4e:	e7e3      	b.n	800ab18 <chip_apply_conf+0x18>
					break;
			}
		} else {
			break;
 800ab50:	bf00      	nop
 800ab52:	e000      	b.n	800ab56 <chip_apply_conf+0x56>
					break;
 800ab54:	bf00      	nop
		}
	} while(1);

	return M2M_SUCCESS;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800ab66:	2300      	movs	r3, #0
 800ab68:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	71fb      	strb	r3, [r7, #7]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 800ab6e:	463b      	mov	r3, r7
 800ab70:	4619      	mov	r1, r3
 800ab72:	f241 4008 	movw	r0, #5128	@ 0x1408
 800ab76:	f000 facb 	bl	800b110 <nm_read_reg_with_ret>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800ab7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d12b      	bne.n	800abde <enable_interrupts+0x7e>
	
	reg |= ((uint32) 1 << 8);
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab8c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	4619      	mov	r1, r3
 800ab92:	f241 4008 	movw	r0, #5128	@ 0x1408
 800ab96:	f000 fac9 	bl	800b12c <nm_write_reg>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800ab9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d11d      	bne.n	800abe2 <enable_interrupts+0x82>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 800aba6:	463b      	mov	r3, r7
 800aba8:	4619      	mov	r1, r3
 800abaa:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800abae:	f000 faaf 	bl	800b110 <nm_read_reg_with_ret>
 800abb2:	4603      	mov	r3, r0
 800abb4:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800abb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d113      	bne.n	800abe6 <enable_interrupts+0x86>
	
	reg |= ((uint32) 1 << 16);
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800abc4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	4619      	mov	r1, r3
 800abca:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800abce:	f000 faad 	bl	800b12c <nm_write_reg>
 800abd2:	4603      	mov	r3, r0
 800abd4:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800abd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abda:	2b00      	cmp	r3, #0
ERR1:	
 800abdc:	e004      	b.n	800abe8 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800abde:	bf00      	nop
 800abe0:	e002      	b.n	800abe8 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800abe2:	bf00      	nop
 800abe4:	e000      	b.n	800abe8 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800abe6:	bf00      	nop
	return ret;
 800abe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
 800abfa:	4b31      	ldr	r3, [pc, #196]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d157      	bne.n	800acb2 <nmi_get_chipid+0xbe>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 800ac02:	492f      	ldr	r1, [pc, #188]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800ac04:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ac08:	f000 fa82 	bl	800b110 <nm_read_reg_with_ret>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d004      	beq.n	800ac1c <nmi_get_chipid+0x28>
			chipid = 0;
 800ac12:	4b2b      	ldr	r3, [pc, #172]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	601a      	str	r2, [r3, #0]
			return 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	e04c      	b.n	800acb6 <nmi_get_chipid+0xc2>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 800ac1c:	1d3b      	adds	r3, r7, #4
 800ac1e:	4619      	mov	r1, r3
 800ac20:	f241 30f4 	movw	r0, #5108	@ 0x13f4
 800ac24:	f000 fa74 	bl	800b110 <nm_read_reg_with_ret>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d004      	beq.n	800ac38 <nmi_get_chipid+0x44>
			chipid = 0;
 800ac2e:	4b24      	ldr	r3, [pc, #144]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	601a      	str	r2, [r3, #0]
			return 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	e03e      	b.n	800acb6 <nmi_get_chipid+0xc2>
		}

		if (chipid == 0x1002a0)  {
 800ac38:	4b21      	ldr	r3, [pc, #132]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a21      	ldr	r2, [pc, #132]	@ (800acc4 <nmi_get_chipid+0xd0>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d106      	bne.n	800ac50 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d028      	beq.n	800ac9a <nmi_get_chipid+0xa6>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
 800ac48:	4b1d      	ldr	r3, [pc, #116]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800ac4a:	4a1f      	ldr	r2, [pc, #124]	@ (800acc8 <nmi_get_chipid+0xd4>)
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	e024      	b.n	800ac9a <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1002b0) {
 800ac50:	4b1b      	ldr	r3, [pc, #108]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a1d      	ldr	r2, [pc, #116]	@ (800accc <nmi_get_chipid+0xd8>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d10d      	bne.n	800ac76 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b03      	cmp	r3, #3
 800ac5e:	d01c      	beq.n	800ac9a <nmi_get_chipid+0xa6>
			} else if(rfrevid == 4) { /* 1002B1 */
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b04      	cmp	r3, #4
 800ac64:	d103      	bne.n	800ac6e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
 800ac66:	4b16      	ldr	r3, [pc, #88]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800ac68:	4a19      	ldr	r2, [pc, #100]	@ (800acd0 <nmi_get_chipid+0xdc>)
 800ac6a:	601a      	str	r2, [r3, #0]
 800ac6c:	e015      	b.n	800ac9a <nmi_get_chipid+0xa6>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
 800ac6e:	4b14      	ldr	r3, [pc, #80]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800ac70:	4a18      	ldr	r2, [pc, #96]	@ (800acd4 <nmi_get_chipid+0xe0>)
 800ac72:	601a      	str	r2, [r3, #0]
 800ac74:	e011      	b.n	800ac9a <nmi_get_chipid+0xa6>
			}
		}else if(chipid == 0x1000F0) { 
 800ac76:	4b12      	ldr	r3, [pc, #72]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a17      	ldr	r2, [pc, #92]	@ (800acd8 <nmi_get_chipid+0xe4>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d10c      	bne.n	800ac9a <nmi_get_chipid+0xa6>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 800ac80:	490f      	ldr	r1, [pc, #60]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800ac82:	f44f 106c 	mov.w	r0, #3866624	@ 0x3b0000
 800ac86:	f000 fa43 	bl	800b110 <nm_read_reg_with_ret>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d004      	beq.n	800ac9a <nmi_get_chipid+0xa6>
			chipid = 0;
 800ac90:	4b0b      	ldr	r3, [pc, #44]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	601a      	str	r2, [r3, #0]
			return 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	e00d      	b.n	800acb6 <nmi_get_chipid+0xc2>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
 800ac9a:	4b09      	ldr	r3, [pc, #36]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800aca2:	4a07      	ldr	r2, [pc, #28]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800aca4:	6013      	str	r3, [r2, #0]
		chipid |= 0x050000;
 800aca6:	4b06      	ldr	r3, [pc, #24]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800acae:	4a04      	ldr	r2, [pc, #16]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800acb0:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
 800acb2:	4b03      	ldr	r3, [pc, #12]	@ (800acc0 <nmi_get_chipid+0xcc>)
 800acb4:	681b      	ldr	r3, [r3, #0]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	200030bc 	.word	0x200030bc
 800acc4:	001002a0 	.word	0x001002a0
 800acc8:	001002a1 	.word	0x001002a1
 800accc:	001002b0 	.word	0x001002b0
 800acd0:	001002b1 	.word	0x001002b1
 800acd4:	001002b2 	.word	0x001002b2
 800acd8:	001000f0 	.word	0x001000f0

0800acdc <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800ace2:	2300      	movs	r3, #0
 800ace4:	71fb      	strb	r3, [r7, #7]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800ace6:	463b      	mov	r3, r7
 800ace8:	4619      	mov	r1, r3
 800acea:	2010      	movs	r0, #16
 800acec:	f000 fa10 	bl	800b110 <nm_read_reg_with_ret>
 800acf0:	4603      	mov	r3, r0
 800acf2:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS) goto ERR1;
 800acf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d144      	bne.n	800ad86 <chip_sleep+0xaa>
		if((reg & NBIT0) == 0) break;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	f003 0301 	and.w	r3, r3, #1
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d000      	beq.n	800ad08 <chip_sleep+0x2c>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800ad06:	e7ee      	b.n	800ace6 <chip_sleep+0xa>
		if((reg & NBIT0) == 0) break;
 800ad08:	bf00      	nop
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800ad0a:	463b      	mov	r3, r7
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	2001      	movs	r0, #1
 800ad10:	f000 f9fe 	bl	800b110 <nm_read_reg_with_ret>
 800ad14:	4603      	mov	r3, r0
 800ad16:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800ad18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d134      	bne.n	800ad8a <chip_sleep+0xae>
	if(reg & NBIT1)
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	f003 0302 	and.w	r3, r3, #2
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00e      	beq.n	800ad48 <chip_sleep+0x6c>
	{
		reg &=~NBIT1;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	f023 0302 	bic.w	r3, r3, #2
 800ad30:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	4619      	mov	r1, r3
 800ad36:	2001      	movs	r0, #1
 800ad38:	f000 f9f8 	bl	800b12c <nm_write_reg>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800ad40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d122      	bne.n	800ad8e <chip_sleep+0xb2>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800ad48:	463b      	mov	r3, r7
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	200b      	movs	r0, #11
 800ad4e:	f000 f9df 	bl	800b110 <nm_read_reg_with_ret>
 800ad52:	4603      	mov	r3, r0
 800ad54:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800ad56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d119      	bne.n	800ad92 <chip_sleep+0xb6>
	if(reg & NBIT0)
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	f003 0301 	and.w	r3, r3, #1
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d016      	beq.n	800ad96 <chip_sleep+0xba>
	{
		reg &= ~NBIT0;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	f023 0301 	bic.w	r3, r3, #1
 800ad6e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	4619      	mov	r1, r3
 800ad74:	200b      	movs	r0, #11
 800ad76:	f000 f9d9 	bl	800b12c <nm_write_reg>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800ad7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad82:	2b00      	cmp	r3, #0
	}

ERR1:
 800ad84:	e007      	b.n	800ad96 <chip_sleep+0xba>
		if(ret != M2M_SUCCESS) goto ERR1;
 800ad86:	bf00      	nop
 800ad88:	e006      	b.n	800ad98 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800ad8a:	bf00      	nop
 800ad8c:	e004      	b.n	800ad98 <chip_sleep+0xbc>
		if(ret != M2M_SUCCESS)goto ERR1;
 800ad8e:	bf00      	nop
 800ad90:	e002      	b.n	800ad98 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800ad92:	bf00      	nop
 800ad94:	e000      	b.n	800ad98 <chip_sleep+0xbc>
ERR1:
 800ad96:	bf00      	nop
	return ret;
 800ad98:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <chip_wake>:
sint8 chip_wake(void)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800adaa:	2300      	movs	r3, #0
 800adac:	73fb      	strb	r3, [r7, #15]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 800adae:	2300      	movs	r3, #0
 800adb0:	607b      	str	r3, [r7, #4]
 800adb2:	2300      	movs	r3, #0
 800adb4:	603b      	str	r3, [r7, #0]
 800adb6:	2300      	movs	r3, #0
 800adb8:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800adba:	1d3b      	adds	r3, r7, #4
 800adbc:	4619      	mov	r1, r3
 800adbe:	200b      	movs	r0, #11
 800adc0:	f000 f9a6 	bl	800b110 <nm_read_reg_with_ret>
 800adc4:	4603      	mov	r3, r0
 800adc6:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800adc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d150      	bne.n	800ae72 <chip_wake+0xce>
	
	if(!(reg & NBIT0))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10c      	bne.n	800adf4 <chip_wake+0x50>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f043 0301 	orr.w	r3, r3, #1
 800ade0:	4619      	mov	r1, r3
 800ade2:	200b      	movs	r0, #11
 800ade4:	f000 f9a2 	bl	800b12c <nm_write_reg>
 800ade8:	4603      	mov	r3, r0
 800adea:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800adec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d140      	bne.n	800ae76 <chip_wake+0xd2>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800adf4:	1d3b      	adds	r3, r7, #4
 800adf6:	4619      	mov	r1, r3
 800adf8:	2001      	movs	r0, #1
 800adfa:	f000 f989 	bl	800b110 <nm_read_reg_with_ret>
 800adfe:	4603      	mov	r3, r0
 800ae00:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800ae02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d137      	bne.n	800ae7a <chip_wake+0xd6>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f003 0302 	and.w	r3, r3, #2
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d000      	beq.n	800ae16 <chip_wake+0x72>
 800ae14:	e00d      	b.n	800ae32 <chip_wake+0x8e>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f043 0302 	orr.w	r3, r3, #2
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	2001      	movs	r0, #1
 800ae20:	f000 f984 	bl	800b12c <nm_write_reg>
 800ae24:	4603      	mov	r3, r0
 800ae26:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
 800ae28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d000      	beq.n	800ae32 <chip_wake+0x8e>
 800ae30:	e026      	b.n	800ae80 <chip_wake+0xdc>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 800ae32:	463b      	mov	r3, r7
 800ae34:	4619      	mov	r1, r3
 800ae36:	200f      	movs	r0, #15
 800ae38:	f000 f96a 	bl	800b110 <nm_read_reg_with_ret>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) {
 800ae40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d11a      	bne.n	800ae7e <chip_wake+0xda>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	f003 0304 	and.w	r3, r3, #4
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10b      	bne.n	800ae6a <chip_wake+0xc6>
			break;
		}
		nm_bsp_sleep(2);
 800ae52:	2002      	movs	r0, #2
 800ae54:	f7fe fb14 	bl	8009480 <nm_bsp_sleep>
		trials++;
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2b04      	cmp	r3, #4
 800ae62:	d9e6      	bls.n	800ae32 <chip_wake+0x8e>
		{
			M2M_ERR("Failed to wake up the chip\n");
			ret = M2M_ERR_TIME_OUT;
 800ae64:	23fc      	movs	r3, #252	@ 0xfc
 800ae66:	73fb      	strb	r3, [r7, #15]
			goto _WAKE_EXIT;
 800ae68:	e00a      	b.n	800ae80 <chip_wake+0xdc>
			break;
 800ae6a:	bf00      	nop
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
 800ae6c:	f000 f938 	bl	800b0e0 <nm_bus_reset>
 800ae70:	e006      	b.n	800ae80 <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800ae72:	bf00      	nop
 800ae74:	e004      	b.n	800ae80 <chip_wake+0xdc>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800ae76:	bf00      	nop
 800ae78:	e002      	b.n	800ae80 <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800ae7a:	bf00      	nop
 800ae7c:	e000      	b.n	800ae80 <chip_wake+0xdc>
			goto _WAKE_EXIT;
 800ae7e:	bf00      	nop
	
_WAKE_EXIT:
	return ret;
 800ae80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b088      	sub	sp, #32
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	4603      	mov	r3, r0
 800ae94:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800ae96:	2300      	movs	r3, #0
 800ae98:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	61bb      	str	r3, [r7, #24]
 800ae9e:	2300      	movs	r3, #0
 800aea0:	617b      	str	r3, [r7, #20]
	uint32 u32GpReg1 = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	613b      	str	r3, [r7, #16]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
 800aea6:	4b3e      	ldr	r3, [pc, #248]	@ (800afa0 <wait_for_bootrom+0x114>)
 800aea8:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	61bb      	str	r3, [r7, #24]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800aeae:	f241 0014 	movw	r0, #4116	@ 0x1014
 800aeb2:	f000 f921 	bl	800b0f8 <nm_read_reg>
 800aeb6:	61b8      	str	r0, [r7, #24]
		if (reg & 0x80000000) {
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	db03      	blt.n	800aec6 <wait_for_bootrom+0x3a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
 800aebe:	2001      	movs	r0, #1
 800aec0:	f7fe fade 	bl	8009480 <nm_bsp_sleep>
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800aec4:	e7f3      	b.n	800aeae <wait_for_bootrom+0x22>
			break;
 800aec6:	bf00      	nop
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 800aec8:	4836      	ldr	r0, [pc, #216]	@ (800afa4 <wait_for_bootrom+0x118>)
 800aeca:	f000 f915 	bl	800b0f8 <nm_read_reg>
 800aece:	61b8      	str	r0, [r7, #24]
	reg &= 0x1;
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	f003 0301 	and.w	r3, r3, #1
 800aed6:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d118      	bne.n	800af10 <wait_for_bootrom+0x84>
	{
		reg = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
 800aee2:	e011      	b.n	800af08 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
 800aee4:	2001      	movs	r0, #1
 800aee6:	f7fe facb 	bl	8009480 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
 800aeea:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800aeee:	f000 f903 	bl	800b0f8 <nm_read_reg>
 800aef2:	61b8      	str	r0, [r7, #24]

			if(++cnt > TIMEOUT)
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	3301      	adds	r3, #1
 800aef8:	617b      	str	r3, [r7, #20]
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af00:	d902      	bls.n	800af08 <wait_for_bootrom+0x7c>
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
 800af02:	23fb      	movs	r3, #251	@ 0xfb
 800af04:	77fb      	strb	r3, [r7, #31]
				goto ERR2;
 800af06:	e045      	b.n	800af94 <wait_for_bootrom+0x108>
		while(reg != M2M_FINISH_BOOT_ROM)
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	4a27      	ldr	r2, [pc, #156]	@ (800afa8 <wait_for_bootrom+0x11c>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d1e9      	bne.n	800aee4 <wait_for_bootrom+0x58>
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
 800af10:	79fb      	ldrb	r3, [r7, #7]
 800af12:	2b02      	cmp	r3, #2
 800af14:	d10a      	bne.n	800af2c <wait_for_bootrom+0xa0>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800af16:	4925      	ldr	r1, [pc, #148]	@ (800afac <wait_for_bootrom+0x120>)
 800af18:	4825      	ldr	r0, [pc, #148]	@ (800afb0 <wait_for_bootrom+0x124>)
 800af1a:	f000 f907 	bl	800b12c <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
 800af1e:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 800af22:	f241 008c 	movw	r0, #4236	@ 0x108c
 800af26:	f000 f901 	bl	800b12c <nm_write_reg>
 800af2a:	e01c      	b.n	800af66 <wait_for_bootrom+0xda>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
 800af2c:	79fb      	ldrb	r3, [r7, #7]
 800af2e:	2b03      	cmp	r3, #3
 800af30:	d109      	bne.n	800af46 <wait_for_bootrom+0xba>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800af32:	491e      	ldr	r1, [pc, #120]	@ (800afac <wait_for_bootrom+0x120>)
 800af34:	481e      	ldr	r0, [pc, #120]	@ (800afb0 <wait_for_bootrom+0x124>)
 800af36:	f000 f8f9 	bl	800b12c <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
 800af3a:	2100      	movs	r1, #0
 800af3c:	f241 008c 	movw	r0, #4236	@ 0x108c
 800af40:	f000 f8f4 	bl	800b12c <nm_write_reg>
 800af44:	e00f      	b.n	800af66 <wait_for_bootrom+0xda>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
 800af46:	79fb      	ldrb	r3, [r7, #7]
 800af48:	2b04      	cmp	r3, #4
 800af4a:	d107      	bne.n	800af5c <wait_for_bootrom+0xd0>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 800af4c:	2380      	movs	r3, #128	@ 0x80
 800af4e:	613b      	str	r3, [r7, #16]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800af50:	68f9      	ldr	r1, [r7, #12]
 800af52:	f241 008c 	movw	r0, #4236	@ 0x108c
 800af56:	f000 f8e9 	bl	800b12c <nm_write_reg>
 800af5a:	e004      	b.n	800af66 <wait_for_bootrom+0xda>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800af5c:	68f9      	ldr	r1, [r7, #12]
 800af5e:	f241 008c 	movw	r0, #4236	@ 0x108c
 800af62:	f000 f8e3 	bl	800b12c <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 800af66:	f7ff fe45 	bl	800abf4 <nmi_get_chipid>
 800af6a:	4603      	mov	r3, r0
 800af6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af70:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 800af74:	d306      	bcc.n	800af84 <wait_for_bootrom+0xf8>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	f043 0302 	orr.w	r3, r3, #2
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7ff fdbf 	bl	800ab00 <chip_apply_conf>
 800af82:	e002      	b.n	800af8a <wait_for_bootrom+0xfe>
	} else {
		chip_apply_conf(u32GpReg1);
 800af84:	6938      	ldr	r0, [r7, #16]
 800af86:	f7ff fdbb 	bl	800ab00 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 800af8a:	490a      	ldr	r1, [pc, #40]	@ (800afb4 <wait_for_bootrom+0x128>)
 800af8c:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800af90:	f000 f8cc 	bl	800b12c <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
 800af94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3720      	adds	r7, #32
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	13301376 	.word	0x13301376
 800afa4:	000207bc 	.word	0x000207bc
 800afa8:	10add09e 	.word	0x10add09e
 800afac:	3c1cd57d 	.word	0x3c1cd57d
 800afb0:	000207ac 	.word	0x000207ac
 800afb4:	ef522f61 	.word	0xef522f61

0800afb8 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b088      	sub	sp, #32
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	4603      	mov	r3, r0
 800afc0:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800afc2:	2300      	movs	r3, #0
 800afc4:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	61bb      	str	r3, [r7, #24]
 800afca:	2300      	movs	r3, #0
 800afcc:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
 800afce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800afd2:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
 800afd4:	f241 038c 	movw	r3, #4236	@ 0x108c
 800afd8:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 800afda:	4b1a      	ldr	r3, [pc, #104]	@ (800b044 <wait_for_firmware_start+0x8c>)
 800afdc:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 800afde:	79fb      	ldrb	r3, [r7, #7]
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d002      	beq.n	800afea <wait_for_firmware_start+0x32>
 800afe4:	79fb      	ldrb	r3, [r7, #7]
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	d116      	bne.n	800b018 <wait_for_firmware_start+0x60>
		regAddress = NMI_REV_REG;
 800afea:	4b17      	ldr	r3, [pc, #92]	@ (800b048 <wait_for_firmware_start+0x90>)
 800afec:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
 800afee:	4b17      	ldr	r3, [pc, #92]	@ (800b04c <wait_for_firmware_start+0x94>)
 800aff0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
 800aff2:	e011      	b.n	800b018 <wait_for_firmware_start+0x60>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
 800aff4:	2002      	movs	r0, #2
 800aff6:	f7fe fa43 	bl	8009480 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	4618      	mov	r0, r3
 800affe:	f000 f87b 	bl	800b0f8 <nm_read_reg>
 800b002:	61b8      	str	r0, [r7, #24]
		if(++cnt >= u32Timeout)
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	3301      	adds	r3, #1
 800b008:	617b      	str	r3, [r7, #20]
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d302      	bcc.n	800b018 <wait_for_firmware_start+0x60>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
 800b012:	23fb      	movs	r3, #251	@ 0xfb
 800b014:	77fb      	strb	r3, [r7, #31]
			goto ERR;
 800b016:	e00e      	b.n	800b036 <wait_for_firmware_start+0x7e>
	while (checkValue != reg)
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	69ba      	ldr	r2, [r7, #24]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d1e9      	bne.n	800aff4 <wait_for_firmware_start+0x3c>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	4a08      	ldr	r2, [pc, #32]	@ (800b044 <wait_for_firmware_start+0x8c>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d105      	bne.n	800b034 <wait_for_firmware_start+0x7c>
	{
		nm_write_reg(NMI_STATE_REG, 0);
 800b028:	2100      	movs	r1, #0
 800b02a:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b02e:	f000 f87d 	bl	800b12c <nm_write_reg>
 800b032:	e000      	b.n	800b036 <wait_for_firmware_start+0x7e>
	}
ERR:
 800b034:	bf00      	nop
	return ret;
 800b036:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3720      	adds	r7, #32
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	02532636 	.word	0x02532636
 800b048:	000207ac 	.word	0x000207ac
 800b04c:	d75dc1c3 	.word	0xd75dc1c3

0800b050 <chip_deinit>:

sint8 chip_deinit(void)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800b056:	2300      	movs	r3, #0
 800b058:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 800b05a:	463b      	mov	r3, r7
 800b05c:	4619      	mov	r1, r3
 800b05e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800b062:	f000 f855 	bl	800b110 <nm_read_reg_with_ret>
 800b066:	4603      	mov	r3, r0
 800b068:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800b06a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10f      	bne.n	800b092 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b078:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	4619      	mov	r1, r3
 800b07e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800b082:	f000 f853 	bl	800b12c <nm_write_reg>
 800b086:	4603      	mov	r3, r0
 800b088:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800b08a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b08e:	2b00      	cmp	r3, #0
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}

ERR1:
 800b090:	e000      	b.n	800b094 <chip_deinit+0x44>
		goto ERR1;
 800b092:	bf00      	nop
	return ret;
 800b094:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73fb      	strb	r3, [r7, #15]
	ret = nm_bus_init(pvInitVal);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7fe fab5 	bl	800961c <nm_bus_init>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	73fb      	strb	r3, [r7, #15]
	return ret;
 800b0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b082      	sub	sp, #8
 800b0c6:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	71fb      	strb	r3, [r7, #7]
	ret = nm_bus_deinit();
 800b0cc:	f7fe fae4 	bl	8009698 <nm_bus_deinit>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	71fb      	strb	r3, [r7, #7]

	return ret;
 800b0d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	71fb      	strb	r3, [r7, #7]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
 800b0ea:	f000 fc32 	bl	800b952 <nm_spi_reset>
 800b0ee:	4603      	mov	r3, r0
#else
#error "Please define bus usage"
#endif

	return ret;
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 ff43 	bl	800bf8c <nm_spi_read_reg>
 800b106:	4603      	mov	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Please define bus usage"
#endif

}
 800b108:	4618      	mov	r0, r3
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 fdde 	bl	800bcde <nm_spi_read_reg_with_ret>
 800b122:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Please define bus usage"
#endif
}
 800b124:	4618      	mov	r0, r3
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 fd1d 	bl	800bb78 <nm_spi_write_reg>
 800b13e:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Please define bus usage"
#endif
}
 800b140:	4618      	mov	r0, r3
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	4613      	mov	r3, r2
 800b154:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
 800b156:	88fb      	ldrh	r3, [r7, #6]
 800b158:	461a      	mov	r2, r3
 800b15a:	68b9      	ldr	r1, [r7, #8]
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 ff24 	bl	800bfaa <nm_spi_read_block>
 800b162:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Please define bus usage"
#endif

}
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800b178:	4b20      	ldr	r3, [pc, #128]	@ (800b1fc <nm_read_block+0x90>)
 800b17a:	881b      	ldrh	r3, [r3, #0]
 800b17c:	3b08      	subs	r3, #8
 800b17e:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800b184:	2300      	movs	r3, #0
 800b186:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800b188:	8a3b      	ldrh	r3, [r7, #16]
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d80f      	bhi.n	800b1b0 <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	4413      	add	r3, r2
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	b292      	uxth	r2, r2
 800b19a:	4619      	mov	r1, r3
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f7ff ffd3 	bl	800b148 <p_nm_read_block>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	b2da      	uxtb	r2, r3
 800b1a6:	7cfb      	ldrb	r3, [r7, #19]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	74fb      	strb	r3, [r7, #19]
			break;
 800b1ae:	e01f      	b.n	800b1f0 <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	8a3a      	ldrh	r2, [r7, #16]
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f7ff ffc4 	bl	800b148 <p_nm_read_block>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	b2da      	uxtb	r2, r3
 800b1c4:	7cfb      	ldrb	r3, [r7, #19]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800b1cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10c      	bne.n	800b1ee <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800b1d4:	8a3b      	ldrh	r3, [r7, #16]
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800b1dc:	8a3b      	ldrh	r3, [r7, #16]
 800b1de:	697a      	ldr	r2, [r7, #20]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800b1e4:	8a3b      	ldrh	r3, [r7, #16]
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800b1ec:	e7cc      	b.n	800b188 <nm_read_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800b1ee:	bf00      	nop
		}
	}

	return s8Ret;
 800b1f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3718      	adds	r7, #24
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	20000024 	.word	0x20000024

0800b200 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	4613      	mov	r3, r2
 800b20c:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
 800b20e:	88fb      	ldrh	r3, [r7, #6]
 800b210:	461a      	mov	r2, r3
 800b212:	68b9      	ldr	r1, [r7, #8]
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f000 fee6 	bl	800bfe6 <nm_spi_write_block>
 800b21a:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Please define bus usage"
#endif

}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800b230:	4b20      	ldr	r3, [pc, #128]	@ (800b2b4 <nm_write_block+0x90>)
 800b232:	881b      	ldrh	r3, [r3, #0]
 800b234:	3b08      	subs	r3, #8
 800b236:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800b238:	2300      	movs	r3, #0
 800b23a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800b23c:	2300      	movs	r3, #0
 800b23e:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800b240:	8a3b      	ldrh	r3, [r7, #16]
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	429a      	cmp	r2, r3
 800b246:	d80f      	bhi.n	800b268 <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
 800b248:	68ba      	ldr	r2, [r7, #8]
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	4413      	add	r3, r2
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	b292      	uxth	r2, r2
 800b252:	4619      	mov	r1, r3
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f7ff ffd3 	bl	800b200 <p_nm_write_block>
 800b25a:	4603      	mov	r3, r0
 800b25c:	b2da      	uxtb	r2, r3
 800b25e:	7cfb      	ldrb	r3, [r7, #19]
 800b260:	4413      	add	r3, r2
 800b262:	b2db      	uxtb	r3, r3
 800b264:	74fb      	strb	r3, [r7, #19]
			break;
 800b266:	e01f      	b.n	800b2a8 <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	4413      	add	r3, r2
 800b26e:	8a3a      	ldrh	r2, [r7, #16]
 800b270:	4619      	mov	r1, r3
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f7ff ffc4 	bl	800b200 <p_nm_write_block>
 800b278:	4603      	mov	r3, r0
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	7cfb      	ldrb	r3, [r7, #19]
 800b27e:	4413      	add	r3, r2
 800b280:	b2db      	uxtb	r3, r3
 800b282:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800b284:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10c      	bne.n	800b2a6 <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800b28c:	8a3b      	ldrh	r3, [r7, #16]
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800b294:	8a3b      	ldrh	r3, [r7, #16]
 800b296:	697a      	ldr	r2, [r7, #20]
 800b298:	4413      	add	r3, r2
 800b29a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800b29c:	8a3b      	ldrh	r3, [r7, #16]
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800b2a4:	e7cc      	b.n	800b240 <nm_write_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800b2a6:	bf00      	nop
		}
	}

	return s8Ret;
 800b2a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	20000024 	.word	0x20000024

0800b2b8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b088      	sub	sp, #32
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	77fb      	strb	r3, [r7, #31]
	tstrGpRegs strgp = {0};
 800b2c8:	f107 030c 	add.w	r3, r7, #12
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	601a      	str	r2, [r3, #0]
 800b2d0:	605a      	str	r2, [r3, #4]
	if (pstrRev != NULL)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f000 808a 	beq.w	800b3ee <nm_get_firmware_full_info+0x136>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
 800b2da:	2228      	movs	r2, #40	@ 0x28
 800b2dc:	2100      	movs	r1, #0
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f7fe fa02 	bl	80096e8 <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
 800b2e4:	f107 0314 	add.w	r3, r7, #20
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4844      	ldr	r0, [pc, #272]	@ (800b3fc <nm_get_firmware_full_info+0x144>)
 800b2ec:	f7ff ff10 	bl	800b110 <nm_read_reg_with_ret>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	77fb      	strb	r3, [r7, #31]
		if(ret == M2M_SUCCESS)
 800b2f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d178      	bne.n	800b3ee <nm_get_firmware_full_info+0x136>
		{
			if(reg != 0)
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d072      	beq.n	800b3e8 <nm_get_firmware_full_info+0x130>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800b308:	f107 010c 	add.w	r1, r7, #12
 800b30c:	2208      	movs	r2, #8
 800b30e:	4618      	mov	r0, r3
 800b310:	f7ff ff2c 	bl	800b16c <nm_read_block>
 800b314:	4603      	mov	r3, r0
 800b316:	77fb      	strb	r3, [r7, #31]
				if(ret == M2M_SUCCESS)
 800b318:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d167      	bne.n	800b3f0 <nm_get_firmware_full_info+0x138>
				{
					reg = strgp.u32Firmware_Ota_rev;
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	b29b      	uxth	r3, r3
 800b328:	617b      	str	r3, [r7, #20]
					if(reg != 0)
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d058      	beq.n	800b3e2 <nm_get_firmware_full_info+0x12a>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800b336:	2228      	movs	r2, #40	@ 0x28
 800b338:	6879      	ldr	r1, [r7, #4]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7ff ff16 	bl	800b16c <nm_read_block>
 800b340:	4603      	mov	r3, r0
 800b342:	77fb      	strb	r3, [r7, #31]
						if(ret == M2M_SUCCESS)
 800b344:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d151      	bne.n	800b3f0 <nm_get_firmware_full_info+0x138>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	791b      	ldrb	r3, [r3, #4]
 800b350:	b21b      	sxth	r3, r3
 800b352:	021b      	lsls	r3, r3, #8
 800b354:	b21a      	sxth	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	795b      	ldrb	r3, [r3, #5]
 800b35a:	b21b      	sxth	r3, r3
 800b35c:	011b      	lsls	r3, r3, #4
 800b35e:	b21b      	sxth	r3, r3
 800b360:	b2db      	uxtb	r3, r3
 800b362:	b21b      	sxth	r3, r3
 800b364:	4313      	orrs	r3, r2
 800b366:	b21a      	sxth	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	799b      	ldrb	r3, [r3, #6]
 800b36c:	b21b      	sxth	r3, r3
 800b36e:	f003 030f 	and.w	r3, r3, #15
 800b372:	b21b      	sxth	r3, r3
 800b374:	4313      	orrs	r3, r2
 800b376:	b21b      	sxth	r3, r3
 800b378:	83bb      	strh	r3, [r7, #28]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800b37a:	f241 3376 	movw	r3, #4982	@ 0x1376
 800b37e:	837b      	strh	r3, [r7, #26]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	79db      	ldrb	r3, [r3, #7]
 800b384:	b21b      	sxth	r3, r3
 800b386:	021b      	lsls	r3, r3, #8
 800b388:	b21a      	sxth	r2, r3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	7a1b      	ldrb	r3, [r3, #8]
 800b38e:	b21b      	sxth	r3, r3
 800b390:	011b      	lsls	r3, r3, #4
 800b392:	b21b      	sxth	r3, r3
 800b394:	b2db      	uxtb	r3, r3
 800b396:	b21b      	sxth	r3, r3
 800b398:	4313      	orrs	r3, r2
 800b39a:	b21a      	sxth	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	7a5b      	ldrb	r3, [r3, #9]
 800b3a0:	b21b      	sxth	r3, r3
 800b3a2:	f003 030f 	and.w	r3, r3, #15
 800b3a6:	b21b      	sxth	r3, r3
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	b21b      	sxth	r3, r3
 800b3ac:	833b      	strh	r3, [r7, #24]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 800b3ae:	8bbb      	ldrh	r3, [r7, #28]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d005      	beq.n	800b3c0 <nm_get_firmware_full_info+0x108>
 800b3b4:	8b3b      	ldrh	r3, [r7, #24]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d002      	beq.n	800b3c0 <nm_get_firmware_full_info+0x108>
 800b3ba:	8b3b      	ldrh	r3, [r7, #24]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d102      	bne.n	800b3c6 <nm_get_firmware_full_info+0x10e>
								ret = M2M_ERR_FAIL;
 800b3c0:	23f4      	movs	r3, #244	@ 0xf4
 800b3c2:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800b3c4:	e014      	b.n	800b3f0 <nm_get_firmware_full_info+0x138>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
 800b3c6:	8b7a      	ldrh	r2, [r7, #26]
 800b3c8:	8b3b      	ldrh	r3, [r7, #24]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d202      	bcs.n	800b3d4 <nm_get_firmware_full_info+0x11c>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
 800b3ce:	23f3      	movs	r3, #243	@ 0xf3
 800b3d0:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800b3d2:	e00d      	b.n	800b3f0 <nm_get_firmware_full_info+0x138>
							}
							if(curr_drv_ver >  curr_firm_ver) {
 800b3d4:	8b7a      	ldrh	r2, [r7, #26]
 800b3d6:	8bbb      	ldrh	r3, [r7, #28]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d909      	bls.n	800b3f0 <nm_get_firmware_full_info+0x138>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
 800b3dc:	23f3      	movs	r3, #243	@ 0xf3
 800b3de:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800b3e0:	e006      	b.n	800b3f0 <nm_get_firmware_full_info+0x138>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
 800b3e2:	23f4      	movs	r3, #244	@ 0xf4
 800b3e4:	77fb      	strb	r3, [r7, #31]
 800b3e6:	e003      	b.n	800b3f0 <nm_get_firmware_full_info+0x138>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
 800b3e8:	23f4      	movs	r3, #244	@ 0xf4
 800b3ea:	77fb      	strb	r3, [r7, #31]
 800b3ec:	e000      	b.n	800b3f0 <nm_get_firmware_full_info+0x138>
			}
		}
	}
EXIT:
 800b3ee:	bf00      	nop
	return ret;
 800b3f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3720      	adds	r7, #32
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	000c0008 	.word	0x000c0008

0800b400 <nm_drv_init_hold>:
ERR1:
	return ret;
}

sint8 nm_drv_init_hold(void)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b406:	2300      	movs	r3, #0
 800b408:	71fb      	strb	r3, [r7, #7]

	ret = nm_bus_iface_init(NULL);
 800b40a:	2000      	movs	r0, #0
 800b40c:	f7ff fe48 	bl	800b0a0 <nm_bus_iface_init>
 800b410:	4603      	mov	r3, r0
 800b412:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) {
 800b414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d104      	bne.n	800b426 <nm_drv_init_hold+0x26>
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
 800b41c:	f000 fd54 	bl	800bec8 <nm_spi_init>
#endif

	return ret;
 800b420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b424:	e002      	b.n	800b42c <nm_drv_init_hold+0x2c>
		goto ERR1;
 800b426:	bf00      	nop
ERR2:
	nm_bus_iface_deinit();
ERR1:
	return ret;
 800b428:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3708      	adds	r7, #8
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <nm_drv_init_start>:

sint8 nm_drv_init_start(void * arg)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800b43c:	2300      	movs	r3, #0
 800b43e:	73fb      	strb	r3, [r7, #15]
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
 800b440:	2301      	movs	r3, #1
 800b442:	73bb      	strb	r3, [r7, #14]

	if(NULL != arg) {
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00a      	beq.n	800b460 <nm_drv_init_start+0x2c>
		u8Mode = *((uint8 *)arg);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	73bb      	strb	r3, [r7, #14]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
 800b450:	7bbb      	ldrb	r3, [r7, #14]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d002      	beq.n	800b45c <nm_drv_init_start+0x28>
 800b456:	7bbb      	ldrb	r3, [r7, #14]
 800b458:	2b04      	cmp	r3, #4
 800b45a:	d901      	bls.n	800b460 <nm_drv_init_start+0x2c>
			u8Mode = M2M_WIFI_MODE_NORMAL;
 800b45c:	2301      	movs	r3, #1
 800b45e:	73bb      	strb	r3, [r7, #14]
		}
	}

	ret = wait_for_bootrom(u8Mode);
 800b460:	7bbb      	ldrb	r3, [r7, #14]
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff fd12 	bl	800ae8c <wait_for_bootrom>
 800b468:	4603      	mov	r3, r0
 800b46a:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b46c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d11a      	bne.n	800b4aa <nm_drv_init_start+0x76>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
 800b474:	7bbb      	ldrb	r3, [r7, #14]
 800b476:	4618      	mov	r0, r3
 800b478:	f7ff fd9e 	bl	800afb8 <wait_for_firmware_start>
 800b47c:	4603      	mov	r3, r0
 800b47e:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d112      	bne.n	800b4ae <nm_drv_init_start+0x7a>
		goto ERR2;
	}

	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
 800b488:	7bbb      	ldrb	r3, [r7, #14]
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d017      	beq.n	800b4be <nm_drv_init_start+0x8a>
 800b48e:	7bbb      	ldrb	r3, [r7, #14]
 800b490:	2b03      	cmp	r3, #3
 800b492:	d014      	beq.n	800b4be <nm_drv_init_start+0x8a>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
 800b494:	f7ff fb64 	bl	800ab60 <enable_interrupts>
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b49c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d106      	bne.n	800b4b2 <nm_drv_init_start+0x7e>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}

	return ret;
 800b4a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4a8:	e00c      	b.n	800b4c4 <nm_drv_init_start+0x90>
		goto ERR2;
 800b4aa:	bf00      	nop
 800b4ac:	e002      	b.n	800b4b4 <nm_drv_init_start+0x80>
		goto ERR2;
 800b4ae:	bf00      	nop
 800b4b0:	e000      	b.n	800b4b4 <nm_drv_init_start+0x80>
		goto ERR2;
 800b4b2:	bf00      	nop
ERR2:
	nm_bus_iface_deinit();
 800b4b4:	f7ff fe05 	bl	800b0c2 <nm_bus_iface_deinit>
#ifdef CONF_WINC_USE_SPI
	nm_spi_deinit();
 800b4b8:	f000 fd5a 	bl	800bf70 <nm_spi_deinit>
 800b4bc:	e000      	b.n	800b4c0 <nm_drv_init_start+0x8c>
		goto ERR1;
 800b4be:	bf00      	nop
#endif
ERR1:
	return ret;
 800b4c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
 800b4d4:	f7ff fdbc 	bl	800b050 <chip_deinit>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b4dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d113      	bne.n	800b50c <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	f000 fe09 	bl	800c0fc <spi_flash_enable>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b4ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10c      	bne.n	800b510 <nm_drv_deinit+0x44>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
 800b4f6:	f7ff fde4 	bl	800b0c2 <nm_bus_iface_deinit>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b4fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d106      	bne.n	800b514 <nm_drv_deinit+0x48>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
 800b506:	f000 fd33 	bl	800bf70 <nm_spi_deinit>
 800b50a:	e004      	b.n	800b516 <nm_drv_deinit+0x4a>
		goto ERR1;
 800b50c:	bf00      	nop
 800b50e:	e002      	b.n	800b516 <nm_drv_deinit+0x4a>
		goto ERR1;
 800b510:	bf00      	nop
 800b512:	e000      	b.n	800b516 <nm_drv_deinit+0x4a>
		goto ERR1;
 800b514:	bf00      	nop
#endif

ERR1:
	return ret;
 800b516:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static inline sint8 nmi_spi_read(uint8 *b, uint16 sz)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b082      	sub	sp, #8
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	460b      	mov	r3, r1
 800b52c:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(NULL, b, sz);
 800b52e:	887b      	ldrh	r3, [r7, #2]
 800b530:	461a      	mov	r2, r3
 800b532:	6879      	ldr	r1, [r7, #4]
 800b534:	2000      	movs	r0, #0
 800b536:	f7fe f85f 	bl	80095f8 <nm_spi_rw>
 800b53a:	4603      	mov	r3, r0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <nmi_spi_write>:
static inline sint8 nmi_spi_write(uint8 *b, uint16 sz)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	460b      	mov	r3, r1
 800b54e:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(b, NULL, sz);
 800b550:	887b      	ldrh	r3, [r7, #2]
 800b552:	461a      	mov	r2, r3
 800b554:	2100      	movs	r1, #0
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7fe f84e 	bl	80095f8 <nm_spi_rw>
 800b55c:	4603      	mov	r3, r0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <nmi_spi_writeread>:
static sint8 nmi_spi_writeread(uint8 *bw, uint8 *br, uint16 sz)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b084      	sub	sp, #16
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	60f8      	str	r0, [r7, #12]
 800b56e:	60b9      	str	r1, [r7, #8]
 800b570:	4613      	mov	r3, r2
 800b572:	80fb      	strh	r3, [r7, #6]
    return nm_spi_rw(bw, br, sz);
 800b574:	88fb      	ldrh	r3, [r7, #6]
 800b576:	461a      	mov	r2, r3
 800b578:	68b9      	ldr	r1, [r7, #8]
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f7fe f83c 	bl	80095f8 <nm_spi_rw>
 800b580:	4603      	mov	r3, r0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
	...

0800b58c <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static inline uint8 crc7_byte(uint8 crc, uint8 data)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	4603      	mov	r3, r0
 800b594:	460a      	mov	r2, r1
 800b596:	71fb      	strb	r3, [r7, #7]
 800b598:	4613      	mov	r3, r2
 800b59a:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
 800b59c:	79fb      	ldrb	r3, [r7, #7]
 800b59e:	005a      	lsls	r2, r3, #1
 800b5a0:	79bb      	ldrb	r3, [r7, #6]
 800b5a2:	4053      	eors	r3, r2
 800b5a4:	4a03      	ldr	r2, [pc, #12]	@ (800b5b4 <crc7_byte+0x28>)
 800b5a6:	5cd3      	ldrb	r3, [r2, r3]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr
 800b5b4:	0800d2e4 	.word	0x0800d2e4

0800b5b8 <crc7>:

static inline uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	4603      	mov	r3, r0
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800b5c6:	e00a      	b.n	800b5de <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	60ba      	str	r2, [r7, #8]
 800b5ce:	781a      	ldrb	r2, [r3, #0]
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff ffd9 	bl	800b58c <crc7_byte>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	1e5a      	subs	r2, r3, #1
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1ef      	bne.n	800b5c8 <crc7+0x10>
	return crc;
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
	...

0800b5f4 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b088      	sub	sp, #32
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60b9      	str	r1, [r7, #8]
 800b5fc:	607a      	str	r2, [r7, #4]
 800b5fe:	603b      	str	r3, [r7, #0]
 800b600:	4603      	mov	r3, r0
 800b602:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
 800b604:	2305      	movs	r3, #5
 800b606:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
 800b608:	2300      	movs	r3, #0
 800b60a:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
 800b60c:	7bfb      	ldrb	r3, [r7, #15]
 800b60e:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
 800b610:	7bfb      	ldrb	r3, [r7, #15]
 800b612:	3bc1      	subs	r3, #193	@ 0xc1
 800b614:	2b0e      	cmp	r3, #14
 800b616:	f200 80cc 	bhi.w	800b7b2 <spi_cmd+0x1be>
 800b61a:	a201      	add	r2, pc, #4	@ (adr r2, 800b620 <spi_cmd+0x2c>)
 800b61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b620:	0800b6d9 	.word	0x0800b6d9
 800b624:	0800b6d9 	.word	0x0800b6d9
 800b628:	0800b735 	.word	0x0800b735
 800b62c:	0800b679 	.word	0x0800b679
 800b630:	0800b6a3 	.word	0x0800b6a3
 800b634:	0800b6b5 	.word	0x0800b6b5
 800b638:	0800b703 	.word	0x0800b703
 800b63c:	0800b703 	.word	0x0800b703
 800b640:	0800b779 	.word	0x0800b779
 800b644:	0800b65d 	.word	0x0800b65d
 800b648:	0800b7b3 	.word	0x0800b7b3
 800b64c:	0800b7b3 	.word	0x0800b7b3
 800b650:	0800b7b3 	.word	0x0800b7b3
 800b654:	0800b7b3 	.word	0x0800b7b3
 800b658:	0800b6c7 	.word	0x0800b6c7
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	0c1b      	lsrs	r3, r3, #16
 800b660:	b2db      	uxtb	r3, r3
 800b662:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	0a1b      	lsrs	r3, r3, #8
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b672:	2305      	movs	r3, #5
 800b674:	77fb      	strb	r3, [r7, #31]
		break;
 800b676:	e09f      	b.n	800b7b8 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	0a1b      	lsrs	r3, r3, #8
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800b680:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b684:	2b00      	cmp	r3, #0
 800b686:	d004      	beq.n	800b692 <spi_cmd+0x9e>
 800b688:	7d7b      	ldrb	r3, [r7, #21]
 800b68a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	b2db      	uxtb	r3, r3
 800b696:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800b698:	2300      	movs	r3, #0
 800b69a:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b69c:	2305      	movs	r3, #5
 800b69e:	77fb      	strb	r3, [r7, #31]
		break;
 800b6a0:	e08a      	b.n	800b7b8 <spi_cmd+0x1c4>
#if defined(CMD_TERMINATE)
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b6ae:	2305      	movs	r3, #5
 800b6b0:	77fb      	strb	r3, [r7, #31]
		break;
 800b6b2:	e081      	b.n	800b7b8 <spi_cmd+0x1c4>
#endif
#if defined(CMD_REPEAT)
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b6c0:	2305      	movs	r3, #5
 800b6c2:	77fb      	strb	r3, [r7, #31]
		break;
 800b6c4:	e078      	b.n	800b7b8 <spi_cmd+0x1c4>
#endif
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
 800b6c6:	23ff      	movs	r3, #255	@ 0xff
 800b6c8:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
 800b6ca:	23ff      	movs	r3, #255	@ 0xff
 800b6cc:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
 800b6ce:	23ff      	movs	r3, #255	@ 0xff
 800b6d0:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b6d2:	2305      	movs	r3, #5
 800b6d4:	77fb      	strb	r3, [r7, #31]
		break;
 800b6d6:	e06f      	b.n	800b7b8 <spi_cmd+0x1c4>
#if defined(CMD_DMA_WRITE) || defined(CMD_DMA_READ)
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	0c1b      	lsrs	r3, r3, #16
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	0a1b      	lsrs	r3, r3, #8
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	0a1b      	lsrs	r3, r3, #8
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	767b      	strb	r3, [r7, #25]
		len = 7;
 800b6fc:	2307      	movs	r3, #7
 800b6fe:	77fb      	strb	r3, [r7, #31]
		break;
 800b700:	e05a      	b.n	800b7b8 <spi_cmd+0x1c4>
#endif
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	0c1b      	lsrs	r3, r3, #16
 800b706:	b2db      	uxtb	r3, r3
 800b708:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	0a1b      	lsrs	r3, r3, #8
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	b2db      	uxtb	r3, r3
 800b716:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	0c1b      	lsrs	r3, r3, #16
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	0a1b      	lsrs	r3, r3, #8
 800b724:	b2db      	uxtb	r3, r3
 800b726:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800b72e:	2308      	movs	r3, #8
 800b730:	77fb      	strb	r3, [r7, #31]
		break;
 800b732:	e041      	b.n	800b7b8 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	0a1b      	lsrs	r3, r3, #8
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800b73c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b740:	2b00      	cmp	r3, #0
 800b742:	d004      	beq.n	800b74e <spi_cmd+0x15a>
 800b744:	7d7b      	ldrb	r3, [r7, #21]
 800b746:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	b2db      	uxtb	r3, r3
 800b752:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	0e1b      	lsrs	r3, r3, #24
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	0c1b      	lsrs	r3, r3, #16
 800b760:	b2db      	uxtb	r3, r3
 800b762:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	0a1b      	lsrs	r3, r3, #8
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800b772:	2308      	movs	r3, #8
 800b774:	77fb      	strb	r3, [r7, #31]
		break;
 800b776:	e01f      	b.n	800b7b8 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	0c1b      	lsrs	r3, r3, #16
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	0a1b      	lsrs	r3, r3, #8
 800b784:	b2db      	uxtb	r3, r3
 800b786:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	0e1b      	lsrs	r3, r3, #24
 800b792:	b2db      	uxtb	r3, r3
 800b794:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	0c1b      	lsrs	r3, r3, #16
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	0a1b      	lsrs	r3, r3, #8
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	76fb      	strb	r3, [r7, #27]
		len = 9;
 800b7ac:	2309      	movs	r3, #9
 800b7ae:	77fb      	strb	r3, [r7, #31]
		break;
 800b7b0:	e002      	b.n	800b7b8 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
 800b7b2:	23ff      	movs	r3, #255	@ 0xff
 800b7b4:	77bb      	strb	r3, [r7, #30]
		break;
 800b7b6:	bf00      	nop
	}

    if(result == N_OK) {
 800b7b8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d127      	bne.n	800b810 <spi_cmd+0x21c>
		if (!gu8Crc_off)
 800b7c0:	4b16      	ldr	r3, [pc, #88]	@ (800b81c <spi_cmd+0x228>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d113      	bne.n	800b7f0 <spi_cmd+0x1fc>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 800b7c8:	7ffb      	ldrb	r3, [r7, #31]
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	f107 0314 	add.w	r3, r7, #20
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	207f      	movs	r0, #127	@ 0x7f
 800b7d6:	f7ff feef 	bl	800b5b8 <crc7>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	461a      	mov	r2, r3
 800b7de:	7ffb      	ldrb	r3, [r7, #31]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	0052      	lsls	r2, r2, #1
 800b7e4:	b2d2      	uxtb	r2, r2
 800b7e6:	3320      	adds	r3, #32
 800b7e8:	443b      	add	r3, r7
 800b7ea:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800b7ee:	e002      	b.n	800b7f6 <spi_cmd+0x202>
		else
			len-=1;
 800b7f0:	7ffb      	ldrb	r3, [r7, #31]
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 800b7f6:	7ffb      	ldrb	r3, [r7, #31]
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	f107 0314 	add.w	r3, r7, #20
 800b7fe:	4611      	mov	r1, r2
 800b800:	4618      	mov	r0, r3
 800b802:	f7ff fe9f 	bl	800b544 <nmi_spi_write>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d001      	beq.n	800b810 <spi_cmd+0x21c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
 800b80c:	23ff      	movs	r3, #255	@ 0xff
 800b80e:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
 800b810:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3720      	adds	r7, #32
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	200030c0 	.word	0x200030c0

0800b820 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	4603      	mov	r3, r0
 800b828:	71fb      	strb	r3, [r7, #7]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
 800b82a:	2300      	movs	r3, #0
 800b82c:	73bb      	strb	r3, [r7, #14]

    if (!gu8Crc_off)
 800b82e:	4b18      	ldr	r3, [pc, #96]	@ (800b890 <spi_data_rsp+0x70>)
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d102      	bne.n	800b83c <spi_data_rsp+0x1c>
		len = 2;
 800b836:	2302      	movs	r3, #2
 800b838:	73fb      	strb	r3, [r7, #15]
 800b83a:	e001      	b.n	800b840 <spi_data_rsp+0x20>
	else
		len = 3;
 800b83c:	2303      	movs	r3, #3
 800b83e:	73fb      	strb	r3, [r7, #15]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	b29a      	uxth	r2, r3
 800b844:	f107 0308 	add.w	r3, r7, #8
 800b848:	4611      	mov	r1, r2
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7ff fe69 	bl	800b522 <nmi_spi_read>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d002      	beq.n	800b85c <spi_data_rsp+0x3c>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
 800b856:	23ff      	movs	r3, #255	@ 0xff
 800b858:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800b85a:	e013      	b.n	800b884 <spi_data_rsp+0x64>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
 800b85e:	3b01      	subs	r3, #1
 800b860:	3310      	adds	r3, #16
 800b862:	443b      	add	r3, r7
 800b864:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d107      	bne.n	800b87c <spi_data_rsp+0x5c>
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
 800b86e:	3b02      	subs	r3, #2
 800b870:	3310      	adds	r3, #16
 800b872:	443b      	add	r3, r7
 800b874:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800b878:	2bc3      	cmp	r3, #195	@ 0xc3
 800b87a:	d002      	beq.n	800b882 <spi_data_rsp+0x62>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
 800b87c:	23ff      	movs	r3, #255	@ 0xff
 800b87e:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800b880:	e000      	b.n	800b884 <spi_data_rsp+0x64>
	}
_fail_:
 800b882:	bf00      	nop

	return result;
 800b884:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	200030c0 	.word	0x200030c0

0800b894 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	4603      	mov	r3, r0
 800b89c:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	73fb      	strb	r3, [r7, #15]

	/**
		Command/Control response
	**/
#if defined(CMD_TERMINATE)
    if(cmd == CMD_TERMINATE) {
 800b8a2:	79fb      	ldrb	r3, [r7, #7]
 800b8a4:	2bc5      	cmp	r3, #197	@ 0xc5
 800b8a6:	d10b      	bne.n	800b8c0 <spi_cmd_rsp+0x2c>
        if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800b8a8:	f107 030d 	add.w	r3, r7, #13
 800b8ac:	2101      	movs	r1, #1
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7ff fe37 	bl	800b522 <nmi_spi_read>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d002      	beq.n	800b8c0 <spi_cmd_rsp+0x2c>
            result = N_FAIL;
 800b8ba:	23ff      	movs	r3, #255	@ 0xff
 800b8bc:	73fb      	strb	r3, [r7, #15]
            goto _fail_;
 800b8be:	e042      	b.n	800b946 <spi_cmd_rsp+0xb2>
        }
    }
#endif
#if defined(CMD_REPEAT)
    if(cmd == CMD_REPEAT) {
 800b8c0:	79fb      	ldrb	r3, [r7, #7]
 800b8c2:	2bc6      	cmp	r3, #198	@ 0xc6
 800b8c4:	d10b      	bne.n	800b8de <spi_cmd_rsp+0x4a>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800b8c6:	f107 030d 	add.w	r3, r7, #13
 800b8ca:	2101      	movs	r1, #1
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7ff fe28 	bl	800b522 <nmi_spi_read>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <spi_cmd_rsp+0x4a>
			result = N_FAIL;
 800b8d8:	23ff      	movs	r3, #255	@ 0xff
 800b8da:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800b8dc:	e033      	b.n	800b946 <spi_cmd_rsp+0xb2>
		}
	}
#endif

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800b8de:	230a      	movs	r3, #10
 800b8e0:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800b8e2:	f107 030d 	add.w	r3, r7, #13
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7ff fe1a 	bl	800b522 <nmi_spi_read>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <spi_cmd_rsp+0x66>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 800b8f4:	23ff      	movs	r3, #255	@ 0xff
 800b8f6:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800b8f8:	e025      	b.n	800b946 <spi_cmd_rsp+0xb2>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 800b8fa:	7b7b      	ldrb	r3, [r7, #13]
 800b8fc:	79fa      	ldrb	r2, [r7, #7]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d007      	beq.n	800b912 <spi_cmd_rsp+0x7e>
 800b902:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b906:	b2da      	uxtb	r2, r3
 800b908:	3a01      	subs	r2, #1
 800b90a:	b2d2      	uxtb	r2, r2
 800b90c:	73ba      	strb	r2, [r7, #14]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	dce7      	bgt.n	800b8e2 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800b912:	230a      	movs	r3, #10
 800b914:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800b916:	f107 030d 	add.w	r3, r7, #13
 800b91a:	2101      	movs	r1, #1
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7ff fe00 	bl	800b522 <nmi_spi_read>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d002      	beq.n	800b92e <spi_cmd_rsp+0x9a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 800b928:	23ff      	movs	r3, #255	@ 0xff
 800b92a:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800b92c:	e00b      	b.n	800b946 <spi_cmd_rsp+0xb2>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 800b92e:	7b7b      	ldrb	r3, [r7, #13]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d007      	beq.n	800b944 <spi_cmd_rsp+0xb0>
 800b934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	3a01      	subs	r2, #1
 800b93c:	b2d2      	uxtb	r2, r2
 800b93e:	73ba      	strb	r2, [r7, #14]
 800b940:	2b00      	cmp	r3, #0
 800b942:	dce8      	bgt.n	800b916 <spi_cmd_rsp+0x82>

_fail_:
 800b944:	bf00      	nop

	return result;
 800b946:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b086      	sub	sp, #24
 800b956:	af02      	add	r7, sp, #8
	//M2M_INFO("Reset Spi\n");
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800b958:	2300      	movs	r3, #0
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	2300      	movs	r3, #0
 800b95e:	2200      	movs	r2, #0
 800b960:	2100      	movs	r1, #0
 800b962:	20cf      	movs	r0, #207	@ 0xcf
 800b964:	f7ff fe46 	bl	800b5f4 <spi_cmd>

	if(spi_cmd_rsp(CMD_RESET) != N_OK) {
 800b968:	20cf      	movs	r0, #207	@ 0xcf
 800b96a:	f7ff ff93 	bl	800b894 <spi_cmd_rsp>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d010      	beq.n	800b996 <nm_spi_reset+0x44>
		// Reset command failed, need to send repeated 1's until reset occurs
		uint8 w_buf[8] = {0xFF};
 800b974:	23ff      	movs	r3, #255	@ 0xff
 800b976:	60bb      	str	r3, [r7, #8]
 800b978:	2300      	movs	r3, #0
 800b97a:	60fb      	str	r3, [r7, #12]
		uint8 r_buf[8];
		M2M_ERR("[nmi spi]: Failed rst cmd response\n");
		nmi_spi_writeread(w_buf, r_buf, 8);
 800b97c:	4639      	mov	r1, r7
 800b97e:	f107 0308 	add.w	r3, r7, #8
 800b982:	2208      	movs	r2, #8
 800b984:	4618      	mov	r0, r3
 800b986:	f7ff fdee 	bl	800b566 <nmi_spi_writeread>
		if(r_buf[7] != 0xFF)
 800b98a:	79fb      	ldrb	r3, [r7, #7]
 800b98c:	2bff      	cmp	r3, #255	@ 0xff
 800b98e:	d002      	beq.n	800b996 <nm_spi_reset+0x44>
		{
			M2M_ERR("[nmi spi]: Failed repeated reset\n");
			return N_FAIL;
 800b990:	f04f 33ff 	mov.w	r3, #4294967295
 800b994:	e000      	b.n	800b998 <nm_spi_reset+0x46>
		}
	}
	return N_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	807b      	strh	r3, [r7, #2]
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
 800b9b8:	887b      	ldrh	r3, [r7, #2]
 800b9ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9be:	d802      	bhi.n	800b9c6 <spi_data_read+0x26>
			nbytes = sz;
 800b9c0:	887b      	ldrh	r3, [r7, #2]
 800b9c2:	827b      	strh	r3, [r7, #18]
 800b9c4:	e002      	b.n	800b9cc <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800b9c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b9ca:	827b      	strh	r3, [r7, #18]

		/**
			Data Response header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 800b9cc:	230a      	movs	r3, #10
 800b9ce:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800b9d0:	f107 030b 	add.w	r3, r7, #11
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7ff fda3 	bl	800b522 <nmi_spi_read>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d002      	beq.n	800b9e8 <spi_data_read+0x48>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
 800b9e2:	23ff      	movs	r3, #255	@ 0xff
 800b9e4:	747b      	strb	r3, [r7, #17]
				break;
 800b9e6:	e00e      	b.n	800ba06 <spi_data_read+0x66>
			}
            if((rsp & 0xf0) == 0xf0)
 800b9e8:	7afb      	ldrb	r3, [r7, #11]
 800b9ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b9ee:	2bf0      	cmp	r3, #240	@ 0xf0
 800b9f0:	d008      	beq.n	800ba04 <spi_data_read+0x64>
				break;
		} while (retry--);
 800b9f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	3a01      	subs	r2, #1
 800b9fa:	b292      	uxth	r2, r2
 800b9fc:	82fa      	strh	r2, [r7, #22]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1e6      	bne.n	800b9d0 <spi_data_read+0x30>
 800ba02:	e000      	b.n	800ba06 <spi_data_read+0x66>
				break;
 800ba04:	bf00      	nop

		if (result == N_FAIL)
 800ba06:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800ba0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0e:	d035      	beq.n	800ba7c <spi_data_read+0xdc>
			break;

		if (retry <= 0) {
 800ba10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	dc02      	bgt.n	800ba1e <spi_data_read+0x7e>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
 800ba18:	23ff      	movs	r3, #255	@ 0xff
 800ba1a:	747b      	strb	r3, [r7, #17]
			break;
 800ba1c:	e02f      	b.n	800ba7e <spi_data_read+0xde>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 800ba1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	4413      	add	r3, r2
 800ba26:	8a7a      	ldrh	r2, [r7, #18]
 800ba28:	4611      	mov	r1, r2
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7ff fd79 	bl	800b522 <nmi_spi_read>
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d002      	beq.n	800ba3c <spi_data_read+0x9c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
 800ba36:	23ff      	movs	r3, #255	@ 0xff
 800ba38:	747b      	strb	r3, [r7, #17]
			break;
 800ba3a:	e020      	b.n	800ba7e <spi_data_read+0xde>
		}
		if(!clockless)
 800ba3c:	787b      	ldrb	r3, [r7, #1]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10f      	bne.n	800ba62 <spi_data_read+0xc2>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
 800ba42:	4b12      	ldr	r3, [pc, #72]	@ (800ba8c <spi_data_read+0xec>)
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10b      	bne.n	800ba62 <spi_data_read+0xc2>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 800ba4a:	f107 030c 	add.w	r3, r7, #12
 800ba4e:	2102      	movs	r1, #2
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7ff fd66 	bl	800b522 <nmi_spi_read>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d002      	beq.n	800ba62 <spi_data_read+0xc2>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
 800ba5c:	23ff      	movs	r3, #255	@ 0xff
 800ba5e:	747b      	strb	r3, [r7, #17]
					break;
 800ba60:	e00d      	b.n	800ba7e <spi_data_read+0xde>
				}
			}
		}
		ix += nbytes;
 800ba62:	8aba      	ldrh	r2, [r7, #20]
 800ba64:	8a7b      	ldrh	r3, [r7, #18]
 800ba66:	4413      	add	r3, r2
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
 800ba6c:	8a7b      	ldrh	r3, [r7, #18]
 800ba6e:	887a      	ldrh	r2, [r7, #2]
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	807b      	strh	r3, [r7, #2]

	} while (sz);
 800ba74:	887b      	ldrh	r3, [r7, #2]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d19e      	bne.n	800b9b8 <spi_data_read+0x18>
 800ba7a:	e000      	b.n	800ba7e <spi_data_read+0xde>
			break;
 800ba7c:	bf00      	nop

	return result;
 800ba7e:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3718      	adds	r7, #24
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	200030c0 	.word	0x200030c0

0800ba90 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	807b      	strh	r3, [r7, #2]
    sint16 ix = 0;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	82fb      	strh	r3, [r7, #22]
	uint16 nbytes;
    sint8 result = N_OK;
 800baa0:	2300      	movs	r3, #0
 800baa2:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
 800baa4:	2300      	movs	r3, #0
 800baa6:	81bb      	strh	r3, [r7, #12]

	/**
		Data
	**/
	do {
		if (sz <= DATA_PKT_SZ)
 800baa8:	887b      	ldrh	r3, [r7, #2]
 800baaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800baae:	d802      	bhi.n	800bab6 <spi_data_write+0x26>
			nbytes = sz;
 800bab0:	887b      	ldrh	r3, [r7, #2]
 800bab2:	82bb      	strh	r3, [r7, #20]
 800bab4:	e002      	b.n	800babc <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800bab6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800baba:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
 800babc:	23f0      	movs	r3, #240	@ 0xf0
 800babe:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
 800bac0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d109      	bne.n	800badc <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
 800bac8:	887b      	ldrh	r3, [r7, #2]
 800baca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bace:	d802      	bhi.n	800bad6 <spi_data_write+0x46>
				order = 0x3;
 800bad0:	2303      	movs	r3, #3
 800bad2:	74bb      	strb	r3, [r7, #18]
 800bad4:	e00b      	b.n	800baee <spi_data_write+0x5e>
			else
				order = 0x1;
 800bad6:	2301      	movs	r3, #1
 800bad8:	74bb      	strb	r3, [r7, #18]
 800bada:	e008      	b.n	800baee <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
 800badc:	887b      	ldrh	r3, [r7, #2]
 800bade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bae2:	d802      	bhi.n	800baea <spi_data_write+0x5a>
				order = 0x3;
 800bae4:	2303      	movs	r3, #3
 800bae6:	74bb      	strb	r3, [r7, #18]
 800bae8:	e001      	b.n	800baee <spi_data_write+0x5e>
			else
				order = 0x2;
 800baea:	2302      	movs	r3, #2
 800baec:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
 800baee:	7c7a      	ldrb	r2, [r7, #17]
 800baf0:	7cbb      	ldrb	r3, [r7, #18]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 800baf8:	f107 0311 	add.w	r3, r7, #17
 800bafc:	2101      	movs	r1, #1
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7ff fd20 	bl	800b544 <nmi_spi_write>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d002      	beq.n	800bb10 <spi_data_write+0x80>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
			result = N_FAIL;
 800bb0a:	23ff      	movs	r3, #255	@ 0xff
 800bb0c:	74fb      	strb	r3, [r7, #19]
			break;
 800bb0e:	e02a      	b.n	800bb66 <spi_data_write+0xd6>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 800bb10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	4413      	add	r3, r2
 800bb18:	8aba      	ldrh	r2, [r7, #20]
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7ff fd11 	bl	800b544 <nmi_spi_write>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d002      	beq.n	800bb2e <spi_data_write+0x9e>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
			result = N_FAIL;
 800bb28:	23ff      	movs	r3, #255	@ 0xff
 800bb2a:	74fb      	strb	r3, [r7, #19]
			break;
 800bb2c:	e01b      	b.n	800bb66 <spi_data_write+0xd6>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
 800bb2e:	4b11      	ldr	r3, [pc, #68]	@ (800bb74 <spi_data_write+0xe4>)
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10b      	bne.n	800bb4e <spi_data_write+0xbe>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 800bb36:	f107 030c 	add.w	r3, r7, #12
 800bb3a:	2102      	movs	r1, #2
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7ff fd01 	bl	800b544 <nmi_spi_write>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <spi_data_write+0xbe>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
				result = N_FAIL;
 800bb48:	23ff      	movs	r3, #255	@ 0xff
 800bb4a:	74fb      	strb	r3, [r7, #19]
				break;
 800bb4c:	e00b      	b.n	800bb66 <spi_data_write+0xd6>
			}
		}

		ix += nbytes;
 800bb4e:	8afa      	ldrh	r2, [r7, #22]
 800bb50:	8abb      	ldrh	r3, [r7, #20]
 800bb52:	4413      	add	r3, r2
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
 800bb58:	887a      	ldrh	r2, [r7, #2]
 800bb5a:	8abb      	ldrh	r3, [r7, #20]
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	807b      	strh	r3, [r7, #2]
	} while (sz);
 800bb60:	887b      	ldrh	r3, [r7, #2]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1a0      	bne.n	800baa8 <spi_data_write+0x18>


	return result;
 800bb66:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3718      	adds	r7, #24
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	200030c0 	.word	0x200030c0

0800bb78 <nm_spi_write_reg>:
 *  @param[in]  u32Val
 *                  Value to be written to the register
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_write_reg(uint32 addr, uint32 u32data)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	af02      	add	r7, sp, #8
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800bb82:	230a      	movs	r3, #10
 800bb84:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800bb86:	2300      	movs	r3, #0
 800bb88:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_WRITE;
 800bb8a:	23c9      	movs	r3, #201	@ 0xc9
 800bb8c:	737b      	strb	r3, [r7, #13]
	uint8 clockless = 0;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	733b      	strb	r3, [r7, #12]
	
_RETRY_:	
	if (addr <= 0x30)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2b30      	cmp	r3, #48	@ 0x30
 800bb96:	d803      	bhi.n	800bba0 <nm_spi_write_reg+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
 800bb98:	23c3      	movs	r3, #195	@ 0xc3
 800bb9a:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	733b      	strb	r3, [r7, #12]
	}

	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 800bba0:	7b78      	ldrb	r0, [r7, #13]
 800bba2:	7b3b      	ldrb	r3, [r7, #12]
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	2304      	movs	r3, #4
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	6879      	ldr	r1, [r7, #4]
 800bbac:	f7ff fd22 	bl	800b5f4 <spi_cmd>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800bbb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d109      	bne.n	800bbd0 <nm_spi_write_reg+0x58>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800bbbc:	7b7b      	ldrb	r3, [r7, #13]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7ff fe68 	bl	800b894 <spi_cmd_rsp>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800bbc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbcc:	2b00      	cmp	r3, #0
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
_FAIL_:
 800bbce:	e000      	b.n	800bbd2 <nm_spi_write_reg+0x5a>
		goto _FAIL_;
 800bbd0:	bf00      	nop
	if(result != N_OK)
 800bbd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d017      	beq.n	800bc0a <nm_spi_write_reg+0x92>
	{
		nm_bsp_sleep(1);
 800bbda:	2001      	movs	r0, #1
 800bbdc:	f7fd fc50 	bl	8009480 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	2100      	movs	r1, #0
 800bbea:	20cf      	movs	r0, #207	@ 0xcf
 800bbec:	f7ff fd02 	bl	800b5f4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800bbf0:	20cf      	movs	r0, #207	@ 0xcf
 800bbf2:	f7ff fe4f 	bl	800b894 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %x\n",retry,addr,u32data);
		nm_bsp_sleep(1);
 800bbf6:	2001      	movs	r0, #1
 800bbf8:	f7fd fc42 	bl	8009480 <nm_bsp_sleep>
		retry--;
 800bbfc:	7bfb      	ldrb	r3, [r7, #15]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800bc02:	7bfb      	ldrb	r3, [r7, #15]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d000      	beq.n	800bc0a <nm_spi_write_reg+0x92>
 800bc08:	e7c3      	b.n	800bb92 <nm_spi_write_reg+0x1a>
	}

	return result;
 800bc0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3710      	adds	r7, #16
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b088      	sub	sp, #32
 800bc1a:	af02      	add	r7, sp, #8
 800bc1c:	60f8      	str	r0, [r7, #12]
 800bc1e:	60b9      	str	r1, [r7, #8]
 800bc20:	4613      	mov	r3, r2
 800bc22:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800bc24:	230a      	movs	r3, #10
 800bc26:	75bb      	strb	r3, [r7, #22]
	uint8 cmd = CMD_DMA_EXT_WRITE;
 800bc28:	23c7      	movs	r3, #199	@ 0xc7
 800bc2a:	757b      	strb	r3, [r7, #21]
_RETRY_:
	/**
		Command
	**/
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
 800bc2c:	88fb      	ldrh	r3, [r7, #6]
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d101      	bne.n	800bc36 <nm_spi_write+0x20>
		size = 2;
 800bc32:	2302      	movs	r3, #2
 800bc34:	80fb      	strh	r3, [r7, #6]

	result = spi_cmd(cmd, addr, 0, size,0);
 800bc36:	88fb      	ldrh	r3, [r7, #6]
 800bc38:	7d78      	ldrb	r0, [r7, #21]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	9200      	str	r2, [sp, #0]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	68f9      	ldr	r1, [r7, #12]
 800bc42:	f7ff fcd7 	bl	800b5f4 <spi_cmd>
 800bc46:	4603      	mov	r3, r0
 800bc48:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800bc4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d11e      	bne.n	800bc90 <nm_spi_write+0x7a>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800bc52:	7d7b      	ldrb	r3, [r7, #21]
 800bc54:	4618      	mov	r0, r3
 800bc56:	f7ff fe1d 	bl	800b894 <spi_cmd_rsp>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800bc5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d116      	bne.n	800bc94 <nm_spi_write+0x7e>
	}

	/**
		Data
	**/
	result = spi_data_write(buf, size);
 800bc66:	88fb      	ldrh	r3, [r7, #6]
 800bc68:	4619      	mov	r1, r3
 800bc6a:	68b8      	ldr	r0, [r7, #8]
 800bc6c:	f7ff ff10 	bl	800ba90 <spi_data_write>
 800bc70:	4603      	mov	r3, r0
 800bc72:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800bc74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10d      	bne.n	800bc98 <nm_spi_write+0x82>
		goto _FAIL_;
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
 800bc7c:	7d7b      	ldrb	r3, [r7, #21]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7ff fdce 	bl	800b820 <spi_data_rsp>
 800bc84:	4603      	mov	r3, r0
 800bc86:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800bc88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc8c:	2b00      	cmp	r3, #0
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
	}
	
_FAIL_:
 800bc8e:	e004      	b.n	800bc9a <nm_spi_write+0x84>
		goto _FAIL_;
 800bc90:	bf00      	nop
 800bc92:	e002      	b.n	800bc9a <nm_spi_write+0x84>
		goto _FAIL_;
 800bc94:	bf00      	nop
 800bc96:	e000      	b.n	800bc9a <nm_spi_write+0x84>
		goto _FAIL_;
 800bc98:	bf00      	nop
	if(result != N_OK)
 800bc9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d017      	beq.n	800bcd2 <nm_spi_write+0xbc>
	{
		nm_bsp_sleep(1);
 800bca2:	2001      	movs	r0, #1
 800bca4:	f7fd fbec 	bl	8009480 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800bca8:	2300      	movs	r3, #0
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	2300      	movs	r3, #0
 800bcae:	2200      	movs	r2, #0
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	20cf      	movs	r0, #207	@ 0xcf
 800bcb4:	f7ff fc9e 	bl	800b5f4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800bcb8:	20cf      	movs	r0, #207	@ 0xcf
 800bcba:	f7ff fdeb 	bl	800b894 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 800bcbe:	2001      	movs	r0, #1
 800bcc0:	f7fd fbde 	bl	8009480 <nm_bsp_sleep>
		retry--;
 800bcc4:	7dbb      	ldrb	r3, [r7, #22]
 800bcc6:	3b01      	subs	r3, #1
 800bcc8:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800bcca:	7dbb      	ldrb	r3, [r7, #22]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d000      	beq.n	800bcd2 <nm_spi_write+0xbc>
 800bcd0:	e7ac      	b.n	800bc2c <nm_spi_write+0x16>
	}


	return result;
 800bcd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3718      	adds	r7, #24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <nm_spi_read_reg_with_ret>:
 *  @param[out] pu32RetVal
 *                  Pointer to u32 variable used to return the read value
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_read_reg_with_ret(uint32 addr, uint32 *u32data)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b086      	sub	sp, #24
 800bce2:	af02      	add	r7, sp, #8
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800bce8:	230a      	movs	r3, #10
 800bcea:	73fb      	strb	r3, [r7, #15]
	volatile sint8 result = N_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	733b      	strb	r3, [r7, #12]
	uint8 cmd = CMD_SINGLE_READ;
 800bcf0:	23ca      	movs	r3, #202	@ 0xca
 800bcf2:	73bb      	strb	r3, [r7, #14]
	uint8 tmp[4];
	uint8 clockless = 0;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	737b      	strb	r3, [r7, #13]

_RETRY_:

	if (addr <= 0xff)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2bff      	cmp	r3, #255	@ 0xff
 800bcfc:	d803      	bhi.n	800bd06 <nm_spi_read_reg_with_ret+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
 800bcfe:	23c4      	movs	r3, #196	@ 0xc4
 800bd00:	73bb      	strb	r3, [r7, #14]
		clockless = 1;
 800bd02:	2301      	movs	r3, #1
 800bd04:	737b      	strb	r3, [r7, #13]
	}

	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800bd06:	7bb8      	ldrb	r0, [r7, #14]
 800bd08:	7b7b      	ldrb	r3, [r7, #13]
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	2304      	movs	r3, #4
 800bd0e:	2200      	movs	r2, #0
 800bd10:	6879      	ldr	r1, [r7, #4]
 800bd12:	f7ff fc6f 	bl	800b5f4 <spi_cmd>
 800bd16:	4603      	mov	r3, r0
 800bd18:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800bd1a:	7b3b      	ldrb	r3, [r7, #12]
 800bd1c:	b25b      	sxtb	r3, r3
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d124      	bne.n	800bd6c <nm_spi_read_reg_with_ret+0x8e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800bd22:	7bbb      	ldrb	r3, [r7, #14]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff fdb5 	bl	800b894 <spi_cmd_rsp>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800bd2e:	7b3b      	ldrb	r3, [r7, #12]
 800bd30:	b25b      	sxtb	r3, r3
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d11c      	bne.n	800bd70 <nm_spi_read_reg_with_ret+0x92>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianness issues */
	result = spi_data_read(&tmp[0], 4, clockless);
 800bd36:	7b7a      	ldrb	r2, [r7, #13]
 800bd38:	f107 0308 	add.w	r3, r7, #8
 800bd3c:	2104      	movs	r1, #4
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7ff fe2e 	bl	800b9a0 <spi_data_read>
 800bd44:	4603      	mov	r3, r0
 800bd46:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800bd48:	7b3b      	ldrb	r3, [r7, #12]
 800bd4a:	b25b      	sxtb	r3, r3
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d111      	bne.n	800bd74 <nm_spi_read_reg_with_ret+0x96>
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}

	*u32data = tmp[0] |
 800bd50:	7a3b      	ldrb	r3, [r7, #8]
 800bd52:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
 800bd54:	7a7b      	ldrb	r3, [r7, #9]
 800bd56:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
 800bd58:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
 800bd5a:	7abb      	ldrb	r3, [r7, #10]
 800bd5c:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
 800bd5e:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
 800bd60:	7afb      	ldrb	r3, [r7, #11]
 800bd62:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
 800bd64:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	601a      	str	r2, [r3, #0]
 800bd6a:	e004      	b.n	800bd76 <nm_spi_read_reg_with_ret+0x98>
		goto _FAIL_;
 800bd6c:	bf00      	nop
 800bd6e:	e002      	b.n	800bd76 <nm_spi_read_reg_with_ret+0x98>
		goto _FAIL_;
 800bd70:	bf00      	nop
 800bd72:	e000      	b.n	800bd76 <nm_spi_read_reg_with_ret+0x98>
		goto _FAIL_;
 800bd74:	bf00      	nop
		
_FAIL_:
	if(result != N_OK)
 800bd76:	7b3b      	ldrb	r3, [r7, #12]
 800bd78:	b25b      	sxtb	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d017      	beq.n	800bdae <nm_spi_read_reg_with_ret+0xd0>
	{
		nm_bsp_sleep(1);
 800bd7e:	2001      	movs	r0, #1
 800bd80:	f7fd fb7e 	bl	8009480 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800bd84:	2300      	movs	r3, #0
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	2300      	movs	r3, #0
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	20cf      	movs	r0, #207	@ 0xcf
 800bd90:	f7ff fc30 	bl	800b5f4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800bd94:	20cf      	movs	r0, #207	@ 0xcf
 800bd96:	f7ff fd7d 	bl	800b894 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
 800bd9a:	2001      	movs	r0, #1
 800bd9c:	f7fd fb70 	bl	8009480 <nm_bsp_sleep>
		retry--;
 800bda0:	7bfb      	ldrb	r3, [r7, #15]
 800bda2:	3b01      	subs	r3, #1
 800bda4:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800bda6:	7bfb      	ldrb	r3, [r7, #15]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d000      	beq.n	800bdae <nm_spi_read_reg_with_ret+0xd0>
 800bdac:	e7a4      	b.n	800bcf8 <nm_spi_read_reg_with_ret+0x1a>
	}
		
	return result;
 800bdae:	7b3b      	ldrb	r3, [r7, #12]
 800bdb0:	b25b      	sxtb	r3, r3
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b088      	sub	sp, #32
 800bdbe:	af02      	add	r7, sp, #8
 800bdc0:	60f8      	str	r0, [r7, #12]
 800bdc2:	60b9      	str	r1, [r7, #8]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
 800bdc8:	23c8      	movs	r3, #200	@ 0xc8
 800bdca:	753b      	strb	r3, [r7, #20]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800bdcc:	230a      	movs	r3, #10
 800bdce:	75bb      	strb	r3, [r7, #22]
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	757b      	strb	r3, [r7, #21]
_RETRY_:

	/**
		Command
	**/
	if (size == 1)
 800bdd4:	88fb      	ldrh	r3, [r7, #6]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d103      	bne.n	800bde2 <nm_spi_read+0x28>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
 800bdda:	2302      	movs	r3, #2
 800bddc:	80fb      	strh	r3, [r7, #6]
		single_byte_workaround = 1;
 800bdde:	2301      	movs	r3, #1
 800bde0:	757b      	strb	r3, [r7, #21]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 800bde2:	88fb      	ldrh	r3, [r7, #6]
 800bde4:	7d38      	ldrb	r0, [r7, #20]
 800bde6:	2200      	movs	r2, #0
 800bde8:	9200      	str	r2, [sp, #0]
 800bdea:	2200      	movs	r2, #0
 800bdec:	68f9      	ldr	r1, [r7, #12]
 800bdee:	f7ff fc01 	bl	800b5f4 <spi_cmd>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800bdf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d125      	bne.n	800be4a <nm_spi_read+0x90>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800bdfe:	7d3b      	ldrb	r3, [r7, #20]
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff fd47 	bl	800b894 <spi_cmd_rsp>
 800be06:	4603      	mov	r3, r0
 800be08:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800be0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d11d      	bne.n	800be4e <nm_spi_read+0x94>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
 800be12:	7d7b      	ldrb	r3, [r7, #21]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d00c      	beq.n	800be32 <nm_spi_read+0x78>
	{
		result = spi_data_read(tmp, size,0);
 800be18:	88f9      	ldrh	r1, [r7, #6]
 800be1a:	f107 0310 	add.w	r3, r7, #16
 800be1e:	2200      	movs	r2, #0
 800be20:	4618      	mov	r0, r3
 800be22:	f7ff fdbd 	bl	800b9a0 <spi_data_read>
 800be26:	4603      	mov	r3, r0
 800be28:	75fb      	strb	r3, [r7, #23]
		buf[0] = tmp[0];
 800be2a:	7c3a      	ldrb	r2, [r7, #16]
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	701a      	strb	r2, [r3, #0]
 800be30:	e007      	b.n	800be42 <nm_spi_read+0x88>
	}
	else
		result = spi_data_read(buf, size,0);
 800be32:	88fb      	ldrh	r3, [r7, #6]
 800be34:	2200      	movs	r2, #0
 800be36:	4619      	mov	r1, r3
 800be38:	68b8      	ldr	r0, [r7, #8]
 800be3a:	f7ff fdb1 	bl	800b9a0 <spi_data_read>
 800be3e:	4603      	mov	r3, r0
 800be40:	75fb      	strb	r3, [r7, #23]

	if (result != N_OK) {
 800be42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be46:	2b00      	cmp	r3, #0
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}

_FAIL_:
 800be48:	e002      	b.n	800be50 <nm_spi_read+0x96>
		goto _FAIL_;
 800be4a:	bf00      	nop
 800be4c:	e000      	b.n	800be50 <nm_spi_read+0x96>
		goto _FAIL_;
 800be4e:	bf00      	nop
	if(result != N_OK)
 800be50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d017      	beq.n	800be88 <nm_spi_read+0xce>
	{
		nm_bsp_sleep(1);
 800be58:	2001      	movs	r0, #1
 800be5a:	f7fd fb11 	bl	8009480 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800be5e:	2300      	movs	r3, #0
 800be60:	9300      	str	r3, [sp, #0]
 800be62:	2300      	movs	r3, #0
 800be64:	2200      	movs	r2, #0
 800be66:	2100      	movs	r1, #0
 800be68:	20cf      	movs	r0, #207	@ 0xcf
 800be6a:	f7ff fbc3 	bl	800b5f4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800be6e:	20cf      	movs	r0, #207	@ 0xcf
 800be70:	f7ff fd10 	bl	800b894 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 800be74:	2001      	movs	r0, #1
 800be76:	f7fd fb03 	bl	8009480 <nm_bsp_sleep>
		retry--;
 800be7a:	7dbb      	ldrb	r3, [r7, #22]
 800be7c:	3b01      	subs	r3, #1
 800be7e:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800be80:	7dbb      	ldrb	r3, [r7, #22]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d000      	beq.n	800be88 <nm_spi_read+0xce>
 800be86:	e7a5      	b.n	800bdd4 <nm_spi_read+0x1a>
	}

	return result;
 800be88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3718      	adds	r7, #24
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
 800be9a:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800be9e:	f000 f875 	bl	800bf8c <nm_spi_read_reg>
 800bea2:	6078      	str	r0, [r7, #4]
	val32 &= ~(0x7 << 4);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beaa:	607b      	str	r3, [r7, #4]
            break;
        case 4096:
            val32 |= (4 << 4);
            break;
        case 8192:
            val32 |= (5 << 4);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800beb2:	607b      	str	r3, [r7, #4]
            break;
 800beb4:	bf00      	nop
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
 800beb6:	6879      	ldr	r1, [r7, #4]
 800beb8:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800bebc:	f7ff fe5c 	bl	800bb78 <nm_spi_write_reg>
}
 800bec0:	bf00      	nop
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <nm_spi_init>:
*	@fn		nm_spi_init
*	@brief	Initialize the SPI
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_spi_init(void)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
 800bed2:	4b26      	ldr	r3, [pc, #152]	@ (800bf6c <nm_spi_init+0xa4>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	701a      	strb	r2, [r3, #0]

    if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 800bed8:	463b      	mov	r3, r7
 800beda:	4619      	mov	r1, r3
 800bedc:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800bee0:	f7ff fefd 	bl	800bcde <nm_spi_read_reg_with_ret>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00e      	beq.n	800bf08 <nm_spi_init+0x40>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
 800beea:	4b20      	ldr	r3, [pc, #128]	@ (800bf6c <nm_spi_init+0xa4>)
 800beec:	2201      	movs	r2, #1
 800beee:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retrying with CRC off...\n");
        if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 800bef0:	463b      	mov	r3, r7
 800bef2:	4619      	mov	r1, r3
 800bef4:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800bef8:	f7ff fef1 	bl	800bcde <nm_spi_read_reg_with_ret>
 800befc:	4603      	mov	r3, r0
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d002      	beq.n	800bf08 <nm_spi_init+0x40>
			// Read failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
            return M2M_ERR_BUS_FAIL;
 800bf02:	f06f 0305 	mvn.w	r3, #5
 800bf06:	e02d      	b.n	800bf64 <nm_spi_init+0x9c>
		}
	}
	if(gu8Crc_off == 0)
 800bf08:	4b18      	ldr	r3, [pc, #96]	@ (800bf6c <nm_spi_init+0xa4>)
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d11a      	bne.n	800bf46 <nm_spi_init+0x7e>
	{
		reg &= ~0xc;	/* disable crc checking */
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	f023 030c 	bic.w	r3, r3, #12
 800bf16:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf1e:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800bf26:	603b      	str	r3, [r7, #0]
        if(nm_spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg) != M2M_SUCCESS) {
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800bf30:	f7ff fe22 	bl	800bb78 <nm_spi_write_reg>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d002      	beq.n	800bf40 <nm_spi_init+0x78>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
            return M2M_ERR_BUS_FAIL;
 800bf3a:	f06f 0305 	mvn.w	r3, #5
 800bf3e:	e011      	b.n	800bf64 <nm_spi_init+0x9c>
		}
		gu8Crc_off = 1;
 800bf40:	4b0a      	ldr	r3, [pc, #40]	@ (800bf6c <nm_spi_init+0xa4>)
 800bf42:	2201      	movs	r2, #1
 800bf44:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
    if(nm_spi_read_reg_with_ret(0x1000, &chipid) != M2M_SUCCESS) {
 800bf46:	1d3b      	adds	r3, r7, #4
 800bf48:	4619      	mov	r1, r3
 800bf4a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800bf4e:	f7ff fec6 	bl	800bcde <nm_spi_read_reg_with_ret>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d002      	beq.n	800bf5e <nm_spi_init+0x96>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
 800bf58:	f06f 0305 	mvn.w	r3, #5
 800bf5c:	e002      	b.n	800bf64 <nm_spi_init+0x9c>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
 800bf5e:	f7ff ff99 	bl	800be94 <spi_init_pkt_sz>


	return M2M_SUCCESS;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	200030c0 	.word	0x200030c0

0800bf70 <nm_spi_deinit>:
*	@fn		nm_spi_init
*	@brief	DeInitialize the SPI 
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
*/ 
sint8 nm_spi_deinit(void)
{
 800bf70:	b480      	push	{r7}
 800bf72:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
 800bf74:	4b04      	ldr	r3, [pc, #16]	@ (800bf88 <nm_spi_deinit+0x18>)
 800bf76:	2200      	movs	r2, #0
 800bf78:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	200030c0 	.word	0x200030c0

0800bf8c <nm_spi_read_reg>:
*	@param [in]	u32Addr
*				Register address
*	@return	Register value
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

    nm_spi_read_reg_with_ret(u32Addr, &u32Val);
 800bf94:	f107 030c 	add.w	r3, r7, #12
 800bf98:	4619      	mov	r1, r3
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f7ff fe9f 	bl	800bcde <nm_spi_read_reg_with_ret>

	return u32Val;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b086      	sub	sp, #24
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	60f8      	str	r0, [r7, #12]
 800bfb2:	60b9      	str	r1, [r7, #8]
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 800bfb8:	88fb      	ldrh	r3, [r7, #6]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	68b9      	ldr	r1, [r7, #8]
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f7ff fefb 	bl	800bdba <nm_spi_read>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800bfc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d102      	bne.n	800bfd6 <nm_spi_read_block+0x2c>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	75fb      	strb	r3, [r7, #23]
 800bfd4:	e001      	b.n	800bfda <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800bfd6:	23fa      	movs	r3, #250	@ 0xfa
 800bfd8:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800bfda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3718      	adds	r7, #24
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b086      	sub	sp, #24
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	60f8      	str	r0, [r7, #12]
 800bfee:	60b9      	str	r1, [r7, #8]
 800bff0:	4613      	mov	r3, r2
 800bff2:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 800bff4:	88fb      	ldrh	r3, [r7, #6]
 800bff6:	461a      	mov	r2, r3
 800bff8:	68b9      	ldr	r1, [r7, #8]
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f7ff fe0b 	bl	800bc16 <nm_spi_write>
 800c000:	4603      	mov	r3, r0
 800c002:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800c004:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d102      	bne.n	800c012 <nm_spi_write_block+0x2c>
 800c00c:	2300      	movs	r3, #0
 800c00e:	75fb      	strb	r3, [r7, #23]
 800c010:	e001      	b.n	800c016 <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800c012:	23fa      	movs	r3, #250	@ 0xfa
 800c014:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800c016:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3718      	adds	r7, #24
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
	...

0800c024 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800c02a:	463b      	mov	r3, r7
 800c02c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	22b9      	movs	r2, #185	@ 0xb9
 800c032:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800c034:	2100      	movs	r1, #0
 800c036:	4810      	ldr	r0, [pc, #64]	@ (800c078 <spi_flash_enter_low_power_mode+0x54>)
 800c038:	f7ff f878 	bl	800b12c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	4619      	mov	r1, r3
 800c042:	480e      	ldr	r0, [pc, #56]	@ (800c07c <spi_flash_enter_low_power_mode+0x58>)
 800c044:	f7ff f872 	bl	800b12c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800c048:	2101      	movs	r1, #1
 800c04a:	480d      	ldr	r0, [pc, #52]	@ (800c080 <spi_flash_enter_low_power_mode+0x5c>)
 800c04c:	f7ff f86e 	bl	800b12c <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800c050:	2100      	movs	r1, #0
 800c052:	480c      	ldr	r0, [pc, #48]	@ (800c084 <spi_flash_enter_low_power_mode+0x60>)
 800c054:	f7ff f86a 	bl	800b12c <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
 800c058:	2181      	movs	r1, #129	@ 0x81
 800c05a:	480b      	ldr	r0, [pc, #44]	@ (800c088 <spi_flash_enter_low_power_mode+0x64>)
 800c05c:	f7ff f866 	bl	800b12c <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800c060:	bf00      	nop
 800c062:	480a      	ldr	r0, [pc, #40]	@ (800c08c <spi_flash_enter_low_power_mode+0x68>)
 800c064:	f7ff f848 	bl	800b0f8 <nm_read_reg>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d1f9      	bne.n	800c062 <spi_flash_enter_low_power_mode+0x3e>
}
 800c06e:	bf00      	nop
 800c070:	bf00      	nop
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	00010208 	.word	0x00010208
 800c07c:	0001020c 	.word	0x0001020c
 800c080:	00010214 	.word	0x00010214
 800c084:	0001021c 	.word	0x0001021c
 800c088:	00010204 	.word	0x00010204
 800c08c:	00010218 	.word	0x00010218

0800c090 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800c096:	463b      	mov	r3, r7
 800c098:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	22ab      	movs	r2, #171	@ 0xab
 800c09e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	4810      	ldr	r0, [pc, #64]	@ (800c0e4 <spi_flash_leave_low_power_mode+0x54>)
 800c0a4:	f7ff f842 	bl	800b12c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	480e      	ldr	r0, [pc, #56]	@ (800c0e8 <spi_flash_leave_low_power_mode+0x58>)
 800c0b0:	f7ff f83c 	bl	800b12c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800c0b4:	2101      	movs	r1, #1
 800c0b6:	480d      	ldr	r0, [pc, #52]	@ (800c0ec <spi_flash_leave_low_power_mode+0x5c>)
 800c0b8:	f7ff f838 	bl	800b12c <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800c0bc:	2100      	movs	r1, #0
 800c0be:	480c      	ldr	r0, [pc, #48]	@ (800c0f0 <spi_flash_leave_low_power_mode+0x60>)
 800c0c0:	f7ff f834 	bl	800b12c <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
 800c0c4:	2181      	movs	r1, #129	@ 0x81
 800c0c6:	480b      	ldr	r0, [pc, #44]	@ (800c0f4 <spi_flash_leave_low_power_mode+0x64>)
 800c0c8:	f7ff f830 	bl	800b12c <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800c0cc:	bf00      	nop
 800c0ce:	480a      	ldr	r0, [pc, #40]	@ (800c0f8 <spi_flash_leave_low_power_mode+0x68>)
 800c0d0:	f7ff f812 	bl	800b0f8 <nm_read_reg>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d1f9      	bne.n	800c0ce <spi_flash_leave_low_power_mode+0x3e>
}
 800c0da:	bf00      	nop
 800c0dc:	bf00      	nop
 800c0de:	3708      	adds	r7, #8
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	00010208 	.word	0x00010208
 800c0e8:	0001020c 	.word	0x0001020c
 800c0ec:	00010214 	.word	0x00010214
 800c0f0:	0001021c 	.word	0x0001021c
 800c0f4:	00010204 	.word	0x00010204
 800c0f8:	00010218 	.word	0x00010218

0800c0fc <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	4603      	mov	r3, r0
 800c104:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = M2M_SUCCESS;
 800c106:	2300      	movs	r3, #0
 800c108:	73fb      	strb	r3, [r7, #15]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
 800c10a:	f7fe fd73 	bl	800abf4 <nmi_get_chipid>
 800c10e:	4603      	mov	r3, r0
 800c110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c114:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 800c118:	d331      	bcc.n	800c17e <spi_flash_enable+0x82>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
 800c11a:	f107 0308 	add.w	r3, r7, #8
 800c11e:	4619      	mov	r1, r3
 800c120:	f241 4010 	movw	r0, #5136	@ 0x1410
 800c124:	f7fe fff4 	bl	800b110 <nm_read_reg_with_ret>
 800c128:	4603      	mov	r3, r0
 800c12a:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != M2M_SUCCESS) {
 800c12c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d126      	bne.n	800c182 <spi_flash_enable+0x86>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	f023 63ee 	bic.w	r3, r3, #124780544	@ 0x7700000
 800c13a:	f423 23ee 	bic.w	r3, r3, #487424	@ 0x77000
 800c13e:	60bb      	str	r3, [r7, #8]
		if(enable) {
 800c140:	79fb      	ldrb	r3, [r7, #7]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00e      	beq.n	800c164 <spi_flash_enable+0x68>
			u32Val |= ((0x1111ul) << 12);
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	f043 7388 	orr.w	r3, r3, #17825792	@ 0x1100000
 800c14c:	f443 3388 	orr.w	r3, r3, #69632	@ 0x11000
 800c150:	60bb      	str	r3, [r7, #8]
			nm_write_reg(0x1410, u32Val);
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	4619      	mov	r1, r3
 800c156:	f241 4010 	movw	r0, #5136	@ 0x1410
 800c15a:	f7fe ffe7 	bl	800b12c <nm_write_reg>
			spi_flash_leave_low_power_mode();
 800c15e:	f7ff ff97 	bl	800c090 <spi_flash_leave_low_power_mode>
 800c162:	e00f      	b.n	800c184 <spi_flash_enable+0x88>
		} else {
			spi_flash_enter_low_power_mode();
 800c164:	f7ff ff5e 	bl	800c024 <spi_flash_enter_low_power_mode>
			/* Disable pinmux to SPI flash to minimize leakage. */
			u32Val |= ((0x0010ul) << 12);
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c16e:	60bb      	str	r3, [r7, #8]
			nm_write_reg(0x1410, u32Val);
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	4619      	mov	r1, r3
 800c174:	f241 4010 	movw	r0, #5136	@ 0x1410
 800c178:	f7fe ffd8 	bl	800b12c <nm_write_reg>
 800c17c:	e002      	b.n	800c184 <spi_flash_enable+0x88>
		}
	}
ERR1:
 800c17e:	bf00      	nop
 800c180:	e000      	b.n	800c184 <spi_flash_enable+0x88>
			goto ERR1;
 800c182:	bf00      	nop
	return s8Ret;
 800c184:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <malloc>:
 800c190:	4b02      	ldr	r3, [pc, #8]	@ (800c19c <malloc+0xc>)
 800c192:	4601      	mov	r1, r0
 800c194:	6818      	ldr	r0, [r3, #0]
 800c196:	f000 b82d 	b.w	800c1f4 <_malloc_r>
 800c19a:	bf00      	nop
 800c19c:	20000038 	.word	0x20000038

0800c1a0 <free>:
 800c1a0:	4b02      	ldr	r3, [pc, #8]	@ (800c1ac <free+0xc>)
 800c1a2:	4601      	mov	r1, r0
 800c1a4:	6818      	ldr	r0, [r3, #0]
 800c1a6:	f000 bb53 	b.w	800c850 <_free_r>
 800c1aa:	bf00      	nop
 800c1ac:	20000038 	.word	0x20000038

0800c1b0 <sbrk_aligned>:
 800c1b0:	b570      	push	{r4, r5, r6, lr}
 800c1b2:	4e0f      	ldr	r6, [pc, #60]	@ (800c1f0 <sbrk_aligned+0x40>)
 800c1b4:	460c      	mov	r4, r1
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	6831      	ldr	r1, [r6, #0]
 800c1ba:	b911      	cbnz	r1, 800c1c2 <sbrk_aligned+0x12>
 800c1bc:	f000 faec 	bl	800c798 <_sbrk_r>
 800c1c0:	6030      	str	r0, [r6, #0]
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	f000 fae7 	bl	800c798 <_sbrk_r>
 800c1ca:	1c43      	adds	r3, r0, #1
 800c1cc:	d103      	bne.n	800c1d6 <sbrk_aligned+0x26>
 800c1ce:	f04f 34ff 	mov.w	r4, #4294967295
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	bd70      	pop	{r4, r5, r6, pc}
 800c1d6:	1cc4      	adds	r4, r0, #3
 800c1d8:	f024 0403 	bic.w	r4, r4, #3
 800c1dc:	42a0      	cmp	r0, r4
 800c1de:	d0f8      	beq.n	800c1d2 <sbrk_aligned+0x22>
 800c1e0:	1a21      	subs	r1, r4, r0
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	f000 fad8 	bl	800c798 <_sbrk_r>
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	d1f2      	bne.n	800c1d2 <sbrk_aligned+0x22>
 800c1ec:	e7ef      	b.n	800c1ce <sbrk_aligned+0x1e>
 800c1ee:	bf00      	nop
 800c1f0:	200030c4 	.word	0x200030c4

0800c1f4 <_malloc_r>:
 800c1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1f8:	1ccd      	adds	r5, r1, #3
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	f025 0503 	bic.w	r5, r5, #3
 800c200:	3508      	adds	r5, #8
 800c202:	2d0c      	cmp	r5, #12
 800c204:	bf38      	it	cc
 800c206:	250c      	movcc	r5, #12
 800c208:	2d00      	cmp	r5, #0
 800c20a:	db01      	blt.n	800c210 <_malloc_r+0x1c>
 800c20c:	42a9      	cmp	r1, r5
 800c20e:	d904      	bls.n	800c21a <_malloc_r+0x26>
 800c210:	230c      	movs	r3, #12
 800c212:	6033      	str	r3, [r6, #0]
 800c214:	2000      	movs	r0, #0
 800c216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c21a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c2f0 <_malloc_r+0xfc>
 800c21e:	f000 f869 	bl	800c2f4 <__malloc_lock>
 800c222:	f8d8 3000 	ldr.w	r3, [r8]
 800c226:	461c      	mov	r4, r3
 800c228:	bb44      	cbnz	r4, 800c27c <_malloc_r+0x88>
 800c22a:	4629      	mov	r1, r5
 800c22c:	4630      	mov	r0, r6
 800c22e:	f7ff ffbf 	bl	800c1b0 <sbrk_aligned>
 800c232:	1c43      	adds	r3, r0, #1
 800c234:	4604      	mov	r4, r0
 800c236:	d158      	bne.n	800c2ea <_malloc_r+0xf6>
 800c238:	f8d8 4000 	ldr.w	r4, [r8]
 800c23c:	4627      	mov	r7, r4
 800c23e:	2f00      	cmp	r7, #0
 800c240:	d143      	bne.n	800c2ca <_malloc_r+0xd6>
 800c242:	2c00      	cmp	r4, #0
 800c244:	d04b      	beq.n	800c2de <_malloc_r+0xea>
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	4639      	mov	r1, r7
 800c24a:	4630      	mov	r0, r6
 800c24c:	eb04 0903 	add.w	r9, r4, r3
 800c250:	f000 faa2 	bl	800c798 <_sbrk_r>
 800c254:	4581      	cmp	r9, r0
 800c256:	d142      	bne.n	800c2de <_malloc_r+0xea>
 800c258:	6821      	ldr	r1, [r4, #0]
 800c25a:	4630      	mov	r0, r6
 800c25c:	1a6d      	subs	r5, r5, r1
 800c25e:	4629      	mov	r1, r5
 800c260:	f7ff ffa6 	bl	800c1b0 <sbrk_aligned>
 800c264:	3001      	adds	r0, #1
 800c266:	d03a      	beq.n	800c2de <_malloc_r+0xea>
 800c268:	6823      	ldr	r3, [r4, #0]
 800c26a:	442b      	add	r3, r5
 800c26c:	6023      	str	r3, [r4, #0]
 800c26e:	f8d8 3000 	ldr.w	r3, [r8]
 800c272:	685a      	ldr	r2, [r3, #4]
 800c274:	bb62      	cbnz	r2, 800c2d0 <_malloc_r+0xdc>
 800c276:	f8c8 7000 	str.w	r7, [r8]
 800c27a:	e00f      	b.n	800c29c <_malloc_r+0xa8>
 800c27c:	6822      	ldr	r2, [r4, #0]
 800c27e:	1b52      	subs	r2, r2, r5
 800c280:	d420      	bmi.n	800c2c4 <_malloc_r+0xd0>
 800c282:	2a0b      	cmp	r2, #11
 800c284:	d917      	bls.n	800c2b6 <_malloc_r+0xc2>
 800c286:	1961      	adds	r1, r4, r5
 800c288:	42a3      	cmp	r3, r4
 800c28a:	6025      	str	r5, [r4, #0]
 800c28c:	bf18      	it	ne
 800c28e:	6059      	strne	r1, [r3, #4]
 800c290:	6863      	ldr	r3, [r4, #4]
 800c292:	bf08      	it	eq
 800c294:	f8c8 1000 	streq.w	r1, [r8]
 800c298:	5162      	str	r2, [r4, r5]
 800c29a:	604b      	str	r3, [r1, #4]
 800c29c:	4630      	mov	r0, r6
 800c29e:	f000 f82f 	bl	800c300 <__malloc_unlock>
 800c2a2:	f104 000b 	add.w	r0, r4, #11
 800c2a6:	1d23      	adds	r3, r4, #4
 800c2a8:	f020 0007 	bic.w	r0, r0, #7
 800c2ac:	1ac2      	subs	r2, r0, r3
 800c2ae:	bf1c      	itt	ne
 800c2b0:	1a1b      	subne	r3, r3, r0
 800c2b2:	50a3      	strne	r3, [r4, r2]
 800c2b4:	e7af      	b.n	800c216 <_malloc_r+0x22>
 800c2b6:	6862      	ldr	r2, [r4, #4]
 800c2b8:	42a3      	cmp	r3, r4
 800c2ba:	bf0c      	ite	eq
 800c2bc:	f8c8 2000 	streq.w	r2, [r8]
 800c2c0:	605a      	strne	r2, [r3, #4]
 800c2c2:	e7eb      	b.n	800c29c <_malloc_r+0xa8>
 800c2c4:	4623      	mov	r3, r4
 800c2c6:	6864      	ldr	r4, [r4, #4]
 800c2c8:	e7ae      	b.n	800c228 <_malloc_r+0x34>
 800c2ca:	463c      	mov	r4, r7
 800c2cc:	687f      	ldr	r7, [r7, #4]
 800c2ce:	e7b6      	b.n	800c23e <_malloc_r+0x4a>
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	42a3      	cmp	r3, r4
 800c2d6:	d1fb      	bne.n	800c2d0 <_malloc_r+0xdc>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	6053      	str	r3, [r2, #4]
 800c2dc:	e7de      	b.n	800c29c <_malloc_r+0xa8>
 800c2de:	230c      	movs	r3, #12
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	6033      	str	r3, [r6, #0]
 800c2e4:	f000 f80c 	bl	800c300 <__malloc_unlock>
 800c2e8:	e794      	b.n	800c214 <_malloc_r+0x20>
 800c2ea:	6005      	str	r5, [r0, #0]
 800c2ec:	e7d6      	b.n	800c29c <_malloc_r+0xa8>
 800c2ee:	bf00      	nop
 800c2f0:	200030c8 	.word	0x200030c8

0800c2f4 <__malloc_lock>:
 800c2f4:	4801      	ldr	r0, [pc, #4]	@ (800c2fc <__malloc_lock+0x8>)
 800c2f6:	f000 ba9c 	b.w	800c832 <__retarget_lock_acquire_recursive>
 800c2fa:	bf00      	nop
 800c2fc:	2000320c 	.word	0x2000320c

0800c300 <__malloc_unlock>:
 800c300:	4801      	ldr	r0, [pc, #4]	@ (800c308 <__malloc_unlock+0x8>)
 800c302:	f000 ba97 	b.w	800c834 <__retarget_lock_release_recursive>
 800c306:	bf00      	nop
 800c308:	2000320c 	.word	0x2000320c

0800c30c <std>:
 800c30c:	2300      	movs	r3, #0
 800c30e:	b510      	push	{r4, lr}
 800c310:	4604      	mov	r4, r0
 800c312:	6083      	str	r3, [r0, #8]
 800c314:	8181      	strh	r1, [r0, #12]
 800c316:	4619      	mov	r1, r3
 800c318:	6643      	str	r3, [r0, #100]	@ 0x64
 800c31a:	81c2      	strh	r2, [r0, #14]
 800c31c:	2208      	movs	r2, #8
 800c31e:	6183      	str	r3, [r0, #24]
 800c320:	e9c0 3300 	strd	r3, r3, [r0]
 800c324:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c328:	305c      	adds	r0, #92	@ 0x5c
 800c32a:	f000 f9f9 	bl	800c720 <memset>
 800c32e:	4b0d      	ldr	r3, [pc, #52]	@ (800c364 <std+0x58>)
 800c330:	6224      	str	r4, [r4, #32]
 800c332:	6263      	str	r3, [r4, #36]	@ 0x24
 800c334:	4b0c      	ldr	r3, [pc, #48]	@ (800c368 <std+0x5c>)
 800c336:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c338:	4b0c      	ldr	r3, [pc, #48]	@ (800c36c <std+0x60>)
 800c33a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c33c:	4b0c      	ldr	r3, [pc, #48]	@ (800c370 <std+0x64>)
 800c33e:	6323      	str	r3, [r4, #48]	@ 0x30
 800c340:	4b0c      	ldr	r3, [pc, #48]	@ (800c374 <std+0x68>)
 800c342:	429c      	cmp	r4, r3
 800c344:	d006      	beq.n	800c354 <std+0x48>
 800c346:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c34a:	4294      	cmp	r4, r2
 800c34c:	d002      	beq.n	800c354 <std+0x48>
 800c34e:	33d0      	adds	r3, #208	@ 0xd0
 800c350:	429c      	cmp	r4, r3
 800c352:	d105      	bne.n	800c360 <std+0x54>
 800c354:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c35c:	f000 ba68 	b.w	800c830 <__retarget_lock_init_recursive>
 800c360:	bd10      	pop	{r4, pc}
 800c362:	bf00      	nop
 800c364:	0800c571 	.word	0x0800c571
 800c368:	0800c593 	.word	0x0800c593
 800c36c:	0800c5cb 	.word	0x0800c5cb
 800c370:	0800c5ef 	.word	0x0800c5ef
 800c374:	200030cc 	.word	0x200030cc

0800c378 <stdio_exit_handler>:
 800c378:	4a02      	ldr	r2, [pc, #8]	@ (800c384 <stdio_exit_handler+0xc>)
 800c37a:	4903      	ldr	r1, [pc, #12]	@ (800c388 <stdio_exit_handler+0x10>)
 800c37c:	4803      	ldr	r0, [pc, #12]	@ (800c38c <stdio_exit_handler+0x14>)
 800c37e:	f000 b869 	b.w	800c454 <_fwalk_sglue>
 800c382:	bf00      	nop
 800c384:	2000002c 	.word	0x2000002c
 800c388:	0800cf91 	.word	0x0800cf91
 800c38c:	2000003c 	.word	0x2000003c

0800c390 <cleanup_stdio>:
 800c390:	6841      	ldr	r1, [r0, #4]
 800c392:	4b0c      	ldr	r3, [pc, #48]	@ (800c3c4 <cleanup_stdio+0x34>)
 800c394:	4299      	cmp	r1, r3
 800c396:	b510      	push	{r4, lr}
 800c398:	4604      	mov	r4, r0
 800c39a:	d001      	beq.n	800c3a0 <cleanup_stdio+0x10>
 800c39c:	f000 fdf8 	bl	800cf90 <_fflush_r>
 800c3a0:	68a1      	ldr	r1, [r4, #8]
 800c3a2:	4b09      	ldr	r3, [pc, #36]	@ (800c3c8 <cleanup_stdio+0x38>)
 800c3a4:	4299      	cmp	r1, r3
 800c3a6:	d002      	beq.n	800c3ae <cleanup_stdio+0x1e>
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f000 fdf1 	bl	800cf90 <_fflush_r>
 800c3ae:	68e1      	ldr	r1, [r4, #12]
 800c3b0:	4b06      	ldr	r3, [pc, #24]	@ (800c3cc <cleanup_stdio+0x3c>)
 800c3b2:	4299      	cmp	r1, r3
 800c3b4:	d004      	beq.n	800c3c0 <cleanup_stdio+0x30>
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3bc:	f000 bde8 	b.w	800cf90 <_fflush_r>
 800c3c0:	bd10      	pop	{r4, pc}
 800c3c2:	bf00      	nop
 800c3c4:	200030cc 	.word	0x200030cc
 800c3c8:	20003134 	.word	0x20003134
 800c3cc:	2000319c 	.word	0x2000319c

0800c3d0 <global_stdio_init.part.0>:
 800c3d0:	b510      	push	{r4, lr}
 800c3d2:	4b0b      	ldr	r3, [pc, #44]	@ (800c400 <global_stdio_init.part.0+0x30>)
 800c3d4:	2104      	movs	r1, #4
 800c3d6:	4c0b      	ldr	r4, [pc, #44]	@ (800c404 <global_stdio_init.part.0+0x34>)
 800c3d8:	4a0b      	ldr	r2, [pc, #44]	@ (800c408 <global_stdio_init.part.0+0x38>)
 800c3da:	4620      	mov	r0, r4
 800c3dc:	601a      	str	r2, [r3, #0]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f7ff ff94 	bl	800c30c <std>
 800c3e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	2109      	movs	r1, #9
 800c3ec:	f7ff ff8e 	bl	800c30c <std>
 800c3f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c3f4:	2202      	movs	r2, #2
 800c3f6:	2112      	movs	r1, #18
 800c3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3fc:	f7ff bf86 	b.w	800c30c <std>
 800c400:	20003204 	.word	0x20003204
 800c404:	200030cc 	.word	0x200030cc
 800c408:	0800c379 	.word	0x0800c379

0800c40c <__sfp_lock_acquire>:
 800c40c:	4801      	ldr	r0, [pc, #4]	@ (800c414 <__sfp_lock_acquire+0x8>)
 800c40e:	f000 ba10 	b.w	800c832 <__retarget_lock_acquire_recursive>
 800c412:	bf00      	nop
 800c414:	2000320d 	.word	0x2000320d

0800c418 <__sfp_lock_release>:
 800c418:	4801      	ldr	r0, [pc, #4]	@ (800c420 <__sfp_lock_release+0x8>)
 800c41a:	f000 ba0b 	b.w	800c834 <__retarget_lock_release_recursive>
 800c41e:	bf00      	nop
 800c420:	2000320d 	.word	0x2000320d

0800c424 <__sinit>:
 800c424:	b510      	push	{r4, lr}
 800c426:	4604      	mov	r4, r0
 800c428:	f7ff fff0 	bl	800c40c <__sfp_lock_acquire>
 800c42c:	6a23      	ldr	r3, [r4, #32]
 800c42e:	b11b      	cbz	r3, 800c438 <__sinit+0x14>
 800c430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c434:	f7ff bff0 	b.w	800c418 <__sfp_lock_release>
 800c438:	4b04      	ldr	r3, [pc, #16]	@ (800c44c <__sinit+0x28>)
 800c43a:	6223      	str	r3, [r4, #32]
 800c43c:	4b04      	ldr	r3, [pc, #16]	@ (800c450 <__sinit+0x2c>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1f5      	bne.n	800c430 <__sinit+0xc>
 800c444:	f7ff ffc4 	bl	800c3d0 <global_stdio_init.part.0>
 800c448:	e7f2      	b.n	800c430 <__sinit+0xc>
 800c44a:	bf00      	nop
 800c44c:	0800c391 	.word	0x0800c391
 800c450:	20003204 	.word	0x20003204

0800c454 <_fwalk_sglue>:
 800c454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c458:	4607      	mov	r7, r0
 800c45a:	4688      	mov	r8, r1
 800c45c:	4614      	mov	r4, r2
 800c45e:	2600      	movs	r6, #0
 800c460:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c464:	f1b9 0901 	subs.w	r9, r9, #1
 800c468:	d505      	bpl.n	800c476 <_fwalk_sglue+0x22>
 800c46a:	6824      	ldr	r4, [r4, #0]
 800c46c:	2c00      	cmp	r4, #0
 800c46e:	d1f7      	bne.n	800c460 <_fwalk_sglue+0xc>
 800c470:	4630      	mov	r0, r6
 800c472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c476:	89ab      	ldrh	r3, [r5, #12]
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d907      	bls.n	800c48c <_fwalk_sglue+0x38>
 800c47c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c480:	3301      	adds	r3, #1
 800c482:	d003      	beq.n	800c48c <_fwalk_sglue+0x38>
 800c484:	4629      	mov	r1, r5
 800c486:	4638      	mov	r0, r7
 800c488:	47c0      	blx	r8
 800c48a:	4306      	orrs	r6, r0
 800c48c:	3568      	adds	r5, #104	@ 0x68
 800c48e:	e7e9      	b.n	800c464 <_fwalk_sglue+0x10>

0800c490 <iprintf>:
 800c490:	b40f      	push	{r0, r1, r2, r3}
 800c492:	b507      	push	{r0, r1, r2, lr}
 800c494:	4906      	ldr	r1, [pc, #24]	@ (800c4b0 <iprintf+0x20>)
 800c496:	ab04      	add	r3, sp, #16
 800c498:	6808      	ldr	r0, [r1, #0]
 800c49a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c49e:	6881      	ldr	r1, [r0, #8]
 800c4a0:	9301      	str	r3, [sp, #4]
 800c4a2:	f000 fa49 	bl	800c938 <_vfiprintf_r>
 800c4a6:	b003      	add	sp, #12
 800c4a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4ac:	b004      	add	sp, #16
 800c4ae:	4770      	bx	lr
 800c4b0:	20000038 	.word	0x20000038

0800c4b4 <_puts_r>:
 800c4b4:	6a03      	ldr	r3, [r0, #32]
 800c4b6:	b570      	push	{r4, r5, r6, lr}
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	460e      	mov	r6, r1
 800c4bc:	6884      	ldr	r4, [r0, #8]
 800c4be:	b90b      	cbnz	r3, 800c4c4 <_puts_r+0x10>
 800c4c0:	f7ff ffb0 	bl	800c424 <__sinit>
 800c4c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4c6:	07db      	lsls	r3, r3, #31
 800c4c8:	d405      	bmi.n	800c4d6 <_puts_r+0x22>
 800c4ca:	89a3      	ldrh	r3, [r4, #12]
 800c4cc:	0598      	lsls	r0, r3, #22
 800c4ce:	d402      	bmi.n	800c4d6 <_puts_r+0x22>
 800c4d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4d2:	f000 f9ae 	bl	800c832 <__retarget_lock_acquire_recursive>
 800c4d6:	89a3      	ldrh	r3, [r4, #12]
 800c4d8:	0719      	lsls	r1, r3, #28
 800c4da:	d502      	bpl.n	800c4e2 <_puts_r+0x2e>
 800c4dc:	6923      	ldr	r3, [r4, #16]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d135      	bne.n	800c54e <_puts_r+0x9a>
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	f000 f8c5 	bl	800c674 <__swsetup_r>
 800c4ea:	b380      	cbz	r0, 800c54e <_puts_r+0x9a>
 800c4ec:	f04f 35ff 	mov.w	r5, #4294967295
 800c4f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4f2:	07da      	lsls	r2, r3, #31
 800c4f4:	d405      	bmi.n	800c502 <_puts_r+0x4e>
 800c4f6:	89a3      	ldrh	r3, [r4, #12]
 800c4f8:	059b      	lsls	r3, r3, #22
 800c4fa:	d402      	bmi.n	800c502 <_puts_r+0x4e>
 800c4fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4fe:	f000 f999 	bl	800c834 <__retarget_lock_release_recursive>
 800c502:	4628      	mov	r0, r5
 800c504:	bd70      	pop	{r4, r5, r6, pc}
 800c506:	2b00      	cmp	r3, #0
 800c508:	da04      	bge.n	800c514 <_puts_r+0x60>
 800c50a:	69a2      	ldr	r2, [r4, #24]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	dc17      	bgt.n	800c540 <_puts_r+0x8c>
 800c510:	290a      	cmp	r1, #10
 800c512:	d015      	beq.n	800c540 <_puts_r+0x8c>
 800c514:	6823      	ldr	r3, [r4, #0]
 800c516:	1c5a      	adds	r2, r3, #1
 800c518:	6022      	str	r2, [r4, #0]
 800c51a:	7019      	strb	r1, [r3, #0]
 800c51c:	68a3      	ldr	r3, [r4, #8]
 800c51e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c522:	3b01      	subs	r3, #1
 800c524:	60a3      	str	r3, [r4, #8]
 800c526:	2900      	cmp	r1, #0
 800c528:	d1ed      	bne.n	800c506 <_puts_r+0x52>
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	da11      	bge.n	800c552 <_puts_r+0x9e>
 800c52e:	4622      	mov	r2, r4
 800c530:	210a      	movs	r1, #10
 800c532:	4628      	mov	r0, r5
 800c534:	f000 f85f 	bl	800c5f6 <__swbuf_r>
 800c538:	3001      	adds	r0, #1
 800c53a:	d0d7      	beq.n	800c4ec <_puts_r+0x38>
 800c53c:	250a      	movs	r5, #10
 800c53e:	e7d7      	b.n	800c4f0 <_puts_r+0x3c>
 800c540:	4622      	mov	r2, r4
 800c542:	4628      	mov	r0, r5
 800c544:	f000 f857 	bl	800c5f6 <__swbuf_r>
 800c548:	3001      	adds	r0, #1
 800c54a:	d1e7      	bne.n	800c51c <_puts_r+0x68>
 800c54c:	e7ce      	b.n	800c4ec <_puts_r+0x38>
 800c54e:	3e01      	subs	r6, #1
 800c550:	e7e4      	b.n	800c51c <_puts_r+0x68>
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	1c5a      	adds	r2, r3, #1
 800c556:	6022      	str	r2, [r4, #0]
 800c558:	220a      	movs	r2, #10
 800c55a:	701a      	strb	r2, [r3, #0]
 800c55c:	e7ee      	b.n	800c53c <_puts_r+0x88>
	...

0800c560 <puts>:
 800c560:	4b02      	ldr	r3, [pc, #8]	@ (800c56c <puts+0xc>)
 800c562:	4601      	mov	r1, r0
 800c564:	6818      	ldr	r0, [r3, #0]
 800c566:	f7ff bfa5 	b.w	800c4b4 <_puts_r>
 800c56a:	bf00      	nop
 800c56c:	20000038 	.word	0x20000038

0800c570 <__sread>:
 800c570:	b510      	push	{r4, lr}
 800c572:	460c      	mov	r4, r1
 800c574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c578:	f000 f8fc 	bl	800c774 <_read_r>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	bfab      	itete	ge
 800c580:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c582:	89a3      	ldrhlt	r3, [r4, #12]
 800c584:	181b      	addge	r3, r3, r0
 800c586:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c58a:	bfac      	ite	ge
 800c58c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c58e:	81a3      	strhlt	r3, [r4, #12]
 800c590:	bd10      	pop	{r4, pc}

0800c592 <__swrite>:
 800c592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c596:	461f      	mov	r7, r3
 800c598:	898b      	ldrh	r3, [r1, #12]
 800c59a:	4605      	mov	r5, r0
 800c59c:	460c      	mov	r4, r1
 800c59e:	05db      	lsls	r3, r3, #23
 800c5a0:	4616      	mov	r6, r2
 800c5a2:	d505      	bpl.n	800c5b0 <__swrite+0x1e>
 800c5a4:	2302      	movs	r3, #2
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ac:	f000 f8d0 	bl	800c750 <_lseek_r>
 800c5b0:	89a3      	ldrh	r3, [r4, #12]
 800c5b2:	4632      	mov	r2, r6
 800c5b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c5be:	81a3      	strh	r3, [r4, #12]
 800c5c0:	463b      	mov	r3, r7
 800c5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c6:	f000 b8f7 	b.w	800c7b8 <_write_r>

0800c5ca <__sseek>:
 800c5ca:	b510      	push	{r4, lr}
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d2:	f000 f8bd 	bl	800c750 <_lseek_r>
 800c5d6:	1c43      	adds	r3, r0, #1
 800c5d8:	89a3      	ldrh	r3, [r4, #12]
 800c5da:	bf15      	itete	ne
 800c5dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c5de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c5e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c5e6:	81a3      	strheq	r3, [r4, #12]
 800c5e8:	bf18      	it	ne
 800c5ea:	81a3      	strhne	r3, [r4, #12]
 800c5ec:	bd10      	pop	{r4, pc}

0800c5ee <__sclose>:
 800c5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5f2:	f000 b89d 	b.w	800c730 <_close_r>

0800c5f6 <__swbuf_r>:
 800c5f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f8:	460e      	mov	r6, r1
 800c5fa:	4614      	mov	r4, r2
 800c5fc:	4605      	mov	r5, r0
 800c5fe:	b118      	cbz	r0, 800c608 <__swbuf_r+0x12>
 800c600:	6a03      	ldr	r3, [r0, #32]
 800c602:	b90b      	cbnz	r3, 800c608 <__swbuf_r+0x12>
 800c604:	f7ff ff0e 	bl	800c424 <__sinit>
 800c608:	69a3      	ldr	r3, [r4, #24]
 800c60a:	60a3      	str	r3, [r4, #8]
 800c60c:	89a3      	ldrh	r3, [r4, #12]
 800c60e:	071a      	lsls	r2, r3, #28
 800c610:	d501      	bpl.n	800c616 <__swbuf_r+0x20>
 800c612:	6923      	ldr	r3, [r4, #16]
 800c614:	b943      	cbnz	r3, 800c628 <__swbuf_r+0x32>
 800c616:	4621      	mov	r1, r4
 800c618:	4628      	mov	r0, r5
 800c61a:	f000 f82b 	bl	800c674 <__swsetup_r>
 800c61e:	b118      	cbz	r0, 800c628 <__swbuf_r+0x32>
 800c620:	f04f 37ff 	mov.w	r7, #4294967295
 800c624:	4638      	mov	r0, r7
 800c626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c628:	6823      	ldr	r3, [r4, #0]
 800c62a:	b2f6      	uxtb	r6, r6
 800c62c:	6922      	ldr	r2, [r4, #16]
 800c62e:	4637      	mov	r7, r6
 800c630:	1a98      	subs	r0, r3, r2
 800c632:	6963      	ldr	r3, [r4, #20]
 800c634:	4283      	cmp	r3, r0
 800c636:	dc05      	bgt.n	800c644 <__swbuf_r+0x4e>
 800c638:	4621      	mov	r1, r4
 800c63a:	4628      	mov	r0, r5
 800c63c:	f000 fca8 	bl	800cf90 <_fflush_r>
 800c640:	2800      	cmp	r0, #0
 800c642:	d1ed      	bne.n	800c620 <__swbuf_r+0x2a>
 800c644:	68a3      	ldr	r3, [r4, #8]
 800c646:	3b01      	subs	r3, #1
 800c648:	60a3      	str	r3, [r4, #8]
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	1c5a      	adds	r2, r3, #1
 800c64e:	6022      	str	r2, [r4, #0]
 800c650:	701e      	strb	r6, [r3, #0]
 800c652:	1c43      	adds	r3, r0, #1
 800c654:	6962      	ldr	r2, [r4, #20]
 800c656:	429a      	cmp	r2, r3
 800c658:	d004      	beq.n	800c664 <__swbuf_r+0x6e>
 800c65a:	89a3      	ldrh	r3, [r4, #12]
 800c65c:	07db      	lsls	r3, r3, #31
 800c65e:	d5e1      	bpl.n	800c624 <__swbuf_r+0x2e>
 800c660:	2e0a      	cmp	r6, #10
 800c662:	d1df      	bne.n	800c624 <__swbuf_r+0x2e>
 800c664:	4621      	mov	r1, r4
 800c666:	4628      	mov	r0, r5
 800c668:	f000 fc92 	bl	800cf90 <_fflush_r>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d0d9      	beq.n	800c624 <__swbuf_r+0x2e>
 800c670:	e7d6      	b.n	800c620 <__swbuf_r+0x2a>
	...

0800c674 <__swsetup_r>:
 800c674:	b538      	push	{r3, r4, r5, lr}
 800c676:	4b29      	ldr	r3, [pc, #164]	@ (800c71c <__swsetup_r+0xa8>)
 800c678:	4605      	mov	r5, r0
 800c67a:	460c      	mov	r4, r1
 800c67c:	6818      	ldr	r0, [r3, #0]
 800c67e:	b118      	cbz	r0, 800c688 <__swsetup_r+0x14>
 800c680:	6a03      	ldr	r3, [r0, #32]
 800c682:	b90b      	cbnz	r3, 800c688 <__swsetup_r+0x14>
 800c684:	f7ff fece 	bl	800c424 <__sinit>
 800c688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c68c:	0719      	lsls	r1, r3, #28
 800c68e:	d422      	bmi.n	800c6d6 <__swsetup_r+0x62>
 800c690:	06da      	lsls	r2, r3, #27
 800c692:	d407      	bmi.n	800c6a4 <__swsetup_r+0x30>
 800c694:	2209      	movs	r2, #9
 800c696:	602a      	str	r2, [r5, #0]
 800c698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c69c:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a0:	81a3      	strh	r3, [r4, #12]
 800c6a2:	e033      	b.n	800c70c <__swsetup_r+0x98>
 800c6a4:	0758      	lsls	r0, r3, #29
 800c6a6:	d512      	bpl.n	800c6ce <__swsetup_r+0x5a>
 800c6a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6aa:	b141      	cbz	r1, 800c6be <__swsetup_r+0x4a>
 800c6ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6b0:	4299      	cmp	r1, r3
 800c6b2:	d002      	beq.n	800c6ba <__swsetup_r+0x46>
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	f000 f8cb 	bl	800c850 <_free_r>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c6be:	89a3      	ldrh	r3, [r4, #12]
 800c6c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c6c4:	81a3      	strh	r3, [r4, #12]
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	6063      	str	r3, [r4, #4]
 800c6ca:	6923      	ldr	r3, [r4, #16]
 800c6cc:	6023      	str	r3, [r4, #0]
 800c6ce:	89a3      	ldrh	r3, [r4, #12]
 800c6d0:	f043 0308 	orr.w	r3, r3, #8
 800c6d4:	81a3      	strh	r3, [r4, #12]
 800c6d6:	6923      	ldr	r3, [r4, #16]
 800c6d8:	b94b      	cbnz	r3, 800c6ee <__swsetup_r+0x7a>
 800c6da:	89a3      	ldrh	r3, [r4, #12]
 800c6dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c6e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6e4:	d003      	beq.n	800c6ee <__swsetup_r+0x7a>
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	f000 fc9e 	bl	800d02a <__smakebuf_r>
 800c6ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6f2:	f013 0201 	ands.w	r2, r3, #1
 800c6f6:	d00a      	beq.n	800c70e <__swsetup_r+0x9a>
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	60a2      	str	r2, [r4, #8]
 800c6fc:	6962      	ldr	r2, [r4, #20]
 800c6fe:	4252      	negs	r2, r2
 800c700:	61a2      	str	r2, [r4, #24]
 800c702:	6922      	ldr	r2, [r4, #16]
 800c704:	b942      	cbnz	r2, 800c718 <__swsetup_r+0xa4>
 800c706:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c70a:	d1c5      	bne.n	800c698 <__swsetup_r+0x24>
 800c70c:	bd38      	pop	{r3, r4, r5, pc}
 800c70e:	0799      	lsls	r1, r3, #30
 800c710:	bf58      	it	pl
 800c712:	6962      	ldrpl	r2, [r4, #20]
 800c714:	60a2      	str	r2, [r4, #8]
 800c716:	e7f4      	b.n	800c702 <__swsetup_r+0x8e>
 800c718:	2000      	movs	r0, #0
 800c71a:	e7f7      	b.n	800c70c <__swsetup_r+0x98>
 800c71c:	20000038 	.word	0x20000038

0800c720 <memset>:
 800c720:	4402      	add	r2, r0
 800c722:	4603      	mov	r3, r0
 800c724:	4293      	cmp	r3, r2
 800c726:	d100      	bne.n	800c72a <memset+0xa>
 800c728:	4770      	bx	lr
 800c72a:	f803 1b01 	strb.w	r1, [r3], #1
 800c72e:	e7f9      	b.n	800c724 <memset+0x4>

0800c730 <_close_r>:
 800c730:	b538      	push	{r3, r4, r5, lr}
 800c732:	2300      	movs	r3, #0
 800c734:	4d05      	ldr	r5, [pc, #20]	@ (800c74c <_close_r+0x1c>)
 800c736:	4604      	mov	r4, r0
 800c738:	4608      	mov	r0, r1
 800c73a:	602b      	str	r3, [r5, #0]
 800c73c:	f7f4 fdb3 	bl	80012a6 <_close>
 800c740:	1c43      	adds	r3, r0, #1
 800c742:	d102      	bne.n	800c74a <_close_r+0x1a>
 800c744:	682b      	ldr	r3, [r5, #0]
 800c746:	b103      	cbz	r3, 800c74a <_close_r+0x1a>
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	bd38      	pop	{r3, r4, r5, pc}
 800c74c:	20003208 	.word	0x20003208

0800c750 <_lseek_r>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	4604      	mov	r4, r0
 800c754:	4d06      	ldr	r5, [pc, #24]	@ (800c770 <_lseek_r+0x20>)
 800c756:	4608      	mov	r0, r1
 800c758:	4611      	mov	r1, r2
 800c75a:	2200      	movs	r2, #0
 800c75c:	602a      	str	r2, [r5, #0]
 800c75e:	461a      	mov	r2, r3
 800c760:	f7f4 fdc8 	bl	80012f4 <_lseek>
 800c764:	1c43      	adds	r3, r0, #1
 800c766:	d102      	bne.n	800c76e <_lseek_r+0x1e>
 800c768:	682b      	ldr	r3, [r5, #0]
 800c76a:	b103      	cbz	r3, 800c76e <_lseek_r+0x1e>
 800c76c:	6023      	str	r3, [r4, #0]
 800c76e:	bd38      	pop	{r3, r4, r5, pc}
 800c770:	20003208 	.word	0x20003208

0800c774 <_read_r>:
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	4604      	mov	r4, r0
 800c778:	4d06      	ldr	r5, [pc, #24]	@ (800c794 <_read_r+0x20>)
 800c77a:	4608      	mov	r0, r1
 800c77c:	4611      	mov	r1, r2
 800c77e:	2200      	movs	r2, #0
 800c780:	602a      	str	r2, [r5, #0]
 800c782:	461a      	mov	r2, r3
 800c784:	f7f4 fd56 	bl	8001234 <_read>
 800c788:	1c43      	adds	r3, r0, #1
 800c78a:	d102      	bne.n	800c792 <_read_r+0x1e>
 800c78c:	682b      	ldr	r3, [r5, #0]
 800c78e:	b103      	cbz	r3, 800c792 <_read_r+0x1e>
 800c790:	6023      	str	r3, [r4, #0]
 800c792:	bd38      	pop	{r3, r4, r5, pc}
 800c794:	20003208 	.word	0x20003208

0800c798 <_sbrk_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	2300      	movs	r3, #0
 800c79c:	4d05      	ldr	r5, [pc, #20]	@ (800c7b4 <_sbrk_r+0x1c>)
 800c79e:	4604      	mov	r4, r0
 800c7a0:	4608      	mov	r0, r1
 800c7a2:	602b      	str	r3, [r5, #0]
 800c7a4:	f7f4 fdb4 	bl	8001310 <_sbrk>
 800c7a8:	1c43      	adds	r3, r0, #1
 800c7aa:	d102      	bne.n	800c7b2 <_sbrk_r+0x1a>
 800c7ac:	682b      	ldr	r3, [r5, #0]
 800c7ae:	b103      	cbz	r3, 800c7b2 <_sbrk_r+0x1a>
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	bd38      	pop	{r3, r4, r5, pc}
 800c7b4:	20003208 	.word	0x20003208

0800c7b8 <_write_r>:
 800c7b8:	b538      	push	{r3, r4, r5, lr}
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	4d06      	ldr	r5, [pc, #24]	@ (800c7d8 <_write_r+0x20>)
 800c7be:	4608      	mov	r0, r1
 800c7c0:	4611      	mov	r1, r2
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	602a      	str	r2, [r5, #0]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	f7f4 fd51 	bl	800126e <_write>
 800c7cc:	1c43      	adds	r3, r0, #1
 800c7ce:	d102      	bne.n	800c7d6 <_write_r+0x1e>
 800c7d0:	682b      	ldr	r3, [r5, #0]
 800c7d2:	b103      	cbz	r3, 800c7d6 <_write_r+0x1e>
 800c7d4:	6023      	str	r3, [r4, #0]
 800c7d6:	bd38      	pop	{r3, r4, r5, pc}
 800c7d8:	20003208 	.word	0x20003208

0800c7dc <__errno>:
 800c7dc:	4b01      	ldr	r3, [pc, #4]	@ (800c7e4 <__errno+0x8>)
 800c7de:	6818      	ldr	r0, [r3, #0]
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	20000038 	.word	0x20000038

0800c7e8 <__libc_init_array>:
 800c7e8:	b570      	push	{r4, r5, r6, lr}
 800c7ea:	4d0d      	ldr	r5, [pc, #52]	@ (800c820 <__libc_init_array+0x38>)
 800c7ec:	2600      	movs	r6, #0
 800c7ee:	4c0d      	ldr	r4, [pc, #52]	@ (800c824 <__libc_init_array+0x3c>)
 800c7f0:	1b64      	subs	r4, r4, r5
 800c7f2:	10a4      	asrs	r4, r4, #2
 800c7f4:	42a6      	cmp	r6, r4
 800c7f6:	d109      	bne.n	800c80c <__libc_init_array+0x24>
 800c7f8:	4d0b      	ldr	r5, [pc, #44]	@ (800c828 <__libc_init_array+0x40>)
 800c7fa:	2600      	movs	r6, #0
 800c7fc:	4c0b      	ldr	r4, [pc, #44]	@ (800c82c <__libc_init_array+0x44>)
 800c7fe:	f000 fc81 	bl	800d104 <_init>
 800c802:	1b64      	subs	r4, r4, r5
 800c804:	10a4      	asrs	r4, r4, #2
 800c806:	42a6      	cmp	r6, r4
 800c808:	d105      	bne.n	800c816 <__libc_init_array+0x2e>
 800c80a:	bd70      	pop	{r4, r5, r6, pc}
 800c80c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c810:	3601      	adds	r6, #1
 800c812:	4798      	blx	r3
 800c814:	e7ee      	b.n	800c7f4 <__libc_init_array+0xc>
 800c816:	f855 3b04 	ldr.w	r3, [r5], #4
 800c81a:	3601      	adds	r6, #1
 800c81c:	4798      	blx	r3
 800c81e:	e7f2      	b.n	800c806 <__libc_init_array+0x1e>
 800c820:	0800d420 	.word	0x0800d420
 800c824:	0800d420 	.word	0x0800d420
 800c828:	0800d420 	.word	0x0800d420
 800c82c:	0800d424 	.word	0x0800d424

0800c830 <__retarget_lock_init_recursive>:
 800c830:	4770      	bx	lr

0800c832 <__retarget_lock_acquire_recursive>:
 800c832:	4770      	bx	lr

0800c834 <__retarget_lock_release_recursive>:
 800c834:	4770      	bx	lr

0800c836 <memcpy>:
 800c836:	440a      	add	r2, r1
 800c838:	1e43      	subs	r3, r0, #1
 800c83a:	4291      	cmp	r1, r2
 800c83c:	d100      	bne.n	800c840 <memcpy+0xa>
 800c83e:	4770      	bx	lr
 800c840:	b510      	push	{r4, lr}
 800c842:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c846:	4291      	cmp	r1, r2
 800c848:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c84c:	d1f9      	bne.n	800c842 <memcpy+0xc>
 800c84e:	bd10      	pop	{r4, pc}

0800c850 <_free_r>:
 800c850:	b538      	push	{r3, r4, r5, lr}
 800c852:	4605      	mov	r5, r0
 800c854:	2900      	cmp	r1, #0
 800c856:	d041      	beq.n	800c8dc <_free_r+0x8c>
 800c858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c85c:	1f0c      	subs	r4, r1, #4
 800c85e:	2b00      	cmp	r3, #0
 800c860:	bfb8      	it	lt
 800c862:	18e4      	addlt	r4, r4, r3
 800c864:	f7ff fd46 	bl	800c2f4 <__malloc_lock>
 800c868:	4a1d      	ldr	r2, [pc, #116]	@ (800c8e0 <_free_r+0x90>)
 800c86a:	6813      	ldr	r3, [r2, #0]
 800c86c:	b933      	cbnz	r3, 800c87c <_free_r+0x2c>
 800c86e:	6063      	str	r3, [r4, #4]
 800c870:	6014      	str	r4, [r2, #0]
 800c872:	4628      	mov	r0, r5
 800c874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c878:	f7ff bd42 	b.w	800c300 <__malloc_unlock>
 800c87c:	42a3      	cmp	r3, r4
 800c87e:	d908      	bls.n	800c892 <_free_r+0x42>
 800c880:	6820      	ldr	r0, [r4, #0]
 800c882:	1821      	adds	r1, r4, r0
 800c884:	428b      	cmp	r3, r1
 800c886:	bf01      	itttt	eq
 800c888:	6819      	ldreq	r1, [r3, #0]
 800c88a:	685b      	ldreq	r3, [r3, #4]
 800c88c:	1809      	addeq	r1, r1, r0
 800c88e:	6021      	streq	r1, [r4, #0]
 800c890:	e7ed      	b.n	800c86e <_free_r+0x1e>
 800c892:	461a      	mov	r2, r3
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	b10b      	cbz	r3, 800c89c <_free_r+0x4c>
 800c898:	42a3      	cmp	r3, r4
 800c89a:	d9fa      	bls.n	800c892 <_free_r+0x42>
 800c89c:	6811      	ldr	r1, [r2, #0]
 800c89e:	1850      	adds	r0, r2, r1
 800c8a0:	42a0      	cmp	r0, r4
 800c8a2:	d10b      	bne.n	800c8bc <_free_r+0x6c>
 800c8a4:	6820      	ldr	r0, [r4, #0]
 800c8a6:	4401      	add	r1, r0
 800c8a8:	1850      	adds	r0, r2, r1
 800c8aa:	6011      	str	r1, [r2, #0]
 800c8ac:	4283      	cmp	r3, r0
 800c8ae:	d1e0      	bne.n	800c872 <_free_r+0x22>
 800c8b0:	6818      	ldr	r0, [r3, #0]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	4408      	add	r0, r1
 800c8b6:	6053      	str	r3, [r2, #4]
 800c8b8:	6010      	str	r0, [r2, #0]
 800c8ba:	e7da      	b.n	800c872 <_free_r+0x22>
 800c8bc:	d902      	bls.n	800c8c4 <_free_r+0x74>
 800c8be:	230c      	movs	r3, #12
 800c8c0:	602b      	str	r3, [r5, #0]
 800c8c2:	e7d6      	b.n	800c872 <_free_r+0x22>
 800c8c4:	6820      	ldr	r0, [r4, #0]
 800c8c6:	1821      	adds	r1, r4, r0
 800c8c8:	428b      	cmp	r3, r1
 800c8ca:	bf02      	ittt	eq
 800c8cc:	6819      	ldreq	r1, [r3, #0]
 800c8ce:	685b      	ldreq	r3, [r3, #4]
 800c8d0:	1809      	addeq	r1, r1, r0
 800c8d2:	6063      	str	r3, [r4, #4]
 800c8d4:	bf08      	it	eq
 800c8d6:	6021      	streq	r1, [r4, #0]
 800c8d8:	6054      	str	r4, [r2, #4]
 800c8da:	e7ca      	b.n	800c872 <_free_r+0x22>
 800c8dc:	bd38      	pop	{r3, r4, r5, pc}
 800c8de:	bf00      	nop
 800c8e0:	200030c8 	.word	0x200030c8

0800c8e4 <__sfputc_r>:
 800c8e4:	6893      	ldr	r3, [r2, #8]
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	b410      	push	{r4}
 800c8ec:	6093      	str	r3, [r2, #8]
 800c8ee:	da08      	bge.n	800c902 <__sfputc_r+0x1e>
 800c8f0:	6994      	ldr	r4, [r2, #24]
 800c8f2:	42a3      	cmp	r3, r4
 800c8f4:	db01      	blt.n	800c8fa <__sfputc_r+0x16>
 800c8f6:	290a      	cmp	r1, #10
 800c8f8:	d103      	bne.n	800c902 <__sfputc_r+0x1e>
 800c8fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8fe:	f7ff be7a 	b.w	800c5f6 <__swbuf_r>
 800c902:	6813      	ldr	r3, [r2, #0]
 800c904:	1c58      	adds	r0, r3, #1
 800c906:	6010      	str	r0, [r2, #0]
 800c908:	4608      	mov	r0, r1
 800c90a:	7019      	strb	r1, [r3, #0]
 800c90c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <__sfputs_r>:
 800c912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c914:	4606      	mov	r6, r0
 800c916:	460f      	mov	r7, r1
 800c918:	4614      	mov	r4, r2
 800c91a:	18d5      	adds	r5, r2, r3
 800c91c:	42ac      	cmp	r4, r5
 800c91e:	d101      	bne.n	800c924 <__sfputs_r+0x12>
 800c920:	2000      	movs	r0, #0
 800c922:	e007      	b.n	800c934 <__sfputs_r+0x22>
 800c924:	463a      	mov	r2, r7
 800c926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c92a:	4630      	mov	r0, r6
 800c92c:	f7ff ffda 	bl	800c8e4 <__sfputc_r>
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	d1f3      	bne.n	800c91c <__sfputs_r+0xa>
 800c934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c938 <_vfiprintf_r>:
 800c938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93c:	460d      	mov	r5, r1
 800c93e:	b09d      	sub	sp, #116	@ 0x74
 800c940:	4614      	mov	r4, r2
 800c942:	4698      	mov	r8, r3
 800c944:	4606      	mov	r6, r0
 800c946:	b118      	cbz	r0, 800c950 <_vfiprintf_r+0x18>
 800c948:	6a03      	ldr	r3, [r0, #32]
 800c94a:	b90b      	cbnz	r3, 800c950 <_vfiprintf_r+0x18>
 800c94c:	f7ff fd6a 	bl	800c424 <__sinit>
 800c950:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c952:	07d9      	lsls	r1, r3, #31
 800c954:	d405      	bmi.n	800c962 <_vfiprintf_r+0x2a>
 800c956:	89ab      	ldrh	r3, [r5, #12]
 800c958:	059a      	lsls	r2, r3, #22
 800c95a:	d402      	bmi.n	800c962 <_vfiprintf_r+0x2a>
 800c95c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c95e:	f7ff ff68 	bl	800c832 <__retarget_lock_acquire_recursive>
 800c962:	89ab      	ldrh	r3, [r5, #12]
 800c964:	071b      	lsls	r3, r3, #28
 800c966:	d501      	bpl.n	800c96c <_vfiprintf_r+0x34>
 800c968:	692b      	ldr	r3, [r5, #16]
 800c96a:	b99b      	cbnz	r3, 800c994 <_vfiprintf_r+0x5c>
 800c96c:	4629      	mov	r1, r5
 800c96e:	4630      	mov	r0, r6
 800c970:	f7ff fe80 	bl	800c674 <__swsetup_r>
 800c974:	b170      	cbz	r0, 800c994 <_vfiprintf_r+0x5c>
 800c976:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c978:	07dc      	lsls	r4, r3, #31
 800c97a:	d504      	bpl.n	800c986 <_vfiprintf_r+0x4e>
 800c97c:	f04f 30ff 	mov.w	r0, #4294967295
 800c980:	b01d      	add	sp, #116	@ 0x74
 800c982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c986:	89ab      	ldrh	r3, [r5, #12]
 800c988:	0598      	lsls	r0, r3, #22
 800c98a:	d4f7      	bmi.n	800c97c <_vfiprintf_r+0x44>
 800c98c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c98e:	f7ff ff51 	bl	800c834 <__retarget_lock_release_recursive>
 800c992:	e7f3      	b.n	800c97c <_vfiprintf_r+0x44>
 800c994:	2300      	movs	r3, #0
 800c996:	f8cd 800c 	str.w	r8, [sp, #12]
 800c99a:	f04f 0901 	mov.w	r9, #1
 800c99e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800cb54 <_vfiprintf_r+0x21c>
 800c9a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9a4:	2320      	movs	r3, #32
 800c9a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9aa:	2330      	movs	r3, #48	@ 0x30
 800c9ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9b0:	4623      	mov	r3, r4
 800c9b2:	469a      	mov	sl, r3
 800c9b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9b8:	b10a      	cbz	r2, 800c9be <_vfiprintf_r+0x86>
 800c9ba:	2a25      	cmp	r2, #37	@ 0x25
 800c9bc:	d1f9      	bne.n	800c9b2 <_vfiprintf_r+0x7a>
 800c9be:	ebba 0b04 	subs.w	fp, sl, r4
 800c9c2:	d00b      	beq.n	800c9dc <_vfiprintf_r+0xa4>
 800c9c4:	465b      	mov	r3, fp
 800c9c6:	4622      	mov	r2, r4
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	f7ff ffa1 	bl	800c912 <__sfputs_r>
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	f000 80a7 	beq.w	800cb24 <_vfiprintf_r+0x1ec>
 800c9d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9d8:	445a      	add	r2, fp
 800c9da:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 809f 	beq.w	800cb24 <_vfiprintf_r+0x1ec>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ec:	f10a 0a01 	add.w	sl, sl, #1
 800c9f0:	9304      	str	r3, [sp, #16]
 800c9f2:	9307      	str	r3, [sp, #28]
 800c9f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9fe:	4654      	mov	r4, sl
 800ca00:	2205      	movs	r2, #5
 800ca02:	4854      	ldr	r0, [pc, #336]	@ (800cb54 <_vfiprintf_r+0x21c>)
 800ca04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca08:	f000 fb6e 	bl	800d0e8 <memchr>
 800ca0c:	9a04      	ldr	r2, [sp, #16]
 800ca0e:	b9d8      	cbnz	r0, 800ca48 <_vfiprintf_r+0x110>
 800ca10:	06d1      	lsls	r1, r2, #27
 800ca12:	bf44      	itt	mi
 800ca14:	2320      	movmi	r3, #32
 800ca16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca1a:	0713      	lsls	r3, r2, #28
 800ca1c:	bf44      	itt	mi
 800ca1e:	232b      	movmi	r3, #43	@ 0x2b
 800ca20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca24:	f89a 3000 	ldrb.w	r3, [sl]
 800ca28:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca2a:	d015      	beq.n	800ca58 <_vfiprintf_r+0x120>
 800ca2c:	9a07      	ldr	r2, [sp, #28]
 800ca2e:	4654      	mov	r4, sl
 800ca30:	2000      	movs	r0, #0
 800ca32:	f04f 0c0a 	mov.w	ip, #10
 800ca36:	4621      	mov	r1, r4
 800ca38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca3c:	3b30      	subs	r3, #48	@ 0x30
 800ca3e:	2b09      	cmp	r3, #9
 800ca40:	d94b      	bls.n	800cada <_vfiprintf_r+0x1a2>
 800ca42:	b1b0      	cbz	r0, 800ca72 <_vfiprintf_r+0x13a>
 800ca44:	9207      	str	r2, [sp, #28]
 800ca46:	e014      	b.n	800ca72 <_vfiprintf_r+0x13a>
 800ca48:	eba0 0308 	sub.w	r3, r0, r8
 800ca4c:	46a2      	mov	sl, r4
 800ca4e:	fa09 f303 	lsl.w	r3, r9, r3
 800ca52:	4313      	orrs	r3, r2
 800ca54:	9304      	str	r3, [sp, #16]
 800ca56:	e7d2      	b.n	800c9fe <_vfiprintf_r+0xc6>
 800ca58:	9b03      	ldr	r3, [sp, #12]
 800ca5a:	1d19      	adds	r1, r3, #4
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	9103      	str	r1, [sp, #12]
 800ca62:	bfbb      	ittet	lt
 800ca64:	425b      	neglt	r3, r3
 800ca66:	f042 0202 	orrlt.w	r2, r2, #2
 800ca6a:	9307      	strge	r3, [sp, #28]
 800ca6c:	9307      	strlt	r3, [sp, #28]
 800ca6e:	bfb8      	it	lt
 800ca70:	9204      	strlt	r2, [sp, #16]
 800ca72:	7823      	ldrb	r3, [r4, #0]
 800ca74:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca76:	d10a      	bne.n	800ca8e <_vfiprintf_r+0x156>
 800ca78:	7863      	ldrb	r3, [r4, #1]
 800ca7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca7c:	d132      	bne.n	800cae4 <_vfiprintf_r+0x1ac>
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	3402      	adds	r4, #2
 800ca82:	1d1a      	adds	r2, r3, #4
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca8a:	9203      	str	r2, [sp, #12]
 800ca8c:	9305      	str	r3, [sp, #20]
 800ca8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb64 <_vfiprintf_r+0x22c>
 800ca92:	2203      	movs	r2, #3
 800ca94:	7821      	ldrb	r1, [r4, #0]
 800ca96:	4650      	mov	r0, sl
 800ca98:	f000 fb26 	bl	800d0e8 <memchr>
 800ca9c:	b138      	cbz	r0, 800caae <_vfiprintf_r+0x176>
 800ca9e:	eba0 000a 	sub.w	r0, r0, sl
 800caa2:	2240      	movs	r2, #64	@ 0x40
 800caa4:	9b04      	ldr	r3, [sp, #16]
 800caa6:	3401      	adds	r4, #1
 800caa8:	4082      	lsls	r2, r0
 800caaa:	4313      	orrs	r3, r2
 800caac:	9304      	str	r3, [sp, #16]
 800caae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cab2:	2206      	movs	r2, #6
 800cab4:	4828      	ldr	r0, [pc, #160]	@ (800cb58 <_vfiprintf_r+0x220>)
 800cab6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800caba:	f000 fb15 	bl	800d0e8 <memchr>
 800cabe:	2800      	cmp	r0, #0
 800cac0:	d03f      	beq.n	800cb42 <_vfiprintf_r+0x20a>
 800cac2:	4b26      	ldr	r3, [pc, #152]	@ (800cb5c <_vfiprintf_r+0x224>)
 800cac4:	bb1b      	cbnz	r3, 800cb0e <_vfiprintf_r+0x1d6>
 800cac6:	9b03      	ldr	r3, [sp, #12]
 800cac8:	3307      	adds	r3, #7
 800caca:	f023 0307 	bic.w	r3, r3, #7
 800cace:	3308      	adds	r3, #8
 800cad0:	9303      	str	r3, [sp, #12]
 800cad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cad4:	443b      	add	r3, r7
 800cad6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cad8:	e76a      	b.n	800c9b0 <_vfiprintf_r+0x78>
 800cada:	fb0c 3202 	mla	r2, ip, r2, r3
 800cade:	460c      	mov	r4, r1
 800cae0:	2001      	movs	r0, #1
 800cae2:	e7a8      	b.n	800ca36 <_vfiprintf_r+0xfe>
 800cae4:	2300      	movs	r3, #0
 800cae6:	3401      	adds	r4, #1
 800cae8:	f04f 0c0a 	mov.w	ip, #10
 800caec:	4619      	mov	r1, r3
 800caee:	9305      	str	r3, [sp, #20]
 800caf0:	4620      	mov	r0, r4
 800caf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800caf6:	3a30      	subs	r2, #48	@ 0x30
 800caf8:	2a09      	cmp	r2, #9
 800cafa:	d903      	bls.n	800cb04 <_vfiprintf_r+0x1cc>
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d0c6      	beq.n	800ca8e <_vfiprintf_r+0x156>
 800cb00:	9105      	str	r1, [sp, #20]
 800cb02:	e7c4      	b.n	800ca8e <_vfiprintf_r+0x156>
 800cb04:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb08:	4604      	mov	r4, r0
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e7f0      	b.n	800caf0 <_vfiprintf_r+0x1b8>
 800cb0e:	ab03      	add	r3, sp, #12
 800cb10:	462a      	mov	r2, r5
 800cb12:	a904      	add	r1, sp, #16
 800cb14:	4630      	mov	r0, r6
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	4b11      	ldr	r3, [pc, #68]	@ (800cb60 <_vfiprintf_r+0x228>)
 800cb1a:	f3af 8000 	nop.w
 800cb1e:	4607      	mov	r7, r0
 800cb20:	1c78      	adds	r0, r7, #1
 800cb22:	d1d6      	bne.n	800cad2 <_vfiprintf_r+0x19a>
 800cb24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb26:	07d9      	lsls	r1, r3, #31
 800cb28:	d405      	bmi.n	800cb36 <_vfiprintf_r+0x1fe>
 800cb2a:	89ab      	ldrh	r3, [r5, #12]
 800cb2c:	059a      	lsls	r2, r3, #22
 800cb2e:	d402      	bmi.n	800cb36 <_vfiprintf_r+0x1fe>
 800cb30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb32:	f7ff fe7f 	bl	800c834 <__retarget_lock_release_recursive>
 800cb36:	89ab      	ldrh	r3, [r5, #12]
 800cb38:	065b      	lsls	r3, r3, #25
 800cb3a:	f53f af1f 	bmi.w	800c97c <_vfiprintf_r+0x44>
 800cb3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb40:	e71e      	b.n	800c980 <_vfiprintf_r+0x48>
 800cb42:	ab03      	add	r3, sp, #12
 800cb44:	462a      	mov	r2, r5
 800cb46:	a904      	add	r1, sp, #16
 800cb48:	4630      	mov	r0, r6
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	4b04      	ldr	r3, [pc, #16]	@ (800cb60 <_vfiprintf_r+0x228>)
 800cb4e:	f000 f87d 	bl	800cc4c <_printf_i>
 800cb52:	e7e4      	b.n	800cb1e <_vfiprintf_r+0x1e6>
 800cb54:	0800d3e4 	.word	0x0800d3e4
 800cb58:	0800d3ee 	.word	0x0800d3ee
 800cb5c:	00000000 	.word	0x00000000
 800cb60:	0800c913 	.word	0x0800c913
 800cb64:	0800d3ea 	.word	0x0800d3ea

0800cb68 <_printf_common>:
 800cb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb6c:	4616      	mov	r6, r2
 800cb6e:	4698      	mov	r8, r3
 800cb70:	688a      	ldr	r2, [r1, #8]
 800cb72:	4607      	mov	r7, r0
 800cb74:	690b      	ldr	r3, [r1, #16]
 800cb76:	460c      	mov	r4, r1
 800cb78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	bfb8      	it	lt
 800cb80:	4613      	movlt	r3, r2
 800cb82:	6033      	str	r3, [r6, #0]
 800cb84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb88:	b10a      	cbz	r2, 800cb8e <_printf_common+0x26>
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	6033      	str	r3, [r6, #0]
 800cb8e:	6823      	ldr	r3, [r4, #0]
 800cb90:	0699      	lsls	r1, r3, #26
 800cb92:	bf42      	ittt	mi
 800cb94:	6833      	ldrmi	r3, [r6, #0]
 800cb96:	3302      	addmi	r3, #2
 800cb98:	6033      	strmi	r3, [r6, #0]
 800cb9a:	6825      	ldr	r5, [r4, #0]
 800cb9c:	f015 0506 	ands.w	r5, r5, #6
 800cba0:	d106      	bne.n	800cbb0 <_printf_common+0x48>
 800cba2:	f104 0a19 	add.w	sl, r4, #25
 800cba6:	68e3      	ldr	r3, [r4, #12]
 800cba8:	6832      	ldr	r2, [r6, #0]
 800cbaa:	1a9b      	subs	r3, r3, r2
 800cbac:	42ab      	cmp	r3, r5
 800cbae:	dc2b      	bgt.n	800cc08 <_printf_common+0xa0>
 800cbb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cbb4:	6822      	ldr	r2, [r4, #0]
 800cbb6:	3b00      	subs	r3, #0
 800cbb8:	bf18      	it	ne
 800cbba:	2301      	movne	r3, #1
 800cbbc:	0692      	lsls	r2, r2, #26
 800cbbe:	d430      	bmi.n	800cc22 <_printf_common+0xba>
 800cbc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cbc4:	4641      	mov	r1, r8
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	47c8      	blx	r9
 800cbca:	3001      	adds	r0, #1
 800cbcc:	d023      	beq.n	800cc16 <_printf_common+0xae>
 800cbce:	6823      	ldr	r3, [r4, #0]
 800cbd0:	341a      	adds	r4, #26
 800cbd2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800cbd6:	f003 0306 	and.w	r3, r3, #6
 800cbda:	2b04      	cmp	r3, #4
 800cbdc:	bf0a      	itet	eq
 800cbde:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800cbe2:	2500      	movne	r5, #0
 800cbe4:	6833      	ldreq	r3, [r6, #0]
 800cbe6:	f04f 0600 	mov.w	r6, #0
 800cbea:	bf08      	it	eq
 800cbec:	1aed      	subeq	r5, r5, r3
 800cbee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cbf2:	bf08      	it	eq
 800cbf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	bfc4      	itt	gt
 800cbfc:	1a9b      	subgt	r3, r3, r2
 800cbfe:	18ed      	addgt	r5, r5, r3
 800cc00:	42b5      	cmp	r5, r6
 800cc02:	d11a      	bne.n	800cc3a <_printf_common+0xd2>
 800cc04:	2000      	movs	r0, #0
 800cc06:	e008      	b.n	800cc1a <_printf_common+0xb2>
 800cc08:	2301      	movs	r3, #1
 800cc0a:	4652      	mov	r2, sl
 800cc0c:	4641      	mov	r1, r8
 800cc0e:	4638      	mov	r0, r7
 800cc10:	47c8      	blx	r9
 800cc12:	3001      	adds	r0, #1
 800cc14:	d103      	bne.n	800cc1e <_printf_common+0xb6>
 800cc16:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc1e:	3501      	adds	r5, #1
 800cc20:	e7c1      	b.n	800cba6 <_printf_common+0x3e>
 800cc22:	18e1      	adds	r1, r4, r3
 800cc24:	1c5a      	adds	r2, r3, #1
 800cc26:	2030      	movs	r0, #48	@ 0x30
 800cc28:	3302      	adds	r3, #2
 800cc2a:	4422      	add	r2, r4
 800cc2c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cc30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cc34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cc38:	e7c2      	b.n	800cbc0 <_printf_common+0x58>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	4622      	mov	r2, r4
 800cc3e:	4641      	mov	r1, r8
 800cc40:	4638      	mov	r0, r7
 800cc42:	47c8      	blx	r9
 800cc44:	3001      	adds	r0, #1
 800cc46:	d0e6      	beq.n	800cc16 <_printf_common+0xae>
 800cc48:	3601      	adds	r6, #1
 800cc4a:	e7d9      	b.n	800cc00 <_printf_common+0x98>

0800cc4c <_printf_i>:
 800cc4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc50:	7e0f      	ldrb	r7, [r1, #24]
 800cc52:	4691      	mov	r9, r2
 800cc54:	4680      	mov	r8, r0
 800cc56:	460c      	mov	r4, r1
 800cc58:	2f78      	cmp	r7, #120	@ 0x78
 800cc5a:	469a      	mov	sl, r3
 800cc5c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc62:	d807      	bhi.n	800cc74 <_printf_i+0x28>
 800cc64:	2f62      	cmp	r7, #98	@ 0x62
 800cc66:	d80a      	bhi.n	800cc7e <_printf_i+0x32>
 800cc68:	2f00      	cmp	r7, #0
 800cc6a:	f000 80d1 	beq.w	800ce10 <_printf_i+0x1c4>
 800cc6e:	2f58      	cmp	r7, #88	@ 0x58
 800cc70:	f000 80b8 	beq.w	800cde4 <_printf_i+0x198>
 800cc74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc7c:	e03a      	b.n	800ccf4 <_printf_i+0xa8>
 800cc7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc82:	2b15      	cmp	r3, #21
 800cc84:	d8f6      	bhi.n	800cc74 <_printf_i+0x28>
 800cc86:	a101      	add	r1, pc, #4	@ (adr r1, 800cc8c <_printf_i+0x40>)
 800cc88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc8c:	0800cce5 	.word	0x0800cce5
 800cc90:	0800ccf9 	.word	0x0800ccf9
 800cc94:	0800cc75 	.word	0x0800cc75
 800cc98:	0800cc75 	.word	0x0800cc75
 800cc9c:	0800cc75 	.word	0x0800cc75
 800cca0:	0800cc75 	.word	0x0800cc75
 800cca4:	0800ccf9 	.word	0x0800ccf9
 800cca8:	0800cc75 	.word	0x0800cc75
 800ccac:	0800cc75 	.word	0x0800cc75
 800ccb0:	0800cc75 	.word	0x0800cc75
 800ccb4:	0800cc75 	.word	0x0800cc75
 800ccb8:	0800cdf7 	.word	0x0800cdf7
 800ccbc:	0800cd23 	.word	0x0800cd23
 800ccc0:	0800cdb1 	.word	0x0800cdb1
 800ccc4:	0800cc75 	.word	0x0800cc75
 800ccc8:	0800cc75 	.word	0x0800cc75
 800cccc:	0800ce19 	.word	0x0800ce19
 800ccd0:	0800cc75 	.word	0x0800cc75
 800ccd4:	0800cd23 	.word	0x0800cd23
 800ccd8:	0800cc75 	.word	0x0800cc75
 800ccdc:	0800cc75 	.word	0x0800cc75
 800cce0:	0800cdb9 	.word	0x0800cdb9
 800cce4:	6833      	ldr	r3, [r6, #0]
 800cce6:	1d1a      	adds	r2, r3, #4
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	6032      	str	r2, [r6, #0]
 800ccec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ccf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	e09c      	b.n	800ce32 <_printf_i+0x1e6>
 800ccf8:	6833      	ldr	r3, [r6, #0]
 800ccfa:	6820      	ldr	r0, [r4, #0]
 800ccfc:	1d19      	adds	r1, r3, #4
 800ccfe:	6031      	str	r1, [r6, #0]
 800cd00:	0606      	lsls	r6, r0, #24
 800cd02:	d501      	bpl.n	800cd08 <_printf_i+0xbc>
 800cd04:	681d      	ldr	r5, [r3, #0]
 800cd06:	e003      	b.n	800cd10 <_printf_i+0xc4>
 800cd08:	0645      	lsls	r5, r0, #25
 800cd0a:	d5fb      	bpl.n	800cd04 <_printf_i+0xb8>
 800cd0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cd10:	2d00      	cmp	r5, #0
 800cd12:	da03      	bge.n	800cd1c <_printf_i+0xd0>
 800cd14:	232d      	movs	r3, #45	@ 0x2d
 800cd16:	426d      	negs	r5, r5
 800cd18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd1c:	4858      	ldr	r0, [pc, #352]	@ (800ce80 <_printf_i+0x234>)
 800cd1e:	230a      	movs	r3, #10
 800cd20:	e011      	b.n	800cd46 <_printf_i+0xfa>
 800cd22:	6821      	ldr	r1, [r4, #0]
 800cd24:	6833      	ldr	r3, [r6, #0]
 800cd26:	0608      	lsls	r0, r1, #24
 800cd28:	f853 5b04 	ldr.w	r5, [r3], #4
 800cd2c:	d402      	bmi.n	800cd34 <_printf_i+0xe8>
 800cd2e:	0649      	lsls	r1, r1, #25
 800cd30:	bf48      	it	mi
 800cd32:	b2ad      	uxthmi	r5, r5
 800cd34:	2f6f      	cmp	r7, #111	@ 0x6f
 800cd36:	6033      	str	r3, [r6, #0]
 800cd38:	4851      	ldr	r0, [pc, #324]	@ (800ce80 <_printf_i+0x234>)
 800cd3a:	bf14      	ite	ne
 800cd3c:	230a      	movne	r3, #10
 800cd3e:	2308      	moveq	r3, #8
 800cd40:	2100      	movs	r1, #0
 800cd42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cd46:	6866      	ldr	r6, [r4, #4]
 800cd48:	2e00      	cmp	r6, #0
 800cd4a:	60a6      	str	r6, [r4, #8]
 800cd4c:	db05      	blt.n	800cd5a <_printf_i+0x10e>
 800cd4e:	6821      	ldr	r1, [r4, #0]
 800cd50:	432e      	orrs	r6, r5
 800cd52:	f021 0104 	bic.w	r1, r1, #4
 800cd56:	6021      	str	r1, [r4, #0]
 800cd58:	d04b      	beq.n	800cdf2 <_printf_i+0x1a6>
 800cd5a:	4616      	mov	r6, r2
 800cd5c:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd60:	fb03 5711 	mls	r7, r3, r1, r5
 800cd64:	5dc7      	ldrb	r7, [r0, r7]
 800cd66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd6a:	462f      	mov	r7, r5
 800cd6c:	460d      	mov	r5, r1
 800cd6e:	42bb      	cmp	r3, r7
 800cd70:	d9f4      	bls.n	800cd5c <_printf_i+0x110>
 800cd72:	2b08      	cmp	r3, #8
 800cd74:	d10b      	bne.n	800cd8e <_printf_i+0x142>
 800cd76:	6823      	ldr	r3, [r4, #0]
 800cd78:	07df      	lsls	r7, r3, #31
 800cd7a:	d508      	bpl.n	800cd8e <_printf_i+0x142>
 800cd7c:	6923      	ldr	r3, [r4, #16]
 800cd7e:	6861      	ldr	r1, [r4, #4]
 800cd80:	4299      	cmp	r1, r3
 800cd82:	bfde      	ittt	le
 800cd84:	2330      	movle	r3, #48	@ 0x30
 800cd86:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd8e:	1b92      	subs	r2, r2, r6
 800cd90:	6122      	str	r2, [r4, #16]
 800cd92:	464b      	mov	r3, r9
 800cd94:	aa03      	add	r2, sp, #12
 800cd96:	4621      	mov	r1, r4
 800cd98:	4640      	mov	r0, r8
 800cd9a:	f8cd a000 	str.w	sl, [sp]
 800cd9e:	f7ff fee3 	bl	800cb68 <_printf_common>
 800cda2:	3001      	adds	r0, #1
 800cda4:	d14a      	bne.n	800ce3c <_printf_i+0x1f0>
 800cda6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdaa:	b004      	add	sp, #16
 800cdac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdb0:	6823      	ldr	r3, [r4, #0]
 800cdb2:	f043 0320 	orr.w	r3, r3, #32
 800cdb6:	6023      	str	r3, [r4, #0]
 800cdb8:	2778      	movs	r7, #120	@ 0x78
 800cdba:	4832      	ldr	r0, [pc, #200]	@ (800ce84 <_printf_i+0x238>)
 800cdbc:	6823      	ldr	r3, [r4, #0]
 800cdbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cdc2:	061f      	lsls	r7, r3, #24
 800cdc4:	6831      	ldr	r1, [r6, #0]
 800cdc6:	f851 5b04 	ldr.w	r5, [r1], #4
 800cdca:	d402      	bmi.n	800cdd2 <_printf_i+0x186>
 800cdcc:	065f      	lsls	r7, r3, #25
 800cdce:	bf48      	it	mi
 800cdd0:	b2ad      	uxthmi	r5, r5
 800cdd2:	6031      	str	r1, [r6, #0]
 800cdd4:	07d9      	lsls	r1, r3, #31
 800cdd6:	bf44      	itt	mi
 800cdd8:	f043 0320 	orrmi.w	r3, r3, #32
 800cddc:	6023      	strmi	r3, [r4, #0]
 800cdde:	b11d      	cbz	r5, 800cde8 <_printf_i+0x19c>
 800cde0:	2310      	movs	r3, #16
 800cde2:	e7ad      	b.n	800cd40 <_printf_i+0xf4>
 800cde4:	4826      	ldr	r0, [pc, #152]	@ (800ce80 <_printf_i+0x234>)
 800cde6:	e7e9      	b.n	800cdbc <_printf_i+0x170>
 800cde8:	6823      	ldr	r3, [r4, #0]
 800cdea:	f023 0320 	bic.w	r3, r3, #32
 800cdee:	6023      	str	r3, [r4, #0]
 800cdf0:	e7f6      	b.n	800cde0 <_printf_i+0x194>
 800cdf2:	4616      	mov	r6, r2
 800cdf4:	e7bd      	b.n	800cd72 <_printf_i+0x126>
 800cdf6:	6833      	ldr	r3, [r6, #0]
 800cdf8:	6825      	ldr	r5, [r4, #0]
 800cdfa:	1d18      	adds	r0, r3, #4
 800cdfc:	6961      	ldr	r1, [r4, #20]
 800cdfe:	6030      	str	r0, [r6, #0]
 800ce00:	062e      	lsls	r6, r5, #24
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	d501      	bpl.n	800ce0a <_printf_i+0x1be>
 800ce06:	6019      	str	r1, [r3, #0]
 800ce08:	e002      	b.n	800ce10 <_printf_i+0x1c4>
 800ce0a:	0668      	lsls	r0, r5, #25
 800ce0c:	d5fb      	bpl.n	800ce06 <_printf_i+0x1ba>
 800ce0e:	8019      	strh	r1, [r3, #0]
 800ce10:	2300      	movs	r3, #0
 800ce12:	4616      	mov	r6, r2
 800ce14:	6123      	str	r3, [r4, #16]
 800ce16:	e7bc      	b.n	800cd92 <_printf_i+0x146>
 800ce18:	6833      	ldr	r3, [r6, #0]
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	1d1a      	adds	r2, r3, #4
 800ce1e:	6032      	str	r2, [r6, #0]
 800ce20:	681e      	ldr	r6, [r3, #0]
 800ce22:	6862      	ldr	r2, [r4, #4]
 800ce24:	4630      	mov	r0, r6
 800ce26:	f000 f95f 	bl	800d0e8 <memchr>
 800ce2a:	b108      	cbz	r0, 800ce30 <_printf_i+0x1e4>
 800ce2c:	1b80      	subs	r0, r0, r6
 800ce2e:	6060      	str	r0, [r4, #4]
 800ce30:	6863      	ldr	r3, [r4, #4]
 800ce32:	6123      	str	r3, [r4, #16]
 800ce34:	2300      	movs	r3, #0
 800ce36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce3a:	e7aa      	b.n	800cd92 <_printf_i+0x146>
 800ce3c:	6923      	ldr	r3, [r4, #16]
 800ce3e:	4632      	mov	r2, r6
 800ce40:	4649      	mov	r1, r9
 800ce42:	4640      	mov	r0, r8
 800ce44:	47d0      	blx	sl
 800ce46:	3001      	adds	r0, #1
 800ce48:	d0ad      	beq.n	800cda6 <_printf_i+0x15a>
 800ce4a:	6823      	ldr	r3, [r4, #0]
 800ce4c:	079b      	lsls	r3, r3, #30
 800ce4e:	d413      	bmi.n	800ce78 <_printf_i+0x22c>
 800ce50:	68e0      	ldr	r0, [r4, #12]
 800ce52:	9b03      	ldr	r3, [sp, #12]
 800ce54:	4298      	cmp	r0, r3
 800ce56:	bfb8      	it	lt
 800ce58:	4618      	movlt	r0, r3
 800ce5a:	e7a6      	b.n	800cdaa <_printf_i+0x15e>
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	4632      	mov	r2, r6
 800ce60:	4649      	mov	r1, r9
 800ce62:	4640      	mov	r0, r8
 800ce64:	47d0      	blx	sl
 800ce66:	3001      	adds	r0, #1
 800ce68:	d09d      	beq.n	800cda6 <_printf_i+0x15a>
 800ce6a:	3501      	adds	r5, #1
 800ce6c:	68e3      	ldr	r3, [r4, #12]
 800ce6e:	9903      	ldr	r1, [sp, #12]
 800ce70:	1a5b      	subs	r3, r3, r1
 800ce72:	42ab      	cmp	r3, r5
 800ce74:	dcf2      	bgt.n	800ce5c <_printf_i+0x210>
 800ce76:	e7eb      	b.n	800ce50 <_printf_i+0x204>
 800ce78:	2500      	movs	r5, #0
 800ce7a:	f104 0619 	add.w	r6, r4, #25
 800ce7e:	e7f5      	b.n	800ce6c <_printf_i+0x220>
 800ce80:	0800d3f5 	.word	0x0800d3f5
 800ce84:	0800d406 	.word	0x0800d406

0800ce88 <__sflush_r>:
 800ce88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce90:	0716      	lsls	r6, r2, #28
 800ce92:	4605      	mov	r5, r0
 800ce94:	460c      	mov	r4, r1
 800ce96:	d454      	bmi.n	800cf42 <__sflush_r+0xba>
 800ce98:	684b      	ldr	r3, [r1, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	dc02      	bgt.n	800cea4 <__sflush_r+0x1c>
 800ce9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	dd48      	ble.n	800cf36 <__sflush_r+0xae>
 800cea4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cea6:	2e00      	cmp	r6, #0
 800cea8:	d045      	beq.n	800cf36 <__sflush_r+0xae>
 800ceaa:	2300      	movs	r3, #0
 800ceac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ceb0:	682f      	ldr	r7, [r5, #0]
 800ceb2:	6a21      	ldr	r1, [r4, #32]
 800ceb4:	602b      	str	r3, [r5, #0]
 800ceb6:	d030      	beq.n	800cf1a <__sflush_r+0x92>
 800ceb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ceba:	89a3      	ldrh	r3, [r4, #12]
 800cebc:	0759      	lsls	r1, r3, #29
 800cebe:	d505      	bpl.n	800cecc <__sflush_r+0x44>
 800cec0:	6863      	ldr	r3, [r4, #4]
 800cec2:	1ad2      	subs	r2, r2, r3
 800cec4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cec6:	b10b      	cbz	r3, 800cecc <__sflush_r+0x44>
 800cec8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ceca:	1ad2      	subs	r2, r2, r3
 800cecc:	2300      	movs	r3, #0
 800cece:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ced0:	6a21      	ldr	r1, [r4, #32]
 800ced2:	4628      	mov	r0, r5
 800ced4:	47b0      	blx	r6
 800ced6:	1c43      	adds	r3, r0, #1
 800ced8:	89a3      	ldrh	r3, [r4, #12]
 800ceda:	d106      	bne.n	800ceea <__sflush_r+0x62>
 800cedc:	6829      	ldr	r1, [r5, #0]
 800cede:	291d      	cmp	r1, #29
 800cee0:	d82b      	bhi.n	800cf3a <__sflush_r+0xb2>
 800cee2:	4a2a      	ldr	r2, [pc, #168]	@ (800cf8c <__sflush_r+0x104>)
 800cee4:	40ca      	lsrs	r2, r1
 800cee6:	07d6      	lsls	r6, r2, #31
 800cee8:	d527      	bpl.n	800cf3a <__sflush_r+0xb2>
 800ceea:	2200      	movs	r2, #0
 800ceec:	04d9      	lsls	r1, r3, #19
 800ceee:	6062      	str	r2, [r4, #4]
 800cef0:	6922      	ldr	r2, [r4, #16]
 800cef2:	6022      	str	r2, [r4, #0]
 800cef4:	d504      	bpl.n	800cf00 <__sflush_r+0x78>
 800cef6:	1c42      	adds	r2, r0, #1
 800cef8:	d101      	bne.n	800cefe <__sflush_r+0x76>
 800cefa:	682b      	ldr	r3, [r5, #0]
 800cefc:	b903      	cbnz	r3, 800cf00 <__sflush_r+0x78>
 800cefe:	6560      	str	r0, [r4, #84]	@ 0x54
 800cf00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf02:	602f      	str	r7, [r5, #0]
 800cf04:	b1b9      	cbz	r1, 800cf36 <__sflush_r+0xae>
 800cf06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf0a:	4299      	cmp	r1, r3
 800cf0c:	d002      	beq.n	800cf14 <__sflush_r+0x8c>
 800cf0e:	4628      	mov	r0, r5
 800cf10:	f7ff fc9e 	bl	800c850 <_free_r>
 800cf14:	2300      	movs	r3, #0
 800cf16:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf18:	e00d      	b.n	800cf36 <__sflush_r+0xae>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	47b0      	blx	r6
 800cf20:	4602      	mov	r2, r0
 800cf22:	1c50      	adds	r0, r2, #1
 800cf24:	d1c9      	bne.n	800ceba <__sflush_r+0x32>
 800cf26:	682b      	ldr	r3, [r5, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d0c6      	beq.n	800ceba <__sflush_r+0x32>
 800cf2c:	2b1d      	cmp	r3, #29
 800cf2e:	d001      	beq.n	800cf34 <__sflush_r+0xac>
 800cf30:	2b16      	cmp	r3, #22
 800cf32:	d11d      	bne.n	800cf70 <__sflush_r+0xe8>
 800cf34:	602f      	str	r7, [r5, #0]
 800cf36:	2000      	movs	r0, #0
 800cf38:	e021      	b.n	800cf7e <__sflush_r+0xf6>
 800cf3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf3e:	b21b      	sxth	r3, r3
 800cf40:	e01a      	b.n	800cf78 <__sflush_r+0xf0>
 800cf42:	690f      	ldr	r7, [r1, #16]
 800cf44:	2f00      	cmp	r7, #0
 800cf46:	d0f6      	beq.n	800cf36 <__sflush_r+0xae>
 800cf48:	0793      	lsls	r3, r2, #30
 800cf4a:	680e      	ldr	r6, [r1, #0]
 800cf4c:	600f      	str	r7, [r1, #0]
 800cf4e:	bf0c      	ite	eq
 800cf50:	694b      	ldreq	r3, [r1, #20]
 800cf52:	2300      	movne	r3, #0
 800cf54:	eba6 0807 	sub.w	r8, r6, r7
 800cf58:	608b      	str	r3, [r1, #8]
 800cf5a:	f1b8 0f00 	cmp.w	r8, #0
 800cf5e:	ddea      	ble.n	800cf36 <__sflush_r+0xae>
 800cf60:	4643      	mov	r3, r8
 800cf62:	463a      	mov	r2, r7
 800cf64:	6a21      	ldr	r1, [r4, #32]
 800cf66:	4628      	mov	r0, r5
 800cf68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cf6a:	47b0      	blx	r6
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	dc08      	bgt.n	800cf82 <__sflush_r+0xfa>
 800cf70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf78:	f04f 30ff 	mov.w	r0, #4294967295
 800cf7c:	81a3      	strh	r3, [r4, #12]
 800cf7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf82:	4407      	add	r7, r0
 800cf84:	eba8 0800 	sub.w	r8, r8, r0
 800cf88:	e7e7      	b.n	800cf5a <__sflush_r+0xd2>
 800cf8a:	bf00      	nop
 800cf8c:	20400001 	.word	0x20400001

0800cf90 <_fflush_r>:
 800cf90:	b538      	push	{r3, r4, r5, lr}
 800cf92:	690b      	ldr	r3, [r1, #16]
 800cf94:	4605      	mov	r5, r0
 800cf96:	460c      	mov	r4, r1
 800cf98:	b913      	cbnz	r3, 800cfa0 <_fflush_r+0x10>
 800cf9a:	2500      	movs	r5, #0
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	bd38      	pop	{r3, r4, r5, pc}
 800cfa0:	b118      	cbz	r0, 800cfaa <_fflush_r+0x1a>
 800cfa2:	6a03      	ldr	r3, [r0, #32]
 800cfa4:	b90b      	cbnz	r3, 800cfaa <_fflush_r+0x1a>
 800cfa6:	f7ff fa3d 	bl	800c424 <__sinit>
 800cfaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d0f3      	beq.n	800cf9a <_fflush_r+0xa>
 800cfb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cfb4:	07d0      	lsls	r0, r2, #31
 800cfb6:	d404      	bmi.n	800cfc2 <_fflush_r+0x32>
 800cfb8:	0599      	lsls	r1, r3, #22
 800cfba:	d402      	bmi.n	800cfc2 <_fflush_r+0x32>
 800cfbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfbe:	f7ff fc38 	bl	800c832 <__retarget_lock_acquire_recursive>
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	4621      	mov	r1, r4
 800cfc6:	f7ff ff5f 	bl	800ce88 <__sflush_r>
 800cfca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfcc:	4605      	mov	r5, r0
 800cfce:	07da      	lsls	r2, r3, #31
 800cfd0:	d4e4      	bmi.n	800cf9c <_fflush_r+0xc>
 800cfd2:	89a3      	ldrh	r3, [r4, #12]
 800cfd4:	059b      	lsls	r3, r3, #22
 800cfd6:	d4e1      	bmi.n	800cf9c <_fflush_r+0xc>
 800cfd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfda:	f7ff fc2b 	bl	800c834 <__retarget_lock_release_recursive>
 800cfde:	e7dd      	b.n	800cf9c <_fflush_r+0xc>

0800cfe0 <__swhatbuf_r>:
 800cfe0:	b570      	push	{r4, r5, r6, lr}
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe8:	b096      	sub	sp, #88	@ 0x58
 800cfea:	4615      	mov	r5, r2
 800cfec:	2900      	cmp	r1, #0
 800cfee:	461e      	mov	r6, r3
 800cff0:	da0c      	bge.n	800d00c <__swhatbuf_r+0x2c>
 800cff2:	89a3      	ldrh	r3, [r4, #12]
 800cff4:	2100      	movs	r1, #0
 800cff6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cffa:	bf14      	ite	ne
 800cffc:	2340      	movne	r3, #64	@ 0x40
 800cffe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d002:	2000      	movs	r0, #0
 800d004:	6031      	str	r1, [r6, #0]
 800d006:	602b      	str	r3, [r5, #0]
 800d008:	b016      	add	sp, #88	@ 0x58
 800d00a:	bd70      	pop	{r4, r5, r6, pc}
 800d00c:	466a      	mov	r2, sp
 800d00e:	f000 f849 	bl	800d0a4 <_fstat_r>
 800d012:	2800      	cmp	r0, #0
 800d014:	dbed      	blt.n	800cff2 <__swhatbuf_r+0x12>
 800d016:	9901      	ldr	r1, [sp, #4]
 800d018:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d01c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d020:	4259      	negs	r1, r3
 800d022:	4159      	adcs	r1, r3
 800d024:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d028:	e7eb      	b.n	800d002 <__swhatbuf_r+0x22>

0800d02a <__smakebuf_r>:
 800d02a:	898b      	ldrh	r3, [r1, #12]
 800d02c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d02e:	079d      	lsls	r5, r3, #30
 800d030:	4606      	mov	r6, r0
 800d032:	460c      	mov	r4, r1
 800d034:	d507      	bpl.n	800d046 <__smakebuf_r+0x1c>
 800d036:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d03a:	6023      	str	r3, [r4, #0]
 800d03c:	6123      	str	r3, [r4, #16]
 800d03e:	2301      	movs	r3, #1
 800d040:	6163      	str	r3, [r4, #20]
 800d042:	b003      	add	sp, #12
 800d044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d046:	ab01      	add	r3, sp, #4
 800d048:	466a      	mov	r2, sp
 800d04a:	f7ff ffc9 	bl	800cfe0 <__swhatbuf_r>
 800d04e:	9f00      	ldr	r7, [sp, #0]
 800d050:	4605      	mov	r5, r0
 800d052:	4630      	mov	r0, r6
 800d054:	4639      	mov	r1, r7
 800d056:	f7ff f8cd 	bl	800c1f4 <_malloc_r>
 800d05a:	b948      	cbnz	r0, 800d070 <__smakebuf_r+0x46>
 800d05c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d060:	059a      	lsls	r2, r3, #22
 800d062:	d4ee      	bmi.n	800d042 <__smakebuf_r+0x18>
 800d064:	f023 0303 	bic.w	r3, r3, #3
 800d068:	f043 0302 	orr.w	r3, r3, #2
 800d06c:	81a3      	strh	r3, [r4, #12]
 800d06e:	e7e2      	b.n	800d036 <__smakebuf_r+0xc>
 800d070:	89a3      	ldrh	r3, [r4, #12]
 800d072:	6020      	str	r0, [r4, #0]
 800d074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d078:	81a3      	strh	r3, [r4, #12]
 800d07a:	9b01      	ldr	r3, [sp, #4]
 800d07c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d080:	b15b      	cbz	r3, 800d09a <__smakebuf_r+0x70>
 800d082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d086:	4630      	mov	r0, r6
 800d088:	f000 f81e 	bl	800d0c8 <_isatty_r>
 800d08c:	b128      	cbz	r0, 800d09a <__smakebuf_r+0x70>
 800d08e:	89a3      	ldrh	r3, [r4, #12]
 800d090:	f023 0303 	bic.w	r3, r3, #3
 800d094:	f043 0301 	orr.w	r3, r3, #1
 800d098:	81a3      	strh	r3, [r4, #12]
 800d09a:	89a3      	ldrh	r3, [r4, #12]
 800d09c:	431d      	orrs	r5, r3
 800d09e:	81a5      	strh	r5, [r4, #12]
 800d0a0:	e7cf      	b.n	800d042 <__smakebuf_r+0x18>
	...

0800d0a4 <_fstat_r>:
 800d0a4:	b538      	push	{r3, r4, r5, lr}
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	4d06      	ldr	r5, [pc, #24]	@ (800d0c4 <_fstat_r+0x20>)
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	4608      	mov	r0, r1
 800d0ae:	4611      	mov	r1, r2
 800d0b0:	602b      	str	r3, [r5, #0]
 800d0b2:	f7f4 f904 	bl	80012be <_fstat>
 800d0b6:	1c43      	adds	r3, r0, #1
 800d0b8:	d102      	bne.n	800d0c0 <_fstat_r+0x1c>
 800d0ba:	682b      	ldr	r3, [r5, #0]
 800d0bc:	b103      	cbz	r3, 800d0c0 <_fstat_r+0x1c>
 800d0be:	6023      	str	r3, [r4, #0]
 800d0c0:	bd38      	pop	{r3, r4, r5, pc}
 800d0c2:	bf00      	nop
 800d0c4:	20003208 	.word	0x20003208

0800d0c8 <_isatty_r>:
 800d0c8:	b538      	push	{r3, r4, r5, lr}
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	4d05      	ldr	r5, [pc, #20]	@ (800d0e4 <_isatty_r+0x1c>)
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	4608      	mov	r0, r1
 800d0d2:	602b      	str	r3, [r5, #0]
 800d0d4:	f7f4 f903 	bl	80012de <_isatty>
 800d0d8:	1c43      	adds	r3, r0, #1
 800d0da:	d102      	bne.n	800d0e2 <_isatty_r+0x1a>
 800d0dc:	682b      	ldr	r3, [r5, #0]
 800d0de:	b103      	cbz	r3, 800d0e2 <_isatty_r+0x1a>
 800d0e0:	6023      	str	r3, [r4, #0]
 800d0e2:	bd38      	pop	{r3, r4, r5, pc}
 800d0e4:	20003208 	.word	0x20003208

0800d0e8 <memchr>:
 800d0e8:	b2c9      	uxtb	r1, r1
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	4402      	add	r2, r0
 800d0ee:	b510      	push	{r4, lr}
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	d101      	bne.n	800d0fa <memchr+0x12>
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	e003      	b.n	800d102 <memchr+0x1a>
 800d0fa:	7804      	ldrb	r4, [r0, #0]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	428c      	cmp	r4, r1
 800d100:	d1f6      	bne.n	800d0f0 <memchr+0x8>
 800d102:	bd10      	pop	{r4, pc}

0800d104 <_init>:
 800d104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d106:	bf00      	nop
 800d108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10a:	bc08      	pop	{r3}
 800d10c:	469e      	mov	lr, r3
 800d10e:	4770      	bx	lr

0800d110 <_fini>:
 800d110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d112:	bf00      	nop
 800d114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d116:	bc08      	pop	{r3}
 800d118:	469e      	mov	lr, r3
 800d11a:	4770      	bx	lr
