
WifiDataLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa7c  08000260  08000260  00001260  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800acdc  0800acdc  0000bcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aebc  0800aebc  0000c084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aebc  0800aebc  0000bebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aec4  0800aec4  0000c084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aec4  0800aec4  0000bec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aec8  0800aec8  0000bec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800aecc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003164  20000084  0800af50  0000c084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200031e8  0800af50  0000c1e8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028984  00000000  00000000  0000c0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053c3  00000000  00000000  00034a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021d8  00000000  00000000  00039e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a75  00000000  00000000  0003bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278fe  00000000  00000000  0003da55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000291de  00000000  00000000  00065353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea73b  00000000  00000000  0008e531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00178c6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000954c  00000000  00000000  00178cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  001821fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000260 <__do_global_dtors_aux>:
 8000260:	b510      	push	{r4, lr}
 8000262:	4c05      	ldr	r4, [pc, #20]	@ (8000278 <__do_global_dtors_aux+0x18>)
 8000264:	7823      	ldrb	r3, [r4, #0]
 8000266:	b933      	cbnz	r3, 8000276 <__do_global_dtors_aux+0x16>
 8000268:	4b04      	ldr	r3, [pc, #16]	@ (800027c <__do_global_dtors_aux+0x1c>)
 800026a:	b113      	cbz	r3, 8000272 <__do_global_dtors_aux+0x12>
 800026c:	4804      	ldr	r0, [pc, #16]	@ (8000280 <__do_global_dtors_aux+0x20>)
 800026e:	f3af 8000 	nop.w
 8000272:	2301      	movs	r3, #1
 8000274:	7023      	strb	r3, [r4, #0]
 8000276:	bd10      	pop	{r4, pc}
 8000278:	20000084 	.word	0x20000084
 800027c:	00000000 	.word	0x00000000
 8000280:	0800acc4 	.word	0x0800acc4

08000284 <frame_dummy>:
 8000284:	b508      	push	{r3, lr}
 8000286:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <frame_dummy+0x10>)
 8000288:	b11b      	cbz	r3, 8000292 <frame_dummy+0xe>
 800028a:	4903      	ldr	r1, [pc, #12]	@ (8000298 <frame_dummy+0x14>)
 800028c:	4803      	ldr	r0, [pc, #12]	@ (800029c <frame_dummy+0x18>)
 800028e:	f3af 8000 	nop.w
 8000292:	bd08      	pop	{r3, pc}
 8000294:	00000000 	.word	0x00000000
 8000298:	20000088 	.word	0x20000088
 800029c:	0800acc4 	.word	0x0800acc4

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b9b0 	b.w	8000618 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d6:	4688      	mov	r8, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	468e      	mov	lr, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d95f      	bls.n	80003a6 <__udivmoddi4+0xd6>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 fe06 	lsl.w	lr, r1, r6
 80002f4:	40b7      	lsls	r7, r6
 80002f6:	40b4      	lsls	r4, r6
 80002f8:	fa20 f303 	lsr.w	r3, r0, r3
 80002fc:	ea43 0e0e 	orr.w	lr, r3, lr
 8000300:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	0c23      	lsrs	r3, r4, #16
 800030a:	fbbe f1f8 	udiv	r1, lr, r8
 800030e:	fb08 ee11 	mls	lr, r8, r1, lr
 8000312:	fb01 f20c 	mul.w	r2, r1, ip
 8000316:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x5e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x5c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 8154 	bhi.w	80005d4 <__udivmoddi4+0x304>
 800032c:	4601      	mov	r1, r0
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	b2a2      	uxth	r2, r4
 8000332:	fbb3 f0f8 	udiv	r0, r3, r8
 8000336:	fb08 3310 	mls	r3, r8, r0, r3
 800033a:	fb00 fc0c 	mul.w	ip, r0, ip
 800033e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000342:	4594      	cmp	ip, r2
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x8e>
 8000346:	18ba      	adds	r2, r7, r2
 8000348:	f100 33ff 	add.w	r3, r0, #4294967295
 800034c:	bf2c      	ite	cs
 800034e:	2401      	movcs	r4, #1
 8000350:	2400      	movcc	r4, #0
 8000352:	4594      	cmp	ip, r2
 8000354:	d902      	bls.n	800035c <__udivmoddi4+0x8c>
 8000356:	2c00      	cmp	r4, #0
 8000358:	f000 813f 	beq.w	80005da <__udivmoddi4+0x30a>
 800035c:	4618      	mov	r0, r3
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba2 020c 	sub.w	r2, r2, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f2      	lsrs	r2, r6
 800036c:	2300      	movs	r3, #0
 800036e:	e9c5 2300 	strd	r2, r3, [r5]
 8000372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d14e      	bne.n	800042c <__udivmoddi4+0x15c>
 800038e:	4543      	cmp	r3, r8
 8000390:	f0c0 8112 	bcc.w	80005b8 <__udivmoddi4+0x2e8>
 8000394:	4282      	cmp	r2, r0
 8000396:	f240 810f 	bls.w	80005b8 <__udivmoddi4+0x2e8>
 800039a:	4608      	mov	r0, r1
 800039c:	2d00      	cmp	r5, #0
 800039e:	d0e8      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a0:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a4:	e7e5      	b.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	f000 80ac 	beq.w	8000504 <__udivmoddi4+0x234>
 80003ac:	fab2 f682 	clz	r6, r2
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	f040 80bb 	bne.w	800052c <__udivmoddi4+0x25c>
 80003b6:	1a8b      	subs	r3, r1, r2
 80003b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003bc:	b2bc      	uxth	r4, r7
 80003be:	2101      	movs	r1, #1
 80003c0:	0c02      	lsrs	r2, r0, #16
 80003c2:	b280      	uxth	r0, r0
 80003c4:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80003cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003d0:	fb04 f20c 	mul.w	r2, r4, ip
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d90e      	bls.n	80003f6 <__udivmoddi4+0x126>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003de:	bf2c      	ite	cs
 80003e0:	f04f 0901 	movcs.w	r9, #1
 80003e4:	f04f 0900 	movcc.w	r9, #0
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d903      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003ec:	f1b9 0f00 	cmp.w	r9, #0
 80003f0:	f000 80ec 	beq.w	80005cc <__udivmoddi4+0x2fc>
 80003f4:	46c4      	mov	ip, r8
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	fbb3 f8fe 	udiv	r8, r3, lr
 80003fc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000400:	fb04 f408 	mul.w	r4, r4, r8
 8000404:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000408:	4294      	cmp	r4, r2
 800040a:	d90b      	bls.n	8000424 <__udivmoddi4+0x154>
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	f108 33ff 	add.w	r3, r8, #4294967295
 8000412:	bf2c      	ite	cs
 8000414:	2001      	movcs	r0, #1
 8000416:	2000      	movcc	r0, #0
 8000418:	4294      	cmp	r4, r2
 800041a:	d902      	bls.n	8000422 <__udivmoddi4+0x152>
 800041c:	2800      	cmp	r0, #0
 800041e:	f000 80d1 	beq.w	80005c4 <__udivmoddi4+0x2f4>
 8000422:	4698      	mov	r8, r3
 8000424:	1b12      	subs	r2, r2, r4
 8000426:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800042a:	e79d      	b.n	8000368 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa08 f401 	lsl.w	r4, r8, r1
 8000436:	fa00 f901 	lsl.w	r9, r0, r1
 800043a:	fa22 f706 	lsr.w	r7, r2, r6
 800043e:	fa28 f806 	lsr.w	r8, r8, r6
 8000442:	408a      	lsls	r2, r1
 8000444:	431f      	orrs	r7, r3
 8000446:	fa20 f306 	lsr.w	r3, r0, r6
 800044a:	0c38      	lsrs	r0, r7, #16
 800044c:	4323      	orrs	r3, r4
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	fbb8 fef0 	udiv	lr, r8, r0
 8000458:	fb00 881e 	mls	r8, r0, lr, r8
 800045c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000460:	fb0e f80c 	mul.w	r8, lr, ip
 8000464:	45a0      	cmp	r8, r4
 8000466:	d90e      	bls.n	8000486 <__udivmoddi4+0x1b6>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b4>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 80b8 	beq.w	80005f4 <__udivmoddi4+0x324>
 8000484:	46d6      	mov	lr, sl
 8000486:	eba4 0408 	sub.w	r4, r4, r8
 800048a:	fa1f f883 	uxth.w	r8, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	fb03 fc0c 	mul.w	ip, r3, ip
 800049a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d90e      	bls.n	80004c0 <__udivmoddi4+0x1f0>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	bf2c      	ite	cs
 80004aa:	f04f 0801 	movcs.w	r8, #1
 80004ae:	f04f 0800 	movcc.w	r8, #0
 80004b2:	45a4      	cmp	ip, r4
 80004b4:	d903      	bls.n	80004be <__udivmoddi4+0x1ee>
 80004b6:	f1b8 0f00 	cmp.w	r8, #0
 80004ba:	f000 809f 	beq.w	80005fc <__udivmoddi4+0x32c>
 80004be:	4603      	mov	r3, r0
 80004c0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c4:	eba4 040c 	sub.w	r4, r4, ip
 80004c8:	fba0 ec02 	umull	lr, ip, r0, r2
 80004cc:	4564      	cmp	r4, ip
 80004ce:	4673      	mov	r3, lr
 80004d0:	46e0      	mov	r8, ip
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x20a>
 80004d4:	d107      	bne.n	80004e6 <__udivmoddi4+0x216>
 80004d6:	45f1      	cmp	r9, lr
 80004d8:	d205      	bcs.n	80004e6 <__udivmoddi4+0x216>
 80004da:	ebbe 0302 	subs.w	r3, lr, r2
 80004de:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	46e0      	mov	r8, ip
 80004e6:	b15d      	cbz	r5, 8000500 <__udivmoddi4+0x230>
 80004e8:	ebb9 0203 	subs.w	r2, r9, r3
 80004ec:	eb64 0408 	sbc.w	r4, r4, r8
 80004f0:	fa04 f606 	lsl.w	r6, r4, r6
 80004f4:	fa22 f301 	lsr.w	r3, r2, r1
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	431e      	orrs	r6, r3
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e736      	b.n	8000372 <__udivmoddi4+0xa2>
 8000504:	fbb1 fcf2 	udiv	ip, r1, r2
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	4614      	mov	r4, r2
 800050c:	b280      	uxth	r0, r0
 800050e:	4696      	mov	lr, r2
 8000510:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000514:	2620      	movs	r6, #32
 8000516:	4690      	mov	r8, r2
 8000518:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 800051c:	4610      	mov	r0, r2
 800051e:	fbb1 f1f2 	udiv	r1, r1, r2
 8000522:	eba3 0308 	sub.w	r3, r3, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e74b      	b.n	80003c4 <__udivmoddi4+0xf4>
 800052c:	40b7      	lsls	r7, r6
 800052e:	f1c6 0320 	rsb	r3, r6, #32
 8000532:	fa01 f206 	lsl.w	r2, r1, r6
 8000536:	fa21 f803 	lsr.w	r8, r1, r3
 800053a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800053e:	fa20 f303 	lsr.w	r3, r0, r3
 8000542:	b2bc      	uxth	r4, r7
 8000544:	40b0      	lsls	r0, r6
 8000546:	4313      	orrs	r3, r2
 8000548:	0c02      	lsrs	r2, r0, #16
 800054a:	0c19      	lsrs	r1, r3, #16
 800054c:	b280      	uxth	r0, r0
 800054e:	fbb8 f9fe 	udiv	r9, r8, lr
 8000552:	fb0e 8819 	mls	r8, lr, r9, r8
 8000556:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	4588      	cmp	r8, r1
 8000560:	d951      	bls.n	8000606 <__udivmoddi4+0x336>
 8000562:	1879      	adds	r1, r7, r1
 8000564:	f109 3cff 	add.w	ip, r9, #4294967295
 8000568:	bf2c      	ite	cs
 800056a:	f04f 0a01 	movcs.w	sl, #1
 800056e:	f04f 0a00 	movcc.w	sl, #0
 8000572:	4588      	cmp	r8, r1
 8000574:	d902      	bls.n	800057c <__udivmoddi4+0x2ac>
 8000576:	f1ba 0f00 	cmp.w	sl, #0
 800057a:	d031      	beq.n	80005e0 <__udivmoddi4+0x310>
 800057c:	eba1 0108 	sub.w	r1, r1, r8
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	fb0e 1119 	mls	r1, lr, r9, r1
 800058c:	b29b      	uxth	r3, r3
 800058e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000592:	4543      	cmp	r3, r8
 8000594:	d235      	bcs.n	8000602 <__udivmoddi4+0x332>
 8000596:	18fb      	adds	r3, r7, r3
 8000598:	f109 31ff 	add.w	r1, r9, #4294967295
 800059c:	bf2c      	ite	cs
 800059e:	f04f 0a01 	movcs.w	sl, #1
 80005a2:	f04f 0a00 	movcc.w	sl, #0
 80005a6:	4543      	cmp	r3, r8
 80005a8:	d2bb      	bcs.n	8000522 <__udivmoddi4+0x252>
 80005aa:	f1ba 0f00 	cmp.w	sl, #0
 80005ae:	d1b8      	bne.n	8000522 <__udivmoddi4+0x252>
 80005b0:	f1a9 0102 	sub.w	r1, r9, #2
 80005b4:	443b      	add	r3, r7
 80005b6:	e7b4      	b.n	8000522 <__udivmoddi4+0x252>
 80005b8:	1a84      	subs	r4, r0, r2
 80005ba:	eb68 0203 	sbc.w	r2, r8, r3
 80005be:	2001      	movs	r0, #1
 80005c0:	4696      	mov	lr, r2
 80005c2:	e6eb      	b.n	800039c <__udivmoddi4+0xcc>
 80005c4:	443a      	add	r2, r7
 80005c6:	f1a8 0802 	sub.w	r8, r8, #2
 80005ca:	e72b      	b.n	8000424 <__udivmoddi4+0x154>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e710      	b.n	80003f6 <__udivmoddi4+0x126>
 80005d4:	3902      	subs	r1, #2
 80005d6:	443b      	add	r3, r7
 80005d8:	e6a9      	b.n	800032e <__udivmoddi4+0x5e>
 80005da:	443a      	add	r2, r7
 80005dc:	3802      	subs	r0, #2
 80005de:	e6be      	b.n	800035e <__udivmoddi4+0x8e>
 80005e0:	eba7 0808 	sub.w	r8, r7, r8
 80005e4:	f1a9 0c02 	sub.w	ip, r9, #2
 80005e8:	4441      	add	r1, r8
 80005ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ee:	fb09 f804 	mul.w	r8, r9, r4
 80005f2:	e7c9      	b.n	8000588 <__udivmoddi4+0x2b8>
 80005f4:	f1ae 0e02 	sub.w	lr, lr, #2
 80005f8:	443c      	add	r4, r7
 80005fa:	e744      	b.n	8000486 <__udivmoddi4+0x1b6>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e75e      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000602:	4649      	mov	r1, r9
 8000604:	e78d      	b.n	8000522 <__udivmoddi4+0x252>
 8000606:	eba1 0108 	sub.w	r1, r1, r8
 800060a:	46cc      	mov	ip, r9
 800060c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000610:	fb09 f804 	mul.w	r8, r9, r4
 8000614:	e7b8      	b.n	8000588 <__udivmoddi4+0x2b8>
 8000616:	bf00      	nop

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <EXTI4_IRQHandler>:

/**
 * @brief EXTI line 4 interrupt handler for WINC IRQ.
 */
void EXTI4_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    /* Clear and handle interrupt */
    if (__HAL_GPIO_EXTI_GET_IT(WINC_INT_PIN) != RESET) {
 8000620:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <EXTI4_IRQHandler+0x3c>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	f003 0310 	and.w	r3, r3, #16
 8000628:	2b00      	cmp	r3, #0
 800062a:	d105      	bne.n	8000638 <EXTI4_IRQHandler+0x1c>
 800062c:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <EXTI4_IRQHandler+0x3c>)
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	f003 0310 	and.w	r3, r3, #16
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <EXTI4_IRQHandler+0x20>
 8000638:	2301      	movs	r3, #1
 800063a:	e000      	b.n	800063e <EXTI4_IRQHandler+0x22>
 800063c:	2300      	movs	r3, #0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d008      	beq.n	8000654 <EXTI4_IRQHandler+0x38>
        __HAL_GPIO_EXTI_CLEAR_IT(WINC_INT_PIN);
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <EXTI4_IRQHandler+0x3c>)
 8000644:	2210      	movs	r2, #16
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	4b03      	ldr	r3, [pc, #12]	@ (8000658 <EXTI4_IRQHandler+0x3c>)
 800064a:	2210      	movs	r2, #16
 800064c:	611a      	str	r2, [r3, #16]
        HAL_GPIO_EXTI_IRQHandler(WINC_INT_PIN);
 800064e:	2010      	movs	r0, #16
 8000650:	f001 fc3a 	bl	8001ec8 <HAL_GPIO_EXTI_IRQHandler>
    }
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	44022000 	.word	0x44022000

0800065c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000660:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <MX_FREERTOS_Init+0x18>)
 8000662:	2100      	movs	r1, #0
 8000664:	4804      	ldr	r0, [pc, #16]	@ (8000678 <MX_FREERTOS_Init+0x1c>)
 8000666:	f006 fb71 	bl	8006d4c <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a03      	ldr	r2, [pc, #12]	@ (800067c <MX_FREERTOS_Init+0x20>)
 800066e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	0800ad1c 	.word	0x0800ad1c
 8000678:	08000681 	.word	0x08000681
 800067c:	200000a0 	.word	0x200000a0

08000680 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f006 fbf0 	bl	8006e6e <osDelay>
 800068e:	e7fb      	b.n	8000688 <StartDefaultTask+0x8>

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f001 f82a 	bl	80016ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f84a 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f9c8 	bl	8000a30 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006a0:	f000 f8ce 	bl	8000840 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006a4:	f000 f922 	bl	80008ec <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80006a8:	f000 f976 	bl	8000998 <MX_USART2_UART_Init>
  MX_ICACHE_Init();
 80006ac:	f000 f8b4 	bl	8000818 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006b0:	f006 fafc 	bl	8006cac <osKernelInitialize>
  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 80006b4:	f7ff ffd2 	bl	800065c <MX_FREERTOS_Init>

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 fe2b 	bl	8001314 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006be:	2101      	movs	r1, #1
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 fea7 	bl	8001414 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <main+0x94>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006cc:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <main+0x94>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80006d4:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <main+0x94>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <main+0x94>)
 80006dc:	2200      	movs	r2, #0
 80006de:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80006e0:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <main+0x94>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80006e6:	490f      	ldr	r1, [pc, #60]	@ (8000724 <main+0x94>)
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 ff21 	bl	8001530 <BSP_COM_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <main+0x68>
  {
    Error_Handler();
 80006f4:	f000 fa6a 	bl	8000bcc <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80006f8:	480b      	ldr	r0, [pc, #44]	@ (8000728 <main+0x98>)
 80006fa:	f009 fd07 	bl	800a10c <iprintf>
  /* -- Sample board code to switch on led ---- */
  BSP_LED_On(LED_GREEN);
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 fe4c 	bl	800139c <BSP_LED_On>

  /* USER CODE END BSP */

  /* Start scheduler */
  osKernelStart();
 8000704:	f006 faf8 	bl	8006cf8 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  m2m_wifi_handle_events(NULL);   /* must be called regularly */
 8000708:	2000      	movs	r0, #0
 800070a:	f008 ff7f 	bl	800960c <m2m_wifi_handle_events>
	      /* … any other low-priority work … */

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 800070e:	4b07      	ldr	r3, [pc, #28]	@ (800072c <main+0x9c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d1f8      	bne.n	8000708 <main+0x78>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000716:	4b05      	ldr	r3, [pc, #20]	@ (800072c <main+0x9c>)
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle led ---- */
      BSP_LED_Toggle(LED_GREEN);
 800071c:	2000      	movs	r0, #0
 800071e:	f000 fe5b 	bl	80013d8 <BSP_LED_Toggle>
	  m2m_wifi_handle_events(NULL);   /* must be called regularly */
 8000722:	e7f1      	b.n	8000708 <main+0x78>
 8000724:	200000a4 	.word	0x200000a4
 8000728:	0800ace8 	.word	0x0800ace8
 800072c:	200000b4 	.word	0x200000b4

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b09c      	sub	sp, #112	@ 0x70
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2250      	movs	r2, #80	@ 0x50
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f009 fdce 	bl	800a2e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000756:	4b2e      	ldr	r3, [pc, #184]	@ (8000810 <SystemClock_Config+0xe0>)
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	4a2d      	ldr	r2, [pc, #180]	@ (8000810 <SystemClock_Config+0xe0>)
 800075c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000760:	6113      	str	r3, [r2, #16]
 8000762:	4b2b      	ldr	r3, [pc, #172]	@ (8000810 <SystemClock_Config+0xe0>)
 8000764:	691b      	ldr	r3, [r3, #16]
 8000766:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800076e:	bf00      	nop
 8000770:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <SystemClock_Config+0xe0>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	2b08      	cmp	r3, #8
 800077a:	d1f9      	bne.n	8000770 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000788:	2340      	movs	r3, #64	@ 0x40
 800078a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 8000790:	2301      	movs	r3, #1
 8000792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000794:	2304      	movs	r3, #4
 8000796:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8000798:	231f      	movs	r3, #31
 800079a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80007a8:	230c      	movs	r3, #12
 80007aa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fbf1 	bl	8001fa0 <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007c4:	f000 fa02 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	231f      	movs	r3, #31
 80007ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2303      	movs	r3, #3
 80007ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	2105      	movs	r1, #5
 80007e6:	4618      	mov	r0, r3
 80007e8:	f002 f812 	bl	8002810 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007f2:	f000 f9eb 	bl	8000bcc <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80007f6:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <SystemClock_Config+0xe4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80007fe:	4a05      	ldr	r2, [pc, #20]	@ (8000814 <SystemClock_Config+0xe4>)
 8000800:	f043 0320 	orr.w	r3, r3, #32
 8000804:	6013      	str	r3, [r2, #0]
}
 8000806:	bf00      	nop
 8000808:	3770      	adds	r7, #112	@ 0x70
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	44020800 	.word	0x44020800
 8000814:	40022000 	.word	0x40022000

08000818 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800081c:	2000      	movs	r0, #0
 800081e:	f001 fb8f 	bl	8001f40 <HAL_ICACHE_ConfigAssociativityMode>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000828:	f000 f9d0 	bl	8000bcc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800082c:	f001 fba8 	bl	8001f80 <HAL_ICACHE_Enable>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000836:	f000 f9c9 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000844:	4b27      	ldr	r3, [pc, #156]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 8000846:	4a28      	ldr	r2, [pc, #160]	@ (80008e8 <MX_SPI1_Init+0xa8>)
 8000848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084a:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 800084c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000852:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000858:	4b22      	ldr	r3, [pc, #136]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 800085a:	2203      	movs	r2, #3
 800085c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085e:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000864:	4b1f      	ldr	r3, [pc, #124]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086a:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 800086c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000870:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000878:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000884:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 8000886:	2200      	movs	r2, #0
 8000888:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800088a:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 800088c:	2207      	movs	r2, #7
 800088e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 8000892:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000896:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 800089a:	2200      	movs	r2, #0
 800089c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008bc:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_SPI1_Init+0xa4>)
 80008d0:	f004 fbea 	bl	80050a8 <HAL_SPI_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80008da:	f000 f977 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000b8 	.word	0x200000b8
 80008e8:	40013000 	.word	0x40013000

080008ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008f0:	4b27      	ldr	r3, [pc, #156]	@ (8000990 <MX_SPI2_Init+0xa4>)
 80008f2:	4a28      	ldr	r2, [pc, #160]	@ (8000994 <MX_SPI2_Init+0xa8>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b26      	ldr	r3, [pc, #152]	@ (8000990 <MX_SPI2_Init+0xa4>)
 80008f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80008fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008fe:	4b24      	ldr	r3, [pc, #144]	@ (8000990 <MX_SPI2_Init+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000904:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <MX_SPI2_Init+0xa4>)
 8000906:	2203      	movs	r2, #3
 8000908:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_SPI2_Init+0xa4>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000910:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_SPI2_Init+0xa4>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <MX_SPI2_Init+0xa4>)
 8000918:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800091c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_SPI2_Init+0xa4>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_SPI2_Init+0xa4>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_SPI2_Init+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_SPI2_Init+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_SPI2_Init+0xa4>)
 8000938:	2207      	movs	r2, #7
 800093a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_SPI2_Init+0xa4>)
 800093e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000942:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_SPI2_Init+0xa4>)
 8000946:	2200      	movs	r2, #0
 8000948:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_SPI2_Init+0xa4>)
 800094c:	2200      	movs	r2, #0
 800094e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_SPI2_Init+0xa4>)
 8000952:	2200      	movs	r2, #0
 8000954:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_SPI2_Init+0xa4>)
 8000958:	2200      	movs	r2, #0
 800095a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_SPI2_Init+0xa4>)
 800095e:	2200      	movs	r2, #0
 8000960:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_SPI2_Init+0xa4>)
 8000964:	2200      	movs	r2, #0
 8000966:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_SPI2_Init+0xa4>)
 800096a:	2200      	movs	r2, #0
 800096c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_SPI2_Init+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_SPI2_Init+0xa4>)
 8000976:	2200      	movs	r2, #0
 8000978:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_SPI2_Init+0xa4>)
 800097c:	f004 fb94 	bl	80050a8 <HAL_SPI_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000986:	f000 f921 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000148 	.word	0x20000148
 8000994:	40003800 	.word	0x40003800

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 800099e:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <MX_USART2_UART_Init+0x94>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e0:	4811      	ldr	r0, [pc, #68]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009e2:	f005 fb6b 	bl	80060bc <HAL_UART_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f8ee 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009f4:	f006 f826 	bl	8006a44 <HAL_UARTEx_SetTxFifoThreshold>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009fe:	f000 f8e5 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4808      	ldr	r0, [pc, #32]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 8000a06:	f006 f85b 	bl	8006ac0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a10:	f000 f8dc 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 8000a16:	f005 ffdc 	bl	80069d2 <HAL_UARTEx_DisableFifoMode>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f000 f8d4 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200001d8 	.word	0x200001d8
 8000a2c:	40004400 	.word	0x40004400

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	4b4a      	ldr	r3, [pc, #296]	@ (8000b70 <MX_GPIO_Init+0x140>)
 8000a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a4c:	4a48      	ldr	r2, [pc, #288]	@ (8000b70 <MX_GPIO_Init+0x140>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a56:	4b46      	ldr	r3, [pc, #280]	@ (8000b70 <MX_GPIO_Init+0x140>)
 8000a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b42      	ldr	r3, [pc, #264]	@ (8000b70 <MX_GPIO_Init+0x140>)
 8000a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a6a:	4a41      	ldr	r2, [pc, #260]	@ (8000b70 <MX_GPIO_Init+0x140>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a74:	4b3e      	ldr	r3, [pc, #248]	@ (8000b70 <MX_GPIO_Init+0x140>)
 8000a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b3b      	ldr	r3, [pc, #236]	@ (8000b70 <MX_GPIO_Init+0x140>)
 8000a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a88:	4a39      	ldr	r2, [pc, #228]	@ (8000b70 <MX_GPIO_Init+0x140>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a92:	4b37      	ldr	r3, [pc, #220]	@ (8000b70 <MX_GPIO_Init+0x140>)
 8000a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	4833      	ldr	r0, [pc, #204]	@ (8000b74 <MX_GPIO_Init+0x144>)
 8000aa6:	f001 f9dd 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_WINC_GPIO_Port, CS_WINC_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2120      	movs	r1, #32
 8000aae:	4832      	ldr	r0, [pc, #200]	@ (8000b78 <MX_GPIO_Init+0x148>)
 8000ab0:	f001 f9d8 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_WINC_Pin|CHIP_EN_WINC_Pin|SDCARD_CS_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f240 1103 	movw	r1, #259	@ 0x103
 8000aba:	4830      	ldr	r0, [pc, #192]	@ (8000b7c <MX_GPIO_Init+0x14c>)
 8000abc:	f001 f9d2 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000ac0:	2318      	movs	r3, #24
 8000ac2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000ad0:	230d      	movs	r3, #13
 8000ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4826      	ldr	r0, [pc, #152]	@ (8000b74 <MX_GPIO_Init+0x144>)
 8000adc:	f001 f864 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ae0:	2320      	movs	r3, #32
 8000ae2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	481f      	ldr	r0, [pc, #124]	@ (8000b74 <MX_GPIO_Init+0x144>)
 8000af8:	f001 f856 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_WINC_PIN_Pin */
  GPIO_InitStruct.Pin = IRQ_WINC_PIN_Pin;
 8000afc:	2310      	movs	r3, #16
 8000afe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_WINC_PIN_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	481a      	ldr	r0, [pc, #104]	@ (8000b78 <MX_GPIO_Init+0x148>)
 8000b10:	f001 f84a 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_WINC_Pin */
  GPIO_InitStruct.Pin = CS_WINC_Pin;
 8000b14:	2320      	movs	r3, #32
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_WINC_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4813      	ldr	r0, [pc, #76]	@ (8000b78 <MX_GPIO_Init+0x148>)
 8000b2c:	f001 f83c 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_WINC_Pin CHIP_EN_WINC_Pin SDCARD_CS_Pin */
  GPIO_InitStruct.Pin = RESET_WINC_Pin|CHIP_EN_WINC_Pin|SDCARD_CS_Pin;
 8000b30:	f240 1303 	movw	r3, #259	@ 0x103
 8000b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4619      	mov	r1, r3
 8000b48:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <MX_GPIO_Init+0x14c>)
 8000b4a:	f001 f82d 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4806      	ldr	r0, [pc, #24]	@ (8000b7c <MX_GPIO_Init+0x14c>)
 8000b62:	f001 f821 	bl	8001ba8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	44020c00 	.word	0x44020c00
 8000b74:	42020000 	.word	0x42020000
 8000b78:	42020800 	.word	0x42020800
 8000b7c:	42020400 	.word	0x42020400

08000b80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d101      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000b92:	f000 fdd3 	bl	800173c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40012c00 	.word	0x40012c00

08000ba4 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <BSP_PB_Callback+0x24>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200000b4 	.word	0x200000b4

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <Error_Handler+0x8>

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	210f      	movs	r1, #15
 8000be0:	f06f 0001 	mvn.w	r0, #1
 8000be4:	f000 feca 	bl	800197c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0b0      	sub	sp, #192	@ 0xc0
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c04:	f107 0320 	add.w	r3, r7, #32
 8000c08:	2288      	movs	r2, #136	@ 0x88
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f009 fb67 	bl	800a2e0 <memset>
  if(hspi->Instance==SPI1)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a86      	ldr	r2, [pc, #536]	@ (8000e30 <HAL_SPI_MspInit+0x244>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d17f      	bne.n	8000d1c <HAL_SPI_MspInit+0x130>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000c1c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2e:	f107 0320 	add.w	r3, r7, #32
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 f966 	bl	8002f04 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000c3e:	f7ff ffc5 	bl	8000bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c42:	4b7c      	ldr	r3, [pc, #496]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000c44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c48:	4a7a      	ldr	r2, [pc, #488]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000c4a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c4e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000c52:	4b78      	ldr	r3, [pc, #480]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000c54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c5c:	61fb      	str	r3, [r7, #28]
 8000c5e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b74      	ldr	r3, [pc, #464]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c66:	4a73      	ldr	r2, [pc, #460]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c70:	4b70      	ldr	r3, [pc, #448]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c84:	4a6b      	ldr	r2, [pc, #428]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000c86:	f043 0302 	orr.w	r3, r3, #2
 8000c8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c8e:	4b69      	ldr	r3, [pc, #420]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c9c:	2340      	movs	r3, #64	@ 0x40
 8000c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	485d      	ldr	r0, [pc, #372]	@ (8000e38 <HAL_SPI_MspInit+0x24c>)
 8000cc2:	f000 ff71 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cc6:	2380      	movs	r3, #128	@ 0x80
 8000cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cde:	2305      	movs	r3, #5
 8000ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4853      	ldr	r0, [pc, #332]	@ (8000e38 <HAL_SPI_MspInit+0x24c>)
 8000cec:	f000 ff5c 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d08:	2305      	movs	r3, #5
 8000d0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d12:	4619      	mov	r1, r3
 8000d14:	4849      	ldr	r0, [pc, #292]	@ (8000e3c <HAL_SPI_MspInit+0x250>)
 8000d16:	f000 ff47 	bl	8001ba8 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d1a:	e084      	b.n	8000e26 <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a47      	ldr	r2, [pc, #284]	@ (8000e40 <HAL_SPI_MspInit+0x254>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d17f      	bne.n	8000e26 <HAL_SPI_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d2a:	f04f 0300 	mov.w	r3, #0
 8000d2e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d38:	f107 0320 	add.w	r3, r7, #32
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 f8e1 	bl	8002f04 <HAL_RCCEx_PeriphCLKConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_SPI_MspInit+0x160>
      Error_Handler();
 8000d48:	f7ff ff40 	bl	8000bcc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d4c:	4b39      	ldr	r3, [pc, #228]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d52:	4a38      	ldr	r2, [pc, #224]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d58:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000d5c:	4b35      	ldr	r3, [pc, #212]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000d5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b32      	ldr	r3, [pc, #200]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d70:	4a30      	ldr	r2, [pc, #192]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d88:	4b2a      	ldr	r3, [pc, #168]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d8e:	4a29      	ldr	r2, [pc, #164]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d98:	4b26      	ldr	r3, [pc, #152]	@ (8000e34 <HAL_SPI_MspInit+0x248>)
 8000d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SDCARD_MOSI_Pin;
 8000da6:	2302      	movs	r3, #2
 8000da8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(SDCARD_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481e      	ldr	r0, [pc, #120]	@ (8000e44 <HAL_SPI_MspInit+0x258>)
 8000dcc:	f000 feec 	bl	8001ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDCARD_MISO_Pin;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000de8:	2305      	movs	r3, #5
 8000dea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(SDCARD_MISO_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000df2:	4619      	mov	r1, r3
 8000df4:	4813      	ldr	r0, [pc, #76]	@ (8000e44 <HAL_SPI_MspInit+0x258>)
 8000df6:	f000 fed7 	bl	8001ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDCARD_SCK_Pin;
 8000dfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e14:	2305      	movs	r3, #5
 8000e16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(SDCARD_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4806      	ldr	r0, [pc, #24]	@ (8000e3c <HAL_SPI_MspInit+0x250>)
 8000e22:	f000 fec1 	bl	8001ba8 <HAL_GPIO_Init>
}
 8000e26:	bf00      	nop
 8000e28:	37c0      	adds	r7, #192	@ 0xc0
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40013000 	.word	0x40013000
 8000e34:	44020c00 	.word	0x44020c00
 8000e38:	42020000 	.word	0x42020000
 8000e3c:	42020400 	.word	0x42020400
 8000e40:	40003800 	.word	0x40003800
 8000e44:	42020800 	.word	0x42020800

08000e48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0ae      	sub	sp, #184	@ 0xb8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	2288      	movs	r2, #136	@ 0x88
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f009 fa39 	bl	800a2e0 <memset>
  if(huart->Instance==USART2)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a38      	ldr	r2, [pc, #224]	@ (8000f54 <HAL_UART_MspInit+0x10c>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d169      	bne.n	8000f4c <HAL_UART_MspInit+0x104>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e78:	f04f 0202 	mov.w	r2, #2
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e88:	f107 0318 	add.w	r3, r7, #24
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 f839 	bl	8002f04 <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000e98:	f7ff fe98 	bl	8000bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f58 <HAL_UART_MspInit+0x110>)
 8000e9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8000f58 <HAL_UART_MspInit+0x110>)
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000eac:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <HAL_UART_MspInit+0x110>)
 8000eae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <HAL_UART_MspInit+0x110>)
 8000ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ec0:	4a25      	ldr	r2, [pc, #148]	@ (8000f58 <HAL_UART_MspInit+0x110>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eca:	4b23      	ldr	r3, [pc, #140]	@ (8000f58 <HAL_UART_MspInit+0x110>)
 8000ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f58 <HAL_UART_MspInit+0x110>)
 8000eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ede:	4a1e      	ldr	r2, [pc, #120]	@ (8000f58 <HAL_UART_MspInit+0x110>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <HAL_UART_MspInit+0x110>)
 8000eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PC7     ------> USART2_RX
    PA8     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = DISPLAY_RX_Pin;
 8000ef6:	2380      	movs	r3, #128	@ 0x80
 8000ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF13_USART2;
 8000f0e:	230d      	movs	r3, #13
 8000f10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DISPLAY_RX_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4810      	ldr	r0, [pc, #64]	@ (8000f5c <HAL_UART_MspInit+0x114>)
 8000f1c:	f000 fe44 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPLAY_TX_Pin;
 8000f20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DISPLAY_TX_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f44:	4619      	mov	r1, r3
 8000f46:	4806      	ldr	r0, [pc, #24]	@ (8000f60 <HAL_UART_MspInit+0x118>)
 8000f48:	f000 fe2e 	bl	8001ba8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f4c:	bf00      	nop
 8000f4e:	37b8      	adds	r7, #184	@ 0xb8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40004400 	.word	0x40004400
 8000f58:	44020c00 	.word	0x44020c00
 8000f5c:	42020800 	.word	0x42020800
 8000f60:	42020000 	.word	0x42020000

08000f64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	@ 0x38
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001028 <HAL_InitTick+0xc4>)
 8000f6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000f72:	4a2d      	ldr	r2, [pc, #180]	@ (8001028 <HAL_InitTick+0xc4>)
 8000f74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f78:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001028 <HAL_InitTick+0xc4>)
 8000f7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f8a:	f107 0210 	add.w	r2, r7, #16
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 ff7d 	bl	8002e94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f9a:	f001 ff4f 	bl	8002e3c <HAL_RCC_GetPCLK2Freq>
 8000f9e:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	4a21      	ldr	r2, [pc, #132]	@ (800102c <HAL_InitTick+0xc8>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	09db      	lsrs	r3, r3, #7
 8000fac:	3b01      	subs	r3, #1
 8000fae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <HAL_InitTick+0xcc>)
 8000fb2:	4a20      	ldr	r2, [pc, #128]	@ (8001034 <HAL_InitTick+0xd0>)
 8000fb4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (100000U / 1000U) - 1U;
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001030 <HAL_InitTick+0xcc>)
 8000fb8:	2263      	movs	r2, #99	@ 0x63
 8000fba:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8001030 <HAL_InitTick+0xcc>)
 8000fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fc0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <HAL_InitTick+0xcc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <HAL_InitTick+0xcc>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000fce:	4818      	ldr	r0, [pc, #96]	@ (8001030 <HAL_InitTick+0xcc>)
 8000fd0:	f004 fd9b 	bl	8005b0a <HAL_TIM_Base_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8000fda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d118      	bne.n	8001014 <HAL_InitTick+0xb0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000fe2:	4813      	ldr	r0, [pc, #76]	@ (8001030 <HAL_InitTick+0xcc>)
 8000fe4:	f004 fdf2 	bl	8005bcc <HAL_TIM_Base_Start_IT>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8000fee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10e      	bne.n	8001014 <HAL_InitTick+0xb0>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d808      	bhi.n	800100e <HAL_InitTick+0xaa>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	202a      	movs	r0, #42	@ 0x2a
 8001002:	f000 fcbb 	bl	800197c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001006:	4a0c      	ldr	r2, [pc, #48]	@ (8001038 <HAL_InitTick+0xd4>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	e002      	b.n	8001014 <HAL_InitTick+0xb0>
      }
      else
      {
        status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
}

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001014:	202a      	movs	r0, #42	@ 0x2a
 8001016:	f000 fccb 	bl	80019b0 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 800101a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800101e:	4618      	mov	r0, r3
 8001020:	3738      	adds	r7, #56	@ 0x38
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	44020c00 	.word	0x44020c00
 800102c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001030:	2000026c 	.word	0x2000026c
 8001034:	40012c00 	.word	0x40012c00
 8001038:	20000018 	.word	0x20000018

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <NMI_Handler+0x4>

08001044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <MemManage_Handler+0x4>

08001054 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <UsageFault_Handler+0x4>

08001064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001076:	2000      	movs	r0, #0
 8001078:	f000 fa44 	bl	8001504 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001084:	4802      	ldr	r0, [pc, #8]	@ (8001090 <TIM1_UP_IRQHandler+0x10>)
 8001086:	f004 fdf5 	bl	8005c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000026c 	.word	0x2000026c

08001094 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e00a      	b.n	80010bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010a6:	f3af 8000 	nop.w
 80010aa:	4601      	mov	r1, r0
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	60ba      	str	r2, [r7, #8]
 80010b2:	b2ca      	uxtb	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbf0      	blt.n	80010a6 <_read+0x12>
  }

  return len;
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e009      	b.n	80010f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fa85 	bl	80015f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbf1      	blt.n	80010e0 <_write+0x12>
  }
  return len;
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_close>:

int _close(int file)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800112e:	605a      	str	r2, [r3, #4]
  return 0;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_isatty>:

int _isatty(int file)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	@ (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	@ (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f009 f8fc 	bl	800a39c <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20008000 	.word	0x20008000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	200002b8 	.word	0x200002b8
 80011d8:	200031e8 	.word	0x200031e8

080011dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011e2:	4b30      	ldr	r3, [pc, #192]	@ (80012a4 <SystemInit+0xc8>)
 80011e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e8:	4a2e      	ldr	r2, [pc, #184]	@ (80012a4 <SystemInit+0xc8>)
 80011ea:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011ee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80011f2:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <SystemInit+0xcc>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80011f8:	4b2b      	ldr	r3, [pc, #172]	@ (80012a8 <SystemInit+0xcc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80011fe:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <SystemInit+0xcc>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001204:	4b28      	ldr	r3, [pc, #160]	@ (80012a8 <SystemInit+0xcc>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4927      	ldr	r1, [pc, #156]	@ (80012a8 <SystemInit+0xcc>)
 800120a:	4b28      	ldr	r3, [pc, #160]	@ (80012ac <SystemInit+0xd0>)
 800120c:	4013      	ands	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001210:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <SystemInit+0xcc>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001216:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <SystemInit+0xcc>)
 8001218:	2200      	movs	r2, #0
 800121a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800121c:	4b22      	ldr	r3, [pc, #136]	@ (80012a8 <SystemInit+0xcc>)
 800121e:	4a24      	ldr	r2, [pc, #144]	@ (80012b0 <SystemInit+0xd4>)
 8001220:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001222:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <SystemInit+0xcc>)
 8001224:	2200      	movs	r2, #0
 8001226:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <SystemInit+0xcc>)
 800122a:	4a21      	ldr	r2, [pc, #132]	@ (80012b0 <SystemInit+0xd4>)
 800122c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <SystemInit+0xcc>)
 8001230:	2200      	movs	r2, #0
 8001232:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001234:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <SystemInit+0xcc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1b      	ldr	r2, [pc, #108]	@ (80012a8 <SystemInit+0xcc>)
 800123a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <SystemInit+0xcc>)
 8001242:	2200      	movs	r2, #0
 8001244:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001246:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <SystemInit+0xc8>)
 8001248:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800124c:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800124e:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <SystemInit+0xd8>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001256:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800125e:	d003      	beq.n	8001268 <SystemInit+0x8c>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001266:	d117      	bne.n	8001298 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <SystemInit+0xd8>)
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <SystemInit+0xd8>)
 8001276:	4a10      	ldr	r2, [pc, #64]	@ (80012b8 <SystemInit+0xdc>)
 8001278:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <SystemInit+0xd8>)
 800127c:	4a0f      	ldr	r2, [pc, #60]	@ (80012bc <SystemInit+0xe0>)
 800127e:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <SystemInit+0xd8>)
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <SystemInit+0xd8>)
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <SystemInit+0xd8>)
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <SystemInit+0xd8>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	61d3      	str	r3, [r2, #28]
  }
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00
 80012a8:	44020c00 	.word	0x44020c00
 80012ac:	fae2eae3 	.word	0xfae2eae3
 80012b0:	01010280 	.word	0x01010280
 80012b4:	40022000 	.word	0x40022000
 80012b8:	08192a3b 	.word	0x08192a3b
 80012bc:	4c5d6e7f 	.word	0x4c5d6e7f

080012c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80012c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012c6:	e003      	b.n	80012d0 <LoopCopyDataInit>

080012c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012ce:	3104      	adds	r1, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012d0:	480b      	ldr	r0, [pc, #44]	@ (8001300 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012d8:	d3f6      	bcc.n	80012c8 <CopyDataInit>
	ldr	r2, =_sbss
 80012da:	4a0b      	ldr	r2, [pc, #44]	@ (8001308 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012dc:	e002      	b.n	80012e4 <LoopFillZerobss>

080012de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012e0:	f842 3b04 	str.w	r3, [r2], #4

080012e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <LoopForever+0x16>)
	cmp	r2, r3
 80012e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012e8:	d3f9      	bcc.n	80012de <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012ea:	f7ff ff77 	bl	80011dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ee:	f009 f85b 	bl	800a3a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012f2:	f7ff f9cd 	bl	8000690 <main>

080012f6 <LoopForever>:

LoopForever:
    b LoopForever
 80012f6:	e7fe      	b.n	80012f6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80012f8:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 80012fc:	0800aecc 	.word	0x0800aecc
	ldr	r0, =_sdata
 8001300:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001304:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8001308:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 800130c:	200031e8 	.word	0x200031e8

08001310 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC1_IRQHandler>
	...

08001314 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001328:	f06f 0301 	mvn.w	r3, #1
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
 800132e:	e02c      	b.n	800138a <BSP_LED_Init+0x76>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10e      	bne.n	8001354 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <BSP_LED_Init+0x80>)
 8001338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800133c:	4a15      	ldr	r2, [pc, #84]	@ (8001394 <BSP_LED_Init+0x80>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001346:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <BSP_LED_Init+0x80>)
 8001348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001354:	2320      	movs	r3, #32
 8001356:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4a0c      	ldr	r2, [pc, #48]	@ (8001398 <BSP_LED_Init+0x84>)
 8001368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136c:	f107 0210 	add.w	r2, r7, #16
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fc18 	bl	8001ba8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	4a07      	ldr	r2, [pc, #28]	@ (8001398 <BSP_LED_Init+0x84>)
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	2120      	movs	r1, #32
 8001382:	2200      	movs	r2, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fd6d 	bl	8001e64 <HAL_GPIO_WritePin>
  }

  return ret;
 800138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800138c:	4618      	mov	r0, r3
 800138e:	3728      	adds	r7, #40	@ 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	44020c00 	.word	0x44020c00
 8001398:	20000008 	.word	0x20000008

0800139c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <BSP_LED_On+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013b0:	f06f 0301 	mvn.w	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	e008      	b.n	80013ca <BSP_LED_On+0x2e>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4a06      	ldr	r2, [pc, #24]	@ (80013d4 <BSP_LED_On+0x38>)
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	2120      	movs	r1, #32
 80013c2:	2201      	movs	r2, #1
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 fd4d 	bl	8001e64 <HAL_GPIO_WritePin>
  }

  return ret;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000008 	.word	0x20000008

080013d8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <BSP_LED_Toggle+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013ec:	f06f 0301 	mvn.w	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	e008      	b.n	8001406 <BSP_LED_Toggle+0x2e>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4a06      	ldr	r2, [pc, #24]	@ (8001410 <BSP_LED_Toggle+0x38>)
 80013f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fc:	2220      	movs	r2, #32
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fd47 	bl	8001e94 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000008 	.word	0x20000008

08001414 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	460a      	mov	r2, r1
 800141e:	71fb      	strb	r3, [r7, #7]
 8001420:	4613      	mov	r3, r2
 8001422:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001424:	4b30      	ldr	r3, [pc, #192]	@ (80014e8 <BSP_PB_Init+0xd4>)
 8001426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800142a:	4a2f      	ldr	r2, [pc, #188]	@ (80014e8 <BSP_PB_Init+0xd4>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001434:	4b2c      	ldr	r3, [pc, #176]	@ (80014e8 <BSP_PB_Init+0xd4>)
 8001436:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001442:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001446:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001448:	2302      	movs	r3, #2
 800144a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800144c:	2302      	movs	r3, #2
 800144e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10c      	bne.n	8001470 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4a23      	ldr	r2, [pc, #140]	@ (80014ec <BSP_PB_Init+0xd8>)
 800145e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001462:	f107 020c 	add.w	r2, r7, #12
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fb9d 	bl	8001ba8 <HAL_GPIO_Init>
 800146e:	e036      	b.n	80014de <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001470:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <BSP_PB_Init+0xdc>)
 8001472:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	4a1d      	ldr	r2, [pc, #116]	@ (80014ec <BSP_PB_Init+0xd8>)
 8001478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147c:	f107 020c 	add.w	r2, r7, #12
 8001480:	4611      	mov	r1, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fb90 	bl	8001ba8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4a18      	ldr	r2, [pc, #96]	@ (80014f4 <BSP_PB_Init+0xe0>)
 8001494:	441a      	add	r2, r3
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	4917      	ldr	r1, [pc, #92]	@ (80014f8 <BSP_PB_Init+0xe4>)
 800149a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800149e:	4619      	mov	r1, r3
 80014a0:	4610      	mov	r0, r2
 80014a2:	f000 fb25 	bl	8001af0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80014a6:	79fa      	ldrb	r2, [r7, #7]
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4a10      	ldr	r2, [pc, #64]	@ (80014f4 <BSP_PB_Init+0xe0>)
 80014b2:	1898      	adds	r0, r3, r2
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4a11      	ldr	r2, [pc, #68]	@ (80014fc <BSP_PB_Init+0xe8>)
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	461a      	mov	r2, r3
 80014be:	2100      	movs	r1, #0
 80014c0:	f000 faea 	bl	8001a98 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80014c4:	2018      	movs	r0, #24
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001500 <BSP_PB_Init+0xec>)
 80014ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ce:	2200      	movs	r2, #0
 80014d0:	4619      	mov	r1, r3
 80014d2:	f000 fa53 	bl	800197c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80014d6:	2318      	movs	r3, #24
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fa69 	bl	80019b0 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	44020c00 	.word	0x44020c00
 80014ec:	2000000c 	.word	0x2000000c
 80014f0:	10110000 	.word	0x10110000
 80014f4:	200002bc 	.word	0x200002bc
 80014f8:	0800ad58 	.word	0x0800ad58
 80014fc:	20000010 	.word	0x20000010
 8001500:	20000014 	.word	0x20000014

08001504 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800150e:	79fa      	ldrb	r2, [r7, #7]
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4a04      	ldr	r2, [pc, #16]	@ (800152c <BSP_PB_IRQHandler+0x28>)
 800151a:	4413      	add	r3, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fafb 	bl	8001b18 <HAL_EXTI_IRQHandler>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200002bc 	.word	0x200002bc

08001530 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001546:	f06f 0301 	mvn.w	r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e018      	b.n	8001580 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2294      	movs	r2, #148	@ 0x94
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	4a0d      	ldr	r2, [pc, #52]	@ (800158c <BSP_COM_Init+0x5c>)
 8001558:	4413      	add	r3, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f870 	bl	8001640 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	2294      	movs	r2, #148	@ 0x94
 8001564:	fb02 f303 	mul.w	r3, r2, r3
 8001568:	4a08      	ldr	r2, [pc, #32]	@ (800158c <BSP_COM_Init+0x5c>)
 800156a:	4413      	add	r3, r2
 800156c:	6839      	ldr	r1, [r7, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f80e 	bl	8001590 <MX_USART_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800157a:	f06f 0303 	mvn.w	r3, #3
 800157e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001580:	68fb      	ldr	r3, [r7, #12]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200002c8 	.word	0x200002c8

08001590 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800159a:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <MX_USART_Init+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	220c      	movs	r2, #12
 80015ae:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	895b      	ldrh	r3, [r3, #10]
 80015b4:	461a      	mov	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	891b      	ldrh	r3, [r3, #8]
 80015c6:	461a      	mov	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	899b      	ldrh	r3, [r3, #12]
 80015d0:	461a      	mov	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015dc:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f004 fd69 	bl	80060bc <HAL_UART_Init>
 80015ea:	4603      	mov	r3, r0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000004 	.word	0x20000004

080015f8 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <__io_putchar+0x30>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	2394      	movs	r3, #148	@ 0x94
 8001608:	fb02 f303 	mul.w	r3, r2, r3
 800160c:	4a07      	ldr	r2, [pc, #28]	@ (800162c <__io_putchar+0x34>)
 800160e:	1898      	adds	r0, r3, r2
 8001610:	1d39      	adds	r1, r7, #4
 8001612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001616:	2201      	movs	r2, #1
 8001618:	f004 fda0 	bl	800615c <HAL_UART_Transmit>
  return ch;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000035c 	.word	0x2000035c
 800162c:	200002c8 	.word	0x200002c8

08001630 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff fab5 	bl	8000ba4 <BSP_PB_Callback>
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001648:	4b26      	ldr	r3, [pc, #152]	@ (80016e4 <COM1_MspInit+0xa4>)
 800164a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800164e:	4a25      	ldr	r2, [pc, #148]	@ (80016e4 <COM1_MspInit+0xa4>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001658:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <COM1_MspInit+0xa4>)
 800165a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001666:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <COM1_MspInit+0xa4>)
 8001668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800166c:	4a1d      	ldr	r2, [pc, #116]	@ (80016e4 <COM1_MspInit+0xa4>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001676:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <COM1_MspInit+0xa4>)
 8001678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001684:	4b17      	ldr	r3, [pc, #92]	@ (80016e4 <COM1_MspInit+0xa4>)
 8001686:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800168a:	4a16      	ldr	r2, [pc, #88]	@ (80016e4 <COM1_MspInit+0xa4>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001690:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001694:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <COM1_MspInit+0xa4>)
 8001696:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800169a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80016a2:	2310      	movs	r3, #16
 80016a4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80016aa:	2302      	movs	r3, #2
 80016ac:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80016b2:	230d      	movs	r3, #13
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	480a      	ldr	r0, [pc, #40]	@ (80016e8 <COM1_MspInit+0xa8>)
 80016be:	f000 fa73 	bl	8001ba8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80016c2:	2308      	movs	r3, #8
 80016c4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80016ca:	230d      	movs	r3, #13
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4804      	ldr	r0, [pc, #16]	@ (80016e8 <COM1_MspInit+0xa8>)
 80016d6:	f000 fa67 	bl	8001ba8 <HAL_GPIO_Init>
}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	@ 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	44020c00 	.word	0x44020c00
 80016e8:	42020000 	.word	0x42020000

080016ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f000 f938 	bl	8001966 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80016f6:	f001 fa43 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 80016fa:	4602      	mov	r2, r0
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_Init+0x44>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	490b      	ldr	r1, [pc, #44]	@ (8001734 <HAL_Init+0x48>)
 8001706:	5ccb      	ldrb	r3, [r1, r3]
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
 800170c:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <HAL_Init+0x4c>)
 800170e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001710:	2004      	movs	r0, #4
 8001712:	f000 f969 	bl	80019e8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001716:	200f      	movs	r0, #15
 8001718:	f7ff fc24 	bl	8000f64 <HAL_InitTick>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e002      	b.n	800172c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001726:	f7ff fa57 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	bd80      	pop	{r7, pc}
 8001730:	44020c00 	.word	0x44020c00
 8001734:	0800ad40 	.word	0x0800ad40
 8001738:	20000000 	.word	0x20000000

0800173c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_IncTick+0x20>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_IncTick+0x24>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <HAL_IncTick+0x24>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000001c 	.word	0x2000001c
 8001760:	20000360 	.word	0x20000360

08001764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b03      	ldr	r3, [pc, #12]	@ (8001778 <HAL_GetTick+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000360 	.word	0x20000360

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff ffee 	bl	8001764 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001796:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <HAL_Delay+0x44>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a2:	bf00      	nop
 80017a4:	f7ff ffde 	bl	8001764 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000001c 	.word	0x2000001c

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	@ (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800186e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001872:	2b00      	cmp	r3, #0
 8001874:	db12      	blt.n	800189c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	490a      	ldr	r1, [pc, #40]	@ (80018a8 <__NVIC_DisableIRQ+0x44>)
 800187e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	2001      	movs	r0, #1
 8001886:	fa00 f202 	lsl.w	r2, r0, r2
 800188a:	3320      	adds	r3, #32
 800188c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001890:	f3bf 8f4f 	dsb	sy
}
 8001894:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001896:	f3bf 8f6f 	isb	sy
}
 800189a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	@ (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	@ (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	@ 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	@ 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff28 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800198a:	f7ff ff3f 	bl	800180c <__NVIC_GetPriorityGrouping>
 800198e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	6978      	ldr	r0, [r7, #20]
 8001996:	f7ff ffb3 	bl	8001900 <NVIC_EncodePriority>
 800199a:	4602      	mov	r2, r0
 800199c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ff82 	bl	80018ac <__NVIC_SetPriority>
}
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff32 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80019d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff42 	bl	8001864 <__NVIC_DisableIRQ>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d844      	bhi.n	8001a80 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80019f6:	a201      	add	r2, pc, #4	@ (adr r2, 80019fc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80019f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fc:	08001a1f 	.word	0x08001a1f
 8001a00:	08001a3d 	.word	0x08001a3d
 8001a04:	08001a5f 	.word	0x08001a5f
 8001a08:	08001a81 	.word	0x08001a81
 8001a0c:	08001a11 	.word	0x08001a11
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001a10:	4b1f      	ldr	r3, [pc, #124]	@ (8001a90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a1e      	ldr	r2, [pc, #120]	@ (8001a90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6013      	str	r3, [r2, #0]
      break;
 8001a1c:	e031      	b.n	8001a82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a1b      	ldr	r2, [pc, #108]	@ (8001a90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a24:	f023 0304 	bic.w	r3, r3, #4
 8001a28:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001a30:	4a18      	ldr	r2, [pc, #96]	@ (8001a94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a32:	f023 030c 	bic.w	r3, r3, #12
 8001a36:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001a3a:	e022      	b.n	8001a82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001a3c:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a13      	ldr	r2, [pc, #76]	@ (8001a90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a42:	f023 0304 	bic.w	r3, r3, #4
 8001a46:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001a4e:	f023 030c 	bic.w	r3, r3, #12
 8001a52:	4a10      	ldr	r2, [pc, #64]	@ (8001a94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001a5c:	e011      	b.n	8001a82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a64:	f023 0304 	bic.w	r3, r3, #4
 8001a68:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001a70:	f023 030c 	bic.w	r3, r3, #12
 8001a74:	4a07      	ldr	r2, [pc, #28]	@ (8001a94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a76:	f043 0308 	orr.w	r3, r3, #8
 8001a7a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001a7e:	e000      	b.n	8001a82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001a80:	bf00      	nop
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010
 8001a94:	44020c00 	.word	0x44020c00

08001a98 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d011      	beq.n	8001ad4 <HAL_EXTI_RegisterCallback+0x3c>
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	dc13      	bgt.n	8001adc <HAL_EXTI_RegisterCallback+0x44>
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <HAL_EXTI_RegisterCallback+0x26>
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d007      	beq.n	8001acc <HAL_EXTI_RegisterCallback+0x34>
 8001abc:	e00e      	b.n	8001adc <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
      break;
 8001aca:	e00a      	b.n	8001ae2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	605a      	str	r2, [r3, #4]
      break;
 8001ad2:	e006      	b.n	8001ae2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
      break;
 8001ada:	e002      	b.n	8001ae2 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	75fb      	strb	r3, [r7, #23]
      break;
 8001ae0:	bf00      	nop
  }

  return status;
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	371c      	adds	r7, #28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e003      	b.n	8001b0c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
  }
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0c1b      	lsrs	r3, r3, #16
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	2201      	movs	r2, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	4b17      	ldr	r3, [pc, #92]	@ (8001ba0 <HAL_EXTI_IRQHandler+0x88>)
 8001b42:	4413      	add	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d009      	beq.n	8001b6a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	015a      	lsls	r2, r3, #5
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <HAL_EXTI_IRQHandler+0x8c>)
 8001b70:	4413      	add	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d009      	beq.n	8001b98 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	4798      	blx	r3
    }
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	4402200c 	.word	0x4402200c
 8001ba4:	44022010 	.word	0x44022010

08001ba8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001bb6:	e142      	b.n	8001e3e <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 8134 	beq.w	8001e38 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x38>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b12      	cmp	r3, #18
 8001bde:	d125      	bne.n	8001c2c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3208      	adds	r2, #8
 8001be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bec:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4013      	ands	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f003 020f 	and.w	r2, r3, #15
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	08da      	lsrs	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3208      	adds	r2, #8
 8001c26:	6979      	ldr	r1, [r7, #20]
 8001c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4013      	ands	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0203 	and.w	r2, r3, #3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d00b      	beq.n	8001c80 <HAL_GPIO_Init+0xd8>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d007      	beq.n	8001c80 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c74:	2b11      	cmp	r3, #17
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b12      	cmp	r3, #18
 8001c7e:	d130      	bne.n	8001ce2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4013      	ands	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	f003 0201 	and.w	r2, r3, #1
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d109      	bne.n	8001d02 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d11b      	bne.n	8001d32 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d017      	beq.n	8001d32 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	4013      	ands	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d07c      	beq.n	8001e38 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001d3e:	4a47      	ldr	r2, [pc, #284]	@ (8001e5c <HAL_GPIO_Init+0x2b4>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3318      	adds	r3, #24
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	0a9a      	lsrs	r2, r3, #10
 8001d66:	4b3e      	ldr	r3, [pc, #248]	@ (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	f002 0203 	and.w	r2, r2, #3
 8001d70:	00d2      	lsls	r2, r2, #3
 8001d72:	4093      	lsls	r3, r2
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001d7a:	4938      	ldr	r1, [pc, #224]	@ (8001e5c <HAL_GPIO_Init+0x2b4>)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3318      	adds	r3, #24
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001d88:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <HAL_GPIO_Init+0x2b4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4013      	ands	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001dac:	4a2b      	ldr	r2, [pc, #172]	@ (8001e5c <HAL_GPIO_Init+0x2b4>)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001db2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e5c <HAL_GPIO_Init+0x2b4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001dd6:	4a21      	ldr	r2, [pc, #132]	@ (8001e5c <HAL_GPIO_Init+0x2b4>)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <HAL_GPIO_Init+0x2b4>)
 8001dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001de2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	4013      	ands	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001e02:	4a16      	ldr	r2, [pc, #88]	@ (8001e5c <HAL_GPIO_Init+0x2b4>)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001e0a:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <HAL_GPIO_Init+0x2b4>)
 8001e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e10:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001e30:	4a0a      	ldr	r2, [pc, #40]	@ (8001e5c <HAL_GPIO_Init+0x2b4>)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f47f aeb5 	bne.w	8001bb8 <HAL_GPIO_Init+0x10>
  }
}
 8001e4e:	bf00      	nop
 8001e50:	bf00      	nop
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	44022000 	.word	0x44022000
 8001e60:	002f7f7f 	.word	0x002f7f7f

08001e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
 8001e70:	4613      	mov	r3, r2
 8001e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e80:	e002      	b.n	8001e88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43d9      	mvns	r1, r3
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	400b      	ands	r3, r1
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	619a      	str	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f10 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001ede:	4a0c      	ldr	r2, [pc, #48]	@ (8001f10 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f814 	bl	8001f14 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001eec:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001ef8:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 f812 	bl	8001f2a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	44022000 	.word	0x44022000

08001f14 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e007      	b.n	8001f6e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001f5e:	4b07      	ldr	r3, [pc, #28]	@ (8001f7c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 0204 	bic.w	r2, r3, #4
 8001f66:	4905      	ldr	r1, [pc, #20]	@ (8001f7c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40030400 	.word	0x40030400

08001f80 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001f84:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_ICACHE_Enable+0x1c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	@ (8001f9c <HAL_ICACHE_Enable+0x1c>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40030400 	.word	0x40030400

08001fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f000 bc28 	b.w	8002804 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb4:	4b94      	ldr	r3, [pc, #592]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f003 0318 	and.w	r3, r3, #24
 8001fbc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001fbe:	4b92      	ldr	r3, [pc, #584]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d05b      	beq.n	800208c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d005      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x46>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	2b18      	cmp	r3, #24
 8001fde:	d114      	bne.n	800200a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d111      	bne.n	800200a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f000 bc08 	b.w	8002804 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001ff4:	4b84      	ldr	r3, [pc, #528]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	4981      	ldr	r1, [pc, #516]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002004:	4313      	orrs	r3, r2
 8002006:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002008:	e040      	b.n	800208c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d023      	beq.n	800205a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002012:	4b7d      	ldr	r3, [pc, #500]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7c      	ldr	r2, [pc, #496]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff fba1 	bl	8001764 <HAL_GetTick>
 8002022:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002026:	f7ff fb9d 	bl	8001764 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e3e5      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002038:	4b73      	ldr	r3, [pc, #460]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002044:	4b70      	ldr	r3, [pc, #448]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	041b      	lsls	r3, r3, #16
 8002052:	496d      	ldr	r1, [pc, #436]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002054:	4313      	orrs	r3, r2
 8002056:	618b      	str	r3, [r1, #24]
 8002058:	e018      	b.n	800208c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800205a:	4b6b      	ldr	r3, [pc, #428]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a6a      	ldr	r2, [pc, #424]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002066:	f7ff fb7d 	bl	8001764 <HAL_GetTick>
 800206a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800206e:	f7ff fb79 	bl	8001764 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e3c1      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002080:	4b61      	ldr	r3, [pc, #388]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f0      	bne.n	800206e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80a0 	beq.w	80021da <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	2b10      	cmp	r3, #16
 800209e:	d005      	beq.n	80020ac <HAL_RCC_OscConfig+0x10c>
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b18      	cmp	r3, #24
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f040 8092 	bne.w	80021da <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e3a4      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x132>
 80020c4:	4b50      	ldr	r3, [pc, #320]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	e058      	b.n	8002184 <HAL_RCC_OscConfig+0x1e4>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d112      	bne.n	8002100 <HAL_RCC_OscConfig+0x160>
 80020da:	4b4b      	ldr	r3, [pc, #300]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a4a      	ldr	r2, [pc, #296]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b48      	ldr	r3, [pc, #288]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a47      	ldr	r2, [pc, #284]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 80020ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b45      	ldr	r3, [pc, #276]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a44      	ldr	r2, [pc, #272]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 80020f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e041      	b.n	8002184 <HAL_RCC_OscConfig+0x1e4>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002108:	d112      	bne.n	8002130 <HAL_RCC_OscConfig+0x190>
 800210a:	4b3f      	ldr	r3, [pc, #252]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a3e      	ldr	r2, [pc, #248]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b3c      	ldr	r3, [pc, #240]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a3b      	ldr	r2, [pc, #236]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 800211c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b39      	ldr	r3, [pc, #228]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a38      	ldr	r2, [pc, #224]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e029      	b.n	8002184 <HAL_RCC_OscConfig+0x1e4>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002138:	d112      	bne.n	8002160 <HAL_RCC_OscConfig+0x1c0>
 800213a:	4b33      	ldr	r3, [pc, #204]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a32      	ldr	r2, [pc, #200]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b30      	ldr	r3, [pc, #192]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a2f      	ldr	r2, [pc, #188]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 800214c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b2d      	ldr	r3, [pc, #180]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a2c      	ldr	r2, [pc, #176]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e011      	b.n	8002184 <HAL_RCC_OscConfig+0x1e4>
 8002160:	4b29      	ldr	r3, [pc, #164]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a28      	ldr	r2, [pc, #160]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002166:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b26      	ldr	r3, [pc, #152]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a25      	ldr	r2, [pc, #148]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 8002172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b23      	ldr	r3, [pc, #140]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a22      	ldr	r2, [pc, #136]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 800217e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff faea 	bl	8001764 <HAL_GetTick>
 8002190:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002194:	f7ff fae6 	bl	8001764 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	@ 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e32e      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a6:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x1f4>
 80021b2:	e012      	b.n	80021da <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fad6 	bl	8001764 <HAL_GetTick>
 80021b8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80021bc:	f7ff fad2 	bl	8001764 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	@ 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e31a      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <HAL_RCC_OscConfig+0x268>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 809a 	beq.w	800231c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <HAL_RCC_OscConfig+0x25a>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	2b18      	cmp	r3, #24
 80021f2:	d149      	bne.n	8002288 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d146      	bne.n	8002288 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d104      	bne.n	800220c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e2fe      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
 8002206:	bf00      	nop
 8002208:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d11c      	bne.n	800224c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002212:	4b9a      	ldr	r3, [pc, #616]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0218 	and.w	r2, r3, #24
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	429a      	cmp	r2, r3
 8002220:	d014      	beq.n	800224c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002222:	4b96      	ldr	r3, [pc, #600]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 0218 	bic.w	r2, r3, #24
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	4993      	ldr	r1, [pc, #588]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002234:	f000 fdd0 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002238:	4b91      	ldr	r3, [pc, #580]	@ (8002480 <HAL_RCC_OscConfig+0x4e0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fe91 	bl	8000f64 <HAL_InitTick>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e2db      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7ff fa8a 	bl	8001764 <HAL_GetTick>
 8002250:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002254:	f7ff fa86 	bl	8001764 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e2ce      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002266:	4b85      	ldr	r3, [pc, #532]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002272:	4b82      	ldr	r3, [pc, #520]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	497e      	ldr	r1, [pc, #504]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002286:	e049      	b.n	800231c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d02c      	beq.n	80022ea <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002290:	4b7a      	ldr	r3, [pc, #488]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 0218 	bic.w	r2, r3, #24
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	4977      	ldr	r1, [pc, #476]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80022a2:	4b76      	ldr	r3, [pc, #472]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a75      	ldr	r2, [pc, #468]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ae:	f7ff fa59 	bl	8001764 <HAL_GetTick>
 80022b2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80022b6:	f7ff fa55 	bl	8001764 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e29d      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c8:	4b6c      	ldr	r3, [pc, #432]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80022d4:	4b69      	ldr	r3, [pc, #420]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	041b      	lsls	r3, r3, #16
 80022e2:	4966      	ldr	r1, [pc, #408]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	610b      	str	r3, [r1, #16]
 80022e8:	e018      	b.n	800231c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ea:	4b64      	ldr	r3, [pc, #400]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a63      	ldr	r2, [pc, #396]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7ff fa35 	bl	8001764 <HAL_GetTick>
 80022fa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80022fe:	f7ff fa31 	bl	8001764 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e279      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002310:	4b5a      	ldr	r3, [pc, #360]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d03c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01c      	beq.n	800236a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002330:	4b52      	ldr	r3, [pc, #328]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002336:	4a51      	ldr	r2, [pc, #324]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002338:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800233c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002340:	f7ff fa10 	bl	8001764 <HAL_GetTick>
 8002344:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002348:	f7ff fa0c 	bl	8001764 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e254      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800235a:	4b48      	ldr	r3, [pc, #288]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 800235c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0ef      	beq.n	8002348 <HAL_RCC_OscConfig+0x3a8>
 8002368:	e01b      	b.n	80023a2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800236a:	4b44      	ldr	r3, [pc, #272]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 800236c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002370:	4a42      	ldr	r2, [pc, #264]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002372:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002376:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7ff f9f3 	bl	8001764 <HAL_GetTick>
 800237e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002382:	f7ff f9ef 	bl	8001764 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e237      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002394:	4b39      	ldr	r3, [pc, #228]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800239a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1ef      	bne.n	8002382 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 80d2 	beq.w	8002554 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80023b0:	4b34      	ldr	r3, [pc, #208]	@ (8002484 <HAL_RCC_OscConfig+0x4e4>)
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d118      	bne.n	80023ee <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80023bc:	4b31      	ldr	r3, [pc, #196]	@ (8002484 <HAL_RCC_OscConfig+0x4e4>)
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	4a30      	ldr	r2, [pc, #192]	@ (8002484 <HAL_RCC_OscConfig+0x4e4>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c8:	f7ff f9cc 	bl	8001764 <HAL_GetTick>
 80023cc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d0:	f7ff f9c8 	bl	8001764 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e210      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80023e2:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <HAL_RCC_OscConfig+0x4e4>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d108      	bne.n	8002408 <HAL_RCC_OscConfig+0x468>
 80023f6:	4b21      	ldr	r3, [pc, #132]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 80023f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023fc:	4a1f      	ldr	r2, [pc, #124]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002406:	e074      	b.n	80024f2 <HAL_RCC_OscConfig+0x552>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d118      	bne.n	8002442 <HAL_RCC_OscConfig+0x4a2>
 8002410:	4b1a      	ldr	r3, [pc, #104]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002412:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002416:	4a19      	ldr	r2, [pc, #100]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002420:	4b16      	ldr	r3, [pc, #88]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002426:	4a15      	ldr	r2, [pc, #84]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002428:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800242c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002430:	4b12      	ldr	r3, [pc, #72]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002436:	4a11      	ldr	r2, [pc, #68]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002438:	f023 0304 	bic.w	r3, r3, #4
 800243c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002440:	e057      	b.n	80024f2 <HAL_RCC_OscConfig+0x552>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b05      	cmp	r3, #5
 8002448:	d11e      	bne.n	8002488 <HAL_RCC_OscConfig+0x4e8>
 800244a:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 800244c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002450:	4a0a      	ldr	r2, [pc, #40]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800245a:	4b08      	ldr	r3, [pc, #32]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 800245c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002460:	4a06      	ldr	r2, [pc, #24]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002466:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800246a:	4b04      	ldr	r3, [pc, #16]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 800246c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002470:	4a02      	ldr	r2, [pc, #8]	@ (800247c <HAL_RCC_OscConfig+0x4dc>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800247a:	e03a      	b.n	80024f2 <HAL_RCC_OscConfig+0x552>
 800247c:	44020c00 	.word	0x44020c00
 8002480:	20000018 	.word	0x20000018
 8002484:	44020800 	.word	0x44020800
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b85      	cmp	r3, #133	@ 0x85
 800248e:	d118      	bne.n	80024c2 <HAL_RCC_OscConfig+0x522>
 8002490:	4ba2      	ldr	r3, [pc, #648]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 8002492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002496:	4aa1      	ldr	r2, [pc, #644]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024a0:	4b9e      	ldr	r3, [pc, #632]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80024a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024a6:	4a9d      	ldr	r2, [pc, #628]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80024a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024b0:	4b9a      	ldr	r3, [pc, #616]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80024b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024b6:	4a99      	ldr	r2, [pc, #612]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024c0:	e017      	b.n	80024f2 <HAL_RCC_OscConfig+0x552>
 80024c2:	4b96      	ldr	r3, [pc, #600]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80024c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024c8:	4a94      	ldr	r2, [pc, #592]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80024ca:	f023 0301 	bic.w	r3, r3, #1
 80024ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024d2:	4b92      	ldr	r3, [pc, #584]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80024d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024d8:	4a90      	ldr	r2, [pc, #576]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80024da:	f023 0304 	bic.w	r3, r3, #4
 80024de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024e2:	4b8e      	ldr	r3, [pc, #568]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80024e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024e8:	4a8c      	ldr	r2, [pc, #560]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80024ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d016      	beq.n	8002528 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fa:	f7ff f933 	bl	8001764 <HAL_GetTick>
 80024fe:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7ff f92f 	bl	8001764 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e175      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002518:	4b80      	ldr	r3, [pc, #512]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 800251a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0ed      	beq.n	8002502 <HAL_RCC_OscConfig+0x562>
 8002526:	e015      	b.n	8002554 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002528:	f7ff f91c 	bl	8001764 <HAL_GetTick>
 800252c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800252e:	e00a      	b.n	8002546 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002530:	f7ff f918 	bl	8001764 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e15e      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002546:	4b75      	ldr	r3, [pc, #468]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 8002548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1ed      	bne.n	8002530 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d036      	beq.n	80025ce <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	2b00      	cmp	r3, #0
 8002566:	d019      	beq.n	800259c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002568:	4b6c      	ldr	r3, [pc, #432]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a6b      	ldr	r2, [pc, #428]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 800256e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7ff f8f6 	bl	8001764 <HAL_GetTick>
 8002578:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800257c:	f7ff f8f2 	bl	8001764 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e13a      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800258e:	4b63      	ldr	r3, [pc, #396]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x5dc>
 800259a:	e018      	b.n	80025ce <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800259c:	4b5f      	ldr	r3, [pc, #380]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a5e      	ldr	r2, [pc, #376]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80025a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a8:	f7ff f8dc 	bl	8001764 <HAL_GetTick>
 80025ac:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80025b0:	f7ff f8d8 	bl	8001764 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e120      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80025c2:	4b56      	ldr	r3, [pc, #344]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 8115 	beq.w	8002802 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	2b18      	cmp	r3, #24
 80025dc:	f000 80af 	beq.w	800273e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	f040 8086 	bne.w	80026f6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80025ea:	4b4c      	ldr	r3, [pc, #304]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a4b      	ldr	r2, [pc, #300]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80025f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7ff f8b5 	bl	8001764 <HAL_GetTick>
 80025fa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80025fe:	f7ff f8b1 	bl	8001764 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e0f9      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002610:	4b42      	ldr	r3, [pc, #264]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f0      	bne.n	80025fe <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800261c:	4b3f      	ldr	r3, [pc, #252]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 800261e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002620:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002624:	f023 0303 	bic.w	r3, r3, #3
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002630:	0212      	lsls	r2, r2, #8
 8002632:	430a      	orrs	r2, r1
 8002634:	4939      	ldr	r1, [pc, #228]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 8002636:	4313      	orrs	r3, r2
 8002638:	628b      	str	r3, [r1, #40]	@ 0x28
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263e:	3b01      	subs	r3, #1
 8002640:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002648:	3b01      	subs	r3, #1
 800264a:	025b      	lsls	r3, r3, #9
 800264c:	b29b      	uxth	r3, r3
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002654:	3b01      	subs	r3, #1
 8002656:	041b      	lsls	r3, r3, #16
 8002658:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	3b01      	subs	r3, #1
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800266a:	492c      	ldr	r1, [pc, #176]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 800266c:	4313      	orrs	r3, r2
 800266e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002670:	4b2a      	ldr	r3, [pc, #168]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 8002672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002674:	4a29      	ldr	r2, [pc, #164]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 8002676:	f023 0310 	bic.w	r3, r3, #16
 800267a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002680:	4a26      	ldr	r2, [pc, #152]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002686:	4b25      	ldr	r3, [pc, #148]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 8002688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268a:	4a24      	ldr	r2, [pc, #144]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 800268c:	f043 0310 	orr.w	r3, r3, #16
 8002690:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002692:	4b22      	ldr	r3, [pc, #136]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 8002694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002696:	f023 020c 	bic.w	r2, r3, #12
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	491f      	ldr	r1, [pc, #124]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80026a4:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80026a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a8:	f023 0220 	bic.w	r2, r3, #32
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b0:	491a      	ldr	r1, [pc, #104]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80026b6:	4b19      	ldr	r3, [pc, #100]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80026b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ba:	4a18      	ldr	r2, [pc, #96]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80026c2:	4b16      	ldr	r3, [pc, #88]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a15      	ldr	r2, [pc, #84]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80026c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7ff f849 	bl	8001764 <HAL_GetTick>
 80026d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80026d6:	f7ff f845 	bl	8001764 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e08d      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80026e8:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x736>
 80026f4:	e085      	b.n	8002802 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80026f6:	4b09      	ldr	r3, [pc, #36]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a08      	ldr	r2, [pc, #32]	@ (800271c <HAL_RCC_OscConfig+0x77c>)
 80026fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7ff f82f 	bl	8001764 <HAL_GetTick>
 8002706:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800270a:	f7ff f82b 	bl	8001764 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d903      	bls.n	8002720 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e073      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
 800271c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002720:	4b3a      	ldr	r3, [pc, #232]	@ (800280c <HAL_RCC_OscConfig+0x86c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ee      	bne.n	800270a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800272c:	4b37      	ldr	r3, [pc, #220]	@ (800280c <HAL_RCC_OscConfig+0x86c>)
 800272e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002730:	4a36      	ldr	r2, [pc, #216]	@ (800280c <HAL_RCC_OscConfig+0x86c>)
 8002732:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002736:	f023 0303 	bic.w	r3, r3, #3
 800273a:	6293      	str	r3, [r2, #40]	@ 0x28
 800273c:	e061      	b.n	8002802 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800273e:	4b33      	ldr	r3, [pc, #204]	@ (800280c <HAL_RCC_OscConfig+0x86c>)
 8002740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002742:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002744:	4b31      	ldr	r3, [pc, #196]	@ (800280c <HAL_RCC_OscConfig+0x86c>)
 8002746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002748:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274e:	2b01      	cmp	r3, #1
 8002750:	d031      	beq.n	80027b6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f003 0203 	and.w	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d12a      	bne.n	80027b6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d122      	bne.n	80027b6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d11a      	bne.n	80027b6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	0a5b      	lsrs	r3, r3, #9
 8002784:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d111      	bne.n	80027b6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800279e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d108      	bne.n	80027b6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	0e1b      	lsrs	r3, r3, #24
 80027a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e024      	b.n	8002804 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80027ba:	4b14      	ldr	r3, [pc, #80]	@ (800280c <HAL_RCC_OscConfig+0x86c>)
 80027bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027be:	08db      	lsrs	r3, r3, #3
 80027c0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d01a      	beq.n	8002802 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80027cc:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <HAL_RCC_OscConfig+0x86c>)
 80027ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d0:	4a0e      	ldr	r2, [pc, #56]	@ (800280c <HAL_RCC_OscConfig+0x86c>)
 80027d2:	f023 0310 	bic.w	r3, r3, #16
 80027d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe ffc4 	bl	8001764 <HAL_GetTick>
 80027dc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80027de:	bf00      	nop
 80027e0:	f7fe ffc0 	bl	8001764 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d0f9      	beq.n	80027e0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f0:	4a06      	ldr	r2, [pc, #24]	@ (800280c <HAL_RCC_OscConfig+0x86c>)
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80027f6:	4b05      	ldr	r3, [pc, #20]	@ (800280c <HAL_RCC_OscConfig+0x86c>)
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fa:	4a04      	ldr	r2, [pc, #16]	@ (800280c <HAL_RCC_OscConfig+0x86c>)
 80027fc:	f043 0310 	orr.w	r3, r3, #16
 8002800:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	44020c00 	.word	0x44020c00

08002810 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e19e      	b.n	8002b62 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002824:	4b83      	ldr	r3, [pc, #524]	@ (8002a34 <HAL_RCC_ClockConfig+0x224>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d910      	bls.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b80      	ldr	r3, [pc, #512]	@ (8002a34 <HAL_RCC_ClockConfig+0x224>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 020f 	bic.w	r2, r3, #15
 800283a:	497e      	ldr	r1, [pc, #504]	@ (8002a34 <HAL_RCC_ClockConfig+0x224>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b7c      	ldr	r3, [pc, #496]	@ (8002a34 <HAL_RCC_ClockConfig+0x224>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e186      	b.n	8002b62 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	4b74      	ldr	r3, [pc, #464]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800286e:	429a      	cmp	r2, r3
 8002870:	d909      	bls.n	8002886 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002872:	4b71      	ldr	r3, [pc, #452]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	496d      	ldr	r1, [pc, #436]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 8002882:	4313      	orrs	r3, r2
 8002884:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d012      	beq.n	80028b8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	4b68      	ldr	r3, [pc, #416]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d909      	bls.n	80028b8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80028a4:	4b64      	ldr	r3, [pc, #400]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	4961      	ldr	r1, [pc, #388]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d010      	beq.n	80028e6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d908      	bls.n	80028e6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80028d4:	4b58      	ldr	r3, [pc, #352]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4955      	ldr	r1, [pc, #340]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d010      	beq.n	8002914 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	4b50      	ldr	r3, [pc, #320]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	429a      	cmp	r2, r3
 8002900:	d908      	bls.n	8002914 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002902:	4b4d      	ldr	r3, [pc, #308]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	f023 020f 	bic.w	r2, r3, #15
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	494a      	ldr	r1, [pc, #296]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 8002910:	4313      	orrs	r3, r2
 8002912:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8093 	beq.w	8002a48 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b03      	cmp	r3, #3
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800292a:	4b43      	ldr	r3, [pc, #268]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d121      	bne.n	800297a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e113      	b.n	8002b62 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002942:	4b3d      	ldr	r3, [pc, #244]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d115      	bne.n	800297a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e107      	b.n	8002b62 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d107      	bne.n	800296a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800295a:	4b37      	ldr	r3, [pc, #220]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e0fb      	b.n	8002b62 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296a:	4b33      	ldr	r3, [pc, #204]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0f3      	b.n	8002b62 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800297a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f023 0203 	bic.w	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	492c      	ldr	r1, [pc, #176]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 8002988:	4313      	orrs	r3, r2
 800298a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298c:	f7fe feea 	bl	8001764 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d112      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800299c:	f7fe fee2 	bl	8001764 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e0d7      	b.n	8002b62 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b2:	4b21      	ldr	r3, [pc, #132]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 0318 	and.w	r3, r3, #24
 80029ba:	2b18      	cmp	r3, #24
 80029bc:	d1ee      	bne.n	800299c <HAL_RCC_ClockConfig+0x18c>
 80029be:	e043      	b.n	8002a48 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d112      	bne.n	80029ee <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80029ca:	f7fe fecb 	bl	8001764 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e0c0      	b.n	8002b62 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e0:	4b15      	ldr	r3, [pc, #84]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f003 0318 	and.w	r3, r3, #24
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d1ee      	bne.n	80029ca <HAL_RCC_ClockConfig+0x1ba>
 80029ec:	e02c      	b.n	8002a48 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d122      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7fe feb4 	bl	8001764 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e0a9      	b.n	8002b62 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <HAL_RCC_ClockConfig+0x228>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 0318 	and.w	r3, r3, #24
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d1ee      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x1e8>
 8002a1a:	e015      	b.n	8002a48 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1c:	f7fe fea2 	bl	8001764 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d906      	bls.n	8002a3c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e097      	b.n	8002b62 <HAL_RCC_ClockConfig+0x352>
 8002a32:	bf00      	nop
 8002a34:	40022000 	.word	0x40022000
 8002a38:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a3c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	f003 0318 	and.w	r3, r3, #24
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1e9      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d010      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	4b44      	ldr	r3, [pc, #272]	@ (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d208      	bcs.n	8002a76 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002a64:	4b41      	ldr	r3, [pc, #260]	@ (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f023 020f 	bic.w	r2, r3, #15
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	493e      	ldr	r1, [pc, #248]	@ (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a76:	4b3e      	ldr	r3, [pc, #248]	@ (8002b70 <HAL_RCC_ClockConfig+0x360>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d210      	bcs.n	8002aa6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a84:	4b3a      	ldr	r3, [pc, #232]	@ (8002b70 <HAL_RCC_ClockConfig+0x360>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 020f 	bic.w	r2, r3, #15
 8002a8c:	4938      	ldr	r1, [pc, #224]	@ (8002b70 <HAL_RCC_ClockConfig+0x360>)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a94:	4b36      	ldr	r3, [pc, #216]	@ (8002b70 <HAL_RCC_ClockConfig+0x360>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e05d      	b.n	8002b62 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d010      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d208      	bcs.n	8002ad4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	4927      	ldr	r1, [pc, #156]	@ (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d012      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	4b21      	ldr	r3, [pc, #132]	@ (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d209      	bcs.n	8002b06 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002af2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	491a      	ldr	r1, [pc, #104]	@ (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d012      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d209      	bcs.n	8002b38 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002b24:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	490e      	ldr	r1, [pc, #56]	@ (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b38:	f000 f822 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	490b      	ldr	r1, [pc, #44]	@ (8002b74 <HAL_RCC_ClockConfig+0x364>)
 8002b48:	5ccb      	ldrb	r3, [r1, r3]
 8002b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b78 <HAL_RCC_ClockConfig+0x368>)
 8002b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002b52:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <HAL_RCC_ClockConfig+0x36c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fa04 	bl	8000f64 <HAL_InitTick>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002b60:	7afb      	ldrb	r3, [r7, #11]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	44020c00 	.word	0x44020c00
 8002b70:	40022000 	.word	0x40022000
 8002b74:	0800ad40 	.word	0x0800ad40
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	20000018 	.word	0x20000018

08002b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	@ 0x24
 8002b84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002b86:	4b8c      	ldr	r3, [pc, #560]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f003 0318 	and.w	r3, r3, #24
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d102      	bne.n	8002b98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002b92:	4b8a      	ldr	r3, [pc, #552]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x23c>)
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	e107      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b98:	4b87      	ldr	r3, [pc, #540]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	f003 0318 	and.w	r3, r3, #24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d112      	bne.n	8002bca <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002ba4:	4b84      	ldr	r3, [pc, #528]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d009      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002bb0:	4b81      	ldr	r3, [pc, #516]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	08db      	lsrs	r3, r3, #3
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	4a81      	ldr	r2, [pc, #516]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x240>)
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e0f1      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002bc4:	4b7e      	ldr	r3, [pc, #504]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x240>)
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	e0ee      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bca:	4b7b      	ldr	r3, [pc, #492]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f003 0318 	and.w	r3, r3, #24
 8002bd2:	2b10      	cmp	r3, #16
 8002bd4:	d102      	bne.n	8002bdc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bd6:	4b7b      	ldr	r3, [pc, #492]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x244>)
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e0e5      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bdc:	4b76      	ldr	r3, [pc, #472]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f003 0318 	and.w	r3, r3, #24
 8002be4:	2b18      	cmp	r3, #24
 8002be6:	f040 80dd 	bne.w	8002da4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002bea:	4b73      	ldr	r3, [pc, #460]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002bf4:	4b70      	ldr	r3, [pc, #448]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bfe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002c00:	4b6d      	ldr	r3, [pc, #436]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002c10:	08db      	lsrs	r3, r3, #3
 8002c12:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c24:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80b7 	beq.w	8002d9e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d003      	beq.n	8002c3e <HAL_RCC_GetSysClockFreq+0xbe>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d056      	beq.n	8002cea <HAL_RCC_GetSysClockFreq+0x16a>
 8002c3c:	e077      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002c3e:	4b5e      	ldr	r3, [pc, #376]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d02d      	beq.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002c4a:	4b5b      	ldr	r3, [pc, #364]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	08db      	lsrs	r3, r3, #3
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	4a5a      	ldr	r2, [pc, #360]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	ee07 3a90 	vmov	s15, r3
 8002c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c74:	4b50      	ldr	r3, [pc, #320]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7c:	ee07 3a90 	vmov	s15, r3
 8002c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c84:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c88:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002dc8 <HAL_RCC_GetSysClockFreq+0x248>
 8002c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002ca4:	e065      	b.n	8002d72 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	ee07 3a90 	vmov	s15, r3
 8002cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002dcc <HAL_RCC_GetSysClockFreq+0x24c>
 8002cb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc0:	ee07 3a90 	vmov	s15, r3
 8002cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ccc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002dc8 <HAL_RCC_GetSysClockFreq+0x248>
 8002cd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002ce8:	e043      	b.n	8002d72 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002dd0 <HAL_RCC_GetSysClockFreq+0x250>
 8002cf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d04:	ee07 3a90 	vmov	s15, r3
 8002d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d10:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002dc8 <HAL_RCC_GetSysClockFreq+0x248>
 8002d14:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d28:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002d2c:	e021      	b.n	8002d72 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	ee07 3a90 	vmov	s15, r3
 8002d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d38:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002dd4 <HAL_RCC_GetSysClockFreq+0x254>
 8002d3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d40:	4b1d      	ldr	r3, [pc, #116]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d48:	ee07 3a90 	vmov	s15, r3
 8002d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d50:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d54:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002dc8 <HAL_RCC_GetSysClockFreq+0x248>
 8002d58:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d64:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002d70:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002d72:	4b11      	ldr	r3, [pc, #68]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d76:	0a5b      	lsrs	r3, r3, #9
 8002d78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d8a:	edd7 6a06 	vldr	s13, [r7, #24]
 8002d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d96:	ee17 3a90 	vmov	r3, s15
 8002d9a:	61fb      	str	r3, [r7, #28]
 8002d9c:	e004      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	e001      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002da4:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x240>)
 8002da6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002da8:	69fb      	ldr	r3, [r7, #28]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3724      	adds	r7, #36	@ 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	44020c00 	.word	0x44020c00
 8002dbc:	003d0900 	.word	0x003d0900
 8002dc0:	03d09000 	.word	0x03d09000
 8002dc4:	016e3600 	.word	0x016e3600
 8002dc8:	46000000 	.word	0x46000000
 8002dcc:	4c742400 	.word	0x4c742400
 8002dd0:	4bb71b00 	.word	0x4bb71b00
 8002dd4:	4a742400 	.word	0x4a742400

08002dd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002ddc:	f7ff fed0 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b08      	ldr	r3, [pc, #32]	@ (8002e04 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002de6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002dea:	4907      	ldr	r1, [pc, #28]	@ (8002e08 <HAL_RCC_GetHCLKFreq+0x30>)
 8002dec:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002dee:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002df2:	fa22 f303 	lsr.w	r3, r2, r3
 8002df6:	4a05      	ldr	r2, [pc, #20]	@ (8002e0c <HAL_RCC_GetHCLKFreq+0x34>)
 8002df8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002dfa:	4b04      	ldr	r3, [pc, #16]	@ (8002e0c <HAL_RCC_GetHCLKFreq+0x34>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	44020c00 	.word	0x44020c00
 8002e08:	0800ad40 	.word	0x0800ad40
 8002e0c:	20000000 	.word	0x20000000

08002e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002e14:	f7ff ffe0 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4904      	ldr	r1, [pc, #16]	@ (8002e38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	44020c00 	.word	0x44020c00
 8002e38:	0800ad50 	.word	0x0800ad50

08002e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002e40:	f7ff ffca 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	4904      	ldr	r1, [pc, #16]	@ (8002e64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	44020c00 	.word	0x44020c00
 8002e64:	0800ad50 	.word	0x0800ad50

08002e68 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002e6c:	f7ff ffb4 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <HAL_RCC_GetPCLK3Freq+0x24>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	0b1b      	lsrs	r3, r3, #12
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4904      	ldr	r1, [pc, #16]	@ (8002e90 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	44020c00 	.word	0x44020c00
 8002e90:	0800ad50 	.word	0x0800ad50

08002e94 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	221f      	movs	r2, #31
 8002ea2:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8002ea4:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <HAL_RCC_GetClockConfig+0x68>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f003 0203 	and.w	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8002eb0:	4b12      	ldr	r3, [pc, #72]	@ (8002efc <HAL_RCC_GetClockConfig+0x68>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 020f 	and.w	r2, r3, #15
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ee2:	4b07      	ldr	r3, [pc, #28]	@ (8002f00 <HAL_RCC_GetClockConfig+0x6c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 020f 	and.w	r2, r3, #15
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	601a      	str	r2, [r3, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	44020c00 	.word	0x44020c00
 8002f00:	40022000 	.word	0x40022000

08002f04 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f08:	b0aa      	sub	sp, #168	@ 0xa8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f10:	2300      	movs	r3, #0
 8002f12:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f16:	2300      	movs	r3, #0
 8002f18:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002f28:	2500      	movs	r5, #0
 8002f2a:	ea54 0305 	orrs.w	r3, r4, r5
 8002f2e:	d00b      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002f30:	4bb8      	ldr	r3, [pc, #736]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f36:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002f3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	4ab4      	ldr	r2, [pc, #720]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f42:	430b      	orrs	r3, r1
 8002f44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f002 0801 	and.w	r8, r2, #1
 8002f54:	f04f 0900 	mov.w	r9, #0
 8002f58:	ea58 0309 	orrs.w	r3, r8, r9
 8002f5c:	d038      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002f5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d819      	bhi.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002f68:	a201      	add	r2, pc, #4	@ (adr r2, 8002f70 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002fa5 	.word	0x08002fa5
 8002f74:	08002f89 	.word	0x08002f89
 8002f78:	08002f9d 	.word	0x08002f9d
 8002f7c:	08002fa5 	.word	0x08002fa5
 8002f80:	08002fa5 	.word	0x08002fa5
 8002f84:	08002fa5 	.word	0x08002fa5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f8c:	3308      	adds	r3, #8
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 fff2 	bl	8004f78 <RCCEx_PLL2_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002f9a:	e004      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8002fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002fae:	4b99      	ldr	r3, [pc, #612]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002fb4:	f023 0107 	bic.w	r1, r3, #7
 8002fb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fbe:	4a95      	ldr	r2, [pc, #596]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002fc6:	e003      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002fcc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f002 0a02 	and.w	sl, r2, #2
 8002fdc:	f04f 0b00 	mov.w	fp, #0
 8002fe0:	ea5a 030b 	orrs.w	r3, sl, fp
 8002fe4:	d03c      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002fe6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fec:	2b28      	cmp	r3, #40	@ 0x28
 8002fee:	d01b      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8002ff0:	2b28      	cmp	r3, #40	@ 0x28
 8002ff2:	d815      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d019      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d811      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002ffc:	2b18      	cmp	r3, #24
 8002ffe:	d017      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003000:	2b18      	cmp	r3, #24
 8003002:	d80d      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d015      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003008:	2b08      	cmp	r3, #8
 800300a:	d109      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800300c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003010:	3308      	adds	r3, #8
 8003012:	4618      	mov	r0, r3
 8003014:	f001 ffb0 	bl	8004f78 <RCCEx_PLL2_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 800301e:	e00a      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003026:	e006      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003028:	bf00      	nop
 800302a:	e004      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800302c:	bf00      	nop
 800302e:	e002      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003030:	bf00      	nop
 8003032:	e000      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003036:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10c      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800303e:	4b75      	ldr	r3, [pc, #468]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003040:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003044:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003048:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800304c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304e:	4a71      	ldr	r2, [pc, #452]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003050:	430b      	orrs	r3, r1
 8003052:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003056:	e003      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800305c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003060:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f002 0304 	and.w	r3, r2, #4
 800306c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003076:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800307a:	460b      	mov	r3, r1
 800307c:	4313      	orrs	r3, r2
 800307e:	d040      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003080:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003086:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800308a:	d01e      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800308c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003090:	d817      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003096:	d01a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800309c:	d811      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800309e:	2bc0      	cmp	r3, #192	@ 0xc0
 80030a0:	d017      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80030a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80030a4:	d80d      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d015      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80030aa:	2b40      	cmp	r3, #64	@ 0x40
 80030ac:	d109      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030b2:	3308      	adds	r3, #8
 80030b4:	4618      	mov	r0, r3
 80030b6:	f001 ff5f 	bl	8004f78 <RCCEx_PLL2_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 80030c0:	e00a      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80030c8:	e006      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80030ca:	bf00      	nop
 80030cc:	e004      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80030ce:	bf00      	nop
 80030d0:	e002      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80030d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10c      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80030e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030e6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80030ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f0:	4a48      	ldr	r2, [pc, #288]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030f2:	430b      	orrs	r3, r1
 80030f4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80030f8:	e003      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80030fe:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003102:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800310e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003112:	2300      	movs	r3, #0
 8003114:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003118:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800311c:	460b      	mov	r3, r1
 800311e:	4313      	orrs	r3, r2
 8003120:	d043      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003122:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003128:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800312c:	d021      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800312e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003132:	d81a      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003134:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003138:	d01d      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800313a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800313e:	d814      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003140:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003144:	d019      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8003146:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800314a:	d80e      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d016      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003154:	d109      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003156:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800315a:	3308      	adds	r3, #8
 800315c:	4618      	mov	r0, r3
 800315e:	f001 ff0b 	bl	8004f78 <RCCEx_PLL2_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003168:	e00a      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003170:	e006      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003172:	bf00      	nop
 8003174:	e004      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003176:	bf00      	nop
 8003178:	e002      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800317a:	bf00      	nop
 800317c:	e000      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800317e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003180:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10c      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003188:	4b22      	ldr	r3, [pc, #136]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800318a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800318e:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003192:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	4a1e      	ldr	r2, [pc, #120]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800319a:	430b      	orrs	r3, r1
 800319c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031a0:	e003      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031a6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80031b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031b8:	2300      	movs	r3, #0
 80031ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80031c0:	460b      	mov	r3, r1
 80031c2:	4313      	orrs	r3, r2
 80031c4:	d03e      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80031c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031d0:	d01b      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x306>
 80031d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031d6:	d814      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80031d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031dc:	d017      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80031de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031e2:	d80e      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d017      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031ec:	d109      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031f2:	3308      	adds	r3, #8
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 febf 	bl	8004f78 <RCCEx_PLL2_Config>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003200:	e00b      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003208:	e007      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800320a:	bf00      	nop
 800320c:	e005      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800320e:	bf00      	nop
 8003210:	e003      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003212:	bf00      	nop
 8003214:	44020c00 	.word	0x44020c00
        break;
 8003218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800321a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10c      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003222:	4ba5      	ldr	r3, [pc, #660]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003224:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003228:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800322c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	4aa1      	ldr	r2, [pc, #644]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003234:	430b      	orrs	r3, r1
 8003236:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800323a:	e003      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003240:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003244:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003250:	673b      	str	r3, [r7, #112]	@ 0x70
 8003252:	2300      	movs	r3, #0
 8003254:	677b      	str	r3, [r7, #116]	@ 0x74
 8003256:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800325a:	460b      	mov	r3, r1
 800325c:	4313      	orrs	r3, r2
 800325e:	d03b      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003260:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003266:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800326a:	d01b      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800326c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003270:	d814      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003272:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003276:	d017      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003278:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800327c:	d80e      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x398>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d014      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003282:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003286:	d109      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003288:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800328c:	3308      	adds	r3, #8
 800328e:	4618      	mov	r0, r3
 8003290:	f001 fe72 	bl	8004f78 <RCCEx_PLL2_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800329a:	e008      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80032a2:	e004      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80032a4:	bf00      	nop
 80032a6:	e002      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80032a8:	bf00      	nop
 80032aa:	e000      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80032ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ae:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80032b6:	4b80      	ldr	r3, [pc, #512]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80032b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032bc:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80032c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c6:	4a7c      	ldr	r2, [pc, #496]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80032c8:	430b      	orrs	r3, r1
 80032ca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80032ce:	e003      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80032d4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80032d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80032e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032e6:	2300      	movs	r3, #0
 80032e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80032ee:	460b      	mov	r3, r1
 80032f0:	4313      	orrs	r3, r2
 80032f2:	d033      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80032f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032fe:	d015      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003304:	d80e      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d012      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800330a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800330e:	d109      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003310:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003314:	3308      	adds	r3, #8
 8003316:	4618      	mov	r0, r3
 8003318:	f001 fe2e 	bl	8004f78 <RCCEx_PLL2_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003322:	e006      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800332a:	e002      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800332c:	bf00      	nop
 800332e:	e000      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003332:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10c      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800333a:	4b5f      	ldr	r3, [pc, #380]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800333c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003340:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003344:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334a:	4a5b      	ldr	r2, [pc, #364]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800334c:	430b      	orrs	r3, r1
 800334e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003352:	e003      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003354:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003358:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800335c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	2100      	movs	r1, #0
 8003366:	6639      	str	r1, [r7, #96]	@ 0x60
 8003368:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800336c:	667b      	str	r3, [r7, #100]	@ 0x64
 800336e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003372:	460b      	mov	r3, r1
 8003374:	4313      	orrs	r3, r2
 8003376:	d033      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003378:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800337c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800337e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003382:	d015      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003388:	d80e      	bhi.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d012      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800338e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003392:	d109      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003394:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003398:	3308      	adds	r3, #8
 800339a:	4618      	mov	r0, r3
 800339c:	f001 fdec 	bl	8004f78 <RCCEx_PLL2_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80033a6:	e006      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80033ae:	e002      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80033b0:	bf00      	nop
 80033b2:	e000      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80033b4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80033b6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80033be:	4b3e      	ldr	r3, [pc, #248]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80033c4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80033c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ce:	4a3a      	ldr	r2, [pc, #232]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033d0:	430b      	orrs	r3, r1
 80033d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80033d6:	e003      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033dc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80033e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	2100      	movs	r1, #0
 80033ea:	65b9      	str	r1, [r7, #88]	@ 0x58
 80033ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80033f6:	460b      	mov	r3, r1
 80033f8:	4313      	orrs	r3, r2
 80033fa:	d00e      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80033fc:	4b2e      	ldr	r3, [pc, #184]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	4a2d      	ldr	r2, [pc, #180]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003402:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003406:	61d3      	str	r3, [r2, #28]
 8003408:	4b2b      	ldr	r3, [pc, #172]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800340a:	69d9      	ldr	r1, [r3, #28]
 800340c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003410:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003414:	4a28      	ldr	r2, [pc, #160]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003416:	430b      	orrs	r3, r1
 8003418:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800341a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003426:	653b      	str	r3, [r7, #80]	@ 0x50
 8003428:	2300      	movs	r3, #0
 800342a:	657b      	str	r3, [r7, #84]	@ 0x54
 800342c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003430:	460b      	mov	r3, r1
 8003432:	4313      	orrs	r3, r2
 8003434:	d046      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003436:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800343a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003440:	d021      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003442:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003446:	d81a      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800344c:	d01d      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003452:	d814      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003454:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003458:	d019      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800345a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800345e:	d80e      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d016      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8003464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003468:	d109      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800346a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800346e:	3308      	adds	r3, #8
 8003470:	4618      	mov	r0, r3
 8003472:	f001 fd81 	bl	8004f78 <RCCEx_PLL2_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800347c:	e00a      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003484:	e006      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003486:	bf00      	nop
 8003488:	e004      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800348a:	bf00      	nop
 800348c:	e002      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003494:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10f      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800349c:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800349e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80034a2:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80034a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ac:	4a02      	ldr	r2, [pc, #8]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034ae:	430b      	orrs	r3, r1
 80034b0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80034b4:	e006      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034b6:	bf00      	nop
 80034b8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034c0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80034d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034d2:	2300      	movs	r3, #0
 80034d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034d6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80034da:	460b      	mov	r3, r1
 80034dc:	4313      	orrs	r3, r2
 80034de:	d043      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80034e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80034ea:	d021      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80034ec:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80034f0:	d81a      	bhi.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80034f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034f6:	d01d      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80034f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034fc:	d814      	bhi.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80034fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003502:	d019      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003504:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003508:	d80e      	bhi.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d016      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x638>
 800350e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003512:	d109      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003514:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003518:	3308      	adds	r3, #8
 800351a:	4618      	mov	r0, r3
 800351c:	f001 fd2c 	bl	8004f78 <RCCEx_PLL2_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003526:	e00a      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800352e:	e006      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003530:	bf00      	nop
 8003532:	e004      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003534:	bf00      	nop
 8003536:	e002      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003538:	bf00      	nop
 800353a:	e000      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800353c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10c      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003546:	4bb6      	ldr	r3, [pc, #728]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003548:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800354c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003550:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	4ab2      	ldr	r2, [pc, #712]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003558:	430b      	orrs	r3, r1
 800355a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800355e:	e003      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003560:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003564:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003568:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003574:	643b      	str	r3, [r7, #64]	@ 0x40
 8003576:	2300      	movs	r3, #0
 8003578:	647b      	str	r3, [r7, #68]	@ 0x44
 800357a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800357e:	460b      	mov	r3, r1
 8003580:	4313      	orrs	r3, r2
 8003582:	d030      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003584:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800358a:	2b05      	cmp	r3, #5
 800358c:	d80f      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800358e:	2b03      	cmp	r3, #3
 8003590:	d211      	bcs.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003592:	2b01      	cmp	r3, #1
 8003594:	d911      	bls.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003596:	2b02      	cmp	r3, #2
 8003598:	d109      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800359a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800359e:	3308      	adds	r3, #8
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 fce9 	bl	8004f78 <RCCEx_PLL2_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80035ac:	e006      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80035b4:	e002      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80035b6:	bf00      	nop
 80035b8:	e000      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80035ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035bc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10c      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80035c4:	4b96      	ldr	r3, [pc, #600]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035ca:	f023 0107 	bic.w	r1, r3, #7
 80035ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035d4:	4a92      	ldr	r2, [pc, #584]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035d6:	430b      	orrs	r3, r1
 80035d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80035dc:	e003      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035de:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035e2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80035e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	2100      	movs	r1, #0
 80035f0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80035fc:	460b      	mov	r3, r1
 80035fe:	4313      	orrs	r3, r2
 8003600:	d022      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003602:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003606:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800360c:	2b08      	cmp	r3, #8
 800360e:	d005      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003616:	e002      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 800361c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10c      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003626:	4b7e      	ldr	r3, [pc, #504]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800362c:	f023 0108 	bic.w	r1, r3, #8
 8003630:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003634:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003636:	4a7a      	ldr	r2, [pc, #488]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003638:	430b      	orrs	r3, r1
 800363a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800363e:	e003      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003644:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003648:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003654:	633b      	str	r3, [r7, #48]	@ 0x30
 8003656:	2300      	movs	r3, #0
 8003658:	637b      	str	r3, [r7, #52]	@ 0x34
 800365a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800365e:	460b      	mov	r3, r1
 8003660:	4313      	orrs	r3, r2
 8003662:	f000 80b0 	beq.w	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003666:	4b6f      	ldr	r3, [pc, #444]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	4a6e      	ldr	r2, [pc, #440]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003672:	f7fe f877 	bl	8001764 <HAL_GetTick>
 8003676:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800367a:	e00b      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367c:	f7fe f872 	bl	8001764 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d903      	bls.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003692:	e005      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003694:	4b63      	ldr	r3, [pc, #396]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ed      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 80036a0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f040 808a 	bne.w	80037be <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80036b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d022      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80036c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036c6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d01b      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036ce:	4b54      	ldr	r3, [pc, #336]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036dc:	4b50      	ldr	r3, [pc, #320]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036e2:	4a4f      	ldr	r2, [pc, #316]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036f2:	4a4b      	ldr	r2, [pc, #300]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036fc:	4a48      	ldr	r2, [pc, #288]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003702:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d019      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fe f827 	bl	8001764 <HAL_GetTick>
 8003716:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371a:	e00d      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fe f822 	bl	8001764 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d903      	bls.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8003736:	e006      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003738:	4b39      	ldr	r3, [pc, #228]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800373a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0ea      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8003746:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d132      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800374e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003752:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003758:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800375c:	d10f      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800375e:	4b30      	ldr	r3, [pc, #192]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003766:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800376a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003772:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003776:	4a2a      	ldr	r2, [pc, #168]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003778:	430b      	orrs	r3, r1
 800377a:	61d3      	str	r3, [r2, #28]
 800377c:	e005      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x886>
 800377e:	4b28      	ldr	r3, [pc, #160]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	4a27      	ldr	r2, [pc, #156]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003784:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003788:	61d3      	str	r3, [r2, #28]
 800378a:	4b25      	ldr	r3, [pc, #148]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800378c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003790:	4a23      	ldr	r2, [pc, #140]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003796:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800379a:	4b21      	ldr	r3, [pc, #132]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800379c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80037a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037ac:	430b      	orrs	r3, r1
 80037ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80037b2:	e008      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037b4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037b8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 80037bc:	e003      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037be:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037c2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80037d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037d4:	2300      	movs	r3, #0
 80037d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80037dc:	460b      	mov	r3, r1
 80037de:	4313      	orrs	r3, r2
 80037e0:	d038      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80037e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e8:	2b30      	cmp	r3, #48	@ 0x30
 80037ea:	d014      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80037ec:	2b30      	cmp	r3, #48	@ 0x30
 80037ee:	d80e      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d012      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x916>
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d80a      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d015      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80037fc:	2b10      	cmp	r3, #16
 80037fe:	d106      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003800:	4b07      	ldr	r3, [pc, #28]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	4a06      	ldr	r2, [pc, #24]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800380c:	e00d      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003814:	e009      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003816:	bf00      	nop
 8003818:	e007      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800381a:	bf00      	nop
 800381c:	e005      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x926>
 800381e:	bf00      	nop
 8003820:	44020c00 	.word	0x44020c00
 8003824:	44020800 	.word	0x44020800
        break;
 8003828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800382a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10c      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003832:	4bb5      	ldr	r3, [pc, #724]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003834:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003838:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800383c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003842:	49b1      	ldr	r1, [pc, #708]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800384a:	e003      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003850:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003854:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003860:	623b      	str	r3, [r7, #32]
 8003862:	2300      	movs	r3, #0
 8003864:	627b      	str	r3, [r7, #36]	@ 0x24
 8003866:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800386a:	460b      	mov	r3, r1
 800386c:	4313      	orrs	r3, r2
 800386e:	d03c      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003870:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003874:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003876:	2b04      	cmp	r3, #4
 8003878:	d81d      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800387a:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	08003895 	.word	0x08003895
 8003884:	080038a3 	.word	0x080038a3
 8003888:	080038b7 	.word	0x080038b7
 800388c:	080038bf 	.word	0x080038bf
 8003890:	080038bf 	.word	0x080038bf
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003894:	4b9c      	ldr	r3, [pc, #624]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	4a9b      	ldr	r2, [pc, #620]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800389a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800389e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80038a0:	e00e      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038a6:	3308      	adds	r3, #8
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 fb65 	bl	8004f78 <RCCEx_PLL2_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80038b4:	e004      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80038bc:	e000      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 80038be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10c      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80038c8:	4b8f      	ldr	r3, [pc, #572]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ce:	f023 0207 	bic.w	r2, r3, #7
 80038d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d8:	498b      	ldr	r1, [pc, #556]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80038e0:	e003      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038e6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80038ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003900:	460b      	mov	r3, r1
 8003902:	4313      	orrs	r3, r2
 8003904:	d03c      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003906:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800390a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390c:	2b20      	cmp	r3, #32
 800390e:	d01f      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003910:	2b20      	cmp	r3, #32
 8003912:	d819      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003914:	2b18      	cmp	r3, #24
 8003916:	d01d      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003918:	2b18      	cmp	r3, #24
 800391a:	d815      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003920:	2b08      	cmp	r3, #8
 8003922:	d007      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003924:	e010      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003926:	4b78      	ldr	r3, [pc, #480]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392a:	4a77      	ldr	r2, [pc, #476]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800392c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003930:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003932:	e010      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003934:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003938:	3308      	adds	r3, #8
 800393a:	4618      	mov	r0, r3
 800393c:	f001 fb1c 	bl	8004f78 <RCCEx_PLL2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003946:	e006      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800394e:	e002      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003950:	bf00      	nop
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003956:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10c      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800395e:	4b6a      	ldr	r3, [pc, #424]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003964:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003968:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800396c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396e:	4966      	ldr	r1, [pc, #408]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003976:	e003      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003978:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800397c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003980:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003996:	460b      	mov	r3, r1
 8003998:	4313      	orrs	r3, r2
 800399a:	d03e      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800399c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a6:	d020      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80039a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ac:	d819      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80039ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80039b0:	d01d      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80039b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80039b4:	d815      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 80039ba:	2b40      	cmp	r3, #64	@ 0x40
 80039bc:	d007      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80039be:	e010      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c0:	4b51      	ldr	r3, [pc, #324]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c4:	4a50      	ldr	r2, [pc, #320]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80039cc:	e010      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039d2:	3308      	adds	r3, #8
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 facf 	bl	8004f78 <RCCEx_PLL2_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80039e0:	e006      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039e8:	e002      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80039ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10c      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80039f8:	4b43      	ldr	r3, [pc, #268]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039fe:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003a02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a08:	493f      	ldr	r1, [pc, #252]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003a10:	e003      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a12:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a16:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	2100      	movs	r1, #0
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a30:	460b      	mov	r3, r1
 8003a32:	4313      	orrs	r3, r2
 8003a34:	d038      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a40:	d00e      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a46:	d815      	bhi.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d017      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a50:	d110      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a52:	4b2d      	ldr	r3, [pc, #180]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a56:	4a2c      	ldr	r2, [pc, #176]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a5c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003a5e:	e00e      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a64:	3308      	adds	r3, #8
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 fa86 	bl	8004f78 <RCCEx_PLL2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003a72:	e004      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a7a:	e000      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a7e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003a86:	4b20      	ldr	r3, [pc, #128]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a96:	491c      	ldr	r1, [pc, #112]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003a9e:	e003      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003aa4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aa8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	6039      	str	r1, [r7, #0]
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	d039      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003ac4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ac8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003aca:	2b30      	cmp	r3, #48	@ 0x30
 8003acc:	d01e      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003ace:	2b30      	cmp	r3, #48	@ 0x30
 8003ad0:	d815      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d002      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d007      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003ada:	e010      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003adc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae0:	4a09      	ldr	r2, [pc, #36]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ae8:	e011      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003aea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003aee:	3308      	adds	r3, #8
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 fa41 	bl	8004f78 <RCCEx_PLL2_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003afc:	e007      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003b04:	e003      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003b06:	bf00      	nop
 8003b08:	44020c00 	.word	0x44020c00
        break;
 8003b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003b16:	4b0c      	ldr	r3, [pc, #48]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b26:	4908      	ldr	r1, [pc, #32]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003b2e:	e003      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b34:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003b38:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	37a8      	adds	r7, #168	@ 0xa8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b46:	bf00      	nop
 8003b48:	44020c00 	.word	0x44020c00

08003b4c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b08b      	sub	sp, #44	@ 0x2c
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003b54:	4bae      	ldr	r3, [pc, #696]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003b5e:	4bac      	ldr	r3, [pc, #688]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003b68:	4ba9      	ldr	r3, [pc, #676]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b72:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003b74:	4ba6      	ldr	r3, [pc, #664]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003b80:	4ba3      	ldr	r3, [pc, #652]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b84:	08db      	lsrs	r3, r3, #3
 8003b86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	fb02 f303 	mul.w	r3, r2, r3
 8003b90:	ee07 3a90 	vmov	s15, r3
 8003b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b98:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8126 	beq.w	8003df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d053      	beq.n	8003c52 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d86f      	bhi.n	8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d02b      	beq.n	8003c14 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003bbc:	e068      	b.n	8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003bbe:	4b94      	ldr	r3, [pc, #592]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	08db      	lsrs	r3, r3, #3
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	4a92      	ldr	r2, [pc, #584]	@ (8003e14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003bca:	fa22 f303 	lsr.w	r3, r2, r3
 8003bce:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	ee07 3a90 	vmov	s15, r3
 8003be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bf2:	ed97 6a04 	vldr	s12, [r7, #16]
 8003bf6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003e18 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003c12:	e068      	b.n	8003ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	ee07 3a90 	vmov	s15, r3
 8003c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c30:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c34:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003e18 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003c38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003c50:	e049      	b.n	8003ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	ee07 3a90 	vmov	s15, r3
 8003c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003e20 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8003c60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6e:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c72:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003e18 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003c8e:	e02a      	b.n	8003ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c90:	4b5f      	ldr	r3, [pc, #380]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	08db      	lsrs	r3, r3, #3
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003e14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca0:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc4:	ed97 6a04 	vldr	s12, [r7, #16]
 8003cc8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003e18 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003ce4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cf2:	d121      	bne.n	8003d38 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003cf4:	4b46      	ldr	r3, [pc, #280]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d017      	beq.n	8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d00:	4b43      	ldr	r3, [pc, #268]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d04:	0a5b      	lsrs	r3, r3, #9
 8003d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003d12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d16:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003d1a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d26:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	e006      	b.n	8003d3e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e002      	b.n	8003d3e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003d3e:	4b34      	ldr	r3, [pc, #208]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d4a:	d121      	bne.n	8003d90 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003d4c:	4b30      	ldr	r3, [pc, #192]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d017      	beq.n	8003d88 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d58:	4b2d      	ldr	r3, [pc, #180]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003d6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003d72:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d7e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	e006      	b.n	8003d96 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	e002      	b.n	8003d96 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003d96:	4b1e      	ldr	r3, [pc, #120]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003da2:	d121      	bne.n	8003de8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003da4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d017      	beq.n	8003de0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003db0:	4b17      	ldr	r3, [pc, #92]	@ (8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db4:	0e1b      	lsrs	r3, r3, #24
 8003db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003dc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003dca:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003dde:	e010      	b.n	8003e02 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	609a      	str	r2, [r3, #8]
}
 8003de6:	e00c      	b.n	8003e02 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	609a      	str	r2, [r3, #8]
}
 8003dee:	e008      	b.n	8003e02 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]
}
 8003e02:	bf00      	nop
 8003e04:	372c      	adds	r7, #44	@ 0x2c
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	44020c00 	.word	0x44020c00
 8003e14:	03d09000 	.word	0x03d09000
 8003e18:	46000000 	.word	0x46000000
 8003e1c:	4a742400 	.word	0x4a742400
 8003e20:	4bb71b00 	.word	0x4bb71b00

08003e24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b08b      	sub	sp, #44	@ 0x2c
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003e2c:	4bae      	ldr	r3, [pc, #696]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e34:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003e36:	4bac      	ldr	r3, [pc, #688]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003e40:	4ba9      	ldr	r3, [pc, #676]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	0a1b      	lsrs	r3, r3, #8
 8003e46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e4a:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003e4c:	4ba6      	ldr	r3, [pc, #664]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003e58:	4ba3      	ldr	r3, [pc, #652]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5c:	08db      	lsrs	r3, r3, #3
 8003e5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	ee07 3a90 	vmov	s15, r3
 8003e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e70:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8126 	beq.w	80040c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d053      	beq.n	8003f2a <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d86f      	bhi.n	8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d003      	beq.n	8003e96 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d02b      	beq.n	8003eec <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003e94:	e068      	b.n	8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e96:	4b94      	ldr	r3, [pc, #592]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	08db      	lsrs	r3, r3, #3
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	4a92      	ldr	r2, [pc, #584]	@ (80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	ee07 3a90 	vmov	s15, r3
 8003eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eca:	ed97 6a04 	vldr	s12, [r7, #16]
 8003ece:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003eea:	e068      	b.n	8003fbe <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80040f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	ee07 3a90 	vmov	s15, r3
 8003f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f08:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f0c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003f10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f24:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003f28:	e049      	b.n	8003fbe <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	ee07 3a90 	vmov	s15, r3
 8003f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f34:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8003f38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f46:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f4a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f62:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003f66:	e02a      	b.n	8003fbe <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f68:	4b5f      	ldr	r3, [pc, #380]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	08db      	lsrs	r3, r3, #3
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	4a5e      	ldr	r2, [pc, #376]	@ (80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
 8003f78:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	ee07 3a90 	vmov	s15, r3
 8003f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f9c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003fa0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003fa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003fbc:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fca:	d121      	bne.n	8004010 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003fcc:	4b46      	ldr	r3, [pc, #280]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d017      	beq.n	8004008 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003fd8:	4b43      	ldr	r3, [pc, #268]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fdc:	0a5b      	lsrs	r3, r3, #9
 8003fde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8003fea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fee:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003ff2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ffe:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e006      	b.n	8004016 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e002      	b.n	8004016 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004016:	4b34      	ldr	r3, [pc, #208]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800401e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004022:	d121      	bne.n	8004068 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004024:	4b30      	ldr	r3, [pc, #192]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d017      	beq.n	8004060 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004030:	4b2d      	ldr	r3, [pc, #180]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004034:	0c1b      	lsrs	r3, r3, #16
 8004036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004042:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004046:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800404a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800404e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004056:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	e006      	b.n	800406e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	e002      	b.n	800406e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800406e:	4b1e      	ldr	r3, [pc, #120]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004076:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800407a:	d121      	bne.n	80040c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800407c:	4b1a      	ldr	r3, [pc, #104]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d017      	beq.n	80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004088:	4b17      	ldr	r3, [pc, #92]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800408a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408c:	0e1b      	lsrs	r3, r3, #24
 800408e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800409a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800409e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80040a2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80040a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ae:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80040b6:	e010      	b.n	80040da <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
}
 80040be:	e00c      	b.n	80040da <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	609a      	str	r2, [r3, #8]
}
 80040c6:	e008      	b.n	80040da <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	609a      	str	r2, [r3, #8]
}
 80040da:	bf00      	nop
 80040dc:	372c      	adds	r7, #44	@ 0x2c
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	44020c00 	.word	0x44020c00
 80040ec:	03d09000 	.word	0x03d09000
 80040f0:	46000000 	.word	0x46000000
 80040f4:	4a742400 	.word	0x4a742400
 80040f8:	4bb71b00 	.word	0x4bb71b00

080040fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08c      	sub	sp, #48	@ 0x30
 8004100:	af00      	add	r7, sp, #0
 8004102:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800410a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800410e:	430b      	orrs	r3, r1
 8004110:	d14b      	bne.n	80041aa <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004112:	4bc4      	ldr	r3, [pc, #784]	@ (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004118:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800411e:	4bc1      	ldr	r3, [pc, #772]	@ (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b02      	cmp	r3, #2
 800412a:	d108      	bne.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800412c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004132:	d104      	bne.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800413a:	f000 bf14 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800413e:	4bb9      	ldr	r3, [pc, #740]	@ (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004148:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800414c:	d108      	bne.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800414e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004154:	d104      	bne.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8004156:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800415a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800415c:	f000 bf03 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004160:	4bb0      	ldr	r3, [pc, #704]	@ (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004168:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800416c:	d119      	bne.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800416e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004170:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004174:	d115      	bne.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004176:	4bab      	ldr	r3, [pc, #684]	@ (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800417e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004182:	d30a      	bcc.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004184:	4ba7      	ldr	r3, [pc, #668]	@ (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800418e:	4aa6      	ldr	r2, [pc, #664]	@ (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004196:	f000 bee6 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800419e:	f000 bee2 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041a6:	f000 bede 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80041aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ae:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 80041b2:	ea52 0301 	orrs.w	r3, r2, r1
 80041b6:	f000 838e 	beq.w	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 80041ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041be:	2a01      	cmp	r2, #1
 80041c0:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 80041c4:	f080 86cc 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80041c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041cc:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 80041d0:	ea52 0301 	orrs.w	r3, r2, r1
 80041d4:	f000 82aa 	beq.w	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80041d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041dc:	2a01      	cmp	r2, #1
 80041de:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 80041e2:	f080 86bd 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80041e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ea:	f1a3 0110 	sub.w	r1, r3, #16
 80041ee:	ea52 0301 	orrs.w	r3, r2, r1
 80041f2:	f000 8681 	beq.w	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80041f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041fa:	2a01      	cmp	r2, #1
 80041fc:	f173 0310 	sbcs.w	r3, r3, #16
 8004200:	f080 86ae 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004208:	1f19      	subs	r1, r3, #4
 800420a:	ea52 0301 	orrs.w	r3, r2, r1
 800420e:	f000 84b1 	beq.w	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8004212:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004216:	2a01      	cmp	r2, #1
 8004218:	f173 0304 	sbcs.w	r3, r3, #4
 800421c:	f080 86a0 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004224:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8004228:	430b      	orrs	r3, r1
 800422a:	f000 85aa 	beq.w	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 800422e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004232:	497e      	ldr	r1, [pc, #504]	@ (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8004234:	428a      	cmp	r2, r1
 8004236:	f173 0300 	sbcs.w	r3, r3, #0
 800423a:	f080 8691 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800423e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004242:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8004246:	430b      	orrs	r3, r1
 8004248:	f000 8532 	beq.w	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 800424c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004250:	4977      	ldr	r1, [pc, #476]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8004252:	428a      	cmp	r2, r1
 8004254:	f173 0300 	sbcs.w	r3, r3, #0
 8004258:	f080 8682 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800425c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004260:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8004264:	430b      	orrs	r3, r1
 8004266:	f000 84bc 	beq.w	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 800426a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800426e:	4971      	ldr	r1, [pc, #452]	@ (8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8004270:	428a      	cmp	r2, r1
 8004272:	f173 0300 	sbcs.w	r3, r3, #0
 8004276:	f080 8673 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800427a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800427e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8004282:	430b      	orrs	r3, r1
 8004284:	f000 85f2 	beq.w	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8004288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800428c:	496a      	ldr	r1, [pc, #424]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 800428e:	428a      	cmp	r2, r1
 8004290:	f173 0300 	sbcs.w	r3, r3, #0
 8004294:	f080 8664 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800429c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80042a0:	430b      	orrs	r3, r1
 80042a2:	f000 81e5 	beq.w	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80042a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042aa:	4964      	ldr	r1, [pc, #400]	@ (800443c <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 80042ac:	428a      	cmp	r2, r1
 80042ae:	f173 0300 	sbcs.w	r3, r3, #0
 80042b2:	f080 8655 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80042b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ba:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80042be:	430b      	orrs	r3, r1
 80042c0:	f000 83cc 	beq.w	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80042c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042c8:	495d      	ldr	r1, [pc, #372]	@ (8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80042ca:	428a      	cmp	r2, r1
 80042cc:	f173 0300 	sbcs.w	r3, r3, #0
 80042d0:	f080 8646 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80042d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042d8:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80042dc:	430b      	orrs	r3, r1
 80042de:	f000 8331 	beq.w	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 80042e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042e6:	4957      	ldr	r1, [pc, #348]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 80042e8:	428a      	cmp	r2, r1
 80042ea:	f173 0300 	sbcs.w	r3, r3, #0
 80042ee:	f080 8637 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80042f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042f6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80042fa:	430b      	orrs	r3, r1
 80042fc:	f000 82bb 	beq.w	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8004300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004304:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8004308:	f173 0300 	sbcs.w	r3, r3, #0
 800430c:	f080 8628 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004314:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004318:	430b      	orrs	r3, r1
 800431a:	f000 826d 	beq.w	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 800431e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004322:	f244 0101 	movw	r1, #16385	@ 0x4001
 8004326:	428a      	cmp	r2, r1
 8004328:	f173 0300 	sbcs.w	r3, r3, #0
 800432c:	f080 8618 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004334:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004338:	430b      	orrs	r3, r1
 800433a:	f000 821e 	beq.w	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 800433e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004342:	f242 0101 	movw	r1, #8193	@ 0x2001
 8004346:	428a      	cmp	r2, r1
 8004348:	f173 0300 	sbcs.w	r3, r3, #0
 800434c:	f080 8608 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004354:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004358:	430b      	orrs	r3, r1
 800435a:	f000 8137 	beq.w	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800435e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004362:	f241 0101 	movw	r1, #4097	@ 0x1001
 8004366:	428a      	cmp	r2, r1
 8004368:	f173 0300 	sbcs.w	r3, r3, #0
 800436c:	f080 85f8 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004374:	1f11      	subs	r1, r2, #4
 8004376:	430b      	orrs	r3, r1
 8004378:	f000 80d2 	beq.w	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 800437c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004380:	2a05      	cmp	r2, #5
 8004382:	f173 0300 	sbcs.w	r3, r3, #0
 8004386:	f080 85eb 	bcs.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800438a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800438e:	1e51      	subs	r1, r2, #1
 8004390:	430b      	orrs	r3, r1
 8004392:	d006      	beq.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004398:	1e91      	subs	r1, r2, #2
 800439a:	430b      	orrs	r3, r1
 800439c:	d06c      	beq.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800439e:	f000 bddf 	b.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80043a2:	4b20      	ldr	r3, [pc, #128]	@ (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80043a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80043ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d104      	bne.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80043b4:	f7fe fd42 	bl	8002e3c <HAL_RCC_GetPCLK2Freq>
 80043b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80043ba:	f000 bdd4 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80043be:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043ca:	d10a      	bne.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 80043cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d107      	bne.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043d2:	f107 030c 	add.w	r3, r7, #12
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fd24 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043e0:	e048      	b.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80043e2:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d10c      	bne.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80043ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d109      	bne.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80043f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	08db      	lsrs	r3, r3, #3
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	4a12      	ldr	r2, [pc, #72]	@ (8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
 8004404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004406:	e035      	b.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004408:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004414:	d11c      	bne.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004418:	2b04      	cmp	r3, #4
 800441a:	d119      	bne.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 800441c:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800441e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004420:	e028      	b.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8004422:	bf00      	nop
 8004424:	44020c00 	.word	0x44020c00
 8004428:	016e3600 	.word	0x016e3600
 800442c:	20000001 	.word	0x20000001
 8004430:	10000001 	.word	0x10000001
 8004434:	08000001 	.word	0x08000001
 8004438:	04000001 	.word	0x04000001
 800443c:	00200001 	.word	0x00200001
 8004440:	00040001 	.word	0x00040001
 8004444:	00020001 	.word	0x00020001
 8004448:	03d09000 	.word	0x03d09000
 800444c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004450:	4b9f      	ldr	r3, [pc, #636]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b02      	cmp	r3, #2
 800445c:	d106      	bne.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800445e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004460:	2b05      	cmp	r3, #5
 8004462:	d103      	bne.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8004464:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800446a:	e003      	b.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004470:	f000 bd79 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004474:	f000 bd77 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004478:	4b95      	ldr	r3, [pc, #596]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800447a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800447e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004482:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004486:	2b00      	cmp	r3, #0
 8004488:	d104      	bne.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800448a:	f7fe fcc1 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 800448e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004490:	f000 bd69 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004494:	4b8e      	ldr	r3, [pc, #568]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800449c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044a0:	d10a      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80044a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d107      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044a8:	f107 030c 	add.w	r3, r7, #12
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff fcb9 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044b6:	e031      	b.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80044b8:	4b85      	ldr	r3, [pc, #532]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d10c      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80044c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c6:	2b18      	cmp	r3, #24
 80044c8:	d109      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80044ca:	4b81      	ldr	r3, [pc, #516]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	08db      	lsrs	r3, r3, #3
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	4a7f      	ldr	r2, [pc, #508]	@ (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80044d6:	fa22 f303 	lsr.w	r3, r2, r3
 80044da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044dc:	e01e      	b.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80044de:	4b7c      	ldr	r3, [pc, #496]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ea:	d105      	bne.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80044ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d102      	bne.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 80044f2:	4b79      	ldr	r3, [pc, #484]	@ (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80044f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044f6:	e011      	b.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80044f8:	4b75      	ldr	r3, [pc, #468]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b02      	cmp	r3, #2
 8004504:	d106      	bne.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004508:	2b28      	cmp	r3, #40	@ 0x28
 800450a:	d103      	bne.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 800450c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004512:	e003      	b.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004518:	f000 bd25 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800451c:	f000 bd23 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004520:	4b6b      	ldr	r3, [pc, #428]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004522:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004526:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800452a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800452c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452e:	2b00      	cmp	r3, #0
 8004530:	d104      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004532:	f7fe fc6d 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 8004536:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004538:	f000 bd15 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800453c:	4b64      	ldr	r3, [pc, #400]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004544:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004548:	d10a      	bne.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	2b40      	cmp	r3, #64	@ 0x40
 800454e:	d107      	bne.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004550:	f107 030c 	add.w	r3, r7, #12
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fc65 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800455e:	e033      	b.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004560:	4b5b      	ldr	r3, [pc, #364]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b02      	cmp	r3, #2
 800456a:	d10c      	bne.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004570:	d109      	bne.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004572:	4b57      	ldr	r3, [pc, #348]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	08db      	lsrs	r3, r3, #3
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	4a55      	ldr	r2, [pc, #340]	@ (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800457e:	fa22 f303 	lsr.w	r3, r2, r3
 8004582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004584:	e020      	b.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8004586:	4b52      	ldr	r3, [pc, #328]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800458e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004592:	d106      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800459a:	d102      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 800459c:	4b4e      	ldr	r3, [pc, #312]	@ (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800459e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045a0:	e012      	b.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80045a2:	4b4b      	ldr	r3, [pc, #300]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80045a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d107      	bne.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80045b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80045b6:	d103      	bne.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 80045b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045be:	e003      	b.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80045c4:	f000 bccf 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80045c8:	f000 bccd 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80045cc:	4b40      	ldr	r3, [pc, #256]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80045ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045d2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80045d6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80045d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d104      	bne.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80045de:	f7fe fc43 	bl	8002e68 <HAL_RCC_GetPCLK3Freq>
 80045e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80045e4:	f000 bcbf 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80045e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045ee:	d108      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045f0:	f107 030c 	add.w	r3, r7, #12
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fc15 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80045fe:	f000 bcb2 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004602:	4b33      	ldr	r3, [pc, #204]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b02      	cmp	r3, #2
 800460c:	d10d      	bne.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 800460e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004610:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004614:	d109      	bne.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004616:	4b2e      	ldr	r3, [pc, #184]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	08db      	lsrs	r3, r3, #3
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	4a2c      	ldr	r2, [pc, #176]	@ (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004622:	fa22 f303 	lsr.w	r3, r2, r3
 8004626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004628:	e020      	b.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800462a:	4b29      	ldr	r3, [pc, #164]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004636:	d106      	bne.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8004638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800463e:	d102      	bne.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8004640:	4b25      	ldr	r3, [pc, #148]	@ (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004644:	e012      	b.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004646:	4b22      	ldr	r3, [pc, #136]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b02      	cmp	r3, #2
 8004652:	d107      	bne.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8004654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004656:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800465a:	d103      	bne.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 800465c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004662:	e003      	b.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004668:	f000 bc7d 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800466c:	f000 bc7b 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004670:	4b17      	ldr	r3, [pc, #92]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004672:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800467c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467e:	2b00      	cmp	r3, #0
 8004680:	d104      	bne.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004682:	f7fe fba9 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8004686:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004688:	f000 bc6d 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800468c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468e:	2b01      	cmp	r3, #1
 8004690:	d104      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004692:	f7fe fa75 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8004696:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8004698:	f000 bc65 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800469c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d108      	bne.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046a2:	f107 030c 	add.w	r3, r7, #12
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fbbc 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80046b0:	f000 bc59 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80046b4:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046c0:	d10e      	bne.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80046c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d10b      	bne.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 80046c8:	4b04      	ldr	r3, [pc, #16]	@ (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80046ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046cc:	e02c      	b.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 80046ce:	bf00      	nop
 80046d0:	44020c00 	.word	0x44020c00
 80046d4:	03d09000 	.word	0x03d09000
 80046d8:	003d0900 	.word	0x003d0900
 80046dc:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80046e0:	4b95      	ldr	r3, [pc, #596]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d10c      	bne.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 80046ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d109      	bne.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046f2:	4b91      	ldr	r3, [pc, #580]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	08db      	lsrs	r3, r3, #3
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	4a8f      	ldr	r2, [pc, #572]	@ (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80046fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004704:	e010      	b.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004706:	4b8c      	ldr	r3, [pc, #560]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800470e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004712:	d105      	bne.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004716:	2b05      	cmp	r3, #5
 8004718:	d102      	bne.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 800471a:	4b89      	ldr	r3, [pc, #548]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800471c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800471e:	e003      	b.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004724:	f000 bc1f 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004728:	f000 bc1d 	b.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800472c:	4b82      	ldr	r3, [pc, #520]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800472e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004738:	4b7f      	ldr	r3, [pc, #508]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800473a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b02      	cmp	r3, #2
 8004744:	d106      	bne.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004748:	2b00      	cmp	r3, #0
 800474a:	d103      	bne.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 800474c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004752:	e011      	b.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004754:	4b78      	ldr	r3, [pc, #480]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800475a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800475e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004762:	d106      	bne.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	2b08      	cmp	r3, #8
 8004768:	d103      	bne.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 800476a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800476e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004770:	e002      	b.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004776:	e3f6      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004778:	e3f5      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800477a:	4b6f      	ldr	r3, [pc, #444]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800477c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004780:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004784:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004788:	2b00      	cmp	r3, #0
 800478a:	d103      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800478c:	f7fe fb40 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 8004790:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004792:	e3e8      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8004794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800479a:	d107      	bne.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800479c:	f107 030c 	add.w	r3, r7, #12
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff fb3f 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80047aa:	e3dc      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80047ac:	4b62      	ldr	r3, [pc, #392]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d10d      	bne.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80047b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047be:	d109      	bne.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047c0:	4b5d      	ldr	r3, [pc, #372]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	08db      	lsrs	r3, r3, #3
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	4a5c      	ldr	r2, [pc, #368]	@ (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047d2:	e010      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80047d4:	4b58      	ldr	r3, [pc, #352]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047e0:	d106      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80047e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047e8:	d102      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 80047ea:	4b55      	ldr	r3, [pc, #340]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ee:	e002      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80047f4:	e3b7      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80047f6:	e3b6      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80047f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047fe:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004802:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004806:	2b00      	cmp	r3, #0
 8004808:	d103      	bne.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800480a:	f7fe fb01 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 800480e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004810:	e3a9      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8004812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004814:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004818:	d107      	bne.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800481a:	f107 030c 	add.w	r3, r7, #12
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff fb00 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004828:	e39d      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800482a:	4b43      	ldr	r3, [pc, #268]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b02      	cmp	r3, #2
 8004834:	d10d      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004838:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800483c:	d109      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800483e:	4b3e      	ldr	r3, [pc, #248]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	08db      	lsrs	r3, r3, #3
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	4a3c      	ldr	r2, [pc, #240]	@ (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800484a:	fa22 f303 	lsr.w	r3, r2, r3
 800484e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004850:	e010      	b.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004852:	4b39      	ldr	r3, [pc, #228]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800485a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800485e:	d106      	bne.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004862:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004866:	d102      	bne.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004868:	4b35      	ldr	r3, [pc, #212]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800486a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800486c:	e002      	b.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004872:	e378      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004874:	e377      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004876:	4b30      	ldr	r3, [pc, #192]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004878:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800487c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004880:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004888:	f7fe fac2 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 800488c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800488e:	e36a      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004892:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004896:	d107      	bne.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004898:	f107 030c 	add.w	r3, r7, #12
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fac1 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048a6:	e35e      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80048a8:	4b23      	ldr	r3, [pc, #140]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d10d      	bne.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 80048b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048ba:	d109      	bne.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	08db      	lsrs	r3, r3, #3
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	4a1d      	ldr	r2, [pc, #116]	@ (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
 80048cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048ce:	e34a      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048d4:	e347      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80048d6:	4b18      	ldr	r3, [pc, #96]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048dc:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80048e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 80048e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d103      	bne.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80048e8:	f7fe fabe 	bl	8002e68 <HAL_RCC_GetPCLK3Freq>
 80048ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80048ee:	e33a      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 80048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048f6:	d107      	bne.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048f8:	f107 030c 	add.w	r3, r7, #12
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff fa91 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004906:	e32e      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004908:	4b0b      	ldr	r3, [pc, #44]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b02      	cmp	r3, #2
 8004912:	d10d      	bne.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004916:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800491a:	d109      	bne.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800491c:	4b06      	ldr	r3, [pc, #24]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	08db      	lsrs	r3, r3, #3
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	4a05      	ldr	r2, [pc, #20]	@ (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
 800492c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800492e:	e31a      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004934:	e317      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004936:	bf00      	nop
 8004938:	44020c00 	.word	0x44020c00
 800493c:	03d09000 	.word	0x03d09000
 8004940:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004944:	4b9b      	ldr	r3, [pc, #620]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004946:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800494a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800494e:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 8004950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004952:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004956:	d044      	beq.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800495e:	d879      	bhi.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004966:	d02d      	beq.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800496e:	d871      	bhi.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004976:	d017      	beq.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800497e:	d869      	bhi.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800498c:	d004      	beq.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 800498e:	e061      	b.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004990:	f7fe fa6a 	bl	8002e68 <HAL_RCC_GetPCLK3Freq>
 8004994:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004996:	e060      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004998:	f107 030c 	add.w	r3, r7, #12
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff fa41 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80049a6:	e058      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049a8:	4b82      	ldr	r3, [pc, #520]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d103      	bne.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 80049b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80049bc:	e04d      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80049c2:	e04a      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80049c4:	4b7b      	ldr	r3, [pc, #492]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049d2:	d103      	bne.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 80049d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80049d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80049da:	e03e      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80049e0:	e03b      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80049e2:	4b74      	ldr	r3, [pc, #464]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049e8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80049ec:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049ee:	4b71      	ldr	r3, [pc, #452]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d10c      	bne.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a00:	4b6c      	ldr	r3, [pc, #432]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	08db      	lsrs	r3, r3, #3
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	4a6b      	ldr	r2, [pc, #428]	@ (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a12:	e01e      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a14:	4b67      	ldr	r3, [pc, #412]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a20:	d106      	bne.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a28:	d102      	bne.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004a2a:	4b64      	ldr	r3, [pc, #400]	@ (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a2e:	e010      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a30:	4b60      	ldr	r3, [pc, #384]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a3c:	d106      	bne.n	8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a44:	d102      	bne.n	8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004a46:	4b5e      	ldr	r3, [pc, #376]	@ (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a4a:	e002      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004a50:	e003      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004a52:	e002      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004a58:	bf00      	nop
          }
        }
        break;
 8004a5a:	e284      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004a5c:	4b55      	ldr	r3, [pc, #340]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a5e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004a62:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004a66:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 8004a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004a6e:	d044      	beq.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a72:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004a76:	d879      	bhi.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a7e:	d02d      	beq.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a86:	d871      	bhi.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a8e:	d017      	beq.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a96:	d869      	bhi.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d004      	beq.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8004a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aa4:	d004      	beq.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004aa6:	e061      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004aa8:	f7fe f9b2 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 8004aac:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004aae:	e060      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ab0:	f107 030c 	add.w	r3, r7, #12
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff f9b5 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004abe:	e058      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ac0:	4b3c      	ldr	r3, [pc, #240]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d103      	bne.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8004ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004ad4:	e04d      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ada:	e04a      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004adc:	4b35      	ldr	r3, [pc, #212]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ae2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aea:	d103      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004aec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004af2:	e03e      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004af8:	e03b      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004afa:	4b2e      	ldr	r3, [pc, #184]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b00:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b06:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d10c      	bne.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b18:	4b26      	ldr	r3, [pc, #152]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	08db      	lsrs	r3, r3, #3
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	4a25      	ldr	r2, [pc, #148]	@ (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
 8004b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b2a:	e01e      	b.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b2c:	4b21      	ldr	r3, [pc, #132]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b38:	d106      	bne.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b40:	d102      	bne.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004b42:	4b1e      	ldr	r3, [pc, #120]	@ (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b46:	e010      	b.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b48:	4b1a      	ldr	r3, [pc, #104]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b54:	d106      	bne.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b5c:	d102      	bne.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004b5e:	4b18      	ldr	r3, [pc, #96]	@ (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b62:	e002      	b.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004b68:	e003      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004b6a:	e002      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004b70:	bf00      	nop
          }
        }
        break;
 8004b72:	e1f8      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004b74:	4b0f      	ldr	r3, [pc, #60]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004b80:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b8c:	d105      	bne.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8004b94:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004b98:	e1e5      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ba0:	d110      	bne.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ba2:	f107 0318 	add.w	r3, r7, #24
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fe ffd0 	bl	8003b4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004bb0:	e1d9      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004bb2:	bf00      	nop
 8004bb4:	44020c00 	.word	0x44020c00
 8004bb8:	03d09000 	.word	0x03d09000
 8004bbc:	003d0900 	.word	0x003d0900
 8004bc0:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bca:	d107      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bcc:	f107 030c 	add.w	r3, r7, #12
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff f927 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004bda:	e1c4      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004be0:	e1c1      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004be2:	4b9d      	ldr	r3, [pc, #628]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d859      	bhi.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c11 	.word	0x08004c11
 8004c00:	08004c21 	.word	0x08004c21
 8004c04:	08004ca9 	.word	0x08004ca9
 8004c08:	08004c31 	.word	0x08004c31
 8004c0c:	08004c37 	.word	0x08004c37
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c10:	f107 0318 	add.w	r3, r7, #24
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe ff99 	bl	8003b4c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c1e:	e046      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c20:	f107 030c 	add.w	r3, r7, #12
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff f8fd 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c2e:	e03e      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004c30:	4b8a      	ldr	r3, [pc, #552]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c34:	e03b      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c36:	4b88      	ldr	r3, [pc, #544]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c3c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004c40:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c42:	4b85      	ldr	r3, [pc, #532]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d10c      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d109      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c54:	4b80      	ldr	r3, [pc, #512]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	08db      	lsrs	r3, r3, #3
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	4a80      	ldr	r2, [pc, #512]	@ (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
 8004c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c66:	e01e      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c68:	4b7b      	ldr	r3, [pc, #492]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c74:	d106      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7c:	d102      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004c7e:	4b79      	ldr	r3, [pc, #484]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c82:	e010      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c84:	4b74      	ldr	r3, [pc, #464]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c90:	d106      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c98:	d102      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004c9a:	4b73      	ldr	r3, [pc, #460]	@ (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c9e:	e002      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004ca4:	e003      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8004ca6:	e002      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004cac:	bf00      	nop
          }
        }
        break;
 8004cae:	e15a      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004cb0:	4b69      	ldr	r3, [pc, #420]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cba:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	2b20      	cmp	r3, #32
 8004cc0:	d022      	beq.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8004cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d858      	bhi.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cca:	2b18      	cmp	r3, #24
 8004ccc:	d019      	beq.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8004cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd0:	2b18      	cmp	r3, #24
 8004cd2:	d852      	bhi.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d008      	beq.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004ce0:	e04b      	b.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ce2:	f107 0318 	add.w	r3, r7, #24
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe ff30 	bl	8003b4c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004cf0:	e046      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cf2:	f107 030c 	add.w	r3, r7, #12
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff f894 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d00:	e03e      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004d02:	4b56      	ldr	r3, [pc, #344]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d06:	e03b      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d08:	4b53      	ldr	r3, [pc, #332]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d0e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d14:	4b50      	ldr	r3, [pc, #320]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d10c      	bne.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d109      	bne.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d26:	4b4c      	ldr	r3, [pc, #304]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	08db      	lsrs	r3, r3, #3
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	4a4b      	ldr	r2, [pc, #300]	@ (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004d32:	fa22 f303 	lsr.w	r3, r2, r3
 8004d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d38:	e01e      	b.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d3a:	4b47      	ldr	r3, [pc, #284]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d46:	d106      	bne.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8004d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4e:	d102      	bne.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004d50:	4b44      	ldr	r3, [pc, #272]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d54:	e010      	b.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d56:	4b40      	ldr	r3, [pc, #256]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d62:	d106      	bne.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d6a:	d102      	bne.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004d6c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d70:	e002      	b.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004d76:	e003      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8004d78:	e002      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d7e:	bf00      	nop
          }
        }
        break;
 8004d80:	e0f1      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004d82:	4b35      	ldr	r3, [pc, #212]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d88:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d94:	d023      	beq.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d9c:	d858      	bhi.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da0:	2bc0      	cmp	r3, #192	@ 0xc0
 8004da2:	d019      	beq.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004da8:	d852      	bhi.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	2b40      	cmp	r3, #64	@ 0x40
 8004db4:	d008      	beq.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8004db6:	e04b      	b.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004db8:	f107 0318 	add.w	r3, r7, #24
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fe fec5 	bl	8003b4c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004dc6:	e046      	b.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dc8:	f107 030c 	add.w	r3, r7, #12
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff f829 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004dd6:	e03e      	b.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004dd8:	4b20      	ldr	r3, [pc, #128]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ddc:	e03b      	b.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004dde:	4b1e      	ldr	r3, [pc, #120]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004de4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004dea:	4b1b      	ldr	r3, [pc, #108]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d10c      	bne.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d109      	bne.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004dfc:	4b16      	ldr	r3, [pc, #88]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	08db      	lsrs	r3, r3, #3
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	4a16      	ldr	r2, [pc, #88]	@ (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e0e:	e01e      	b.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e10:	4b11      	ldr	r3, [pc, #68]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e1c:	d106      	bne.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e24:	d102      	bne.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004e26:	4b0f      	ldr	r3, [pc, #60]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e2a:	e010      	b.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e38:	d106      	bne.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e40:	d102      	bne.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004e42:	4b09      	ldr	r3, [pc, #36]	@ (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e46:	e002      	b.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004e4c:	e003      	b.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004e4e:	e002      	b.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e54:	bf00      	nop
          }
        }
        break;
 8004e56:	e086      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004e58:	44020c00 	.word	0x44020c00
 8004e5c:	00bb8000 	.word	0x00bb8000
 8004e60:	03d09000 	.word	0x03d09000
 8004e64:	003d0900 	.word	0x003d0900
 8004e68:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004e6c:	4b40      	ldr	r3, [pc, #256]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004e6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e72:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e76:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004e78:	4b3d      	ldr	r3, [pc, #244]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e84:	d105      	bne.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d102      	bne.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8004e8c:	4b39      	ldr	r3, [pc, #228]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e90:	e031      	b.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8004e92:	4b37      	ldr	r3, [pc, #220]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e9e:	d10a      	bne.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8004ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea2:	2b10      	cmp	r3, #16
 8004ea4:	d107      	bne.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ea6:	f107 0318 	add.w	r3, r7, #24
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fe fe4e 	bl	8003b4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eb4:	e01f      	b.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8004eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8004ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d103      	bne.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8004eca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ed0:	e011      	b.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8004ed2:	4b27      	ldr	r3, [pc, #156]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004edc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ee0:	d106      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	2b30      	cmp	r3, #48	@ 0x30
 8004ee6:	d103      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8004ee8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eee:	e002      	b.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004ef4:	e037      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004ef6:	e036      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004efa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004efe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f02:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8004f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f06:	2b10      	cmp	r3, #16
 8004f08:	d107      	bne.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f0a:	f107 0318 	add.w	r3, r7, #24
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe fe1c 	bl	8003b4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8004f18:	e025      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8004f1a:	4b15      	ldr	r3, [pc, #84]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f26:	d10a      	bne.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8004f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d107      	bne.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f2e:	f107 030c 	add.w	r3, r7, #12
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe ff76 	bl	8003e24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f3c:	e00f      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f4a:	d105      	bne.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4e:	2b30      	cmp	r3, #48	@ 0x30
 8004f50:	d102      	bne.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8004f52:	4b08      	ldr	r3, [pc, #32]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f56:	e002      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8004f5c:	e003      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004f5e:	e002      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f64:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8004f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3730      	adds	r7, #48	@ 0x30
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	44020c00 	.word	0x44020c00
 8004f74:	02dc6c00 	.word	0x02dc6c00

08004f78 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8004f80:	4b48      	ldr	r3, [pc, #288]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a47      	ldr	r2, [pc, #284]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 8004f86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f8a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f8c:	f7fc fbea 	bl	8001764 <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f92:	e008      	b.n	8004fa6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f94:	f7fc fbe6 	bl	8001764 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e07a      	b.n	800509c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 8004fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004fba:	f023 0303 	bic.w	r3, r3, #3
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6811      	ldr	r1, [r2, #0]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6852      	ldr	r2, [r2, #4]
 8004fc6:	0212      	lsls	r2, r2, #8
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	4936      	ldr	r1, [pc, #216]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	025b      	lsls	r3, r3, #9
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	041b      	lsls	r3, r3, #16
 8004fee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	061b      	lsls	r3, r3, #24
 8004ffc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005000:	4928      	ldr	r1, [pc, #160]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 8005002:	4313      	orrs	r3, r2
 8005004:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005006:	4b27      	ldr	r3, [pc, #156]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 8005008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500a:	f023 020c 	bic.w	r2, r3, #12
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	4924      	ldr	r1, [pc, #144]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 8005014:	4313      	orrs	r3, r2
 8005016:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005018:	4b22      	ldr	r3, [pc, #136]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	f023 0220 	bic.w	r2, r3, #32
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	491f      	ldr	r1, [pc, #124]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 8005026:	4313      	orrs	r3, r2
 8005028:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800502a:	4b1e      	ldr	r3, [pc, #120]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 800502c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005032:	491c      	ldr	r1, [pc, #112]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 8005034:	4313      	orrs	r3, r2
 8005036:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005038:	4b1a      	ldr	r3, [pc, #104]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	4a19      	ldr	r2, [pc, #100]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 800503e:	f023 0310 	bic.w	r3, r3, #16
 8005042:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005044:	4b17      	ldr	r3, [pc, #92]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 8005046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005048:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800504c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6a12      	ldr	r2, [r2, #32]
 8005054:	00d2      	lsls	r2, r2, #3
 8005056:	4913      	ldr	r1, [pc, #76]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 8005058:	4313      	orrs	r3, r2
 800505a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800505c:	4b11      	ldr	r3, [pc, #68]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	4a10      	ldr	r2, [pc, #64]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 8005062:	f043 0310 	orr.w	r3, r3, #16
 8005066:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005068:	4b0e      	ldr	r3, [pc, #56]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a0d      	ldr	r2, [pc, #52]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 800506e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005072:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005074:	f7fc fb76 	bl	8001764 <HAL_GetTick>
 8005078:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800507a:	e008      	b.n	800508e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800507c:	f7fc fb72 	bl	8001764 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e006      	b.n	800509c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800508e:	4b05      	ldr	r3, [pc, #20]	@ (80050a4 <RCCEx_PLL2_Config+0x12c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800509a:	2300      	movs	r3, #0

}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	44020c00 	.word	0x44020c00

080050a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e0e9      	b.n	800528e <HAL_SPI_Init+0x1e6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a74      	ldr	r2, [pc, #464]	@ (8005298 <HAL_SPI_Init+0x1f0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d105      	bne.n	80050d6 <HAL_SPI_Init+0x2e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	d901      	bls.n	80050d6 <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e0db      	b.n	800528e <HAL_SPI_Init+0x1e6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fcfc 	bl	8005ad4 <SPI_GetPacketSize>
 80050dc:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a6d      	ldr	r2, [pc, #436]	@ (8005298 <HAL_SPI_Init+0x1f0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d102      	bne.n	80050ee <HAL_SPI_Init+0x46>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d811      	bhi.n	8005112 <HAL_SPI_Init+0x6a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80050f2:	4a6a      	ldr	r2, [pc, #424]	@ (800529c <HAL_SPI_Init+0x1f4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d009      	beq.n	800510c <HAL_SPI_Init+0x64>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a68      	ldr	r2, [pc, #416]	@ (80052a0 <HAL_SPI_Init+0x1f8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d004      	beq.n	800510c <HAL_SPI_Init+0x64>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a67      	ldr	r2, [pc, #412]	@ (80052a4 <HAL_SPI_Init+0x1fc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d104      	bne.n	8005116 <HAL_SPI_Init+0x6e>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b10      	cmp	r3, #16
 8005110:	d901      	bls.n	8005116 <HAL_SPI_Init+0x6e>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e0bb      	b.n	800528e <HAL_SPI_Init+0x1e6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_SPI_Init+0x88>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fb fd5e 	bl	8000bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005152:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800515c:	d119      	bne.n	8005192 <HAL_SPI_Init+0xea>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005166:	d103      	bne.n	8005170 <HAL_SPI_Init+0xc8>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800516c:	2b00      	cmp	r3, #0
 800516e:	d008      	beq.n	8005182 <HAL_SPI_Init+0xda>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10c      	bne.n	8005192 <HAL_SPI_Init+0xea>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800517c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005180:	d107      	bne.n	8005192 <HAL_SPI_Init+0xea>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005190:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00f      	beq.n	80051be <HAL_SPI_Init+0x116>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	2b06      	cmp	r3, #6
 80051a4:	d90b      	bls.n	80051be <HAL_SPI_Init+0x116>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e007      	b.n	80051ce <HAL_SPI_Init+0x126>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d6:	431a      	orrs	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e0:	ea42 0103 	orr.w	r1, r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800523a:	ea42 0103 	orr.w	r1, r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0201 	bic.w	r2, r2, #1
 8005258:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <HAL_SPI_Init+0x1d4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	deaddead 	.word	0xdeaddead
 800529c:	40013000 	.word	0x40013000
 80052a0:	40003800 	.word	0x40003800
 80052a4:	40003c00 	.word	0x40003c00

080052a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08e      	sub	sp, #56	@ 0x38
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3320      	adds	r3, #32
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3330      	adds	r3, #48	@ 0x30
 80052c4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3301      	adds	r3, #1
 80052d0:	83fb      	strh	r3, [r7, #30]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052d2:	f7fc fa47 	bl	8001764 <HAL_GetTick>
 80052d6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80052d8:	887b      	ldrh	r3, [r7, #2]
 80052da:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80052dc:	887b      	ldrh	r3, [r7, #2]
 80052de:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d001      	beq.n	80052f0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80052ec:	2302      	movs	r3, #2
 80052ee:	e31e      	b.n	800592e <HAL_SPI_TransmitReceive+0x686>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <HAL_SPI_TransmitReceive+0x5a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_SPI_TransmitReceive+0x5a>
 80052fc:	887b      	ldrh	r3, [r7, #2]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e313      	b.n	800592e <HAL_SPI_TransmitReceive+0x686>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_SPI_TransmitReceive+0x6c>
 8005310:	2302      	movs	r3, #2
 8005312:	e30c      	b.n	800592e <HAL_SPI_TransmitReceive+0x686>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2205      	movs	r2, #5
 8005320:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	887a      	ldrh	r2, [r7, #2]
 8005336:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	887a      	ldrh	r2, [r7, #2]
 800533e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	887a      	ldrh	r2, [r7, #2]
 800534c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	887a      	ldrh	r2, [r7, #2]
 8005354:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005372:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a78      	ldr	r2, [pc, #480]	@ (800555c <HAL_SPI_TransmitReceive+0x2b4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d009      	beq.n	8005392 <HAL_SPI_TransmitReceive+0xea>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a77      	ldr	r2, [pc, #476]	@ (8005560 <HAL_SPI_TransmitReceive+0x2b8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d004      	beq.n	8005392 <HAL_SPI_TransmitReceive+0xea>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a75      	ldr	r2, [pc, #468]	@ (8005564 <HAL_SPI_TransmitReceive+0x2bc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d102      	bne.n	8005398 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005392:	2310      	movs	r3, #16
 8005394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005396:	e001      	b.n	800539c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005398:	2308      	movs	r3, #8
 800539a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	0c1b      	lsrs	r3, r3, #16
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	8879      	ldrh	r1, [r7, #2]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	6812      	ldr	r2, [r2, #0]
 80053ac:	430b      	orrs	r3, r1
 80053ae:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053c8:	d107      	bne.n	80053da <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	2b0f      	cmp	r3, #15
 80053e0:	f240 80b2 	bls.w	8005548 <HAL_SPI_TransmitReceive+0x2a0>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a5c      	ldr	r2, [pc, #368]	@ (800555c <HAL_SPI_TransmitReceive+0x2b4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00a      	beq.n	8005404 <HAL_SPI_TransmitReceive+0x15c>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005560 <HAL_SPI_TransmitReceive+0x2b8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d005      	beq.n	8005404 <HAL_SPI_TransmitReceive+0x15c>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a59      	ldr	r2, [pc, #356]	@ (8005564 <HAL_SPI_TransmitReceive+0x2bc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	f040 80a2 	bne.w	8005548 <HAL_SPI_TransmitReceive+0x2a0>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005406:	089b      	lsrs	r3, r3, #2
 8005408:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800540a:	e094      	b.n	8005536 <HAL_SPI_TransmitReceive+0x28e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b02      	cmp	r3, #2
 8005418:	d120      	bne.n	800545c <HAL_SPI_TransmitReceive+0x1b4>
 800541a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01d      	beq.n	800545c <HAL_SPI_TransmitReceive+0x1b4>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005420:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005422:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005426:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005428:	429a      	cmp	r2, r3
 800542a:	d217      	bcs.n	800545c <HAL_SPI_TransmitReceive+0x1b4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800543c:	1d1a      	adds	r2, r3, #4
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800545a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005464:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005466:	2b00      	cmp	r3, #0
 8005468:	d065      	beq.n	8005536 <HAL_SPI_TransmitReceive+0x28e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b01      	cmp	r3, #1
 8005476:	d118      	bne.n	80054aa <HAL_SPI_TransmitReceive+0x202>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005480:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005482:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005488:	1d1a      	adds	r2, r3, #4
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80054a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80054a8:	e045      	b.n	8005536 <HAL_SPI_TransmitReceive+0x28e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80054aa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80054ac:	8bfb      	ldrh	r3, [r7, #30]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d21d      	bcs.n	80054ee <HAL_SPI_TransmitReceive+0x246>
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d018      	beq.n	80054ee <HAL_SPI_TransmitReceive+0x246>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80054c6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054cc:	1d1a      	adds	r2, r3, #4
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80054ea:	853b      	strh	r3, [r7, #40]	@ 0x28
 80054ec:	e023      	b.n	8005536 <HAL_SPI_TransmitReceive+0x28e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ee:	f7fc f939 	bl	8001764 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d803      	bhi.n	8005506 <HAL_SPI_TransmitReceive+0x25e>
 80054fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005504:	d102      	bne.n	800550c <HAL_SPI_TransmitReceive+0x264>
 8005506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005508:	2b00      	cmp	r3, #0
 800550a:	d114      	bne.n	8005536 <HAL_SPI_TransmitReceive+0x28e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 fa13 	bl	8005938 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005518:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e1fb      	b.n	800592e <HAL_SPI_TransmitReceive+0x686>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005536:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005538:	2b00      	cmp	r3, #0
 800553a:	f47f af67 	bne.w	800540c <HAL_SPI_TransmitReceive+0x164>
 800553e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005540:	2b00      	cmp	r3, #0
 8005542:	f47f af63 	bne.w	800540c <HAL_SPI_TransmitReceive+0x164>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005546:	e1cc      	b.n	80058e2 <HAL_SPI_TransmitReceive+0x63a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b07      	cmp	r3, #7
 800554e:	f240 81c0 	bls.w	80058d2 <HAL_SPI_TransmitReceive+0x62a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005554:	085b      	lsrs	r3, r3, #1
 8005556:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005558:	e0c7      	b.n	80056ea <HAL_SPI_TransmitReceive+0x442>
 800555a:	bf00      	nop
 800555c:	40013000 	.word	0x40013000
 8005560:	40003800 	.word	0x40003800
 8005564:	40003c00 	.word	0x40003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b02      	cmp	r3, #2
 8005574:	d11f      	bne.n	80055b6 <HAL_SPI_TransmitReceive+0x30e>
 8005576:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01c      	beq.n	80055b6 <HAL_SPI_TransmitReceive+0x30e>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800557c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800557e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005582:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005584:	429a      	cmp	r2, r3
 8005586:	d216      	bcs.n	80055b6 <HAL_SPI_TransmitReceive+0x30e>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800558c:	881a      	ldrh	r2, [r3, #0]
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005596:	1c9a      	adds	r2, r3, #2
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80055b4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80055be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 8092 	beq.w	80056ea <HAL_SPI_TransmitReceive+0x442>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d118      	bne.n	8005606 <HAL_SPI_TransmitReceive+0x35e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055d8:	6a3a      	ldr	r2, [r7, #32]
 80055da:	8812      	ldrh	r2, [r2, #0]
 80055dc:	b292      	uxth	r2, r2
 80055de:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055e4:	1c9a      	adds	r2, r3, #2
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005602:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005604:	e071      	b.n	80056ea <HAL_SPI_TransmitReceive+0x442>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005606:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005608:	8bfb      	ldrh	r3, [r7, #30]
 800560a:	429a      	cmp	r2, r3
 800560c:	d228      	bcs.n	8005660 <HAL_SPI_TransmitReceive+0x3b8>
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d023      	beq.n	8005660 <HAL_SPI_TransmitReceive+0x3b8>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800561c:	6a3a      	ldr	r2, [r7, #32]
 800561e:	8812      	ldrh	r2, [r2, #0]
 8005620:	b292      	uxth	r2, r2
 8005622:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005628:	1c9a      	adds	r2, r3, #2
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005632:	6a3a      	ldr	r2, [r7, #32]
 8005634:	8812      	ldrh	r2, [r2, #0]
 8005636:	b292      	uxth	r2, r2
 8005638:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800563e:	1c9a      	adds	r2, r3, #2
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b02      	subs	r3, #2
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800565c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800565e:	e044      	b.n	80056ea <HAL_SPI_TransmitReceive+0x442>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005660:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005662:	2b01      	cmp	r3, #1
 8005664:	d11d      	bne.n	80056a2 <HAL_SPI_TransmitReceive+0x3fa>
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d018      	beq.n	80056a2 <HAL_SPI_TransmitReceive+0x3fa>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005674:	6a3a      	ldr	r2, [r7, #32]
 8005676:	8812      	ldrh	r2, [r2, #0]
 8005678:	b292      	uxth	r2, r2
 800567a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005680:	1c9a      	adds	r2, r3, #2
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800569e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80056a0:	e023      	b.n	80056ea <HAL_SPI_TransmitReceive+0x442>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a2:	f7fc f85f 	bl	8001764 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d803      	bhi.n	80056ba <HAL_SPI_TransmitReceive+0x412>
 80056b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b8:	d102      	bne.n	80056c0 <HAL_SPI_TransmitReceive+0x418>
 80056ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d114      	bne.n	80056ea <HAL_SPI_TransmitReceive+0x442>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f939 	bl	8005938 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e121      	b.n	800592e <HAL_SPI_TransmitReceive+0x686>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80056ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f47f af3b 	bne.w	8005568 <HAL_SPI_TransmitReceive+0x2c0>
 80056f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f47f af37 	bne.w	8005568 <HAL_SPI_TransmitReceive+0x2c0>
 80056fa:	e0f2      	b.n	80058e2 <HAL_SPI_TransmitReceive+0x63a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b02      	cmp	r3, #2
 8005708:	d121      	bne.n	800574e <HAL_SPI_TransmitReceive+0x4a6>
 800570a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01e      	beq.n	800574e <HAL_SPI_TransmitReceive+0x4a6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005710:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005712:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005716:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005718:	429a      	cmp	r2, r3
 800571a:	d218      	bcs.n	800574e <HAL_SPI_TransmitReceive+0x4a6>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3320      	adds	r3, #32
 8005726:	7812      	ldrb	r2, [r2, #0]
 8005728:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800574c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005756:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 80ba 	beq.w	80058d2 <HAL_SPI_TransmitReceive+0x62a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b01      	cmp	r3, #1
 800576a:	d11b      	bne.n	80057a4 <HAL_SPI_TransmitReceive+0x4fc>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005778:	7812      	ldrb	r2, [r2, #0]
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80057a0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80057a2:	e096      	b.n	80058d2 <HAL_SPI_TransmitReceive+0x62a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80057a4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80057a6:	8bfb      	ldrh	r3, [r7, #30]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d24a      	bcs.n	8005842 <HAL_SPI_TransmitReceive+0x59a>
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d045      	beq.n	8005842 <HAL_SPI_TransmitReceive+0x59a>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057c2:	7812      	ldrb	r2, [r2, #0]
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057de:	7812      	ldrb	r2, [r2, #0]
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057fa:	7812      	ldrb	r2, [r2, #0]
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005816:	7812      	ldrb	r2, [r2, #0]
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b04      	subs	r3, #4
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800583e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005840:	e047      	b.n	80058d2 <HAL_SPI_TransmitReceive+0x62a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005842:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005844:	2b03      	cmp	r3, #3
 8005846:	d820      	bhi.n	800588a <HAL_SPI_TransmitReceive+0x5e2>
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d01b      	beq.n	800588a <HAL_SPI_TransmitReceive+0x5e2>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800585e:	7812      	ldrb	r2, [r2, #0]
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005886:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005888:	e023      	b.n	80058d2 <HAL_SPI_TransmitReceive+0x62a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800588a:	f7fb ff6b 	bl	8001764 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005896:	429a      	cmp	r2, r3
 8005898:	d803      	bhi.n	80058a2 <HAL_SPI_TransmitReceive+0x5fa>
 800589a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a0:	d102      	bne.n	80058a8 <HAL_SPI_TransmitReceive+0x600>
 80058a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d114      	bne.n	80058d2 <HAL_SPI_TransmitReceive+0x62a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f845 	bl	8005938 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e02d      	b.n	800592e <HAL_SPI_TransmitReceive+0x686>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80058d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f47f af11 	bne.w	80056fc <HAL_SPI_TransmitReceive+0x454>
 80058da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f47f af0d 	bne.w	80056fc <HAL_SPI_TransmitReceive+0x454>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e8:	2200      	movs	r2, #0
 80058ea:	2108      	movs	r1, #8
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f8c3 	bl	8005a78 <SPI_WaitOnFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d007      	beq.n	8005908 <HAL_SPI_TransmitReceive+0x660>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058fe:	f043 0220 	orr.w	r2, r3, #32
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f815 	bl	8005938 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_SPI_TransmitReceive+0x684>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <HAL_SPI_TransmitReceive+0x686>
  }
  else
  {
    return HAL_OK;
 800592c:	2300      	movs	r3, #0
  }
}
 800592e:	4618      	mov	r0, r3
 8005930:	3730      	adds	r7, #48	@ 0x30
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop

08005938 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0208 	orr.w	r2, r2, #8
 8005956:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0210 	orr.w	r2, r2, #16
 8005966:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0201 	bic.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8005986:	f023 0303 	bic.w	r3, r3, #3
 800598a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800599a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d014      	beq.n	80059d2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00f      	beq.n	80059d2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699a      	ldr	r2, [r3, #24]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0220 	orr.w	r2, r2, #32
 80059d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d014      	beq.n	8005a08 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00f      	beq.n	8005a08 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059ee:	f043 0204 	orr.w	r2, r3, #4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a06:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00f      	beq.n	8005a32 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a18:	f043 0201 	orr.w	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a30:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00f      	beq.n	8005a5c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a42:	f043 0208 	orr.w	r2, r3, #8
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a5a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005a88:	e010      	b.n	8005aac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a8a:	f7fb fe6b 	bl	8001764 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d803      	bhi.n	8005aa2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa0:	d102      	bne.n	8005aa8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e00f      	b.n	8005acc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	bf0c      	ite	eq
 8005abc:	2301      	moveq	r3, #1
 8005abe:	2300      	movne	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d0df      	beq.n	8005a8a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	3307      	adds	r3, #7
 8005af2:	08db      	lsrs	r3, r3, #3
 8005af4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e049      	b.n	8005bb0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f841 	bl	8005bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3304      	adds	r3, #4
 8005b46:	4619      	mov	r1, r3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	f000 fa0b 	bl	8005f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d001      	beq.n	8005be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e03b      	b.n	8005c5c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a19      	ldr	r2, [pc, #100]	@ (8005c68 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d009      	beq.n	8005c1a <HAL_TIM_Base_Start_IT+0x4e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c0e:	d004      	beq.n	8005c1a <HAL_TIM_Base_Start_IT+0x4e>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a15      	ldr	r2, [pc, #84]	@ (8005c6c <HAL_TIM_Base_Start_IT+0xa0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d115      	bne.n	8005c46 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	4b13      	ldr	r3, [pc, #76]	@ (8005c70 <HAL_TIM_Base_Start_IT+0xa4>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b06      	cmp	r3, #6
 8005c2a:	d015      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x8c>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c32:	d011      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0201 	orr.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c44:	e008      	b.n	8005c58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0201 	orr.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	e000      	b.n	8005c5a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	40012c00 	.word	0x40012c00
 8005c6c:	40000400 	.word	0x40000400
 8005c70:	00010007 	.word	0x00010007

08005c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d020      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01b      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0202 	mvn.w	r2, #2
 8005ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f931 	bl	8005f26 <HAL_TIM_IC_CaptureCallback>
 8005cc4:	e005      	b.n	8005cd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f923 	bl	8005f12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f934 	bl	8005f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f003 0304 	and.w	r3, r3, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d020      	beq.n	8005d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01b      	beq.n	8005d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0204 	mvn.w	r2, #4
 8005cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f90b 	bl	8005f26 <HAL_TIM_IC_CaptureCallback>
 8005d10:	e005      	b.n	8005d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f8fd 	bl	8005f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f90e 	bl	8005f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d020      	beq.n	8005d70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01b      	beq.n	8005d70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0208 	mvn.w	r2, #8
 8005d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2204      	movs	r2, #4
 8005d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f8e5 	bl	8005f26 <HAL_TIM_IC_CaptureCallback>
 8005d5c:	e005      	b.n	8005d6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f8d7 	bl	8005f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f8e8 	bl	8005f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d020      	beq.n	8005dbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f003 0310 	and.w	r3, r3, #16
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01b      	beq.n	8005dbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0210 	mvn.w	r2, #16
 8005d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2208      	movs	r2, #8
 8005d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f8bf 	bl	8005f26 <HAL_TIM_IC_CaptureCallback>
 8005da8:	e005      	b.n	8005db6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f8b1 	bl	8005f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f8c2 	bl	8005f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00c      	beq.n	8005de0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d007      	beq.n	8005de0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f06f 0201 	mvn.w	r2, #1
 8005dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fa fed0 	bl	8000b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00c      	beq.n	8005e0e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d007      	beq.n	8005e0e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f91b 	bl	8006044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00c      	beq.n	8005e32 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d007      	beq.n	8005e32 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f913 	bl	8006058 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00c      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d007      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f87c 	bl	8005f4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00c      	beq.n	8005e7a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d007      	beq.n	8005e7a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f06f 0220 	mvn.w	r2, #32
 8005e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f8db 	bl	8006030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00c      	beq.n	8005e9e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d007      	beq.n	8005e9e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f8e7 	bl	800606c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00c      	beq.n	8005ec2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f8df 	bl	8006080 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00c      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f8d7 	bl	8006094 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00c      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d007      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f8cf 	bl	80060a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f0a:	bf00      	nop
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
	...

08005f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a2c      	ldr	r2, [pc, #176]	@ (8006028 <TIM_Base_SetConfig+0xc4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d007      	beq.n	8005f8c <TIM_Base_SetConfig+0x28>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f82:	d003      	beq.n	8005f8c <TIM_Base_SetConfig+0x28>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a29      	ldr	r2, [pc, #164]	@ (800602c <TIM_Base_SetConfig+0xc8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d108      	bne.n	8005f9e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a21      	ldr	r2, [pc, #132]	@ (8006028 <TIM_Base_SetConfig+0xc4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d007      	beq.n	8005fb6 <TIM_Base_SetConfig+0x52>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fac:	d003      	beq.n	8005fb6 <TIM_Base_SetConfig+0x52>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800602c <TIM_Base_SetConfig+0xc8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d108      	bne.n	8005fc8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a0e      	ldr	r2, [pc, #56]	@ (8006028 <TIM_Base_SetConfig+0xc4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d103      	bne.n	8005ffc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b01      	cmp	r3, #1
 800600c:	d105      	bne.n	800601a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f023 0201 	bic.w	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	611a      	str	r2, [r3, #16]
  }
}
 800601a:	bf00      	nop
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40012c00 	.word	0x40012c00
 800602c:	40000400 	.word	0x40000400

08006030 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e042      	b.n	8006154 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d106      	bne.n	80060e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7fa feb1 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2224      	movs	r2, #36	@ 0x24
 80060ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0201 	bic.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fa44 	bl	8006594 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f8c3 	bl	8006298 <UART_SetConfig>
 8006112:	4603      	mov	r3, r0
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e01b      	b.n	8006154 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800612a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800613a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0201 	orr.w	r2, r2, #1
 800614a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fac3 	bl	80066d8 <UART_CheckIdleState>
 8006152:	4603      	mov	r3, r0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08a      	sub	sp, #40	@ 0x28
 8006160:	af02      	add	r7, sp, #8
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	4613      	mov	r3, r2
 800616a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006172:	2b20      	cmp	r3, #32
 8006174:	f040 808b 	bne.w	800628e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <HAL_UART_Transmit+0x28>
 800617e:	88fb      	ldrh	r3, [r7, #6]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e083      	b.n	8006290 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006192:	2b80      	cmp	r3, #128	@ 0x80
 8006194:	d107      	bne.n	80061a6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061a4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2221      	movs	r2, #33	@ 0x21
 80061b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061b6:	f7fb fad5 	bl	8001764 <HAL_GetTick>
 80061ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	88fa      	ldrh	r2, [r7, #6]
 80061c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061d4:	d108      	bne.n	80061e8 <HAL_UART_Transmit+0x8c>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d104      	bne.n	80061e8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	e003      	b.n	80061f0 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061f0:	e030      	b.n	8006254 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2200      	movs	r2, #0
 80061fa:	2180      	movs	r1, #128	@ 0x80
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fb15 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e03d      	b.n	8006290 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006228:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	3302      	adds	r3, #2
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	e007      	b.n	8006242 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	781a      	ldrb	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	3301      	adds	r3, #1
 8006240:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1c8      	bne.n	80061f2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2200      	movs	r2, #0
 8006268:	2140      	movs	r1, #64	@ 0x40
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 fade 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2220      	movs	r2, #32
 800627a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e006      	b.n	8006290 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e000      	b.n	8006290 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800628e:	2302      	movs	r3, #2
  }
}
 8006290:	4618      	mov	r0, r3
 8006292:	3720      	adds	r7, #32
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800629c:	b094      	sub	sp, #80	@ 0x50
 800629e:	af00      	add	r7, sp, #0
 80062a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	431a      	orrs	r2, r3
 80062b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	4313      	orrs	r3, r2
 80062be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	498a      	ldr	r1, [pc, #552]	@ (80064f0 <UART_SetConfig+0x258>)
 80062c8:	4019      	ands	r1, r3
 80062ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062d0:	430b      	orrs	r3, r1
 80062d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80062de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e0:	68d9      	ldr	r1, [r3, #12]
 80062e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	ea40 0301 	orr.w	r3, r0, r1
 80062ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4b7f      	ldr	r3, [pc, #508]	@ (80064f4 <UART_SetConfig+0x25c>)
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d004      	beq.n	8006306 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fe:	6a1a      	ldr	r2, [r3, #32]
 8006300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006302:	4313      	orrs	r3, r2
 8006304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006310:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800631a:	430b      	orrs	r3, r1
 800631c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800631e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006324:	f023 000f 	bic.w	r0, r3, #15
 8006328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800632c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	ea40 0301 	orr.w	r3, r0, r1
 8006334:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4b6f      	ldr	r3, [pc, #444]	@ (80064f8 <UART_SetConfig+0x260>)
 800633c:	429a      	cmp	r2, r3
 800633e:	d102      	bne.n	8006346 <UART_SetConfig+0xae>
 8006340:	2301      	movs	r3, #1
 8006342:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006344:	e01a      	b.n	800637c <UART_SetConfig+0xe4>
 8006346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	4b6c      	ldr	r3, [pc, #432]	@ (80064fc <UART_SetConfig+0x264>)
 800634c:	429a      	cmp	r2, r3
 800634e:	d102      	bne.n	8006356 <UART_SetConfig+0xbe>
 8006350:	2302      	movs	r3, #2
 8006352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006354:	e012      	b.n	800637c <UART_SetConfig+0xe4>
 8006356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	4b69      	ldr	r3, [pc, #420]	@ (8006500 <UART_SetConfig+0x268>)
 800635c:	429a      	cmp	r2, r3
 800635e:	d102      	bne.n	8006366 <UART_SetConfig+0xce>
 8006360:	2304      	movs	r3, #4
 8006362:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006364:	e00a      	b.n	800637c <UART_SetConfig+0xe4>
 8006366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b62      	ldr	r3, [pc, #392]	@ (80064f4 <UART_SetConfig+0x25c>)
 800636c:	429a      	cmp	r2, r3
 800636e:	d103      	bne.n	8006378 <UART_SetConfig+0xe0>
 8006370:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006374:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006376:	e001      	b.n	800637c <UART_SetConfig+0xe4>
 8006378:	2300      	movs	r3, #0
 800637a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800637c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	4b5c      	ldr	r3, [pc, #368]	@ (80064f4 <UART_SetConfig+0x25c>)
 8006382:	429a      	cmp	r2, r3
 8006384:	d171      	bne.n	800646a <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006388:	2200      	movs	r2, #0
 800638a:	623b      	str	r3, [r7, #32]
 800638c:	627a      	str	r2, [r7, #36]	@ 0x24
 800638e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006392:	f7fd feb3 	bl	80040fc <HAL_RCCEx_GetPeriphCLKFreq>
 8006396:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 80e2 	beq.w	8006564 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	4a57      	ldr	r2, [pc, #348]	@ (8006504 <UART_SetConfig+0x26c>)
 80063a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063aa:	461a      	mov	r2, r3
 80063ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80063b2:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	4413      	add	r3, r2
 80063be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d305      	bcc.n	80063d0 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d903      	bls.n	80063d8 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80063d6:	e0c5      	b.n	8006564 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063da:	2200      	movs	r2, #0
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	61fa      	str	r2, [r7, #28]
 80063e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e4:	4a47      	ldr	r2, [pc, #284]	@ (8006504 <UART_SetConfig+0x26c>)
 80063e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	2200      	movs	r2, #0
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	617a      	str	r2, [r7, #20]
 80063f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80063f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80063fa:	f7f9 ff51 	bl	80002a0 <__aeabi_uldivmod>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4610      	mov	r0, r2
 8006404:	4619      	mov	r1, r3
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	020b      	lsls	r3, r1, #8
 8006410:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006414:	0202      	lsls	r2, r0, #8
 8006416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006418:	6849      	ldr	r1, [r1, #4]
 800641a:	0849      	lsrs	r1, r1, #1
 800641c:	2000      	movs	r0, #0
 800641e:	460c      	mov	r4, r1
 8006420:	4605      	mov	r5, r0
 8006422:	eb12 0804 	adds.w	r8, r2, r4
 8006426:	eb43 0905 	adc.w	r9, r3, r5
 800642a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	60bb      	str	r3, [r7, #8]
 8006432:	60fa      	str	r2, [r7, #12]
 8006434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f7f9 ff30 	bl	80002a0 <__aeabi_uldivmod>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4613      	mov	r3, r2
 8006446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800644a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800644e:	d308      	bcc.n	8006462 <UART_SetConfig+0x1ca>
 8006450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006456:	d204      	bcs.n	8006462 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8006458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800645e:	60da      	str	r2, [r3, #12]
 8006460:	e080      	b.n	8006564 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006468:	e07c      	b.n	8006564 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800646a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006472:	d149      	bne.n	8006508 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006476:	2200      	movs	r2, #0
 8006478:	603b      	str	r3, [r7, #0]
 800647a:	607a      	str	r2, [r7, #4]
 800647c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006480:	f7fd fe3c 	bl	80040fc <HAL_RCCEx_GetPeriphCLKFreq>
 8006484:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d06b      	beq.n	8006564 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800648c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006490:	4a1c      	ldr	r2, [pc, #112]	@ (8006504 <UART_SetConfig+0x26c>)
 8006492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006496:	461a      	mov	r2, r3
 8006498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800649a:	fbb3 f3f2 	udiv	r3, r3, r2
 800649e:	005a      	lsls	r2, r3, #1
 80064a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	085b      	lsrs	r3, r3, #1
 80064a6:	441a      	add	r2, r3
 80064a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064b4:	2b0f      	cmp	r3, #15
 80064b6:	d916      	bls.n	80064e6 <UART_SetConfig+0x24e>
 80064b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064be:	d212      	bcs.n	80064e6 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f023 030f 	bic.w	r3, r3, #15
 80064c8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80064d8:	4313      	orrs	r3, r2
 80064da:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80064dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80064e2:	60da      	str	r2, [r3, #12]
 80064e4:	e03e      	b.n	8006564 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80064ec:	e03a      	b.n	8006564 <UART_SetConfig+0x2cc>
 80064ee:	bf00      	nop
 80064f0:	cfff69f3 	.word	0xcfff69f3
 80064f4:	44002400 	.word	0x44002400
 80064f8:	40013800 	.word	0x40013800
 80064fc:	40004400 	.word	0x40004400
 8006500:	40004800 	.word	0x40004800
 8006504:	0800ad5c 	.word	0x0800ad5c
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800650a:	2200      	movs	r2, #0
 800650c:	469a      	mov	sl, r3
 800650e:	4693      	mov	fp, r2
 8006510:	4650      	mov	r0, sl
 8006512:	4659      	mov	r1, fp
 8006514:	f7fd fdf2 	bl	80040fc <HAL_RCCEx_GetPeriphCLKFreq>
 8006518:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800651a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d021      	beq.n	8006564 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006524:	4a1a      	ldr	r2, [pc, #104]	@ (8006590 <UART_SetConfig+0x2f8>)
 8006526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800652a:	461a      	mov	r2, r3
 800652c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800652e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	085b      	lsrs	r3, r3, #1
 8006538:	441a      	add	r2, r3
 800653a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006542:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006546:	2b0f      	cmp	r3, #15
 8006548:	d909      	bls.n	800655e <UART_SetConfig+0x2c6>
 800654a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800654c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006550:	d205      	bcs.n	800655e <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006554:	b29a      	uxth	r2, r3
 8006556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60da      	str	r2, [r3, #12]
 800655c:	e002      	b.n	8006564 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006566:	2201      	movs	r2, #1
 8006568:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800656c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656e:	2201      	movs	r2, #1
 8006570:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006576:	2200      	movs	r2, #0
 8006578:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800657a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657c:	2200      	movs	r2, #0
 800657e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006580:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006584:	4618      	mov	r0, r3
 8006586:	3750      	adds	r7, #80	@ 0x50
 8006588:	46bd      	mov	sp, r7
 800658a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800658e:	bf00      	nop
 8006590:	0800ad5c 	.word	0x0800ad5c

08006594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a0:	f003 0308 	and.w	r3, r3, #8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00a      	beq.n	80065be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006628:	f003 0310 	and.w	r3, r3, #16
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01a      	beq.n	80066aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006692:	d10a      	bne.n	80066aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	605a      	str	r2, [r3, #4]
  }
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b098      	sub	sp, #96	@ 0x60
 80066dc:	af02      	add	r7, sp, #8
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066e8:	f7fb f83c 	bl	8001764 <HAL_GetTick>
 80066ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d12f      	bne.n	800675c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006704:	2200      	movs	r2, #0
 8006706:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f88e 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d022      	beq.n	800675c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800672a:	653b      	str	r3, [r7, #80]	@ 0x50
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006734:	647b      	str	r3, [r7, #68]	@ 0x44
 8006736:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800673a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e6      	bne.n	8006716 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e063      	b.n	8006824 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b04      	cmp	r3, #4
 8006768:	d149      	bne.n	80067fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800676a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006772:	2200      	movs	r2, #0
 8006774:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f857 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d03c      	beq.n	80067fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	623b      	str	r3, [r7, #32]
   return(result);
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006798:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80067a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e6      	bne.n	8006784 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3308      	adds	r3, #8
 80067bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f023 0301 	bic.w	r3, r3, #1
 80067cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067d6:	61fa      	str	r2, [r7, #28]
 80067d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	69b9      	ldr	r1, [r7, #24]
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	617b      	str	r3, [r7, #20]
   return(result);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e5      	bne.n	80067b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e012      	b.n	8006824 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3758      	adds	r7, #88	@ 0x58
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	4613      	mov	r3, r2
 800683a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683c:	e04f      	b.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006844:	d04b      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006846:	f7fa ff8d 	bl	8001764 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	429a      	cmp	r2, r3
 8006854:	d302      	bcc.n	800685c <UART_WaitOnFlagUntilTimeout+0x30>
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e04e      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	d037      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b80      	cmp	r3, #128	@ 0x80
 8006872:	d034      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b40      	cmp	r3, #64	@ 0x40
 8006878:	d031      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b08      	cmp	r3, #8
 8006886:	d110      	bne.n	80068aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2208      	movs	r2, #8
 800688e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f838 	bl	8006906 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2208      	movs	r2, #8
 800689a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e029      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b8:	d111      	bne.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f81e 	bl	8006906 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e00f      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69da      	ldr	r2, [r3, #28]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4013      	ands	r3, r2
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	bf0c      	ite	eq
 80068ee:	2301      	moveq	r3, #1
 80068f0:	2300      	movne	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d0a0      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006906:	b480      	push	{r7}
 8006908:	b095      	sub	sp, #84	@ 0x54
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006916:	e853 3f00 	ldrex	r3, [r3]
 800691a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800691c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800692c:	643b      	str	r3, [r7, #64]	@ 0x40
 800692e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006930:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006932:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006934:	e841 2300 	strex	r3, r2, [r1]
 8006938:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800693a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e6      	bne.n	800690e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3308      	adds	r3, #8
 8006946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006956:	f023 0301 	bic.w	r3, r3, #1
 800695a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3308      	adds	r3, #8
 8006962:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006964:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006966:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006968:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800696a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800696c:	e841 2300 	strex	r3, r2, [r1]
 8006970:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1e3      	bne.n	8006940 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800697c:	2b01      	cmp	r3, #1
 800697e:	d118      	bne.n	80069b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	60bb      	str	r3, [r7, #8]
   return(result);
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f023 0310 	bic.w	r3, r3, #16
 8006994:	647b      	str	r3, [r7, #68]	@ 0x44
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800699e:	61bb      	str	r3, [r7, #24]
 80069a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	6979      	ldr	r1, [r7, #20]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	613b      	str	r3, [r7, #16]
   return(result);
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e6      	bne.n	8006980 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80069c6:	bf00      	nop
 80069c8:	3754      	adds	r7, #84	@ 0x54
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d101      	bne.n	80069e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80069e4:	2302      	movs	r3, #2
 80069e6:	e027      	b.n	8006a38 <HAL_UARTEx_DisableFifoMode+0x66>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2224      	movs	r2, #36	@ 0x24
 80069f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0201 	bic.w	r2, r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e02d      	b.n	8006ab8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2224      	movs	r2, #36	@ 0x24
 8006a68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0201 	bic.w	r2, r2, #1
 8006a82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f84f 	bl	8006b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d101      	bne.n	8006ad8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e02d      	b.n	8006b34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2224      	movs	r2, #36	@ 0x24
 8006ae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0201 	bic.w	r2, r2, #1
 8006afe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f811 	bl	8006b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d108      	bne.n	8006b5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b5c:	e031      	b.n	8006bc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b5e:	2308      	movs	r3, #8
 8006b60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b62:	2308      	movs	r3, #8
 8006b64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	0e5b      	lsrs	r3, r3, #25
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	f003 0307 	and.w	r3, r3, #7
 8006b74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	0f5b      	lsrs	r3, r3, #29
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b86:	7bbb      	ldrb	r3, [r7, #14]
 8006b88:	7b3a      	ldrb	r2, [r7, #12]
 8006b8a:	4911      	ldr	r1, [pc, #68]	@ (8006bd0 <UARTEx_SetNbDataToProcess+0x94>)
 8006b8c:	5c8a      	ldrb	r2, [r1, r2]
 8006b8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b92:	7b3a      	ldrb	r2, [r7, #12]
 8006b94:	490f      	ldr	r1, [pc, #60]	@ (8006bd4 <UARTEx_SetNbDataToProcess+0x98>)
 8006b96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b98:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	7b7a      	ldrb	r2, [r7, #13]
 8006ba8:	4909      	ldr	r1, [pc, #36]	@ (8006bd0 <UARTEx_SetNbDataToProcess+0x94>)
 8006baa:	5c8a      	ldrb	r2, [r1, r2]
 8006bac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bb0:	7b7a      	ldrb	r2, [r7, #13]
 8006bb2:	4908      	ldr	r1, [pc, #32]	@ (8006bd4 <UARTEx_SetNbDataToProcess+0x98>)
 8006bb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	0800ad74 	.word	0x0800ad74
 8006bd4:	0800ad7c 	.word	0x0800ad7c

08006bd8 <__NVIC_SetPriority>:
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	6039      	str	r1, [r7, #0]
 8006be2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	db0a      	blt.n	8006c02 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	490c      	ldr	r1, [pc, #48]	@ (8006c24 <__NVIC_SetPriority+0x4c>)
 8006bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006bf6:	0112      	lsls	r2, r2, #4
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	440b      	add	r3, r1
 8006bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006c00:	e00a      	b.n	8006c18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	4908      	ldr	r1, [pc, #32]	@ (8006c28 <__NVIC_SetPriority+0x50>)
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	f003 030f 	and.w	r3, r3, #15
 8006c0e:	3b04      	subs	r3, #4
 8006c10:	0112      	lsls	r2, r2, #4
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	440b      	add	r3, r1
 8006c16:	761a      	strb	r2, [r3, #24]
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	e000e100 	.word	0xe000e100
 8006c28:	e000ed00 	.word	0xe000ed00

08006c2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8006c30:	4b05      	ldr	r3, [pc, #20]	@ (8006c48 <SysTick_Handler+0x1c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006c34:	f001 fba6 	bl	8008384 <xTaskGetSchedulerState>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d001      	beq.n	8006c42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006c3e:	f001 ff51 	bl	8008ae4 <xPortSysTickHandler>
  }
}
 8006c42:	bf00      	nop
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	e000e010 	.word	0xe000e010

08006c4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8006c50:	2100      	movs	r1, #0
 8006c52:	f06f 0004 	mvn.w	r0, #4
 8006c56:	f7ff ffbf 	bl	8006bd8 <__NVIC_SetPriority>
#endif
}
 8006c5a:	bf00      	nop
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b086      	sub	sp, #24
 8006c62:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c68:	f3ef 8305 	mrs	r3, IPSR
 8006c6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c6e:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8006c74:	2301      	movs	r3, #1
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	e013      	b.n	8006ca2 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8006c7a:	f001 fb83 	bl	8008384 <xTaskGetSchedulerState>
 8006c7e:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d00d      	beq.n	8006ca2 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006c86:	f3ef 8310 	mrs	r3, PRIMASK
 8006c8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d105      	bne.n	8006c9e <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c92:	f3ef 8311 	mrs	r3, BASEPRI
 8006c96:	607b      	str	r3, [r7, #4]
  return(result);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8006ca2:	697b      	ldr	r3, [r7, #20]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8006cb2:	f7ff ffd4 	bl	8006c5e <IRQ_Context>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8006cbc:	f06f 0305 	mvn.w	r3, #5
 8006cc0:	607b      	str	r3, [r7, #4]
 8006cc2:	e012      	b.n	8006cea <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8006cc4:	f001 fb5e 	bl	8008384 <xTaskGetSchedulerState>
 8006cc8:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d109      	bne.n	8006ce4 <osKernelInitialize+0x38>
 8006cd0:	4b08      	ldr	r3, [pc, #32]	@ (8006cf4 <osKernelInitialize+0x48>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d105      	bne.n	8006ce4 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006cd8:	4b06      	ldr	r3, [pc, #24]	@ (8006cf4 <osKernelInitialize+0x48>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	607b      	str	r3, [r7, #4]
 8006ce2:	e002      	b.n	8006cea <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8006ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce8:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8006cea:	687b      	ldr	r3, [r7, #4]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	20000364 	.word	0x20000364

08006cf8 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8006cfe:	f7ff ffae 	bl	8006c5e <IRQ_Context>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <osKernelStart+0x18>
    stat = osErrorISR;
 8006d08:	f06f 0305 	mvn.w	r3, #5
 8006d0c:	607b      	str	r3, [r7, #4]
 8006d0e:	e016      	b.n	8006d3e <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8006d10:	f001 fb38 	bl	8008384 <xTaskGetSchedulerState>
 8006d14:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d10d      	bne.n	8006d38 <osKernelStart+0x40>
 8006d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d48 <osKernelStart+0x50>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d109      	bne.n	8006d38 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d24:	f7ff ff92 	bl	8006c4c <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8006d28:	4b07      	ldr	r3, [pc, #28]	@ (8006d48 <osKernelStart+0x50>)
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d2e:	f000 fdf7 	bl	8007920 <vTaskStartScheduler>
      stat = osOK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	607b      	str	r3, [r7, #4]
 8006d36:	e002      	b.n	8006d3e <osKernelStart+0x46>
    } else {
      stat = osError;
 8006d38:	f04f 33ff 	mov.w	r3, #4294967295
 8006d3c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8006d3e:	687b      	ldr	r3, [r7, #4]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20000364 	.word	0x20000364

08006d4c <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08e      	sub	sp, #56	@ 0x38
 8006d50:	af04      	add	r7, sp, #16
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8006d5c:	f7ff ff7f 	bl	8006c5e <IRQ_Context>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d17e      	bne.n	8006e64 <osThreadNew+0x118>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d07b      	beq.n	8006e64 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8006d6c:	2380      	movs	r3, #128	@ 0x80
 8006d6e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006d70:	2318      	movs	r3, #24
 8006d72:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006d78:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d045      	beq.n	8006e10 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <osThreadNew+0x46>
        name = attr->name;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d008      	beq.n	8006db8 <osThreadNew+0x6c>
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	2b38      	cmp	r3, #56	@ 0x38
 8006daa:	d805      	bhi.n	8006db8 <osThreadNew+0x6c>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8006db8:	2300      	movs	r3, #0
 8006dba:	e054      	b.n	8006e66 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	089b      	lsrs	r3, r3, #2
 8006dca:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00e      	beq.n	8006df2 <osThreadNew+0xa6>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	2b5b      	cmp	r3, #91	@ 0x5b
 8006dda:	d90a      	bls.n	8006df2 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d006      	beq.n	8006df2 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8006dec:	2301      	movs	r3, #1
 8006dee:	61bb      	str	r3, [r7, #24]
 8006df0:	e010      	b.n	8006e14 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10c      	bne.n	8006e14 <osThreadNew+0xc8>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d108      	bne.n	8006e14 <osThreadNew+0xc8>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d104      	bne.n	8006e14 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61bb      	str	r3, [r7, #24]
 8006e0e:	e001      	b.n	8006e14 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d110      	bne.n	8006e3c <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e22:	9202      	str	r2, [sp, #8]
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	6a3a      	ldr	r2, [r7, #32]
 8006e2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fba5 	bl	8007580 <xTaskCreateStatic>
 8006e36:	4603      	mov	r3, r0
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	e013      	b.n	8006e64 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d110      	bne.n	8006e64 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	f107 0314 	add.w	r3, r7, #20
 8006e4a:	9301      	str	r3, [sp, #4]
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fbe0 	bl	800761a <xTaskCreate>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d001      	beq.n	8006e64 <osThreadNew+0x118>
            hTask = NULL;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8006e64:	697b      	ldr	r3, [r7, #20]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3728      	adds	r7, #40	@ 0x28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8006e76:	f7ff fef2 	bl	8006c5e <IRQ_Context>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <osDelay+0x1a>
    stat = osErrorISR;
 8006e80:	f06f 0305 	mvn.w	r3, #5
 8006e84:	60fb      	str	r3, [r7, #12]
 8006e86:	e007      	b.n	8006e98 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <osDelay+0x2a>
      vTaskDelay(ticks);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fd1e 	bl	80078d4 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8006e98:	68fb      	ldr	r3, [r7, #12]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4a07      	ldr	r2, [pc, #28]	@ (8006ed0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006eb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	4a06      	ldr	r2, [pc, #24]	@ (8006ed4 <vApplicationGetIdleTaskMemory+0x30>)
 8006eba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2280      	movs	r2, #128	@ 0x80
 8006ec0:	601a      	str	r2, [r3, #0]
}
 8006ec2:	bf00      	nop
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	20000368 	.word	0x20000368
 8006ed4:	200003c4 	.word	0x200003c4

08006ed8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4a07      	ldr	r2, [pc, #28]	@ (8006f04 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ee8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	4a06      	ldr	r2, [pc, #24]	@ (8006f08 <vApplicationGetTimerTaskMemory+0x30>)
 8006eee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2280      	movs	r2, #128	@ 0x80
 8006ef4:	601a      	str	r2, [r3, #0]
}
 8006ef6:	bf00      	nop
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	200005c4 	.word	0x200005c4
 8006f08:	20000620 	.word	0x20000620

08006f0c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f103 0208 	add.w	r2, r3, #8
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f04f 32ff 	mov.w	r2, #4294967295
 8006f24:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f103 0208 	add.w	r2, r3, #8
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f103 0208 	add.w	r2, r3, #8
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7c:	d103      	bne.n	8006f86 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	e00c      	b.n	8006fa0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3308      	adds	r3, #8
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	e002      	b.n	8006f94 <vListInsert+0x2e>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d2f6      	bcs.n	8006f8e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	601a      	str	r2, [r3, #0]
}
 8006fcc:	bf00      	nop
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6892      	ldr	r2, [r2, #8]
 8006fee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6852      	ldr	r2, [r2, #4]
 8006ff8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	429a      	cmp	r2, r3
 8007002:	d103      	bne.n	800700c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	1e5a      	subs	r2, r3, #1
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8007036:	2301      	movs	r3, #1
 8007038:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d103      	bne.n	800704c <xQueueGenericReset+0x20>
 8007044:	f001 feb8 	bl	8008db8 <ulSetInterruptMask>
 8007048:	bf00      	nop
 800704a:	e7fd      	b.n	8007048 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d057      	beq.n	8007102 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8007056:	2b00      	cmp	r3, #0
 8007058:	d053      	beq.n	8007102 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007062:	2100      	movs	r1, #0
 8007064:	fba3 2302 	umull	r2, r3, r3, r2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d000      	beq.n	800706e <xQueueGenericReset+0x42>
 800706c:	2101      	movs	r1, #1
 800706e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8007070:	2b00      	cmp	r3, #0
 8007072:	d146      	bne.n	8007102 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 8007074:	f001 fd0a 	bl	8008a8c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007084:	fb01 f303 	mul.w	r3, r1, r3
 8007088:	441a      	add	r2, r3
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2200      	movs	r2, #0
 8007092:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a4:	3b01      	subs	r3, #1
 80070a6:	68b9      	ldr	r1, [r7, #8]
 80070a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80070aa:	fb01 f303 	mul.w	r3, r1, r3
 80070ae:	441a      	add	r2, r3
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	22ff      	movs	r2, #255	@ 0xff
 80070b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	22ff      	movs	r2, #255	@ 0xff
 80070c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10e      	bne.n	80070e8 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d014      	beq.n	80070fc <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	3310      	adds	r3, #16
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 ff4a 	bl	8007f70 <xTaskRemoveFromEventList>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00c      	beq.n	80070fc <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80070e2:	f001 fcc1 	bl	8008a68 <vPortYield>
 80070e6:	e009      	b.n	80070fc <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	3310      	adds	r3, #16
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff ff0d 	bl	8006f0c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	3324      	adds	r3, #36	@ 0x24
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff ff08 	bl	8006f0c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80070fc:	f001 fcd8 	bl	8008ab0 <vPortExitCritical>
 8007100:	e001      	b.n	8007106 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d103      	bne.n	8007114 <xQueueGenericReset+0xe8>
 800710c:	f001 fe54 	bl	8008db8 <ulSetInterruptMask>
 8007110:	bf00      	nop
 8007112:	e7fd      	b.n	8007110 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8007114:	68fb      	ldr	r3, [r7, #12]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800711e:	b580      	push	{r7, lr}
 8007120:	b088      	sub	sp, #32
 8007122:	af02      	add	r7, sp, #8
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	607a      	str	r2, [r7, #4]
 800712a:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800712c:	2300      	movs	r3, #0
 800712e:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d103      	bne.n	800713e <xQueueGenericCreateStatic+0x20>
 8007136:	f001 fe3f 	bl	8008db8 <ulSetInterruptMask>
 800713a:	bf00      	nop
 800713c:	e7fd      	b.n	800713a <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d029      	beq.n	8007198 <xQueueGenericCreateStatic+0x7a>
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d026      	beq.n	8007198 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d020      	beq.n	8007198 <xQueueGenericCreateStatic+0x7a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d102      	bne.n	8007162 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d11a      	bne.n	8007198 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8007162:	2350      	movs	r3, #80	@ 0x50
 8007164:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2b50      	cmp	r3, #80	@ 0x50
 800716a:	d003      	beq.n	8007174 <xQueueGenericCreateStatic+0x56>
 800716c:	f001 fe24 	bl	8008db8 <ulSetInterruptMask>
 8007170:	bf00      	nop
 8007172:	e7fd      	b.n	8007170 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8007174:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007182:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	4613      	mov	r3, r2
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	68b9      	ldr	r1, [r7, #8]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f80d 	bl	80071b0 <prvInitialiseNewQueue>
 8007196:	e006      	b.n	80071a6 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d103      	bne.n	80071a6 <xQueueGenericCreateStatic+0x88>
 800719e:	f001 fe0b 	bl	8008db8 <ulSetInterruptMask>
 80071a2:	bf00      	nop
 80071a4:	e7fd      	b.n	80071a2 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80071a6:	697b      	ldr	r3, [r7, #20]
    }
 80071a8:	4618      	mov	r0, r3
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d103      	bne.n	80071cc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	e002      	b.n	80071d2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071de:	2101      	movs	r1, #1
 80071e0:	69b8      	ldr	r0, [r7, #24]
 80071e2:	f7ff ff23 	bl	800702c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	78fa      	ldrb	r2, [r7, #3]
 80071ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80071ee:	bf00      	nop
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b08a      	sub	sp, #40	@ 0x28
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8007202:	2300      	movs	r3, #0
 8007204:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d103      	bne.n	8007218 <xQueueReceive+0x22>
 8007210:	f001 fdd2 	bl	8008db8 <ulSetInterruptMask>
 8007214:	bf00      	nop
 8007216:	e7fd      	b.n	8007214 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d103      	bne.n	8007226 <xQueueReceive+0x30>
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <xQueueReceive+0x34>
 8007226:	2301      	movs	r3, #1
 8007228:	e000      	b.n	800722c <xQueueReceive+0x36>
 800722a:	2300      	movs	r3, #0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d103      	bne.n	8007238 <xQueueReceive+0x42>
 8007230:	f001 fdc2 	bl	8008db8 <ulSetInterruptMask>
 8007234:	bf00      	nop
 8007236:	e7fd      	b.n	8007234 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007238:	f001 f8a4 	bl	8008384 <xTaskGetSchedulerState>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d102      	bne.n	8007248 <xQueueReceive+0x52>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <xQueueReceive+0x56>
 8007248:	2301      	movs	r3, #1
 800724a:	e000      	b.n	800724e <xQueueReceive+0x58>
 800724c:	2300      	movs	r3, #0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d103      	bne.n	800725a <xQueueReceive+0x64>
 8007252:	f001 fdb1 	bl	8008db8 <ulSetInterruptMask>
 8007256:	bf00      	nop
 8007258:	e7fd      	b.n	8007256 <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800725a:	f001 fc17 	bl	8008a8c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007262:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d019      	beq.n	800729e <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800726a:	68b9      	ldr	r1, [r7, #8]
 800726c:	6a38      	ldr	r0, [r7, #32]
 800726e:	f000 f87e 	bl	800736e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	1e5a      	subs	r2, r3, #1
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d009      	beq.n	8007296 <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	3310      	adds	r3, #16
 8007286:	4618      	mov	r0, r3
 8007288:	f000 fe72 	bl	8007f70 <xTaskRemoveFromEventList>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007292:	f001 fbe9 	bl	8008a68 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8007296:	f001 fc0b 	bl	8008ab0 <vPortExitCritical>
                return pdPASS;
 800729a:	2301      	movs	r3, #1
 800729c:	e063      	b.n	8007366 <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d103      	bne.n	80072ac <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80072a4:	f001 fc04 	bl	8008ab0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80072a8:	2300      	movs	r3, #0
 80072aa:	e05c      	b.n	8007366 <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 80072ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d106      	bne.n	80072c0 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80072b2:	f107 0314 	add.w	r3, r7, #20
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 ff28 	bl	800810c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80072bc:	2301      	movs	r3, #1
 80072be:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80072c0:	f001 fbf6 	bl	8008ab0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80072c4:	f000 fb88 	bl	80079d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80072c8:	f001 fbe0 	bl	8008a8c <vPortEnterCritical>
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072d2:	b25b      	sxtb	r3, r3
 80072d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d8:	d103      	bne.n	80072e2 <xQueueReceive+0xec>
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072e8:	b25b      	sxtb	r3, r3
 80072ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ee:	d103      	bne.n	80072f8 <xQueueReceive+0x102>
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072f8:	f001 fbda 	bl	8008ab0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072fc:	1d3a      	adds	r2, r7, #4
 80072fe:	f107 0314 	add.w	r3, r7, #20
 8007302:	4611      	mov	r1, r2
 8007304:	4618      	mov	r0, r3
 8007306:	f000 ff17 	bl	8008138 <xTaskCheckForTimeOut>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d11d      	bne.n	800734c <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007310:	6a38      	ldr	r0, [r7, #32]
 8007312:	f000 f8a4 	bl	800745e <prvIsQueueEmpty>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d011      	beq.n	8007340 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	3324      	adds	r3, #36	@ 0x24
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	4611      	mov	r1, r2
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fdc7 	bl	8007eb8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800732a:	6a38      	ldr	r0, [r7, #32]
 800732c:	f000 f845 	bl	80073ba <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8007330:	f000 fb60 	bl	80079f4 <xTaskResumeAll>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d18f      	bne.n	800725a <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 800733a:	f001 fb95 	bl	8008a68 <vPortYield>
 800733e:	e78c      	b.n	800725a <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8007340:	6a38      	ldr	r0, [r7, #32]
 8007342:	f000 f83a 	bl	80073ba <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007346:	f000 fb55 	bl	80079f4 <xTaskResumeAll>
 800734a:	e786      	b.n	800725a <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800734c:	6a38      	ldr	r0, [r7, #32]
 800734e:	f000 f834 	bl	80073ba <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007352:	f000 fb4f 	bl	80079f4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007356:	6a38      	ldr	r0, [r7, #32]
 8007358:	f000 f881 	bl	800745e <prvIsQueueEmpty>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	f43f af7b 	beq.w	800725a <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8007364:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8007366:	4618      	mov	r0, r3
 8007368:	3728      	adds	r7, #40	@ 0x28
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800737c:	2b00      	cmp	r3, #0
 800737e:	d018      	beq.n	80073b2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007388:	441a      	add	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	429a      	cmp	r2, r3
 8007398:	d303      	bcc.n	80073a2 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68d9      	ldr	r1, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073aa:	461a      	mov	r2, r3
 80073ac:	6838      	ldr	r0, [r7, #0]
 80073ae:	f003 f822 	bl	800a3f6 <memcpy>
    }
}
 80073b2:	bf00      	nop
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80073c2:	f001 fb63 	bl	8008a8c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073cc:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80073ce:	e011      	b.n	80073f4 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d012      	beq.n	80073fe <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3324      	adds	r3, #36	@ 0x24
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fdc7 	bl	8007f70 <xTaskRemoveFromEventList>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80073e8:	f000 fefe 	bl	80081e8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80073f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	dce9      	bgt.n	80073d0 <prvUnlockQueue+0x16>
 80073fc:	e000      	b.n	8007400 <prvUnlockQueue+0x46>
                    break;
 80073fe:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	22ff      	movs	r2, #255	@ 0xff
 8007404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8007408:	f001 fb52 	bl	8008ab0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800740c:	f001 fb3e 	bl	8008a8c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007416:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007418:	e011      	b.n	800743e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d012      	beq.n	8007448 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3310      	adds	r3, #16
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fda2 	bl	8007f70 <xTaskRemoveFromEventList>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8007432:	f000 fed9 	bl	80081e8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	3b01      	subs	r3, #1
 800743a:	b2db      	uxtb	r3, r3
 800743c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800743e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007442:	2b00      	cmp	r3, #0
 8007444:	dce9      	bgt.n	800741a <prvUnlockQueue+0x60>
 8007446:	e000      	b.n	800744a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8007448:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	22ff      	movs	r2, #255	@ 0xff
 800744e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8007452:	f001 fb2d 	bl	8008ab0 <vPortExitCritical>
}
 8007456:	bf00      	nop
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007466:	f001 fb11 	bl	8008a8c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746e:	2b00      	cmp	r3, #0
 8007470:	d102      	bne.n	8007478 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8007472:	2301      	movs	r3, #1
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	e001      	b.n	800747c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800747c:	f001 fb18 	bl	8008ab0 <vPortExitCritical>

    return xReturn;
 8007480:	68fb      	ldr	r3, [r7, #12]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d103      	bne.n	80074a8 <vQueueAddToRegistry+0x1c>
 80074a0:	f001 fc8a 	bl	8008db8 <ulSetInterruptMask>
 80074a4:	bf00      	nop
 80074a6:	e7fd      	b.n	80074a4 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d024      	beq.n	80074f8 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	e01e      	b.n	80074f2 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80074b4:	4a17      	ldr	r2, [pc, #92]	@ (8007514 <vQueueAddToRegistry+0x88>)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	4413      	add	r3, r2
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d105      	bne.n	80074d0 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	4a12      	ldr	r2, [pc, #72]	@ (8007514 <vQueueAddToRegistry+0x88>)
 80074ca:	4413      	add	r3, r2
 80074cc:	60bb      	str	r3, [r7, #8]
                    break;
 80074ce:	e013      	b.n	80074f8 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <vQueueAddToRegistry+0x60>
 80074d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007514 <vQueueAddToRegistry+0x88>)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d104      	bne.n	80074ec <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	00db      	lsls	r3, r3, #3
 80074e6:	4a0b      	ldr	r2, [pc, #44]	@ (8007514 <vQueueAddToRegistry+0x88>)
 80074e8:	4413      	add	r3, r2
 80074ea:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3301      	adds	r3, #1
 80074f0:	60fb      	str	r3, [r7, #12]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b07      	cmp	r3, #7
 80074f6:	d9dd      	bls.n	80074b4 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800750a:	bf00      	nop
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000820 	.word	0x20000820

08007518 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8007528:	f001 fab0 	bl	8008a8c <vPortEnterCritical>
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007532:	b25b      	sxtb	r3, r3
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007538:	d103      	bne.n	8007542 <vQueueWaitForMessageRestricted+0x2a>
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007548:	b25b      	sxtb	r3, r3
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754e:	d103      	bne.n	8007558 <vQueueWaitForMessageRestricted+0x40>
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007558:	f001 faaa 	bl	8008ab0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007560:	2b00      	cmp	r3, #0
 8007562:	d106      	bne.n	8007572 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	3324      	adds	r3, #36	@ 0x24
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	68b9      	ldr	r1, [r7, #8]
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fcc1 	bl	8007ef4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8007572:	6978      	ldr	r0, [r7, #20]
 8007574:	f7ff ff21 	bl	80073ba <prvUnlockQueue>
    }
 8007578:	bf00      	nop
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8007580:	b580      	push	{r7, lr}
 8007582:	b08c      	sub	sp, #48	@ 0x30
 8007584:	af04      	add	r7, sp, #16
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800758e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007590:	2b00      	cmp	r3, #0
 8007592:	d103      	bne.n	800759c <xTaskCreateStatic+0x1c>
 8007594:	f001 fc10 	bl	8008db8 <ulSetInterruptMask>
 8007598:	bf00      	nop
 800759a:	e7fd      	b.n	8007598 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d103      	bne.n	80075aa <xTaskCreateStatic+0x2a>
 80075a2:	f001 fc09 	bl	8008db8 <ulSetInterruptMask>
 80075a6:	bf00      	nop
 80075a8:	e7fd      	b.n	80075a6 <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80075aa:	235c      	movs	r3, #92	@ 0x5c
 80075ac:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80075b2:	d003      	beq.n	80075bc <xTaskCreateStatic+0x3c>
 80075b4:	f001 fc00 	bl	8008db8 <ulSetInterruptMask>
 80075b8:	bf00      	nop
 80075ba:	e7fd      	b.n	80075b8 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075bc:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d023      	beq.n	800760c <xTaskCreateStatic+0x8c>
 80075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d020      	beq.n	800760c <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80075ce:	225c      	movs	r2, #92	@ 0x5c
 80075d0:	2100      	movs	r1, #0
 80075d2:	69f8      	ldr	r0, [r7, #28]
 80075d4:	f002 fe84 	bl	800a2e0 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075dc:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	2202      	movs	r2, #2
 80075e2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075e6:	2300      	movs	r3, #0
 80075e8:	9303      	str	r3, [sp, #12]
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	9302      	str	r3, [sp, #8]
 80075ee:	f107 0318 	add.w	r3, r7, #24
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	68b9      	ldr	r1, [r7, #8]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 f855 	bl	80076ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007604:	69f8      	ldr	r0, [r7, #28]
 8007606:	f000 f8d5 	bl	80077b4 <prvAddNewTaskToReadyList>
 800760a:	e001      	b.n	8007610 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800760c:	2300      	movs	r3, #0
 800760e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007610:	69bb      	ldr	r3, [r7, #24]
    }
 8007612:	4618      	mov	r0, r3
 8007614:	3720      	adds	r7, #32
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800761a:	b580      	push	{r7, lr}
 800761c:	b08c      	sub	sp, #48	@ 0x30
 800761e:	af04      	add	r7, sp, #16
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	603b      	str	r3, [r7, #0]
 8007626:	4613      	mov	r3, r2
 8007628:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800762a:	88fb      	ldrh	r3, [r7, #6]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4618      	mov	r0, r3
 8007630:	f001 fc22 	bl	8008e78 <pvPortMalloc>
 8007634:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d013      	beq.n	8007664 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800763c:	205c      	movs	r0, #92	@ 0x5c
 800763e:	f001 fc1b 	bl	8008e78 <pvPortMalloc>
 8007642:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d008      	beq.n	800765c <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800764a:	225c      	movs	r2, #92	@ 0x5c
 800764c:	2100      	movs	r1, #0
 800764e:	69f8      	ldr	r0, [r7, #28]
 8007650:	f002 fe46 	bl	800a2e0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	631a      	str	r2, [r3, #48]	@ 0x30
 800765a:	e005      	b.n	8007668 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800765c:	6978      	ldr	r0, [r7, #20]
 800765e:	f001 fcc7 	bl	8008ff0 <vPortFree>
 8007662:	e001      	b.n	8007668 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8007664:	2300      	movs	r3, #0
 8007666:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d017      	beq.n	800769e <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007676:	88fa      	ldrh	r2, [r7, #6]
 8007678:	2300      	movs	r3, #0
 800767a:	9303      	str	r3, [sp, #12]
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	9302      	str	r3, [sp, #8]
 8007680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007682:	9301      	str	r3, [sp, #4]
 8007684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f80e 	bl	80076ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007692:	69f8      	ldr	r0, [r7, #28]
 8007694:	f000 f88e 	bl	80077b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8007698:	2301      	movs	r3, #1
 800769a:	61bb      	str	r3, [r7, #24]
 800769c:	e002      	b.n	80076a4 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800769e:	f04f 33ff 	mov.w	r3, #4294967295
 80076a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80076a4:	69bb      	ldr	r3, [r7, #24]
    }
 80076a6:	4618      	mov	r0, r3
 80076a8:	3720      	adds	r7, #32
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b086      	sub	sp, #24
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
 80076ba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80076bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	461a      	mov	r2, r3
 80076c6:	21a5      	movs	r1, #165	@ 0xa5
 80076c8:	f002 fe0a 	bl	800a2e0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076d6:	3b01      	subs	r3, #1
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f023 0307 	bic.w	r3, r3, #7
 80076e4:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <prvInitialiseNewTask+0x4a>
 80076f0:	f001 fb62 	bl	8008db8 <ulSetInterruptMask>
 80076f4:	bf00      	nop
 80076f6:	e7fd      	b.n	80076f4 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d01e      	beq.n	800773c <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076fe:	2300      	movs	r3, #0
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	e012      	b.n	800772a <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	4413      	add	r3, r2
 800770a:	7819      	ldrb	r1, [r3, #0]
 800770c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	4413      	add	r3, r2
 8007712:	3334      	adds	r3, #52	@ 0x34
 8007714:	460a      	mov	r2, r1
 8007716:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	4413      	add	r3, r2
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d006      	beq.n	8007732 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	3301      	adds	r3, #1
 8007728:	617b      	str	r3, [r7, #20]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2b0f      	cmp	r3, #15
 800772e:	d9e9      	bls.n	8007704 <prvInitialiseNewTask+0x56>
 8007730:	e000      	b.n	8007734 <prvInitialiseNewTask+0x86>
            {
                break;
 8007732:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	2b37      	cmp	r3, #55	@ 0x37
 8007740:	d903      	bls.n	800774a <prvInitialiseNewTask+0x9c>
 8007742:	f001 fb39 	bl	8008db8 <ulSetInterruptMask>
 8007746:	bf00      	nop
 8007748:	e7fd      	b.n	8007746 <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	2b37      	cmp	r3, #55	@ 0x37
 800774e:	d901      	bls.n	8007754 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007750:	2337      	movs	r3, #55	@ 0x37
 8007752:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007756:	6a3a      	ldr	r2, [r7, #32]
 8007758:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800775a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775c:	6a3a      	ldr	r2, [r7, #32]
 800775e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007762:	3304      	adds	r3, #4
 8007764:	4618      	mov	r0, r3
 8007766:	f7ff fbf1 	bl	8006f4c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800776a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776c:	3318      	adds	r3, #24
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff fbec 	bl	8006f4c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007778:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007782:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007788:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800778a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	6938      	ldr	r0, [r7, #16]
 8007794:	f001 f9d8 	bl	8008b48 <pxPortInitialiseStack>
 8007798:	4602      	mov	r2, r0
 800779a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077a8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80077aa:	bf00      	nop
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80077bc:	f001 f966 	bl	8008a8c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80077c0:	4b3e      	ldr	r3, [pc, #248]	@ (80078bc <prvAddNewTaskToReadyList+0x108>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3301      	adds	r3, #1
 80077c6:	4a3d      	ldr	r2, [pc, #244]	@ (80078bc <prvAddNewTaskToReadyList+0x108>)
 80077c8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80077ca:	4b3d      	ldr	r3, [pc, #244]	@ (80078c0 <prvAddNewTaskToReadyList+0x10c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d109      	bne.n	80077e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80077d2:	4a3b      	ldr	r2, [pc, #236]	@ (80078c0 <prvAddNewTaskToReadyList+0x10c>)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077d8:	4b38      	ldr	r3, [pc, #224]	@ (80078bc <prvAddNewTaskToReadyList+0x108>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d110      	bne.n	8007802 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80077e0:	f000 fd1e 	bl	8008220 <prvInitialiseTaskLists>
 80077e4:	e00d      	b.n	8007802 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80077e6:	4b37      	ldr	r3, [pc, #220]	@ (80078c4 <prvAddNewTaskToReadyList+0x110>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d109      	bne.n	8007802 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077ee:	4b34      	ldr	r3, [pc, #208]	@ (80078c0 <prvAddNewTaskToReadyList+0x10c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d802      	bhi.n	8007802 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80077fc:	4a30      	ldr	r2, [pc, #192]	@ (80078c0 <prvAddNewTaskToReadyList+0x10c>)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8007802:	4b31      	ldr	r3, [pc, #196]	@ (80078c8 <prvAddNewTaskToReadyList+0x114>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3301      	adds	r3, #1
 8007808:	4a2f      	ldr	r2, [pc, #188]	@ (80078c8 <prvAddNewTaskToReadyList+0x114>)
 800780a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800780c:	4b2e      	ldr	r3, [pc, #184]	@ (80078c8 <prvAddNewTaskToReadyList+0x114>)
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007818:	4b2c      	ldr	r3, [pc, #176]	@ (80078cc <prvAddNewTaskToReadyList+0x118>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	429a      	cmp	r2, r3
 800781e:	d903      	bls.n	8007828 <prvAddNewTaskToReadyList+0x74>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007824:	4a29      	ldr	r2, [pc, #164]	@ (80078cc <prvAddNewTaskToReadyList+0x118>)
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800782c:	4928      	ldr	r1, [pc, #160]	@ (80078d0 <prvAddNewTaskToReadyList+0x11c>)
 800782e:	4613      	mov	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	440b      	add	r3, r1
 8007838:	3304      	adds	r3, #4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	609a      	str	r2, [r3, #8]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	60da      	str	r2, [r3, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	3204      	adds	r2, #4
 8007854:	605a      	str	r2, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	1d1a      	adds	r2, r3, #4
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	609a      	str	r2, [r3, #8]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4a19      	ldr	r2, [pc, #100]	@ (80078d0 <prvAddNewTaskToReadyList+0x11c>)
 800786c:	441a      	add	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	615a      	str	r2, [r3, #20]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007876:	4916      	ldr	r1, [pc, #88]	@ (80078d0 <prvAddNewTaskToReadyList+0x11c>)
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	440b      	add	r3, r1
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	1c59      	adds	r1, r3, #1
 8007886:	4812      	ldr	r0, [pc, #72]	@ (80078d0 <prvAddNewTaskToReadyList+0x11c>)
 8007888:	4613      	mov	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4403      	add	r3, r0
 8007892:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8007894:	f001 f90c 	bl	8008ab0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007898:	4b0a      	ldr	r3, [pc, #40]	@ (80078c4 <prvAddNewTaskToReadyList+0x110>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d008      	beq.n	80078b2 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078a0:	4b07      	ldr	r3, [pc, #28]	@ (80078c0 <prvAddNewTaskToReadyList+0x10c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d201      	bcs.n	80078b2 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80078ae:	f001 f8db 	bl	8008a68 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80078b2:	bf00      	nop
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	20000d34 	.word	0x20000d34
 80078c0:	20000860 	.word	0x20000860
 80078c4:	20000d40 	.word	0x20000d40
 80078c8:	20000d50 	.word	0x20000d50
 80078cc:	20000d3c 	.word	0x20000d3c
 80078d0:	20000864 	.word	0x20000864

080078d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d010      	beq.n	8007908 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 80078e6:	4b0d      	ldr	r3, [pc, #52]	@ (800791c <vTaskDelay+0x48>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <vTaskDelay+0x22>
 80078ee:	f001 fa63 	bl	8008db8 <ulSetInterruptMask>
 80078f2:	bf00      	nop
 80078f4:	e7fd      	b.n	80078f2 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 80078f6:	f000 f86f 	bl	80079d8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078fa:	2100      	movs	r1, #0
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fd5f 	bl	80083c0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8007902:	f000 f877 	bl	80079f4 <xTaskResumeAll>
 8007906:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800790e:	f001 f8ab 	bl	8008a68 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007912:	bf00      	nop
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20000d5c 	.word	0x20000d5c

08007920 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8007926:	2300      	movs	r3, #0
 8007928:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800792a:	2300      	movs	r3, #0
 800792c:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800792e:	463a      	mov	r2, r7
 8007930:	1d39      	adds	r1, r7, #4
 8007932:	f107 0308 	add.w	r3, r7, #8
 8007936:	4618      	mov	r0, r3
 8007938:	f7ff fab4 	bl	8006ea4 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	9202      	str	r2, [sp, #8]
 8007944:	9301      	str	r3, [sp, #4]
 8007946:	2300      	movs	r3, #0
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	2300      	movs	r3, #0
 800794c:	460a      	mov	r2, r1
 800794e:	491b      	ldr	r1, [pc, #108]	@ (80079bc <vTaskStartScheduler+0x9c>)
 8007950:	481b      	ldr	r0, [pc, #108]	@ (80079c0 <vTaskStartScheduler+0xa0>)
 8007952:	f7ff fe15 	bl	8007580 <xTaskCreateStatic>
 8007956:	4603      	mov	r3, r0
 8007958:	4a1a      	ldr	r2, [pc, #104]	@ (80079c4 <vTaskStartScheduler+0xa4>)
 800795a:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800795c:	4b19      	ldr	r3, [pc, #100]	@ (80079c4 <vTaskStartScheduler+0xa4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8007964:	2301      	movs	r3, #1
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	e001      	b.n	800796e <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d102      	bne.n	800797a <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8007974:	f000 fd92 	bl	800849c <xTimerCreateTimerTask>
 8007978:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10e      	bne.n	800799e <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8007980:	f001 fa1a 	bl	8008db8 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8007984:	4b10      	ldr	r3, [pc, #64]	@ (80079c8 <vTaskStartScheduler+0xa8>)
 8007986:	f04f 32ff 	mov.w	r2, #4294967295
 800798a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800798c:	4b0f      	ldr	r3, [pc, #60]	@ (80079cc <vTaskStartScheduler+0xac>)
 800798e:	2201      	movs	r2, #1
 8007990:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007992:	4b0f      	ldr	r3, [pc, #60]	@ (80079d0 <vTaskStartScheduler+0xb0>)
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8007998:	f001 f960 	bl	8008c5c <xPortStartScheduler>
 800799c:	e007      	b.n	80079ae <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a4:	d103      	bne.n	80079ae <vTaskStartScheduler+0x8e>
 80079a6:	f001 fa07 	bl	8008db8 <ulSetInterruptMask>
 80079aa:	bf00      	nop
 80079ac:	e7fd      	b.n	80079aa <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80079ae:	4b09      	ldr	r3, [pc, #36]	@ (80079d4 <vTaskStartScheduler+0xb4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
}
 80079b2:	bf00      	nop
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	0800ad04 	.word	0x0800ad04
 80079c0:	08008201 	.word	0x08008201
 80079c4:	20000d58 	.word	0x20000d58
 80079c8:	20000d54 	.word	0x20000d54
 80079cc:	20000d40 	.word	0x20000d40
 80079d0:	20000d38 	.word	0x20000d38
 80079d4:	0800ad84 	.word	0x0800ad84

080079d8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80079dc:	4b04      	ldr	r3, [pc, #16]	@ (80079f0 <vTaskSuspendAll+0x18>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	4a03      	ldr	r2, [pc, #12]	@ (80079f0 <vTaskSuspendAll+0x18>)
 80079e4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80079e6:	bf00      	nop
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	20000d5c 	.word	0x20000d5c

080079f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80079fe:	2300      	movs	r3, #0
 8007a00:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8007a02:	4b6b      	ldr	r3, [pc, #428]	@ (8007bb0 <xTaskResumeAll+0x1bc>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d103      	bne.n	8007a12 <xTaskResumeAll+0x1e>
 8007a0a:	f001 f9d5 	bl	8008db8 <ulSetInterruptMask>
 8007a0e:	bf00      	nop
 8007a10:	e7fd      	b.n	8007a0e <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8007a12:	f001 f83b 	bl	8008a8c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8007a16:	4b66      	ldr	r3, [pc, #408]	@ (8007bb0 <xTaskResumeAll+0x1bc>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	4a64      	ldr	r2, [pc, #400]	@ (8007bb0 <xTaskResumeAll+0x1bc>)
 8007a1e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007a20:	4b63      	ldr	r3, [pc, #396]	@ (8007bb0 <xTaskResumeAll+0x1bc>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f040 80bb 	bne.w	8007ba0 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a2a:	4b62      	ldr	r3, [pc, #392]	@ (8007bb4 <xTaskResumeAll+0x1c0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 80b6 	beq.w	8007ba0 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a34:	e08b      	b.n	8007b4e <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a36:	4b60      	ldr	r3, [pc, #384]	@ (8007bb8 <xTaskResumeAll+0x1c4>)
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a42:	60bb      	str	r3, [r7, #8]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	6a12      	ldr	r2, [r2, #32]
 8007a4c:	609a      	str	r2, [r3, #8]
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	69d2      	ldr	r2, [r2, #28]
 8007a56:	605a      	str	r2, [r3, #4]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	3318      	adds	r3, #24
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d103      	bne.n	8007a6c <xTaskResumeAll+0x78>
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	6a1a      	ldr	r2, [r3, #32]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	605a      	str	r2, [r3, #4]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	1e5a      	subs	r2, r3, #1
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	607b      	str	r3, [r7, #4]
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	68d2      	ldr	r2, [r2, #12]
 8007a8a:	609a      	str	r2, [r3, #8]
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	6892      	ldr	r2, [r2, #8]
 8007a94:	605a      	str	r2, [r3, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d103      	bne.n	8007aaa <xTaskResumeAll+0xb6>
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	605a      	str	r2, [r3, #4]
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2200      	movs	r2, #0
 8007aae:	615a      	str	r2, [r3, #20]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	1e5a      	subs	r2, r3, #1
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007abe:	4b3f      	ldr	r3, [pc, #252]	@ (8007bbc <xTaskResumeAll+0x1c8>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d903      	bls.n	8007ace <xTaskResumeAll+0xda>
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aca:	4a3c      	ldr	r2, [pc, #240]	@ (8007bbc <xTaskResumeAll+0x1c8>)
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad2:	493b      	ldr	r1, [pc, #236]	@ (8007bc0 <xTaskResumeAll+0x1cc>)
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	440b      	add	r3, r1
 8007ade:	3304      	adds	r3, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	609a      	str	r2, [r3, #8]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	60da      	str	r2, [r3, #12]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	3204      	adds	r2, #4
 8007afa:	605a      	str	r2, [r3, #4]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	1d1a      	adds	r2, r3, #4
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	609a      	str	r2, [r3, #8]
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4a2b      	ldr	r2, [pc, #172]	@ (8007bc0 <xTaskResumeAll+0x1cc>)
 8007b12:	441a      	add	r2, r3
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	615a      	str	r2, [r3, #20]
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1c:	4928      	ldr	r1, [pc, #160]	@ (8007bc0 <xTaskResumeAll+0x1cc>)
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	440b      	add	r3, r1
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	1c59      	adds	r1, r3, #1
 8007b2c:	4824      	ldr	r0, [pc, #144]	@ (8007bc0 <xTaskResumeAll+0x1cc>)
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4403      	add	r3, r0
 8007b38:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b3e:	4b21      	ldr	r3, [pc, #132]	@ (8007bc4 <xTaskResumeAll+0x1d0>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d902      	bls.n	8007b4e <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8007b48:	4b1f      	ldr	r3, [pc, #124]	@ (8007bc8 <xTaskResumeAll+0x1d4>)
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8007bb8 <xTaskResumeAll+0x1c4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f47f af6f 	bne.w	8007a36 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007b5e:	f000 fbf5 	bl	800834c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b62:	4b1a      	ldr	r3, [pc, #104]	@ (8007bcc <xTaskResumeAll+0x1d8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d010      	beq.n	8007b90 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007b6e:	f000 f83f 	bl	8007bf0 <xTaskIncrementTick>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 8007b78:	4b13      	ldr	r3, [pc, #76]	@ (8007bc8 <xTaskResumeAll+0x1d4>)
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1f1      	bne.n	8007b6e <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 8007b8a:	4b10      	ldr	r3, [pc, #64]	@ (8007bcc <xTaskResumeAll+0x1d8>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007b90:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc8 <xTaskResumeAll+0x1d4>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d003      	beq.n	8007ba0 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007b9c:	f000 ff64 	bl	8008a68 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007ba0:	f000 ff86 	bl	8008ab0 <vPortExitCritical>

    return xAlreadyYielded;
 8007ba4:	693b      	ldr	r3, [r7, #16]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000d5c 	.word	0x20000d5c
 8007bb4:	20000d34 	.word	0x20000d34
 8007bb8:	20000cf4 	.word	0x20000cf4
 8007bbc:	20000d3c 	.word	0x20000d3c
 8007bc0:	20000864 	.word	0x20000864
 8007bc4:	20000860 	.word	0x20000860
 8007bc8:	20000d48 	.word	0x20000d48
 8007bcc:	20000d44 	.word	0x20000d44

08007bd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8007bd6:	4b05      	ldr	r3, [pc, #20]	@ (8007bec <xTaskGetTickCount+0x1c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007bdc:	687b      	ldr	r3, [r7, #4]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	20000d38 	.word	0x20000d38

08007bf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b088      	sub	sp, #32
 8007bf4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007bfa:	4b7a      	ldr	r3, [pc, #488]	@ (8007de4 <xTaskIncrementTick+0x1f4>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f040 80e6 	bne.w	8007dd0 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c04:	4b78      	ldr	r3, [pc, #480]	@ (8007de8 <xTaskIncrementTick+0x1f8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007c0c:	4a76      	ldr	r2, [pc, #472]	@ (8007de8 <xTaskIncrementTick+0x1f8>)
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d119      	bne.n	8007c4c <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 8007c18:	4b74      	ldr	r3, [pc, #464]	@ (8007dec <xTaskIncrementTick+0x1fc>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <xTaskIncrementTick+0x3a>
 8007c22:	f001 f8c9 	bl	8008db8 <ulSetInterruptMask>
 8007c26:	bf00      	nop
 8007c28:	e7fd      	b.n	8007c26 <xTaskIncrementTick+0x36>
 8007c2a:	4b70      	ldr	r3, [pc, #448]	@ (8007dec <xTaskIncrementTick+0x1fc>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	617b      	str	r3, [r7, #20]
 8007c30:	4b6f      	ldr	r3, [pc, #444]	@ (8007df0 <xTaskIncrementTick+0x200>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a6d      	ldr	r2, [pc, #436]	@ (8007dec <xTaskIncrementTick+0x1fc>)
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	4a6d      	ldr	r2, [pc, #436]	@ (8007df0 <xTaskIncrementTick+0x200>)
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	6013      	str	r3, [r2, #0]
 8007c3e:	4b6d      	ldr	r3, [pc, #436]	@ (8007df4 <xTaskIncrementTick+0x204>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3301      	adds	r3, #1
 8007c44:	4a6b      	ldr	r2, [pc, #428]	@ (8007df4 <xTaskIncrementTick+0x204>)
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	f000 fb80 	bl	800834c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8007df8 <xTaskIncrementTick+0x208>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	f0c0 80a7 	bcc.w	8007da6 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c58:	4b64      	ldr	r3, [pc, #400]	@ (8007dec <xTaskIncrementTick+0x1fc>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d104      	bne.n	8007c6c <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c62:	4b65      	ldr	r3, [pc, #404]	@ (8007df8 <xTaskIncrementTick+0x208>)
 8007c64:	f04f 32ff 	mov.w	r2, #4294967295
 8007c68:	601a      	str	r2, [r3, #0]
                    break;
 8007c6a:	e09c      	b.n	8007da6 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c6c:	4b5f      	ldr	r3, [pc, #380]	@ (8007dec <xTaskIncrementTick+0x1fc>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d203      	bcs.n	8007c8c <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007c84:	4a5c      	ldr	r2, [pc, #368]	@ (8007df8 <xTaskIncrementTick+0x208>)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007c8a:	e08c      	b.n	8007da6 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	60bb      	str	r3, [r7, #8]
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	693a      	ldr	r2, [r7, #16]
 8007c98:	68d2      	ldr	r2, [r2, #12]
 8007c9a:	609a      	str	r2, [r3, #8]
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	6892      	ldr	r2, [r2, #8]
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	3304      	adds	r3, #4
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d103      	bne.n	8007cba <xTaskIncrementTick+0xca>
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	605a      	str	r2, [r3, #4]
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	615a      	str	r2, [r3, #20]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	1e5a      	subs	r2, r3, #1
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d01e      	beq.n	8007d10 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd6:	607b      	str	r3, [r7, #4]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	69db      	ldr	r3, [r3, #28]
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	6a12      	ldr	r2, [r2, #32]
 8007ce0:	609a      	str	r2, [r3, #8]
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	69d2      	ldr	r2, [r2, #28]
 8007cea:	605a      	str	r2, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	3318      	adds	r3, #24
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d103      	bne.n	8007d00 <xTaskIncrementTick+0x110>
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	6a1a      	ldr	r2, [r3, #32]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	605a      	str	r2, [r3, #4]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	2200      	movs	r2, #0
 8007d04:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	1e5a      	subs	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d14:	4b39      	ldr	r3, [pc, #228]	@ (8007dfc <xTaskIncrementTick+0x20c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d903      	bls.n	8007d24 <xTaskIncrementTick+0x134>
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d20:	4a36      	ldr	r2, [pc, #216]	@ (8007dfc <xTaskIncrementTick+0x20c>)
 8007d22:	6013      	str	r3, [r2, #0]
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d28:	4935      	ldr	r1, [pc, #212]	@ (8007e00 <xTaskIncrementTick+0x210>)
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	440b      	add	r3, r1
 8007d34:	3304      	adds	r3, #4
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	603b      	str	r3, [r7, #0]
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	609a      	str	r2, [r3, #8]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	60da      	str	r2, [r3, #12]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	3204      	adds	r2, #4
 8007d50:	605a      	str	r2, [r3, #4]
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	1d1a      	adds	r2, r3, #4
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	609a      	str	r2, [r3, #8]
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4a26      	ldr	r2, [pc, #152]	@ (8007e00 <xTaskIncrementTick+0x210>)
 8007d68:	441a      	add	r2, r3
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	615a      	str	r2, [r3, #20]
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d72:	4923      	ldr	r1, [pc, #140]	@ (8007e00 <xTaskIncrementTick+0x210>)
 8007d74:	4613      	mov	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	440b      	add	r3, r1
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	1c59      	adds	r1, r3, #1
 8007d82:	481f      	ldr	r0, [pc, #124]	@ (8007e00 <xTaskIncrementTick+0x210>)
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4403      	add	r3, r0
 8007d8e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d94:	4b1b      	ldr	r3, [pc, #108]	@ (8007e04 <xTaskIncrementTick+0x214>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	f67f af5c 	bls.w	8007c58 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 8007da0:	2301      	movs	r3, #1
 8007da2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007da4:	e758      	b.n	8007c58 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007da6:	4b17      	ldr	r3, [pc, #92]	@ (8007e04 <xTaskIncrementTick+0x214>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dac:	4914      	ldr	r1, [pc, #80]	@ (8007e00 <xTaskIncrementTick+0x210>)
 8007dae:	4613      	mov	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	440b      	add	r3, r1
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d901      	bls.n	8007dc2 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8007dc2:	4b11      	ldr	r3, [pc, #68]	@ (8007e08 <xTaskIncrementTick+0x218>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d007      	beq.n	8007dda <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	61fb      	str	r3, [r7, #28]
 8007dce:	e004      	b.n	8007dda <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8007e0c <xTaskIncrementTick+0x21c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8007e0c <xTaskIncrementTick+0x21c>)
 8007dd8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8007dda:	69fb      	ldr	r3, [r7, #28]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3720      	adds	r7, #32
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	20000d5c 	.word	0x20000d5c
 8007de8:	20000d38 	.word	0x20000d38
 8007dec:	20000cec 	.word	0x20000cec
 8007df0:	20000cf0 	.word	0x20000cf0
 8007df4:	20000d4c 	.word	0x20000d4c
 8007df8:	20000d54 	.word	0x20000d54
 8007dfc:	20000d3c 	.word	0x20000d3c
 8007e00:	20000864 	.word	0x20000864
 8007e04:	20000860 	.word	0x20000860
 8007e08:	20000d48 	.word	0x20000d48
 8007e0c:	20000d44 	.word	0x20000d44

08007e10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8007e16:	4b23      	ldr	r3, [pc, #140]	@ (8007ea4 <vTaskSwitchContext+0x94>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007e1e:	4b22      	ldr	r3, [pc, #136]	@ (8007ea8 <vTaskSwitchContext+0x98>)
 8007e20:	2201      	movs	r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007e24:	e039      	b.n	8007e9a <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8007e26:	4b20      	ldr	r3, [pc, #128]	@ (8007ea8 <vTaskSwitchContext+0x98>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8007eac <vTaskSwitchContext+0x9c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	607b      	str	r3, [r7, #4]
 8007e32:	e009      	b.n	8007e48 <vTaskSwitchContext+0x38>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d103      	bne.n	8007e42 <vTaskSwitchContext+0x32>
 8007e3a:	f000 ffbd 	bl	8008db8 <ulSetInterruptMask>
 8007e3e:	bf00      	nop
 8007e40:	e7fd      	b.n	8007e3e <vTaskSwitchContext+0x2e>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	607b      	str	r3, [r7, #4]
 8007e48:	4919      	ldr	r1, [pc, #100]	@ (8007eb0 <vTaskSwitchContext+0xa0>)
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	440b      	add	r3, r1
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0eb      	beq.n	8007e34 <vTaskSwitchContext+0x24>
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4a12      	ldr	r2, [pc, #72]	@ (8007eb0 <vTaskSwitchContext+0xa0>)
 8007e68:	4413      	add	r3, r2
 8007e6a:	603b      	str	r3, [r7, #0]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	605a      	str	r2, [r3, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d103      	bne.n	8007e8a <vTaskSwitchContext+0x7a>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	605a      	str	r2, [r3, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	4a08      	ldr	r2, [pc, #32]	@ (8007eb4 <vTaskSwitchContext+0xa4>)
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	4a05      	ldr	r2, [pc, #20]	@ (8007eac <vTaskSwitchContext+0x9c>)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6013      	str	r3, [r2, #0]
}
 8007e9a:	bf00      	nop
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20000d5c 	.word	0x20000d5c
 8007ea8:	20000d48 	.word	0x20000d48
 8007eac:	20000d3c 	.word	0x20000d3c
 8007eb0:	20000864 	.word	0x20000864
 8007eb4:	20000860 	.word	0x20000860

08007eb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d103      	bne.n	8007ed0 <vTaskPlaceOnEventList+0x18>
 8007ec8:	f000 ff76 	bl	8008db8 <ulSetInterruptMask>
 8007ecc:	bf00      	nop
 8007ece:	e7fd      	b.n	8007ecc <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ed0:	4b07      	ldr	r3, [pc, #28]	@ (8007ef0 <vTaskPlaceOnEventList+0x38>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3318      	adds	r3, #24
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff f844 	bl	8006f66 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ede:	2101      	movs	r1, #1
 8007ee0:	6838      	ldr	r0, [r7, #0]
 8007ee2:	f000 fa6d 	bl	80083c0 <prvAddCurrentTaskToDelayedList>
}
 8007ee6:	bf00      	nop
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000860 	.word	0x20000860

08007ef4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d103      	bne.n	8007f0e <vTaskPlaceOnEventListRestricted+0x1a>
 8007f06:	f000 ff57 	bl	8008db8 <ulSetInterruptMask>
 8007f0a:	bf00      	nop
 8007f0c:	e7fd      	b.n	8007f0a <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	617b      	str	r3, [r7, #20]
 8007f14:	4b15      	ldr	r3, [pc, #84]	@ (8007f6c <vTaskPlaceOnEventListRestricted+0x78>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	61da      	str	r2, [r3, #28]
 8007f1c:	4b13      	ldr	r3, [pc, #76]	@ (8007f6c <vTaskPlaceOnEventListRestricted+0x78>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	6892      	ldr	r2, [r2, #8]
 8007f24:	621a      	str	r2, [r3, #32]
 8007f26:	4b11      	ldr	r3, [pc, #68]	@ (8007f6c <vTaskPlaceOnEventListRestricted+0x78>)
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	3218      	adds	r2, #24
 8007f30:	605a      	str	r2, [r3, #4]
 8007f32:	4b0e      	ldr	r3, [pc, #56]	@ (8007f6c <vTaskPlaceOnEventListRestricted+0x78>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f103 0218 	add.w	r2, r3, #24
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	609a      	str	r2, [r3, #8]
 8007f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f6c <vTaskPlaceOnEventListRestricted+0x78>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	1c5a      	adds	r2, r3, #1
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 8007f56:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	68b8      	ldr	r0, [r7, #8]
 8007f60:	f000 fa2e 	bl	80083c0 <prvAddCurrentTaskToDelayedList>
    }
 8007f64:	bf00      	nop
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	20000860 	.word	0x20000860

08007f70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d103      	bne.n	8007f8e <xTaskRemoveFromEventList+0x1e>
 8007f86:	f000 ff17 	bl	8008db8 <ulSetInterruptMask>
 8007f8a:	bf00      	nop
 8007f8c:	e7fd      	b.n	8007f8a <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f92:	617b      	str	r3, [r7, #20]
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	6a12      	ldr	r2, [r2, #32]
 8007f9c:	609a      	str	r2, [r3, #8]
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	69d2      	ldr	r2, [r2, #28]
 8007fa6:	605a      	str	r2, [r3, #4]
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	3318      	adds	r3, #24
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d103      	bne.n	8007fbc <xTaskRemoveFromEventList+0x4c>
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	6a1a      	ldr	r2, [r3, #32]
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	605a      	str	r2, [r3, #4]
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	1e5a      	subs	r2, r3, #1
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007fcc:	4b49      	ldr	r3, [pc, #292]	@ (80080f4 <xTaskRemoveFromEventList+0x184>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d15f      	bne.n	8008094 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	60fb      	str	r3, [r7, #12]
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	68d2      	ldr	r2, [r2, #12]
 8007fe2:	609a      	str	r2, [r3, #8]
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	6892      	ldr	r2, [r2, #8]
 8007fec:	605a      	str	r2, [r3, #4]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d103      	bne.n	8008002 <xTaskRemoveFromEventList+0x92>
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	605a      	str	r2, [r3, #4]
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	2200      	movs	r2, #0
 8008006:	615a      	str	r2, [r3, #20]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	1e5a      	subs	r2, r3, #1
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008016:	4b38      	ldr	r3, [pc, #224]	@ (80080f8 <xTaskRemoveFromEventList+0x188>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d903      	bls.n	8008026 <xTaskRemoveFromEventList+0xb6>
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008022:	4a35      	ldr	r2, [pc, #212]	@ (80080f8 <xTaskRemoveFromEventList+0x188>)
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800802a:	4934      	ldr	r1, [pc, #208]	@ (80080fc <xTaskRemoveFromEventList+0x18c>)
 800802c:	4613      	mov	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	440b      	add	r3, r1
 8008036:	3304      	adds	r3, #4
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	60bb      	str	r3, [r7, #8]
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	609a      	str	r2, [r3, #8]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	689a      	ldr	r2, [r3, #8]
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	60da      	str	r2, [r3, #12]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	69ba      	ldr	r2, [r7, #24]
 8008050:	3204      	adds	r2, #4
 8008052:	605a      	str	r2, [r3, #4]
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	1d1a      	adds	r2, r3, #4
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	609a      	str	r2, [r3, #8]
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008060:	4613      	mov	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4a24      	ldr	r2, [pc, #144]	@ (80080fc <xTaskRemoveFromEventList+0x18c>)
 800806a:	441a      	add	r2, r3
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	615a      	str	r2, [r3, #20]
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008074:	4921      	ldr	r1, [pc, #132]	@ (80080fc <xTaskRemoveFromEventList+0x18c>)
 8008076:	4613      	mov	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	440b      	add	r3, r1
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	1c59      	adds	r1, r3, #1
 8008084:	481d      	ldr	r0, [pc, #116]	@ (80080fc <xTaskRemoveFromEventList+0x18c>)
 8008086:	4613      	mov	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4403      	add	r3, r0
 8008090:	6019      	str	r1, [r3, #0]
 8008092:	e01b      	b.n	80080cc <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008094:	4b1a      	ldr	r3, [pc, #104]	@ (8008100 <xTaskRemoveFromEventList+0x190>)
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	613b      	str	r3, [r7, #16]
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	61da      	str	r2, [r3, #28]
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	621a      	str	r2, [r3, #32]
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	3218      	adds	r2, #24
 80080b0:	605a      	str	r2, [r3, #4]
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	f103 0218 	add.w	r2, r3, #24
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	609a      	str	r2, [r3, #8]
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	4a10      	ldr	r2, [pc, #64]	@ (8008100 <xTaskRemoveFromEventList+0x190>)
 80080c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80080c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008100 <xTaskRemoveFromEventList+0x190>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3301      	adds	r3, #1
 80080c8:	4a0d      	ldr	r2, [pc, #52]	@ (8008100 <xTaskRemoveFromEventList+0x190>)
 80080ca:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008104 <xTaskRemoveFromEventList+0x194>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d905      	bls.n	80080e6 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80080da:	2301      	movs	r3, #1
 80080dc:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80080de:	4b0a      	ldr	r3, [pc, #40]	@ (8008108 <xTaskRemoveFromEventList+0x198>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	e001      	b.n	80080ea <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80080ea:	69fb      	ldr	r3, [r7, #28]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3720      	adds	r7, #32
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	20000d5c 	.word	0x20000d5c
 80080f8:	20000d3c 	.word	0x20000d3c
 80080fc:	20000864 	.word	0x20000864
 8008100:	20000cf4 	.word	0x20000cf4
 8008104:	20000860 	.word	0x20000860
 8008108:	20000d48 	.word	0x20000d48

0800810c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008114:	4b06      	ldr	r3, [pc, #24]	@ (8008130 <vTaskInternalSetTimeOutState+0x24>)
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800811c:	4b05      	ldr	r3, [pc, #20]	@ (8008134 <vTaskInternalSetTimeOutState+0x28>)
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	605a      	str	r2, [r3, #4]
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	20000d4c 	.word	0x20000d4c
 8008134:	20000d38 	.word	0x20000d38

08008138 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d103      	bne.n	8008150 <xTaskCheckForTimeOut+0x18>
 8008148:	f000 fe36 	bl	8008db8 <ulSetInterruptMask>
 800814c:	bf00      	nop
 800814e:	e7fd      	b.n	800814c <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d103      	bne.n	800815e <xTaskCheckForTimeOut+0x26>
 8008156:	f000 fe2f 	bl	8008db8 <ulSetInterruptMask>
 800815a:	bf00      	nop
 800815c:	e7fd      	b.n	800815a <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800815e:	f000 fc95 	bl	8008a8c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8008162:	4b1f      	ldr	r3, [pc, #124]	@ (80081e0 <xTaskCheckForTimeOut+0xa8>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817a:	d102      	bne.n	8008182 <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800817c:	2300      	movs	r3, #0
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	e026      	b.n	80081d0 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	4b17      	ldr	r3, [pc, #92]	@ (80081e4 <xTaskCheckForTimeOut+0xac>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d00a      	beq.n	80081a4 <xTaskCheckForTimeOut+0x6c>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	429a      	cmp	r2, r3
 8008196:	d305      	bcc.n	80081a4 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008198:	2301      	movs	r3, #1
 800819a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	e015      	b.n	80081d0 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d20b      	bcs.n	80081c6 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	1ad2      	subs	r2, r2, r3
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7ff ffa6 	bl	800810c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80081c0:	2300      	movs	r3, #0
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	e004      	b.n	80081d0 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80081cc:	2301      	movs	r3, #1
 80081ce:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80081d0:	f000 fc6e 	bl	8008ab0 <vPortExitCritical>

    return xReturn;
 80081d4:	697b      	ldr	r3, [r7, #20]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	20000d38 	.word	0x20000d38
 80081e4:	20000d4c 	.word	0x20000d4c

080081e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80081e8:	b480      	push	{r7}
 80081ea:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80081ec:	4b03      	ldr	r3, [pc, #12]	@ (80081fc <vTaskMissedYield+0x14>)
 80081ee:	2201      	movs	r2, #1
 80081f0:	601a      	str	r2, [r3, #0]
}
 80081f2:	bf00      	nop
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	20000d48 	.word	0x20000d48

08008200 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8008208:	f000 f84a 	bl	80082a0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800820c:	4b03      	ldr	r3, [pc, #12]	@ (800821c <prvIdleTask+0x1c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d9f9      	bls.n	8008208 <prvIdleTask+0x8>
            {
                taskYIELD();
 8008214:	f000 fc28 	bl	8008a68 <vPortYield>
        prvCheckTasksWaitingTermination();
 8008218:	e7f6      	b.n	8008208 <prvIdleTask+0x8>
 800821a:	bf00      	nop
 800821c:	20000864 	.word	0x20000864

08008220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008226:	2300      	movs	r3, #0
 8008228:	607b      	str	r3, [r7, #4]
 800822a:	e00c      	b.n	8008246 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4a12      	ldr	r2, [pc, #72]	@ (8008280 <prvInitialiseTaskLists+0x60>)
 8008238:	4413      	add	r3, r2
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe fe66 	bl	8006f0c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3301      	adds	r3, #1
 8008244:	607b      	str	r3, [r7, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b37      	cmp	r3, #55	@ 0x37
 800824a:	d9ef      	bls.n	800822c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800824c:	480d      	ldr	r0, [pc, #52]	@ (8008284 <prvInitialiseTaskLists+0x64>)
 800824e:	f7fe fe5d 	bl	8006f0c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8008252:	480d      	ldr	r0, [pc, #52]	@ (8008288 <prvInitialiseTaskLists+0x68>)
 8008254:	f7fe fe5a 	bl	8006f0c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008258:	480c      	ldr	r0, [pc, #48]	@ (800828c <prvInitialiseTaskLists+0x6c>)
 800825a:	f7fe fe57 	bl	8006f0c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800825e:	480c      	ldr	r0, [pc, #48]	@ (8008290 <prvInitialiseTaskLists+0x70>)
 8008260:	f7fe fe54 	bl	8006f0c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8008264:	480b      	ldr	r0, [pc, #44]	@ (8008294 <prvInitialiseTaskLists+0x74>)
 8008266:	f7fe fe51 	bl	8006f0c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800826a:	4b0b      	ldr	r3, [pc, #44]	@ (8008298 <prvInitialiseTaskLists+0x78>)
 800826c:	4a05      	ldr	r2, [pc, #20]	@ (8008284 <prvInitialiseTaskLists+0x64>)
 800826e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008270:	4b0a      	ldr	r3, [pc, #40]	@ (800829c <prvInitialiseTaskLists+0x7c>)
 8008272:	4a05      	ldr	r2, [pc, #20]	@ (8008288 <prvInitialiseTaskLists+0x68>)
 8008274:	601a      	str	r2, [r3, #0]
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20000864 	.word	0x20000864
 8008284:	20000cc4 	.word	0x20000cc4
 8008288:	20000cd8 	.word	0x20000cd8
 800828c:	20000cf4 	.word	0x20000cf4
 8008290:	20000d08 	.word	0x20000d08
 8008294:	20000d20 	.word	0x20000d20
 8008298:	20000cec 	.word	0x20000cec
 800829c:	20000cf0 	.word	0x20000cf0

080082a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082a6:	e019      	b.n	80082dc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80082a8:	f000 fbf0 	bl	8008a8c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ac:	4b10      	ldr	r3, [pc, #64]	@ (80082f0 <prvCheckTasksWaitingTermination+0x50>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fe fe8d 	bl	8006fd8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80082be:	4b0d      	ldr	r3, [pc, #52]	@ (80082f4 <prvCheckTasksWaitingTermination+0x54>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	4a0b      	ldr	r2, [pc, #44]	@ (80082f4 <prvCheckTasksWaitingTermination+0x54>)
 80082c6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80082c8:	4b0b      	ldr	r3, [pc, #44]	@ (80082f8 <prvCheckTasksWaitingTermination+0x58>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	4a0a      	ldr	r2, [pc, #40]	@ (80082f8 <prvCheckTasksWaitingTermination+0x58>)
 80082d0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80082d2:	f000 fbed 	bl	8008ab0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f810 	bl	80082fc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082dc:	4b06      	ldr	r3, [pc, #24]	@ (80082f8 <prvCheckTasksWaitingTermination+0x58>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e1      	bne.n	80082a8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80082e4:	bf00      	nop
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20000d08 	.word	0x20000d08
 80082f4:	20000d34 	.word	0x20000d34
 80082f8:	20000d1c 	.word	0x20000d1c

080082fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800830a:	2b00      	cmp	r3, #0
 800830c:	d108      	bne.n	8008320 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fe6c 	bl	8008ff0 <vPortFree>
                vPortFree( pxTCB );
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fe69 	bl	8008ff0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800831e:	e011      	b.n	8008344 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008326:	2b01      	cmp	r3, #1
 8008328:	d103      	bne.n	8008332 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fe60 	bl	8008ff0 <vPortFree>
    }
 8008330:	e008      	b.n	8008344 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008338:	2b02      	cmp	r3, #2
 800833a:	d003      	beq.n	8008344 <prvDeleteTCB+0x48>
 800833c:	f000 fd3c 	bl	8008db8 <ulSetInterruptMask>
 8008340:	bf00      	nop
 8008342:	e7fd      	b.n	8008340 <prvDeleteTCB+0x44>
    }
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008350:	4b0a      	ldr	r3, [pc, #40]	@ (800837c <prvResetNextTaskUnblockTime+0x30>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d104      	bne.n	8008364 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800835a:	4b09      	ldr	r3, [pc, #36]	@ (8008380 <prvResetNextTaskUnblockTime+0x34>)
 800835c:	f04f 32ff 	mov.w	r2, #4294967295
 8008360:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008362:	e005      	b.n	8008370 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008364:	4b05      	ldr	r3, [pc, #20]	@ (800837c <prvResetNextTaskUnblockTime+0x30>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a04      	ldr	r2, [pc, #16]	@ (8008380 <prvResetNextTaskUnblockTime+0x34>)
 800836e:	6013      	str	r3, [r2, #0]
}
 8008370:	bf00      	nop
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	20000cec 	.word	0x20000cec
 8008380:	20000d54 	.word	0x20000d54

08008384 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800838a:	4b0b      	ldr	r3, [pc, #44]	@ (80083b8 <xTaskGetSchedulerState+0x34>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d102      	bne.n	8008398 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8008392:	2301      	movs	r3, #1
 8008394:	607b      	str	r3, [r7, #4]
 8008396:	e008      	b.n	80083aa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008398:	4b08      	ldr	r3, [pc, #32]	@ (80083bc <xTaskGetSchedulerState+0x38>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80083a0:	2302      	movs	r3, #2
 80083a2:	607b      	str	r3, [r7, #4]
 80083a4:	e001      	b.n	80083aa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80083a6:	2300      	movs	r3, #0
 80083a8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80083aa:	687b      	ldr	r3, [r7, #4]
    }
 80083ac:	4618      	mov	r0, r3
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	20000d40 	.word	0x20000d40
 80083bc:	20000d5c 	.word	0x20000d5c

080083c0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80083ca:	4b2e      	ldr	r3, [pc, #184]	@ (8008484 <prvAddCurrentTaskToDelayedList+0xc4>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d0:	4b2d      	ldr	r3, [pc, #180]	@ (8008488 <prvAddCurrentTaskToDelayedList+0xc8>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3304      	adds	r3, #4
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fdfe 	bl	8006fd8 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e2:	d124      	bne.n	800842e <prvAddCurrentTaskToDelayedList+0x6e>
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d021      	beq.n	800842e <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ea:	4b28      	ldr	r3, [pc, #160]	@ (800848c <prvAddCurrentTaskToDelayedList+0xcc>)
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	613b      	str	r3, [r7, #16]
 80083f0:	4b25      	ldr	r3, [pc, #148]	@ (8008488 <prvAddCurrentTaskToDelayedList+0xc8>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	609a      	str	r2, [r3, #8]
 80083f8:	4b23      	ldr	r3, [pc, #140]	@ (8008488 <prvAddCurrentTaskToDelayedList+0xc8>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	6892      	ldr	r2, [r2, #8]
 8008400:	60da      	str	r2, [r3, #12]
 8008402:	4b21      	ldr	r3, [pc, #132]	@ (8008488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	3204      	adds	r2, #4
 800840c:	605a      	str	r2, [r3, #4]
 800840e:	4b1e      	ldr	r3, [pc, #120]	@ (8008488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	1d1a      	adds	r2, r3, #4
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	609a      	str	r2, [r3, #8]
 8008418:	4b1b      	ldr	r3, [pc, #108]	@ (8008488 <prvAddCurrentTaskToDelayedList+0xc8>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a1b      	ldr	r2, [pc, #108]	@ (800848c <prvAddCurrentTaskToDelayedList+0xcc>)
 800841e:	615a      	str	r2, [r3, #20]
 8008420:	4b1a      	ldr	r3, [pc, #104]	@ (800848c <prvAddCurrentTaskToDelayedList+0xcc>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3301      	adds	r3, #1
 8008426:	4a19      	ldr	r2, [pc, #100]	@ (800848c <prvAddCurrentTaskToDelayedList+0xcc>)
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800842c:	e026      	b.n	800847c <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4413      	add	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008436:	4b14      	ldr	r3, [pc, #80]	@ (8008488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	429a      	cmp	r2, r3
 8008444:	d209      	bcs.n	800845a <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008446:	4b12      	ldr	r3, [pc, #72]	@ (8008490 <prvAddCurrentTaskToDelayedList+0xd0>)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	4b0f      	ldr	r3, [pc, #60]	@ (8008488 <prvAddCurrentTaskToDelayedList+0xc8>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3304      	adds	r3, #4
 8008450:	4619      	mov	r1, r3
 8008452:	4610      	mov	r0, r2
 8008454:	f7fe fd87 	bl	8006f66 <vListInsert>
}
 8008458:	e010      	b.n	800847c <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800845a:	4b0e      	ldr	r3, [pc, #56]	@ (8008494 <prvAddCurrentTaskToDelayedList+0xd4>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	4b0a      	ldr	r3, [pc, #40]	@ (8008488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3304      	adds	r3, #4
 8008464:	4619      	mov	r1, r3
 8008466:	4610      	mov	r0, r2
 8008468:	f7fe fd7d 	bl	8006f66 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800846c:	4b0a      	ldr	r3, [pc, #40]	@ (8008498 <prvAddCurrentTaskToDelayedList+0xd8>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	429a      	cmp	r2, r3
 8008474:	d202      	bcs.n	800847c <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8008476:	4a08      	ldr	r2, [pc, #32]	@ (8008498 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6013      	str	r3, [r2, #0]
}
 800847c:	bf00      	nop
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20000d38 	.word	0x20000d38
 8008488:	20000860 	.word	0x20000860
 800848c:	20000d20 	.word	0x20000d20
 8008490:	20000cf0 	.word	0x20000cf0
 8008494:	20000cec 	.word	0x20000cec
 8008498:	20000d54 	.word	0x20000d54

0800849c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80084a2:	2300      	movs	r3, #0
 80084a4:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80084a6:	f000 fa5f 	bl	8008968 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80084aa:	4b18      	ldr	r3, [pc, #96]	@ (800850c <xTimerCreateTimerTask+0x70>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d020      	beq.n	80084f4 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084ba:	463a      	mov	r2, r7
 80084bc:	1d39      	adds	r1, r7, #4
 80084be:	f107 0308 	add.w	r3, r7, #8
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe fd08 	bl	8006ed8 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	9202      	str	r2, [sp, #8]
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	2302      	movs	r3, #2
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	2300      	movs	r3, #0
 80084d8:	460a      	mov	r2, r1
 80084da:	490d      	ldr	r1, [pc, #52]	@ (8008510 <xTimerCreateTimerTask+0x74>)
 80084dc:	480d      	ldr	r0, [pc, #52]	@ (8008514 <xTimerCreateTimerTask+0x78>)
 80084de:	f7ff f84f 	bl	8007580 <xTaskCreateStatic>
 80084e2:	4603      	mov	r3, r0
 80084e4:	4a0c      	ldr	r2, [pc, #48]	@ (8008518 <xTimerCreateTimerTask+0x7c>)
 80084e6:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 80084e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008518 <xTimerCreateTimerTask+0x7c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 80084f0:	2301      	movs	r3, #1
 80084f2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d103      	bne.n	8008502 <xTimerCreateTimerTask+0x66>
 80084fa:	f000 fc5d 	bl	8008db8 <ulSetInterruptMask>
 80084fe:	bf00      	nop
 8008500:	e7fd      	b.n	80084fe <xTimerCreateTimerTask+0x62>
        return xReturn;
 8008502:	68fb      	ldr	r3, [r7, #12]
    }
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20000d90 	.word	0x20000d90
 8008510:	0800ad0c 	.word	0x0800ad0c
 8008514:	080085c1 	.word	0x080085c1
 8008518:	20000d94 	.word	0x20000d94

0800851c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8008528:	e008      	b.n	800853c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	4413      	add	r3, r2
 8008532:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	699a      	ldr	r2, [r3, #24]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	18d1      	adds	r1, r2, r3
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f000 f8d7 	bl	80086fc <prvInsertTimerInActiveList>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1ea      	bne.n	800852a <prvReloadTimer+0xe>
        }
    }
 8008554:	bf00      	nop
 8008556:	bf00      	nop
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800856a:	4b14      	ldr	r3, [pc, #80]	@ (80085bc <prvProcessExpiredTimer+0x5c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3304      	adds	r3, #4
 8008578:	4618      	mov	r0, r3
 800857a:	f7fe fd2d 	bl	8006fd8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	d005      	beq.n	8008598 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f7ff ffc3 	bl	800851c <prvReloadTimer>
 8008596:	e008      	b.n	80085aa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800859e:	f023 0301 	bic.w	r3, r3, #1
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	4798      	blx	r3
    }
 80085b2:	bf00      	nop
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20000d88 	.word	0x20000d88

080085c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085c8:	f107 0308 	add.w	r3, r7, #8
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 f851 	bl	8008674 <prvGetNextExpireTime>
 80085d2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	4619      	mov	r1, r3
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 f805 	bl	80085e8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80085de:	f000 f8cf 	bl	8008780 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085e2:	bf00      	nop
 80085e4:	e7f0      	b.n	80085c8 <prvTimerTask+0x8>
	...

080085e8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80085f2:	f7ff f9f1 	bl	80079d8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085f6:	f107 0308 	add.w	r3, r7, #8
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 f85e 	bl	80086bc <prvSampleTimeNow>
 8008600:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d12a      	bne.n	800865e <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10a      	bne.n	8008624 <prvProcessTimerOrBlockTask+0x3c>
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	429a      	cmp	r2, r3
 8008614:	d806      	bhi.n	8008624 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8008616:	f7ff f9ed 	bl	80079f4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800861a:	68f9      	ldr	r1, [r7, #12]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff ff9f 	bl	8008560 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8008622:	e01e      	b.n	8008662 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d008      	beq.n	800863c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800862a:	4b10      	ldr	r3, [pc, #64]	@ (800866c <prvProcessTimerOrBlockTask+0x84>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <prvProcessTimerOrBlockTask+0x50>
 8008634:	2301      	movs	r3, #1
 8008636:	e000      	b.n	800863a <prvProcessTimerOrBlockTask+0x52>
 8008638:	2300      	movs	r3, #0
 800863a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800863c:	4b0c      	ldr	r3, [pc, #48]	@ (8008670 <prvProcessTimerOrBlockTask+0x88>)
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	4619      	mov	r1, r3
 800864a:	f7fe ff65 	bl	8007518 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800864e:	f7ff f9d1 	bl	80079f4 <xTaskResumeAll>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d104      	bne.n	8008662 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 8008658:	f000 fa06 	bl	8008a68 <vPortYield>
    }
 800865c:	e001      	b.n	8008662 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800865e:	f7ff f9c9 	bl	80079f4 <xTaskResumeAll>
    }
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000d8c 	.word	0x20000d8c
 8008670:	20000d90 	.word	0x20000d90

08008674 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800867c:	4b0e      	ldr	r3, [pc, #56]	@ (80086b8 <prvGetNextExpireTime+0x44>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <prvGetNextExpireTime+0x16>
 8008686:	2201      	movs	r2, #1
 8008688:	e000      	b.n	800868c <prvGetNextExpireTime+0x18>
 800868a:	2200      	movs	r2, #0
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d105      	bne.n	80086a4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008698:	4b07      	ldr	r3, [pc, #28]	@ (80086b8 <prvGetNextExpireTime+0x44>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	e001      	b.n	80086a8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80086a8:	68fb      	ldr	r3, [r7, #12]
    }
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	20000d88 	.word	0x20000d88

080086bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80086c4:	f7ff fa84 	bl	8007bd0 <xTaskGetTickCount>
 80086c8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80086ca:	4b0b      	ldr	r3, [pc, #44]	@ (80086f8 <prvSampleTimeNow+0x3c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d205      	bcs.n	80086e0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80086d4:	f000 f922 	bl	800891c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	e002      	b.n	80086e6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80086e6:	4a04      	ldr	r2, [pc, #16]	@ (80086f8 <prvSampleTimeNow+0x3c>)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80086ec:	68fb      	ldr	r3, [r7, #12]
    }
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20000d98 	.word	0x20000d98

080086fc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
 8008708:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800870a:	2300      	movs	r3, #0
 800870c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	429a      	cmp	r2, r3
 8008720:	d812      	bhi.n	8008748 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	1ad2      	subs	r2, r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	429a      	cmp	r2, r3
 800872e:	d302      	bcc.n	8008736 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008730:	2301      	movs	r3, #1
 8008732:	617b      	str	r3, [r7, #20]
 8008734:	e01b      	b.n	800876e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008736:	4b10      	ldr	r3, [pc, #64]	@ (8008778 <prvInsertTimerInActiveList+0x7c>)
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3304      	adds	r3, #4
 800873e:	4619      	mov	r1, r3
 8008740:	4610      	mov	r0, r2
 8008742:	f7fe fc10 	bl	8006f66 <vListInsert>
 8008746:	e012      	b.n	800876e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	429a      	cmp	r2, r3
 800874e:	d206      	bcs.n	800875e <prvInsertTimerInActiveList+0x62>
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	429a      	cmp	r2, r3
 8008756:	d302      	bcc.n	800875e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008758:	2301      	movs	r3, #1
 800875a:	617b      	str	r3, [r7, #20]
 800875c:	e007      	b.n	800876e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800875e:	4b07      	ldr	r3, [pc, #28]	@ (800877c <prvInsertTimerInActiveList+0x80>)
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3304      	adds	r3, #4
 8008766:	4619      	mov	r1, r3
 8008768:	4610      	mov	r0, r2
 800876a:	f7fe fbfc 	bl	8006f66 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800876e:	697b      	ldr	r3, [r7, #20]
    }
 8008770:	4618      	mov	r0, r3
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	20000d8c 	.word	0x20000d8c
 800877c:	20000d88 	.word	0x20000d88

08008780 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008780:	b580      	push	{r7, lr}
 8008782:	b088      	sub	sp, #32
 8008784:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008786:	e0b7      	b.n	80088f8 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	da11      	bge.n	80087b2 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800878e:	1d3b      	adds	r3, r7, #4
 8008790:	3304      	adds	r3, #4
 8008792:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d103      	bne.n	80087a2 <prvProcessReceivedCommands+0x22>
 800879a:	f000 fb0d 	bl	8008db8 <ulSetInterruptMask>
 800879e:	bf00      	nop
 80087a0:	e7fd      	b.n	800879e <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	6850      	ldr	r0, [r2, #4]
 80087aa:	69fa      	ldr	r2, [r7, #28]
 80087ac:	6892      	ldr	r2, [r2, #8]
 80087ae:	4611      	mov	r1, r2
 80087b0:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f2c0 809f 	blt.w	80088f8 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d004      	beq.n	80087d0 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	3304      	adds	r3, #4
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe fc04 	bl	8006fd8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087d0:	463b      	mov	r3, r7
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff ff72 	bl	80086bc <prvSampleTimeNow>
 80087d8:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	3b01      	subs	r3, #1
 80087de:	2b08      	cmp	r3, #8
 80087e0:	f200 8087 	bhi.w	80088f2 <prvProcessReceivedCommands+0x172>
 80087e4:	a201      	add	r2, pc, #4	@ (adr r2, 80087ec <prvProcessReceivedCommands+0x6c>)
 80087e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ea:	bf00      	nop
 80087ec:	08008811 	.word	0x08008811
 80087f0:	08008811 	.word	0x08008811
 80087f4:	08008879 	.word	0x08008879
 80087f8:	0800888d 	.word	0x0800888d
 80087fc:	080088c9 	.word	0x080088c9
 8008800:	08008811 	.word	0x08008811
 8008804:	08008811 	.word	0x08008811
 8008808:	08008879 	.word	0x08008879
 800880c:	0800888d 	.word	0x0800888d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008816:	f043 0301 	orr.w	r3, r3, #1
 800881a:	b2da      	uxtb	r2, r3
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	18d1      	adds	r1, r2, r3
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	69b8      	ldr	r0, [r7, #24]
 8008830:	f7ff ff64 	bl	80086fc <prvInsertTimerInActiveList>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d05d      	beq.n	80088f6 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d009      	beq.n	800885c <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	4413      	add	r3, r2
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	4619      	mov	r1, r3
 8008854:	69b8      	ldr	r0, [r7, #24]
 8008856:	f7ff fe61 	bl	800851c <prvReloadTimer>
 800885a:	e008      	b.n	800886e <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008862:	f023 0301 	bic.w	r3, r3, #1
 8008866:	b2da      	uxtb	r2, r3
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	69b8      	ldr	r0, [r7, #24]
 8008874:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8008876:	e03e      	b.n	80088f6 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800887e:	f023 0301 	bic.w	r3, r3, #1
 8008882:	b2da      	uxtb	r2, r3
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800888a:	e035      	b.n	80088f8 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008892:	f043 0301 	orr.w	r3, r3, #1
 8008896:	b2da      	uxtb	r2, r3
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d103      	bne.n	80088b4 <prvProcessReceivedCommands+0x134>
 80088ac:	f000 fa84 	bl	8008db8 <ulSetInterruptMask>
 80088b0:	bf00      	nop
 80088b2:	e7fd      	b.n	80088b0 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	699a      	ldr	r2, [r3, #24]
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	18d1      	adds	r1, r2, r3
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	69b8      	ldr	r0, [r7, #24]
 80088c2:	f7ff ff1b 	bl	80086fc <prvInsertTimerInActiveList>
                        break;
 80088c6:	e017      	b.n	80088f8 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d103      	bne.n	80088de <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 80088d6:	69b8      	ldr	r0, [r7, #24]
 80088d8:	f000 fb8a 	bl	8008ff0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80088dc:	e00c      	b.n	80088f8 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088e4:	f023 0301 	bic.w	r3, r3, #1
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80088f0:	e002      	b.n	80088f8 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 80088f2:	bf00      	nop
 80088f4:	e000      	b.n	80088f8 <prvProcessReceivedCommands+0x178>
                        break;
 80088f6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088f8:	4b07      	ldr	r3, [pc, #28]	@ (8008918 <prvProcessReceivedCommands+0x198>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	1d39      	adds	r1, r7, #4
 80088fe:	2200      	movs	r2, #0
 8008900:	4618      	mov	r0, r3
 8008902:	f7fe fc78 	bl	80071f6 <xQueueReceive>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	f47f af3d 	bne.w	8008788 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800890e:	bf00      	nop
 8008910:	bf00      	nop
 8008912:	3720      	adds	r7, #32
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	20000d90 	.word	0x20000d90

0800891c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008922:	e009      	b.n	8008938 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008924:	4b0e      	ldr	r3, [pc, #56]	@ (8008960 <prvSwitchTimerLists+0x44>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800892e:	f04f 31ff 	mov.w	r1, #4294967295
 8008932:	6838      	ldr	r0, [r7, #0]
 8008934:	f7ff fe14 	bl	8008560 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008938:	4b09      	ldr	r3, [pc, #36]	@ (8008960 <prvSwitchTimerLists+0x44>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1f0      	bne.n	8008924 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008942:	4b07      	ldr	r3, [pc, #28]	@ (8008960 <prvSwitchTimerLists+0x44>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8008948:	4b06      	ldr	r3, [pc, #24]	@ (8008964 <prvSwitchTimerLists+0x48>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a04      	ldr	r2, [pc, #16]	@ (8008960 <prvSwitchTimerLists+0x44>)
 800894e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008950:	4a04      	ldr	r2, [pc, #16]	@ (8008964 <prvSwitchTimerLists+0x48>)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6013      	str	r3, [r2, #0]
    }
 8008956:	bf00      	nop
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	20000d88 	.word	0x20000d88
 8008964:	20000d8c 	.word	0x20000d8c

08008968 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800896e:	f000 f88d 	bl	8008a8c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008972:	4b15      	ldr	r3, [pc, #84]	@ (80089c8 <prvCheckForValidListAndQueue+0x60>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d120      	bne.n	80089bc <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800897a:	4814      	ldr	r0, [pc, #80]	@ (80089cc <prvCheckForValidListAndQueue+0x64>)
 800897c:	f7fe fac6 	bl	8006f0c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008980:	4813      	ldr	r0, [pc, #76]	@ (80089d0 <prvCheckForValidListAndQueue+0x68>)
 8008982:	f7fe fac3 	bl	8006f0c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008986:	4b13      	ldr	r3, [pc, #76]	@ (80089d4 <prvCheckForValidListAndQueue+0x6c>)
 8008988:	4a10      	ldr	r2, [pc, #64]	@ (80089cc <prvCheckForValidListAndQueue+0x64>)
 800898a:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800898c:	4b12      	ldr	r3, [pc, #72]	@ (80089d8 <prvCheckForValidListAndQueue+0x70>)
 800898e:	4a10      	ldr	r2, [pc, #64]	@ (80089d0 <prvCheckForValidListAndQueue+0x68>)
 8008990:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008992:	2300      	movs	r3, #0
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	4b11      	ldr	r3, [pc, #68]	@ (80089dc <prvCheckForValidListAndQueue+0x74>)
 8008998:	4a11      	ldr	r2, [pc, #68]	@ (80089e0 <prvCheckForValidListAndQueue+0x78>)
 800899a:	2110      	movs	r1, #16
 800899c:	200a      	movs	r0, #10
 800899e:	f7fe fbbe 	bl	800711e <xQueueGenericCreateStatic>
 80089a2:	4603      	mov	r3, r0
 80089a4:	4a08      	ldr	r2, [pc, #32]	@ (80089c8 <prvCheckForValidListAndQueue+0x60>)
 80089a6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80089a8:	4b07      	ldr	r3, [pc, #28]	@ (80089c8 <prvCheckForValidListAndQueue+0x60>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80089b0:	4b05      	ldr	r3, [pc, #20]	@ (80089c8 <prvCheckForValidListAndQueue+0x60>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	490b      	ldr	r1, [pc, #44]	@ (80089e4 <prvCheckForValidListAndQueue+0x7c>)
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fe fd68 	bl	800748c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80089bc:	f000 f878 	bl	8008ab0 <vPortExitCritical>
    }
 80089c0:	bf00      	nop
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20000d90 	.word	0x20000d90
 80089cc:	20000d60 	.word	0x20000d60
 80089d0:	20000d74 	.word	0x20000d74
 80089d4:	20000d88 	.word	0x20000d88
 80089d8:	20000d8c 	.word	0x20000d8c
 80089dc:	20000e3c 	.word	0x20000e3c
 80089e0:	20000d9c 	.word	0x20000d9c
 80089e4:	0800ad14 	.word	0x0800ad14

080089e8 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 80089e8:	b480      	push	{r7}
 80089ea:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089ec:	4b0b      	ldr	r3, [pc, #44]	@ (8008a1c <vPortSetupTimerInterrupt+0x34>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008a20 <vPortSetupTimerInterrupt+0x38>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008a24 <vPortSetupTimerInterrupt+0x3c>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a0a      	ldr	r2, [pc, #40]	@ (8008a28 <vPortSetupTimerInterrupt+0x40>)
 80089fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008a02:	099b      	lsrs	r3, r3, #6
 8008a04:	4a09      	ldr	r2, [pc, #36]	@ (8008a2c <vPortSetupTimerInterrupt+0x44>)
 8008a06:	3b01      	subs	r3, #1
 8008a08:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8008a0a:	4b04      	ldr	r3, [pc, #16]	@ (8008a1c <vPortSetupTimerInterrupt+0x34>)
 8008a0c:	2207      	movs	r2, #7
 8008a0e:	601a      	str	r2, [r3, #0]
}
 8008a10:	bf00      	nop
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	e000e010 	.word	0xe000e010
 8008a20:	e000e018 	.word	0xe000e018
 8008a24:	20000000 	.word	0x20000000
 8008a28:	10624dd3 	.word	0x10624dd3
 8008a2c:	e000e014 	.word	0xe000e014

08008a30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a64 <prvTaskExitError+0x34>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a42:	d003      	beq.n	8008a4c <prvTaskExitError+0x1c>
 8008a44:	f000 f9b8 	bl	8008db8 <ulSetInterruptMask>
 8008a48:	bf00      	nop
 8008a4a:	e7fd      	b.n	8008a48 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 8008a4c:	f000 f9b4 	bl	8008db8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 8008a50:	bf00      	nop
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0fc      	beq.n	8008a52 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000020 	.word	0x20000020

08008a68 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8008a68:	b480      	push	{r7}
 8008a6a:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a6c:	4b06      	ldr	r3, [pc, #24]	@ (8008a88 <vPortYield+0x20>)
 8008a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a72:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8008a74:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8008a78:	f3bf 8f6f 	isb	sy
}
 8008a7c:	bf00      	nop
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	e000ed04 	.word	0xe000ed04

08008a8c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008a90:	f000 f992 	bl	8008db8 <ulSetInterruptMask>
    ulCriticalNesting++;
 8008a94:	4b05      	ldr	r3, [pc, #20]	@ (8008aac <vPortEnterCritical+0x20>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	4a04      	ldr	r2, [pc, #16]	@ (8008aac <vPortEnterCritical+0x20>)
 8008a9c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8008a9e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8008aa2:	f3bf 8f6f 	isb	sy
}
 8008aa6:	bf00      	nop
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	20000020 	.word	0x20000020

08008ab0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 8008ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae0 <vPortExitCritical+0x30>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d103      	bne.n	8008ac4 <vPortExitCritical+0x14>
 8008abc:	f000 f97c 	bl	8008db8 <ulSetInterruptMask>
 8008ac0:	bf00      	nop
 8008ac2:	e7fd      	b.n	8008ac0 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 8008ac4:	4b06      	ldr	r3, [pc, #24]	@ (8008ae0 <vPortExitCritical+0x30>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	4a05      	ldr	r2, [pc, #20]	@ (8008ae0 <vPortExitCritical+0x30>)
 8008acc:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 8008ace:	4b04      	ldr	r3, [pc, #16]	@ (8008ae0 <vPortExitCritical+0x30>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d102      	bne.n	8008adc <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	f000 f97b 	bl	8008dd2 <vClearInterruptMask>
    }
}
 8008adc:	bf00      	nop
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	20000020 	.word	0x20000020

08008ae4 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8008aea:	f000 f965 	bl	8008db8 <ulSetInterruptMask>
 8008aee:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008af0:	f7ff f87e 	bl	8007bf0 <xTaskIncrementTick>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008afa:	4b05      	ldr	r3, [pc, #20]	@ (8008b10 <xPortSysTickHandler+0x2c>)
 8008afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b00:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f965 	bl	8008dd2 <vClearInterruptMask>
}
 8008b08:	bf00      	nop
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	e000ed04 	.word	0xe000ed04

08008b14 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3b02      	subs	r3, #2
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 8008b2a:	7afb      	ldrb	r3, [r7, #11]
 8008b2c:	2b66      	cmp	r3, #102	@ 0x66
 8008b2e:	d102      	bne.n	8008b36 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 8008b30:	f000 f90e 	bl	8008d50 <vRestoreContextOfFirstTask>
            break;
 8008b34:	e003      	b.n	8008b3e <vPortSVCHandler_C+0x2a>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 8008b36:	f000 f93f 	bl	8008db8 <ulSetInterruptMask>
 8008b3a:	bf00      	nop
 8008b3c:	e7fd      	b.n	8008b3a <vPortSVCHandler_C+0x26>
    }
}
 8008b3e:	bf00      	nop
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3b04      	subs	r3, #4
 8008b5a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008b62:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3b04      	subs	r3, #4
 8008b68:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	3b04      	subs	r3, #4
 8008b74:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 8008b76:	4a38      	ldr	r2, [pc, #224]	@ (8008c58 <pxPortInitialiseStack+0x110>)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3b04      	subs	r3, #4
 8008b80:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8008b88:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3b04      	subs	r3, #4
 8008b8e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8008b96:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3b04      	subs	r3, #4
 8008b9c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8008ba4:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3b04      	subs	r3, #4
 8008baa:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8008bb2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3b04      	subs	r3, #4
 8008bb8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3b04      	subs	r3, #4
 8008bc4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8008bcc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3b04      	subs	r3, #4
 8008bd2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8008bda:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3b04      	subs	r3, #4
 8008be0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8008be8:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3b04      	subs	r3, #4
 8008bee:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8008bf6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	3b04      	subs	r3, #4
 8008bfc:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8008c04:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3b04      	subs	r3, #4
 8008c0a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8008c12:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3b04      	subs	r3, #4
 8008c18:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8008c20:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3b04      	subs	r3, #4
 8008c26:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8008c2e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	3b04      	subs	r3, #4
 8008c34:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 8008c3c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3b04      	subs	r3, #4
 8008c42:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
    }
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	08008a31 	.word	0x08008a31

08008c5c <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8008c62:	2300      	movs	r3, #0
 8008c64:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 8008c66:	4b35      	ldr	r3, [pc, #212]	@ (8008d3c <xPortStartScheduler+0xe0>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 8008c6c:	4b33      	ldr	r3, [pc, #204]	@ (8008d3c <xPortStartScheduler+0xe0>)
 8008c6e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8008c72:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 8008c74:	4b31      	ldr	r3, [pc, #196]	@ (8008d3c <xPortStartScheduler+0xe0>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	0e1b      	lsrs	r3, r3, #24
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	4b2d      	ldr	r3, [pc, #180]	@ (8008d40 <xPortStartScheduler+0xe4>)
 8008c8a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8008c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8008d40 <xPortStartScheduler+0xe4>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d103      	bne.n	8008c9c <xPortStartScheduler+0x40>
 8008c94:	f000 f890 	bl	8008db8 <ulSetInterruptMask>
 8008c98:	bf00      	nop
 8008c9a:	e7fd      	b.n	8008c98 <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8008c9c:	79fb      	ldrb	r3, [r7, #7]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	43db      	mvns	r3, r3
 8008ca2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00b      	beq.n	8008cc2 <xPortStartScheduler+0x66>
 8008caa:	f000 f885 	bl	8008db8 <ulSetInterruptMask>
 8008cae:	bf00      	nop
 8008cb0:	e7fd      	b.n	8008cae <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cc2:	79fb      	ldrb	r3, [r7, #7]
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cca:	2b80      	cmp	r3, #128	@ 0x80
 8008ccc:	d0f1      	beq.n	8008cb2 <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d103      	bne.n	8008cdc <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8008cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8008d44 <xPortStartScheduler+0xe8>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	e004      	b.n	8008ce6 <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f1c3 0307 	rsb	r3, r3, #7
 8008ce2:	4a18      	ldr	r2, [pc, #96]	@ (8008d44 <xPortStartScheduler+0xe8>)
 8008ce4:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ce6:	4b17      	ldr	r3, [pc, #92]	@ (8008d44 <xPortStartScheduler+0xe8>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	021b      	lsls	r3, r3, #8
 8008cec:	4a15      	ldr	r2, [pc, #84]	@ (8008d44 <xPortStartScheduler+0xe8>)
 8008cee:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cf0:	4b14      	ldr	r3, [pc, #80]	@ (8008d44 <xPortStartScheduler+0xe8>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008cf8:	4a12      	ldr	r2, [pc, #72]	@ (8008d44 <xPortStartScheduler+0xe8>)
 8008cfa:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 8008cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8008d3c <xPortStartScheduler+0xe0>)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008d02:	4b11      	ldr	r3, [pc, #68]	@ (8008d48 <xPortStartScheduler+0xec>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a10      	ldr	r2, [pc, #64]	@ (8008d48 <xPortStartScheduler+0xec>)
 8008d08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d0c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008d48 <xPortStartScheduler+0xec>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a0d      	ldr	r2, [pc, #52]	@ (8008d48 <xPortStartScheduler+0xec>)
 8008d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d18:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008d1a:	f7ff fe65 	bl	80089e8 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8008d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d4c <xPortStartScheduler+0xf0>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 8008d24:	f000 f834 	bl	8008d90 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008d28:	f7ff f872 	bl	8007e10 <vTaskSwitchContext>
    prvTaskExitError();
 8008d2c:	f7ff fe80 	bl	8008a30 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	e000ed1c 	.word	0xe000ed1c
 8008d40:	20000e8c 	.word	0x20000e8c
 8008d44:	20000e90 	.word	0x20000e90
 8008d48:	e000ed20 	.word	0xe000ed20
 8008d4c:	20000020 	.word	0x20000020

08008d50 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8008d50:	4a0b      	ldr	r2, [pc, #44]	@ (8008d80 <pxCurrentTCBConst2>)
 8008d52:	6811      	ldr	r1, [r2, #0]
 8008d54:	6808      	ldr	r0, [r1, #0]
 8008d56:	c806      	ldmia	r0!, {r1, r2}
 8008d58:	f381 880b 	msr	PSPLIM, r1
 8008d5c:	2102      	movs	r1, #2
 8008d5e:	f381 8814 	msr	CONTROL, r1
 8008d62:	3020      	adds	r0, #32
 8008d64:	f380 8809 	msr	PSP, r0
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f04f 0000 	mov.w	r0, #0
 8008d70:	f380 8811 	msr	BASEPRI, r0
 8008d74:	4710      	bx	r2
 8008d76:	bf00      	nop
 8008d78:	f3af 8000 	nop.w
 8008d7c:	f3af 8000 	nop.w

08008d80 <pxCurrentTCBConst2>:
 8008d80:	20000860 	.word	0x20000860
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 8008d84:	bf00      	nop
 8008d86:	bf00      	nop
	...

08008d90 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8008d90:	4807      	ldr	r0, [pc, #28]	@ (8008db0 <xVTORConst>)
 8008d92:	6800      	ldr	r0, [r0, #0]
 8008d94:	6800      	ldr	r0, [r0, #0]
 8008d96:	f380 8808 	msr	MSP, r0
 8008d9a:	b662      	cpsie	i
 8008d9c:	b661      	cpsie	f
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	df66      	svc	102	@ 0x66
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	f3af 8000 	nop.w

08008db0 <xVTORConst>:
 8008db0:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop

08008db8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8008db8:	f3ef 8011 	mrs	r0, BASEPRI
 8008dbc:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8008dc0:	f381 8811 	msr	BASEPRI, r1
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8008dce:	bf00      	nop
 8008dd0:	4618      	mov	r0, r3

08008dd2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8008dd2:	f380 8811 	msr	BASEPRI, r0
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 8008de0:	bf00      	nop
	...

08008df0 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8008df0:	f3ef 8009 	mrs	r0, PSP
 8008df4:	f3ef 820b 	mrs	r2, PSPLIM
 8008df8:	4673      	mov	r3, lr
 8008dfa:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8008dfe:	4a10      	ldr	r2, [pc, #64]	@ (8008e40 <pxCurrentTCBConst>)
 8008e00:	6811      	ldr	r1, [r2, #0]
 8008e02:	6008      	str	r0, [r1, #0]
 8008e04:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008e08:	f380 8811 	msr	BASEPRI, r0
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f7fe fffc 	bl	8007e10 <vTaskSwitchContext>
 8008e18:	f04f 0000 	mov.w	r0, #0
 8008e1c:	f380 8811 	msr	BASEPRI, r0
 8008e20:	4a07      	ldr	r2, [pc, #28]	@ (8008e40 <pxCurrentTCBConst>)
 8008e22:	6811      	ldr	r1, [r2, #0]
 8008e24:	6808      	ldr	r0, [r1, #0]
 8008e26:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8008e2a:	f382 880b 	msr	PSPLIM, r2
 8008e2e:	f380 8809 	msr	PSP, r0
 8008e32:	4718      	bx	r3
 8008e34:	f3af 8000 	nop.w
 8008e38:	f3af 8000 	nop.w
 8008e3c:	f3af 8000 	nop.w

08008e40 <pxCurrentTCBConst>:
 8008e40:	20000860 	.word	0x20000860
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop
	...

08008e50 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8008e50:	f01e 0f04 	tst.w	lr, #4
 8008e54:	bf0c      	ite	eq
 8008e56:	f3ef 8008 	mrseq	r0, MSP
 8008e5a:	f3ef 8009 	mrsne	r0, PSP
 8008e5e:	4904      	ldr	r1, [pc, #16]	@ (8008e70 <svchandler_address_const>)
 8008e60:	4708      	bx	r1
 8008e62:	bf00      	nop
 8008e64:	f3af 8000 	nop.w
 8008e68:	f3af 8000 	nop.w
 8008e6c:	f3af 8000 	nop.w

08008e70 <svchandler_address_const>:
 8008e70:	08008b15 	.word	0x08008b15
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop

08008e78 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b088      	sub	sp, #32
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008e80:	2300      	movs	r3, #0
 8008e82:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8008e84:	f7fe fda8 	bl	80079d8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008e88:	4b54      	ldr	r3, [pc, #336]	@ (8008fdc <pvPortMalloc+0x164>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008e90:	f000 f8f8 	bl	8009084 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d022      	beq.n	8008ee0 <pvPortMalloc+0x68>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8008e9a:	2308      	movs	r3, #8
 8008e9c:	43db      	mvns	r3, r3
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d81b      	bhi.n	8008edc <pvPortMalloc+0x64>
            {
                xWantedSize += xHeapStructSize;
 8008ea4:	2208      	movs	r2, #8
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f003 0307 	and.w	r3, r3, #7
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d014      	beq.n	8008ee0 <pvPortMalloc+0x68>
                {
                    /* Byte alignment required. */
                    xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f003 0307 	and.w	r3, r3, #7
 8008ebc:	f1c3 0308 	rsb	r3, r3, #8
 8008ec0:	613b      	str	r3, [r7, #16]

                    if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	43db      	mvns	r3, r3
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d804      	bhi.n	8008ed6 <pvPortMalloc+0x5e>
                    {
                        xWantedSize += xAdditionalRequiredSize;
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	607b      	str	r3, [r7, #4]
 8008ed4:	e004      	b.n	8008ee0 <pvPortMalloc+0x68>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	607b      	str	r3, [r7, #4]
 8008eda:	e001      	b.n	8008ee0 <pvPortMalloc+0x68>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	db69      	blt.n	8008fba <pvPortMalloc+0x142>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d066      	beq.n	8008fba <pvPortMalloc+0x142>
 8008eec:	4b3c      	ldr	r3, [pc, #240]	@ (8008fe0 <pvPortMalloc+0x168>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d861      	bhi.n	8008fba <pvPortMalloc+0x142>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8008fe4 <pvPortMalloc+0x16c>)
 8008ef8:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8008efa:	4b3a      	ldr	r3, [pc, #232]	@ (8008fe4 <pvPortMalloc+0x16c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f00:	e004      	b.n	8008f0c <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d903      	bls.n	8008f1e <pvPortMalloc+0xa6>
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1f1      	bne.n	8008f02 <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8008fdc <pvPortMalloc+0x164>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	69fa      	ldr	r2, [r7, #28]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d048      	beq.n	8008fba <pvPortMalloc+0x142>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2208      	movs	r2, #8
 8008f2e:	4413      	add	r3, r2
 8008f30:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	1ad2      	subs	r2, r2, r3
 8008f42:	2308      	movs	r3, #8
 8008f44:	005b      	lsls	r3, r3, #1
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d918      	bls.n	8008f7c <pvPortMalloc+0x104>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f4a:	69fa      	ldr	r2, [r7, #28]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4413      	add	r3, r2
 8008f50:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f003 0307 	and.w	r3, r3, #7
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d003      	beq.n	8008f64 <pvPortMalloc+0xec>
 8008f5c:	f7ff ff2c 	bl	8008db8 <ulSetInterruptMask>
 8008f60:	bf00      	nop
 8008f62:	e7fd      	b.n	8008f60 <pvPortMalloc+0xe8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	1ad2      	subs	r2, r2, r3
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f000 f8e0 	bl	800913c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f7c:	4b18      	ldr	r3, [pc, #96]	@ (8008fe0 <pvPortMalloc+0x168>)
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	4a16      	ldr	r2, [pc, #88]	@ (8008fe0 <pvPortMalloc+0x168>)
 8008f88:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f8a:	4b15      	ldr	r3, [pc, #84]	@ (8008fe0 <pvPortMalloc+0x168>)
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	4b16      	ldr	r3, [pc, #88]	@ (8008fe8 <pvPortMalloc+0x170>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d203      	bcs.n	8008f9e <pvPortMalloc+0x126>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f96:	4b12      	ldr	r3, [pc, #72]	@ (8008fe0 <pvPortMalloc+0x168>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a13      	ldr	r2, [pc, #76]	@ (8008fe8 <pvPortMalloc+0x170>)
 8008f9c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8008fec <pvPortMalloc+0x174>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8008fec <pvPortMalloc+0x174>)
 8008fb8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008fba:	f7fe fd1b 	bl	80079f4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f003 0307 	and.w	r3, r3, #7
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d003      	beq.n	8008fd0 <pvPortMalloc+0x158>
 8008fc8:	f7ff fef6 	bl	8008db8 <ulSetInterruptMask>
 8008fcc:	bf00      	nop
 8008fce:	e7fd      	b.n	8008fcc <pvPortMalloc+0x154>
    return pvReturn;
 8008fd0:	697b      	ldr	r3, [r7, #20]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3720      	adds	r7, #32
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	20002e9c 	.word	0x20002e9c
 8008fe0:	20002ea0 	.word	0x20002ea0
 8008fe4:	20002e94 	.word	0x20002e94
 8008fe8:	20002ea4 	.word	0x20002ea4
 8008fec:	20002ea8 	.word	0x20002ea8

08008ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d037      	beq.n	8009072 <vPortFree+0x82>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8009002:	2308      	movs	r3, #8
 8009004:	425b      	negs	r3, r3
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	4413      	add	r3, r2
 800900a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	db03      	blt.n	8009020 <vPortFree+0x30>
 8009018:	f7ff fece 	bl	8008db8 <ulSetInterruptMask>
 800901c:	bf00      	nop
 800901e:	e7fd      	b.n	800901c <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <vPortFree+0x40>
 8009028:	f7ff fec6 	bl	8008db8 <ulSetInterruptMask>
 800902c:	bf00      	nop
 800902e:	e7fd      	b.n	800902c <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	da1c      	bge.n	8009072 <vPortFree+0x82>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d118      	bne.n	8009072 <vPortFree+0x82>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800904c:	f7fe fcc4 	bl	80079d8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	4b09      	ldr	r3, [pc, #36]	@ (800907c <vPortFree+0x8c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4413      	add	r3, r2
 800905a:	4a08      	ldr	r2, [pc, #32]	@ (800907c <vPortFree+0x8c>)
 800905c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800905e:	68b8      	ldr	r0, [r7, #8]
 8009060:	f000 f86c 	bl	800913c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8009064:	4b06      	ldr	r3, [pc, #24]	@ (8009080 <vPortFree+0x90>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3301      	adds	r3, #1
 800906a:	4a05      	ldr	r2, [pc, #20]	@ (8009080 <vPortFree+0x90>)
 800906c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800906e:	f7fe fcc1 	bl	80079f4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8009072:	bf00      	nop
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	20002ea0 	.word	0x20002ea0
 8009080:	20002eac 	.word	0x20002eac

08009084 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800908a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800908e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009090:	4b25      	ldr	r3, [pc, #148]	@ (8009128 <prvHeapInit+0xa4>)
 8009092:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00c      	beq.n	80090b8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3307      	adds	r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	4a1d      	ldr	r2, [pc, #116]	@ (8009128 <prvHeapInit+0xa4>)
 80090b4:	4413      	add	r3, r2
 80090b6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090bc:	4a1b      	ldr	r2, [pc, #108]	@ (800912c <prvHeapInit+0xa8>)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80090c2:	4b1a      	ldr	r3, [pc, #104]	@ (800912c <prvHeapInit+0xa8>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ( pucAlignedHeap + xTotalHeapSize );
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	4413      	add	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80090d0:	2208      	movs	r2, #8
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0307 	bic.w	r3, r3, #7
 80090de:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4a13      	ldr	r2, [pc, #76]	@ (8009130 <prvHeapInit+0xac>)
 80090e4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80090e6:	4b12      	ldr	r3, [pc, #72]	@ (8009130 <prvHeapInit+0xac>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80090ee:	4b10      	ldr	r3, [pc, #64]	@ (8009130 <prvHeapInit+0xac>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009104:	4b0a      	ldr	r3, [pc, #40]	@ (8009130 <prvHeapInit+0xac>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a08      	ldr	r2, [pc, #32]	@ (8009134 <prvHeapInit+0xb0>)
 8009112:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4a07      	ldr	r2, [pc, #28]	@ (8009138 <prvHeapInit+0xb4>)
 800911a:	6013      	str	r3, [r2, #0]
}
 800911c:	bf00      	nop
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	20000e94 	.word	0x20000e94
 800912c:	20002e94 	.word	0x20002e94
 8009130:	20002e9c 	.word	0x20002e9c
 8009134:	20002ea4 	.word	0x20002ea4
 8009138:	20002ea0 	.word	0x20002ea0

0800913c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009144:	4b28      	ldr	r3, [pc, #160]	@ (80091e8 <prvInsertBlockIntoFreeList+0xac>)
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	e002      	b.n	8009150 <prvInsertBlockIntoFreeList+0x14>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	429a      	cmp	r2, r3
 8009158:	d8f7      	bhi.n	800914a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	4413      	add	r3, r2
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	429a      	cmp	r2, r3
 800916a:	d108      	bne.n	800917e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	441a      	add	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	441a      	add	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	429a      	cmp	r2, r3
 8009190:	d118      	bne.n	80091c4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	4b15      	ldr	r3, [pc, #84]	@ (80091ec <prvInsertBlockIntoFreeList+0xb0>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	d00d      	beq.n	80091ba <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	441a      	add	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	e008      	b.n	80091cc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091ba:	4b0c      	ldr	r3, [pc, #48]	@ (80091ec <prvInsertBlockIntoFreeList+0xb0>)
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	e003      	b.n	80091cc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d002      	beq.n	80091da <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80091da:	bf00      	nop
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	20002e94 	.word	0x20002e94
 80091ec:	20002e9c 	.word	0x20002e9c

080091f0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7f8 fabf 	bl	800177c <HAL_Delay>
}
 80091fe:	bf00      	nop
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	4603      	mov	r3, r0
 800920e:	71fb      	strb	r3, [r7, #7]
    if (1 == u8Enable)
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d108      	bne.n	8009228 <nm_bsp_interrupt_ctrl+0x22>
    {
        HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x01, 0);
 8009216:	2200      	movs	r2, #0
 8009218:	2101      	movs	r1, #1
 800921a:	200b      	movs	r0, #11
 800921c:	f7f8 fbae 	bl	800197c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 8009220:	200b      	movs	r0, #11
 8009222:	f7f8 fbc5 	bl	80019b0 <HAL_NVIC_EnableIRQ>
    }
    else
    {
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
    }
}
 8009226:	e002      	b.n	800922e <nm_bsp_interrupt_ctrl+0x28>
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 8009228:	200b      	movs	r0, #11
 800922a:	f7f8 fbcf 	bl	80019cc <HAL_NVIC_DisableIRQ>
}
 800922e:	bf00      	nop
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	71fb      	strb	r3, [r7, #7]
    if (select)
 8009242:	79fb      	ldrb	r3, [r7, #7]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <spi_select_slave+0x1c>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 8009248:	2200      	movs	r2, #0
 800924a:	2110      	movs	r1, #16
 800924c:	4806      	ldr	r0, [pc, #24]	@ (8009268 <spi_select_slave+0x30>)
 800924e:	f7f8 fe09 	bl	8001e64 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 8009252:	e004      	b.n	800925e <spi_select_slave+0x26>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 8009254:	2201      	movs	r2, #1
 8009256:	2110      	movs	r1, #16
 8009258:	4803      	ldr	r0, [pc, #12]	@ (8009268 <spi_select_slave+0x30>)
 800925a:	f7f8 fe03 	bl	8001e64 <HAL_GPIO_WritePin>
}
 800925e:	bf00      	nop
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	42020000 	.word	0x42020000

0800926c <spi_rw>:
	return M2M_SUCCESS;
}
#else

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b088      	sub	sp, #32
 8009270:	af02      	add	r7, sp, #8
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	4613      	mov	r3, r2
 8009278:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;
   
    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 800927a:	2001      	movs	r0, #1
 800927c:	f7ff ffdc 	bl	8009238 <spi_select_slave>
    
    
    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10b      	bne.n	800929e <spi_rw+0x32>
	{
		status = HAL_SPI_TransmitReceive(&hspiWifi,spiDummyBuf,pu8Miso,u16Sz,1000);
 8009286:	88fb      	ldrh	r3, [r7, #6]
 8009288:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800928c:	9200      	str	r2, [sp, #0]
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	491a      	ldr	r1, [pc, #104]	@ (80092fc <spi_rw+0x90>)
 8009292:	481b      	ldr	r0, [pc, #108]	@ (8009300 <spi_rw+0x94>)
 8009294:	f7fc f808 	bl	80052a8 <HAL_SPI_TransmitReceive>
 8009298:	4603      	mov	r3, r0
 800929a:	75fb      	strb	r3, [r7, #23]
 800929c:	e01f      	b.n	80092de <spi_rw+0x72>
    }
    else if(pu8Miso == NULL)
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d111      	bne.n	80092c8 <spi_rw+0x5c>
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,spiDummyBuf,u16Sz,1000);
 80092a4:	88fb      	ldrh	r3, [r7, #6]
 80092a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80092aa:	9200      	str	r2, [sp, #0]
 80092ac:	4a13      	ldr	r2, [pc, #76]	@ (80092fc <spi_rw+0x90>)
 80092ae:	68f9      	ldr	r1, [r7, #12]
 80092b0:	4813      	ldr	r0, [pc, #76]	@ (8009300 <spi_rw+0x94>)
 80092b2:	f7fb fff9 	bl	80052a8 <HAL_SPI_TransmitReceive>
 80092b6:	4603      	mov	r3, r0
 80092b8:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 80092ba:	88fb      	ldrh	r3, [r7, #6]
 80092bc:	461a      	mov	r2, r3
 80092be:	2100      	movs	r1, #0
 80092c0:	480e      	ldr	r0, [pc, #56]	@ (80092fc <spi_rw+0x90>)
 80092c2:	f001 f80d 	bl	800a2e0 <memset>
 80092c6:	e00a      	b.n	80092de <spi_rw+0x72>
    }
    else
    {     
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,pu8Miso,u16Sz,1000);
 80092c8:	88fb      	ldrh	r3, [r7, #6]
 80092ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80092ce:	9200      	str	r2, [sp, #0]
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	68f9      	ldr	r1, [r7, #12]
 80092d4:	480a      	ldr	r0, [pc, #40]	@ (8009300 <spi_rw+0x94>)
 80092d6:	f7fb ffe7 	bl	80052a8 <HAL_SPI_TransmitReceive>
 80092da:	4603      	mov	r3, r0
 80092dc:	75fb      	strb	r3, [r7, #23]
    } 
    
    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 80092de:	7dfb      	ldrb	r3, [r7, #23]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <spi_rw+0x7e>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
        return status;
 80092e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092e8:	e003      	b.n	80092f2 <spi_rw+0x86>
    }
    
  	spi_select_slave(false);
 80092ea:	2000      	movs	r0, #0
 80092ec:	f7ff ffa4 	bl	8009238 <spi_select_slave>

	return M2M_SUCCESS;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20002f40 	.word	0x20002f40
 8009300:	20002eb0 	.word	0x20002eb0

08009304 <nm_spi_rw>:

/**
 * @brief  Expose nm_spi_rw to the WINC1500 driver.
 */
sint8 nm_spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	4613      	mov	r3, r2
 8009310:	80fb      	strh	r3, [r7, #6]
    return spi_rw(pu8Mosi, pu8Miso, u16Sz);
 8009312:	88fb      	ldrh	r3, [r7, #6]
 8009314:	461a      	mov	r2, r3
 8009316:	68b9      	ldr	r1, [r7, #8]
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f7ff ffa7 	bl	800926c <spi_rw>
 800931e:	4603      	mov	r3, r0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <hif_set_rx_done>:
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
static sint8 hif_set_rx_done(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800932e:	2300      	movs	r3, #0
 8009330:	71fb      	strb	r3, [r7, #7]

	gstrHifCxt.u8HifRXDone = 0;
 8009332:	4b14      	ldr	r3, [pc, #80]	@ (8009384 <hif_set_rx_done+0x5c>)
 8009334:	2200      	movs	r2, #0
 8009336:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
 8009338:	2001      	movs	r0, #1
 800933a:	f7ff ff64 	bl	8009206 <nm_bsp_interrupt_ctrl>
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
 800933e:	463b      	mov	r3, r7
 8009340:	4619      	mov	r1, r3
 8009342:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009346:	f000 f96c 	bl	8009622 <nm_read_reg_with_ret>
 800934a:	4603      	mov	r3, r0
 800934c:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800934e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10f      	bne.n	8009376 <hif_set_rx_done+0x4e>
	/* Set RX Done */
	reg |= NBIT1;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	f043 0302 	orr.w	r3, r3, #2
 800935c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	4619      	mov	r1, r3
 8009362:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009366:	f000 f96a 	bl	800963e <nm_write_reg>
 800936a:	4603      	mov	r3, r0
 800936c:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800936e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009372:	2b00      	cmp	r3, #0
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
 8009374:	e000      	b.n	8009378 <hif_set_rx_done+0x50>
	if(ret != M2M_SUCCESS)goto ERR1;
 8009376:	bf00      	nop
	return ret;
 8009378:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	2000306c 	.word	0x2000306c

08009388 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800938e:	2300      	movs	r3, #0
 8009390:	73fb      	strb	r3, [r7, #15]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 8009392:	f107 0308 	add.w	r3, r7, #8
 8009396:	4619      	mov	r1, r3
 8009398:	f241 0070 	movw	r0, #4208	@ 0x1070
 800939c:	f000 f941 	bl	8009622 <nm_read_reg_with_ret>
 80093a0:	4603      	mov	r3, r0
 80093a2:	73fb      	strb	r3, [r7, #15]
	if(M2M_SUCCESS == ret)
 80093a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f040 80e2 	bne.w	8009572 <hif_isr+0x1ea>
	{
		if(reg & 0x1)	/* New interrupt has been received */
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 80de 	beq.w	8009576 <hif_isr+0x1ee>
		{
			uint16 size;

			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	f023 0301 	bic.w	r3, r3, #1
 80093c0:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	4619      	mov	r1, r3
 80093c6:	f241 0070 	movw	r0, #4208	@ 0x1070
 80093ca:	f000 f938 	bl	800963e <nm_write_reg>
 80093ce:	4603      	mov	r3, r0
 80093d0:	73fb      	strb	r3, [r7, #15]
			if(ret != M2M_SUCCESS)goto ERR1;
 80093d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f040 80cf 	bne.w	800957a <hif_isr+0x1f2>
			gstrHifCxt.u8HifRXDone = 1;
 80093dc:	4b6c      	ldr	r3, [pc, #432]	@ (8009590 <hif_isr+0x208>)
 80093de:	2201      	movs	r2, #1
 80093e0:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	089b      	lsrs	r3, r3, #2
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093ec:	81bb      	strh	r3, [r7, #12]
			if (size > 0) {
 80093ee:	89bb      	ldrh	r3, [r7, #12]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 80bb 	beq.w	800956c <hif_isr+0x1e4>
				uint32 address = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 80093fa:	463b      	mov	r3, r7
 80093fc:	4619      	mov	r1, r3
 80093fe:	f241 0084 	movw	r0, #4228	@ 0x1084
 8009402:	f000 f90e 	bl	8009622 <nm_read_reg_with_ret>
 8009406:	4603      	mov	r3, r0
 8009408:	73fb      	strb	r3, [r7, #15]
				if(M2M_SUCCESS != ret)
 800940a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f040 80b5 	bne.w	800957e <hif_isr+0x1f6>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
					goto ERR1;
				}
				gstrHifCxt.u32RxAddr = address;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	4a5e      	ldr	r2, [pc, #376]	@ (8009590 <hif_isr+0x208>)
 8009418:	6093      	str	r3, [r2, #8]
				gstrHifCxt.u32RxSize = size;
 800941a:	89bb      	ldrh	r3, [r7, #12]
 800941c:	4a5c      	ldr	r2, [pc, #368]	@ (8009590 <hif_isr+0x208>)
 800941e:	60d3      	str	r3, [r2, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	1d39      	adds	r1, r7, #4
 8009424:	2204      	movs	r2, #4
 8009426:	4618      	mov	r0, r3
 8009428:	f000 f92a 	bl	8009680 <nm_read_block>
 800942c:	4603      	mov	r3, r0
 800942e:	73fb      	strb	r3, [r7, #15]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 8009430:	88fb      	ldrh	r3, [r7, #6]
 8009432:	b29b      	uxth	r3, r3
 8009434:	80fb      	strh	r3, [r7, #6]
				if(M2M_SUCCESS != ret)
 8009436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800943a:	2b00      	cmp	r3, #0
 800943c:	f040 80a1 	bne.w	8009582 <hif_isr+0x1fa>
				{
					M2M_ERR("(hif) address bus fail\n");
					goto ERR1;
				}
				if(strHif.u16Length != size)
 8009440:	88fb      	ldrh	r3, [r7, #6]
 8009442:	b29b      	uxth	r3, r3
 8009444:	89ba      	ldrh	r2, [r7, #12]
 8009446:	429a      	cmp	r2, r3
 8009448:	d008      	beq.n	800945c <hif_isr+0xd4>
				{
					if((size - strHif.u16Length) > 4)
 800944a:	89bb      	ldrh	r3, [r7, #12]
 800944c:	88fa      	ldrh	r2, [r7, #6]
 800944e:	b292      	uxth	r2, r2
 8009450:	1a9b      	subs	r3, r3, r2
 8009452:	2b04      	cmp	r3, #4
 8009454:	dd02      	ble.n	800945c <hif_isr+0xd4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						ret = M2M_ERR_BUS_FAIL;
 8009456:	23fa      	movs	r3, #250	@ 0xfa
 8009458:	73fb      	strb	r3, [r7, #15]
						goto ERR1;
 800945a:	e093      	b.n	8009584 <hif_isr+0x1fc>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 800945c:	793b      	ldrb	r3, [r7, #4]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b01      	cmp	r3, #1
 8009462:	d10f      	bne.n	8009484 <hif_isr+0xfc>
				{
					if(gstrHifCxt.pfWifiCb)
 8009464:	4b4a      	ldr	r3, [pc, #296]	@ (8009590 <hif_isr+0x208>)
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d072      	beq.n	8009552 <hif_isr+0x1ca>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800946c:	4b48      	ldr	r3, [pc, #288]	@ (8009590 <hif_isr+0x208>)
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	797a      	ldrb	r2, [r7, #5]
 8009472:	b2d0      	uxtb	r0, r2
 8009474:	88fa      	ldrh	r2, [r7, #6]
 8009476:	b292      	uxth	r2, r2
 8009478:	3a08      	subs	r2, #8
 800947a:	b291      	uxth	r1, r2
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	3208      	adds	r2, #8
 8009480:	4798      	blx	r3
 8009482:	e066      	b.n	8009552 <hif_isr+0x1ca>
					else
						M2M_ERR("WIFI callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 8009484:	793b      	ldrb	r3, [r7, #4]
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b02      	cmp	r3, #2
 800948a:	d10f      	bne.n	80094ac <hif_isr+0x124>
				{
					if(gstrHifCxt.pfIpCb)
 800948c:	4b40      	ldr	r3, [pc, #256]	@ (8009590 <hif_isr+0x208>)
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d05e      	beq.n	8009552 <hif_isr+0x1ca>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009494:	4b3e      	ldr	r3, [pc, #248]	@ (8009590 <hif_isr+0x208>)
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	797a      	ldrb	r2, [r7, #5]
 800949a:	b2d0      	uxtb	r0, r2
 800949c:	88fa      	ldrh	r2, [r7, #6]
 800949e:	b292      	uxth	r2, r2
 80094a0:	3a08      	subs	r2, #8
 80094a2:	b291      	uxth	r1, r2
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	3208      	adds	r2, #8
 80094a8:	4798      	blx	r3
 80094aa:	e052      	b.n	8009552 <hif_isr+0x1ca>
					else
						M2M_ERR("Socket callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 80094ac:	793b      	ldrb	r3, [r7, #4]
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b04      	cmp	r3, #4
 80094b2:	d10f      	bne.n	80094d4 <hif_isr+0x14c>
				{
					if(gstrHifCxt.pfOtaCb)
 80094b4:	4b36      	ldr	r3, [pc, #216]	@ (8009590 <hif_isr+0x208>)
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d04a      	beq.n	8009552 <hif_isr+0x1ca>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 80094bc:	4b34      	ldr	r3, [pc, #208]	@ (8009590 <hif_isr+0x208>)
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	797a      	ldrb	r2, [r7, #5]
 80094c2:	b2d0      	uxtb	r0, r2
 80094c4:	88fa      	ldrh	r2, [r7, #6]
 80094c6:	b292      	uxth	r2, r2
 80094c8:	3a08      	subs	r2, #8
 80094ca:	b291      	uxth	r1, r2
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	3208      	adds	r2, #8
 80094d0:	4798      	blx	r3
 80094d2:	e03e      	b.n	8009552 <hif_isr+0x1ca>
					else
						M2M_ERR("Ota callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 80094d4:	793b      	ldrb	r3, [r7, #4]
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2b06      	cmp	r3, #6
 80094da:	d10f      	bne.n	80094fc <hif_isr+0x174>
				{
					if(gstrHifCxt.pfCryptoCb)
 80094dc:	4b2c      	ldr	r3, [pc, #176]	@ (8009590 <hif_isr+0x208>)
 80094de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d036      	beq.n	8009552 <hif_isr+0x1ca>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 80094e4:	4b2a      	ldr	r3, [pc, #168]	@ (8009590 <hif_isr+0x208>)
 80094e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e8:	797a      	ldrb	r2, [r7, #5]
 80094ea:	b2d0      	uxtb	r0, r2
 80094ec:	88fa      	ldrh	r2, [r7, #6]
 80094ee:	b292      	uxth	r2, r2
 80094f0:	3a08      	subs	r2, #8
 80094f2:	b291      	uxth	r1, r2
 80094f4:	683a      	ldr	r2, [r7, #0]
 80094f6:	3208      	adds	r2, #8
 80094f8:	4798      	blx	r3
 80094fa:	e02a      	b.n	8009552 <hif_isr+0x1ca>
					else
						M2M_ERR("Crypto callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 80094fc:	793b      	ldrb	r3, [r7, #4]
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b07      	cmp	r3, #7
 8009502:	d10f      	bne.n	8009524 <hif_isr+0x19c>
				{
					if(gstrHifCxt.pfSigmaCb)
 8009504:	4b22      	ldr	r3, [pc, #136]	@ (8009590 <hif_isr+0x208>)
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d022      	beq.n	8009552 <hif_isr+0x1ca>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800950c:	4b20      	ldr	r3, [pc, #128]	@ (8009590 <hif_isr+0x208>)
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	797a      	ldrb	r2, [r7, #5]
 8009512:	b2d0      	uxtb	r0, r2
 8009514:	88fa      	ldrh	r2, [r7, #6]
 8009516:	b292      	uxth	r2, r2
 8009518:	3a08      	subs	r2, #8
 800951a:	b291      	uxth	r1, r2
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	3208      	adds	r2, #8
 8009520:	4798      	blx	r3
 8009522:	e016      	b.n	8009552 <hif_isr+0x1ca>
					else
						M2M_ERR("Sigma callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 8009524:	793b      	ldrb	r3, [r7, #4]
 8009526:	b2db      	uxtb	r3, r3
 8009528:	2b05      	cmp	r3, #5
 800952a:	d10f      	bne.n	800954c <hif_isr+0x1c4>
				{
				    if(gstrHifCxt.pfSslCb)
 800952c:	4b18      	ldr	r3, [pc, #96]	@ (8009590 <hif_isr+0x208>)
 800952e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00e      	beq.n	8009552 <hif_isr+0x1ca>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009534:	4b16      	ldr	r3, [pc, #88]	@ (8009590 <hif_isr+0x208>)
 8009536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009538:	797a      	ldrb	r2, [r7, #5]
 800953a:	b2d0      	uxtb	r0, r2
 800953c:	88fa      	ldrh	r2, [r7, #6]
 800953e:	b292      	uxth	r2, r2
 8009540:	3a08      	subs	r2, #8
 8009542:	b291      	uxth	r1, r2
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	3208      	adds	r2, #8
 8009548:	4798      	blx	r3
 800954a:	e002      	b.n	8009552 <hif_isr+0x1ca>
                        M2M_ERR("SSL callback is not registered\n");
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
					ret = M2M_ERR_BUS_FAIL;
 800954c:	23fa      	movs	r3, #250	@ 0xfa
 800954e:	73fb      	strb	r3, [r7, #15]
					goto ERR1;
 8009550:	e018      	b.n	8009584 <hif_isr+0x1fc>
				}
				if(gstrHifCxt.u8HifRXDone)
 8009552:	4b0f      	ldr	r3, [pc, #60]	@ (8009590 <hif_isr+0x208>)
 8009554:	789b      	ldrb	r3, [r3, #2]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	d013      	beq.n	8009584 <hif_isr+0x1fc>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
					ret = hif_set_rx_done();
 800955c:	f7ff fee4 	bl	8009328 <hif_set_rx_done>
 8009560:	4603      	mov	r3, r0
 8009562:	73fb      	strb	r3, [r7, #15]
					if(ret != M2M_SUCCESS) goto ERR1;
 8009564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009568:	2b00      	cmp	r3, #0
 800956a:	e00b      	b.n	8009584 <hif_isr+0x1fc>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
				ret = M2M_ERR_RCV;
 800956c:	23fe      	movs	r3, #254	@ 0xfe
 800956e:	73fb      	strb	r3, [r7, #15]
				goto ERR1;
 8009570:	e008      	b.n	8009584 <hif_isr+0x1fc>
		}
	}
	else
	{
		M2M_ERR("(hif) Failed to Read interrupt reg\n");
		goto ERR1;
 8009572:	bf00      	nop
 8009574:	e006      	b.n	8009584 <hif_isr+0x1fc>
			goto ERR1;
 8009576:	bf00      	nop
 8009578:	e004      	b.n	8009584 <hif_isr+0x1fc>
			if(ret != M2M_SUCCESS)goto ERR1;
 800957a:	bf00      	nop
 800957c:	e002      	b.n	8009584 <hif_isr+0x1fc>
					goto ERR1;
 800957e:	bf00      	nop
 8009580:	e000      	b.n	8009584 <hif_isr+0x1fc>
					goto ERR1;
 8009582:	bf00      	nop
	}

ERR1:
	return ret;
 8009584:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	2000306c 	.word	0x2000306c

08009594 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
 800959a:	2300      	movs	r3, #0
 800959c:	71fb      	strb	r3, [r7, #7]
	
	gstrHifCxt.u8Yield = 0;
 800959e:	4b1a      	ldr	r3, [pc, #104]	@ (8009608 <hif_handle_isr+0x74>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	711a      	strb	r2, [r3, #4]
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 80095a4:	e020      	b.n	80095e8 <hif_handle_isr+0x54>
         * during which the ISR could fire again.
         * If LEVEL interrupt is used instead of EDGE then the atomicity isn't needed since the interrupt
         * is turned off in the ISR and back on again only after the interrupt has been serviced in hif_isr(). */

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(0);
 80095a6:	2000      	movs	r0, #0
 80095a8:	f7ff fe2d 	bl	8009206 <nm_bsp_interrupt_ctrl>
#endif

		gstrHifCxt.u8Interrupt--;
 80095ac:	4b16      	ldr	r3, [pc, #88]	@ (8009608 <hif_handle_isr+0x74>)
 80095ae:	78db      	ldrb	r3, [r3, #3]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	3b01      	subs	r3, #1
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	4b14      	ldr	r3, [pc, #80]	@ (8009608 <hif_handle_isr+0x74>)
 80095b8:	70da      	strb	r2, [r3, #3]

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(1);
 80095ba:	2001      	movs	r0, #1
 80095bc:	f7ff fe23 	bl	8009206 <nm_bsp_interrupt_ctrl>
#endif

		uint8 retries = 5;
 80095c0:	2305      	movs	r3, #5
 80095c2:	71bb      	strb	r3, [r7, #6]
		while(1)
		{
			ret = hif_isr();
 80095c4:	f7ff fee0 	bl	8009388 <hif_isr>
 80095c8:	4603      	mov	r3, r0
 80095ca:	71fb      	strb	r3, [r7, #7]
			if(ret == M2M_SUCCESS) {
 80095cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d006      	beq.n	80095e2 <hif_handle_isr+0x4e>
				/*we will try forever until we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				retries--;
 80095d4:	79bb      	ldrb	r3, [r7, #6]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	71bb      	strb	r3, [r7, #6]
				if(!retries)
 80095da:	79bb      	ldrb	r3, [r7, #6]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <hif_handle_isr+0x52>
			ret = hif_isr();
 80095e0:	e7f0      	b.n	80095c4 <hif_handle_isr+0x30>
				break;
 80095e2:	bf00      	nop
 80095e4:	e000      	b.n	80095e8 <hif_handle_isr+0x54>
				{
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
					break;
 80095e6:	bf00      	nop
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 80095e8:	4b07      	ldr	r3, [pc, #28]	@ (8009608 <hif_handle_isr+0x74>)
 80095ea:	78db      	ldrb	r3, [r3, #3]
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d004      	beq.n	80095fc <hif_handle_isr+0x68>
 80095f2:	4b05      	ldr	r3, [pc, #20]	@ (8009608 <hif_handle_isr+0x74>)
 80095f4:	791b      	ldrb	r3, [r3, #4]
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d0d4      	beq.n	80095a6 <hif_handle_isr+0x12>
					M2M_ERR("(HIF) Failed to handle interrupt %d try again... (%u)\n", ret, retries);
			}
		}
	}

	return ret;
 80095fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	2000306c 	.word	0x2000306c

0800960c <m2m_wifi_handle_events>:
{
    hif_yield();
}

sint8 m2m_wifi_handle_events(void *arg)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
    return hif_handle_isr();
 8009614:	f7ff ffbe 	bl	8009594 <hif_handle_isr>
 8009618:	4603      	mov	r3, r0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b082      	sub	sp, #8
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fb03 	bl	8009c3a <nm_spi_read_reg_with_ret>
 8009634:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Please define bus usage"
#endif
}
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b082      	sub	sp, #8
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 faa6 	bl	8009b9c <nm_spi_write_reg>
 8009650:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Please define bus usage"
#endif
}
 8009652:	4618      	mov	r0, r3
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b084      	sub	sp, #16
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	60b9      	str	r1, [r7, #8]
 8009664:	4613      	mov	r3, r2
 8009666:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
 8009668:	88fb      	ldrh	r3, [r7, #6]
 800966a:	461a      	mov	r2, r3
 800966c:	68b9      	ldr	r1, [r7, #8]
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 fbbe 	bl	8009df0 <nm_spi_read_block>
 8009674:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Please define bus usage"
#endif

}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
	...

08009680 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800968c:	4b20      	ldr	r3, [pc, #128]	@ (8009710 <nm_read_block+0x90>)
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	3b08      	subs	r3, #8
 8009692:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 8009694:	2300      	movs	r3, #0
 8009696:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 8009698:	2300      	movs	r3, #0
 800969a:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800969c:	8a3b      	ldrh	r3, [r7, #16]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d80f      	bhi.n	80096c4 <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	4413      	add	r3, r2
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	b292      	uxth	r2, r2
 80096ae:	4619      	mov	r1, r3
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f7ff ffd2 	bl	800965a <p_nm_read_block>
 80096b6:	4603      	mov	r3, r0
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	7cfb      	ldrb	r3, [r7, #19]
 80096bc:	4413      	add	r3, r2
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	74fb      	strb	r3, [r7, #19]
			break;
 80096c2:	e01f      	b.n	8009704 <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	4413      	add	r3, r2
 80096ca:	8a3a      	ldrh	r2, [r7, #16]
 80096cc:	4619      	mov	r1, r3
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f7ff ffc3 	bl	800965a <p_nm_read_block>
 80096d4:	4603      	mov	r3, r0
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	7cfb      	ldrb	r3, [r7, #19]
 80096da:	4413      	add	r3, r2
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 80096e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10c      	bne.n	8009702 <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
 80096e8:	8a3b      	ldrh	r3, [r7, #16]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 80096f0:	8a3b      	ldrh	r3, [r7, #16]
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	4413      	add	r3, r2
 80096f6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 80096f8:	8a3b      	ldrh	r3, [r7, #16]
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	4413      	add	r3, r2
 80096fe:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 8009700:	e7cc      	b.n	800969c <nm_read_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 8009702:	bf00      	nop
		}
	}

	return s8Ret;
 8009704:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3718      	adds	r7, #24
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	20000024 	.word	0x20000024

08009714 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static inline sint8 nmi_spi_read(uint8 *b, uint16 sz)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(NULL, b, sz);
 8009720:	887b      	ldrh	r3, [r7, #2]
 8009722:	461a      	mov	r2, r3
 8009724:	6879      	ldr	r1, [r7, #4]
 8009726:	2000      	movs	r0, #0
 8009728:	f7ff fdec 	bl	8009304 <nm_spi_rw>
 800972c:	4603      	mov	r3, r0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <nmi_spi_write>:
static inline sint8 nmi_spi_write(uint8 *b, uint16 sz)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	460b      	mov	r3, r1
 8009740:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(b, NULL, sz);
 8009742:	887b      	ldrh	r3, [r7, #2]
 8009744:	461a      	mov	r2, r3
 8009746:	2100      	movs	r1, #0
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7ff fddb 	bl	8009304 <nm_spi_rw>
 800974e:	4603      	mov	r3, r0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static inline uint8 crc7_byte(uint8 crc, uint8 data)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	460a      	mov	r2, r1
 8009762:	71fb      	strb	r3, [r7, #7]
 8009764:	4613      	mov	r3, r2
 8009766:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
 8009768:	79fb      	ldrb	r3, [r7, #7]
 800976a:	005a      	lsls	r2, r3, #1
 800976c:	79bb      	ldrb	r3, [r7, #6]
 800976e:	4053      	eors	r3, r2
 8009770:	4a03      	ldr	r2, [pc, #12]	@ (8009780 <crc7_byte+0x28>)
 8009772:	5cd3      	ldrb	r3, [r2, r3]
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	0800ad88 	.word	0x0800ad88

08009784 <crc7>:

static inline uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	4603      	mov	r3, r0
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
 8009790:	73fb      	strb	r3, [r7, #15]
	while (len--)
 8009792:	e00a      	b.n	80097aa <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	1c5a      	adds	r2, r3, #1
 8009798:	60ba      	str	r2, [r7, #8]
 800979a:	781a      	ldrb	r2, [r3, #0]
 800979c:	7bfb      	ldrb	r3, [r7, #15]
 800979e:	4611      	mov	r1, r2
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff ffd9 	bl	8009758 <crc7_byte>
 80097a6:	4603      	mov	r3, r0
 80097a8:	73fb      	strb	r3, [r7, #15]
	while (len--)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	1e5a      	subs	r2, r3, #1
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1ef      	bne.n	8009794 <crc7+0x10>
	return crc;
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b088      	sub	sp, #32
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60b9      	str	r1, [r7, #8]
 80097c8:	607a      	str	r2, [r7, #4]
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	4603      	mov	r3, r0
 80097ce:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
 80097d0:	2305      	movs	r3, #5
 80097d2:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	3bc1      	subs	r3, #193	@ 0xc1
 80097e0:	2b0e      	cmp	r3, #14
 80097e2:	f200 80cc 	bhi.w	800997e <spi_cmd+0x1be>
 80097e6:	a201      	add	r2, pc, #4	@ (adr r2, 80097ec <spi_cmd+0x2c>)
 80097e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ec:	080098a5 	.word	0x080098a5
 80097f0:	080098a5 	.word	0x080098a5
 80097f4:	08009901 	.word	0x08009901
 80097f8:	08009845 	.word	0x08009845
 80097fc:	0800986f 	.word	0x0800986f
 8009800:	08009881 	.word	0x08009881
 8009804:	080098cf 	.word	0x080098cf
 8009808:	080098cf 	.word	0x080098cf
 800980c:	08009945 	.word	0x08009945
 8009810:	08009829 	.word	0x08009829
 8009814:	0800997f 	.word	0x0800997f
 8009818:	0800997f 	.word	0x0800997f
 800981c:	0800997f 	.word	0x0800997f
 8009820:	0800997f 	.word	0x0800997f
 8009824:	08009893 	.word	0x08009893
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	0c1b      	lsrs	r3, r3, #16
 800982c:	b2db      	uxtb	r3, r3
 800982e:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	0a1b      	lsrs	r3, r3, #8
 8009834:	b2db      	uxtb	r3, r3
 8009836:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	b2db      	uxtb	r3, r3
 800983c:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800983e:	2305      	movs	r3, #5
 8009840:	77fb      	strb	r3, [r7, #31]
		break;
 8009842:	e09f      	b.n	8009984 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	0a1b      	lsrs	r3, r3, #8
 8009848:	b2db      	uxtb	r3, r3
 800984a:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800984c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009850:	2b00      	cmp	r3, #0
 8009852:	d004      	beq.n	800985e <spi_cmd+0x9e>
 8009854:	7d7b      	ldrb	r3, [r7, #21]
 8009856:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800985a:	b2db      	uxtb	r3, r3
 800985c:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	b2db      	uxtb	r3, r3
 8009862:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 8009864:	2300      	movs	r3, #0
 8009866:	75fb      	strb	r3, [r7, #23]
		len = 5;
 8009868:	2305      	movs	r3, #5
 800986a:	77fb      	strb	r3, [r7, #31]
		break;
 800986c:	e08a      	b.n	8009984 <spi_cmd+0x1c4>
#if defined(CMD_TERMINATE)
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
 800986e:	2300      	movs	r3, #0
 8009870:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 8009872:	2300      	movs	r3, #0
 8009874:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 8009876:	2300      	movs	r3, #0
 8009878:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800987a:	2305      	movs	r3, #5
 800987c:	77fb      	strb	r3, [r7, #31]
		break;
 800987e:	e081      	b.n	8009984 <spi_cmd+0x1c4>
#endif
#if defined(CMD_REPEAT)
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
 8009880:	2300      	movs	r3, #0
 8009882:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 8009884:	2300      	movs	r3, #0
 8009886:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 8009888:	2300      	movs	r3, #0
 800988a:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800988c:	2305      	movs	r3, #5
 800988e:	77fb      	strb	r3, [r7, #31]
		break;
 8009890:	e078      	b.n	8009984 <spi_cmd+0x1c4>
#endif
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
 8009892:	23ff      	movs	r3, #255	@ 0xff
 8009894:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
 8009896:	23ff      	movs	r3, #255	@ 0xff
 8009898:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
 800989a:	23ff      	movs	r3, #255	@ 0xff
 800989c:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800989e:	2305      	movs	r3, #5
 80098a0:	77fb      	strb	r3, [r7, #31]
		break;
 80098a2:	e06f      	b.n	8009984 <spi_cmd+0x1c4>
#if defined(CMD_DMA_WRITE) || defined(CMD_DMA_READ)
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	0c1b      	lsrs	r3, r3, #16
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	0a1b      	lsrs	r3, r3, #8
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	0a1b      	lsrs	r3, r3, #8
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	767b      	strb	r3, [r7, #25]
		len = 7;
 80098c8:	2307      	movs	r3, #7
 80098ca:	77fb      	strb	r3, [r7, #31]
		break;
 80098cc:	e05a      	b.n	8009984 <spi_cmd+0x1c4>
#endif
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	0c1b      	lsrs	r3, r3, #16
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	0a1b      	lsrs	r3, r3, #8
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	0c1b      	lsrs	r3, r3, #16
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	0a1b      	lsrs	r3, r3, #8
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	76bb      	strb	r3, [r7, #26]
		len = 8;
 80098fa:	2308      	movs	r3, #8
 80098fc:	77fb      	strb	r3, [r7, #31]
		break;
 80098fe:	e041      	b.n	8009984 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	0a1b      	lsrs	r3, r3, #8
 8009904:	b2db      	uxtb	r3, r3
 8009906:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 8009908:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800990c:	2b00      	cmp	r3, #0
 800990e:	d004      	beq.n	800991a <spi_cmd+0x15a>
 8009910:	7d7b      	ldrb	r3, [r7, #21]
 8009912:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009916:	b2db      	uxtb	r3, r3
 8009918:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	0e1b      	lsrs	r3, r3, #24
 8009924:	b2db      	uxtb	r3, r3
 8009926:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	0c1b      	lsrs	r3, r3, #16
 800992c:	b2db      	uxtb	r3, r3
 800992e:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	0a1b      	lsrs	r3, r3, #8
 8009934:	b2db      	uxtb	r3, r3
 8009936:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	b2db      	uxtb	r3, r3
 800993c:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800993e:	2308      	movs	r3, #8
 8009940:	77fb      	strb	r3, [r7, #31]
		break;
 8009942:	e01f      	b.n	8009984 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	0c1b      	lsrs	r3, r3, #16
 8009948:	b2db      	uxtb	r3, r3
 800994a:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	0a1b      	lsrs	r3, r3, #8
 8009950:	b2db      	uxtb	r3, r3
 8009952:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	b2db      	uxtb	r3, r3
 8009958:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	0e1b      	lsrs	r3, r3, #24
 800995e:	b2db      	uxtb	r3, r3
 8009960:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	0c1b      	lsrs	r3, r3, #16
 8009966:	b2db      	uxtb	r3, r3
 8009968:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	0a1b      	lsrs	r3, r3, #8
 800996e:	b2db      	uxtb	r3, r3
 8009970:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	b2db      	uxtb	r3, r3
 8009976:	76fb      	strb	r3, [r7, #27]
		len = 9;
 8009978:	2309      	movs	r3, #9
 800997a:	77fb      	strb	r3, [r7, #31]
		break;
 800997c:	e002      	b.n	8009984 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
 800997e:	23ff      	movs	r3, #255	@ 0xff
 8009980:	77bb      	strb	r3, [r7, #30]
		break;
 8009982:	bf00      	nop
	}

    if(result == N_OK) {
 8009984:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d127      	bne.n	80099dc <spi_cmd+0x21c>
		if (!gu8Crc_off)
 800998c:	4b16      	ldr	r3, [pc, #88]	@ (80099e8 <spi_cmd+0x228>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d113      	bne.n	80099bc <spi_cmd+0x1fc>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 8009994:	7ffb      	ldrb	r3, [r7, #31]
 8009996:	3b01      	subs	r3, #1
 8009998:	461a      	mov	r2, r3
 800999a:	f107 0314 	add.w	r3, r7, #20
 800999e:	4619      	mov	r1, r3
 80099a0:	207f      	movs	r0, #127	@ 0x7f
 80099a2:	f7ff feef 	bl	8009784 <crc7>
 80099a6:	4603      	mov	r3, r0
 80099a8:	461a      	mov	r2, r3
 80099aa:	7ffb      	ldrb	r3, [r7, #31]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	0052      	lsls	r2, r2, #1
 80099b0:	b2d2      	uxtb	r2, r2
 80099b2:	3320      	adds	r3, #32
 80099b4:	443b      	add	r3, r7
 80099b6:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80099ba:	e002      	b.n	80099c2 <spi_cmd+0x202>
		else
			len-=1;
 80099bc:	7ffb      	ldrb	r3, [r7, #31]
 80099be:	3b01      	subs	r3, #1
 80099c0:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 80099c2:	7ffb      	ldrb	r3, [r7, #31]
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	f107 0314 	add.w	r3, r7, #20
 80099ca:	4611      	mov	r1, r2
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff feb2 	bl	8009736 <nmi_spi_write>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <spi_cmd+0x21c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
 80099d8:	23ff      	movs	r3, #255	@ 0xff
 80099da:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
 80099dc:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3720      	adds	r7, #32
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	20003098 	.word	0x20003098

080099ec <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]

	/**
		Command/Control response
	**/
#if defined(CMD_TERMINATE)
    if(cmd == CMD_TERMINATE) {
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	2bc5      	cmp	r3, #197	@ 0xc5
 80099fe:	d10b      	bne.n	8009a18 <spi_cmd_rsp+0x2c>
        if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8009a00:	f107 030d 	add.w	r3, r7, #13
 8009a04:	2101      	movs	r1, #1
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7ff fe84 	bl	8009714 <nmi_spi_read>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <spi_cmd_rsp+0x2c>
            result = N_FAIL;
 8009a12:	23ff      	movs	r3, #255	@ 0xff
 8009a14:	73fb      	strb	r3, [r7, #15]
            goto _fail_;
 8009a16:	e042      	b.n	8009a9e <spi_cmd_rsp+0xb2>
        }
    }
#endif
#if defined(CMD_REPEAT)
    if(cmd == CMD_REPEAT) {
 8009a18:	79fb      	ldrb	r3, [r7, #7]
 8009a1a:	2bc6      	cmp	r3, #198	@ 0xc6
 8009a1c:	d10b      	bne.n	8009a36 <spi_cmd_rsp+0x4a>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8009a1e:	f107 030d 	add.w	r3, r7, #13
 8009a22:	2101      	movs	r1, #1
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7ff fe75 	bl	8009714 <nmi_spi_read>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <spi_cmd_rsp+0x4a>
			result = N_FAIL;
 8009a30:	23ff      	movs	r3, #255	@ 0xff
 8009a32:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 8009a34:	e033      	b.n	8009a9e <spi_cmd_rsp+0xb2>
		}
	}
#endif

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 8009a36:	230a      	movs	r3, #10
 8009a38:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8009a3a:	f107 030d 	add.w	r3, r7, #13
 8009a3e:	2101      	movs	r1, #1
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7ff fe67 	bl	8009714 <nmi_spi_read>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <spi_cmd_rsp+0x66>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 8009a4c:	23ff      	movs	r3, #255	@ 0xff
 8009a4e:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 8009a50:	e025      	b.n	8009a9e <spi_cmd_rsp+0xb2>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 8009a52:	7b7b      	ldrb	r3, [r7, #13]
 8009a54:	79fa      	ldrb	r2, [r7, #7]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d007      	beq.n	8009a6a <spi_cmd_rsp+0x7e>
 8009a5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	3a01      	subs	r2, #1
 8009a62:	b2d2      	uxtb	r2, r2
 8009a64:	73ba      	strb	r2, [r7, #14]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	dce7      	bgt.n	8009a3a <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 8009a6a:	230a      	movs	r3, #10
 8009a6c:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8009a6e:	f107 030d 	add.w	r3, r7, #13
 8009a72:	2101      	movs	r1, #1
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7ff fe4d 	bl	8009714 <nmi_spi_read>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d002      	beq.n	8009a86 <spi_cmd_rsp+0x9a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 8009a80:	23ff      	movs	r3, #255	@ 0xff
 8009a82:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 8009a84:	e00b      	b.n	8009a9e <spi_cmd_rsp+0xb2>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 8009a86:	7b7b      	ldrb	r3, [r7, #13]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d007      	beq.n	8009a9c <spi_cmd_rsp+0xb0>
 8009a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	3a01      	subs	r2, #1
 8009a94:	b2d2      	uxtb	r2, r2
 8009a96:	73ba      	strb	r2, [r7, #14]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	dce8      	bgt.n	8009a6e <spi_cmd_rsp+0x82>

_fail_:
 8009a9c:	bf00      	nop

	return result;
 8009a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <spi_data_read>:
	}
	return N_OK;
}

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	807b      	strh	r3, [r7, #2]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
 8009ac4:	887b      	ldrh	r3, [r7, #2]
 8009ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009aca:	d802      	bhi.n	8009ad2 <spi_data_read+0x26>
			nbytes = sz;
 8009acc:	887b      	ldrh	r3, [r7, #2]
 8009ace:	827b      	strh	r3, [r7, #18]
 8009ad0:	e002      	b.n	8009ad8 <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 8009ad2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009ad6:	827b      	strh	r3, [r7, #18]

		/**
			Data Response header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 8009ad8:	230a      	movs	r3, #10
 8009ada:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8009adc:	f107 030b 	add.w	r3, r7, #11
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7ff fe16 	bl	8009714 <nmi_spi_read>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d002      	beq.n	8009af4 <spi_data_read+0x48>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
 8009aee:	23ff      	movs	r3, #255	@ 0xff
 8009af0:	747b      	strb	r3, [r7, #17]
				break;
 8009af2:	e00e      	b.n	8009b12 <spi_data_read+0x66>
			}
            if((rsp & 0xf0) == 0xf0)
 8009af4:	7afb      	ldrb	r3, [r7, #11]
 8009af6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009afa:	2bf0      	cmp	r3, #240	@ 0xf0
 8009afc:	d008      	beq.n	8009b10 <spi_data_read+0x64>
				break;
		} while (retry--);
 8009afe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	3a01      	subs	r2, #1
 8009b06:	b292      	uxth	r2, r2
 8009b08:	82fa      	strh	r2, [r7, #22]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1e6      	bne.n	8009adc <spi_data_read+0x30>
 8009b0e:	e000      	b.n	8009b12 <spi_data_read+0x66>
				break;
 8009b10:	bf00      	nop

		if (result == N_FAIL)
 8009b12:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8009b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1a:	d035      	beq.n	8009b88 <spi_data_read+0xdc>
			break;

		if (retry <= 0) {
 8009b1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	dc02      	bgt.n	8009b2a <spi_data_read+0x7e>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
 8009b24:	23ff      	movs	r3, #255	@ 0xff
 8009b26:	747b      	strb	r3, [r7, #17]
			break;
 8009b28:	e02f      	b.n	8009b8a <spi_data_read+0xde>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 8009b2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	4413      	add	r3, r2
 8009b32:	8a7a      	ldrh	r2, [r7, #18]
 8009b34:	4611      	mov	r1, r2
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7ff fdec 	bl	8009714 <nmi_spi_read>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d002      	beq.n	8009b48 <spi_data_read+0x9c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
 8009b42:	23ff      	movs	r3, #255	@ 0xff
 8009b44:	747b      	strb	r3, [r7, #17]
			break;
 8009b46:	e020      	b.n	8009b8a <spi_data_read+0xde>
		}
		if(!clockless)
 8009b48:	787b      	ldrb	r3, [r7, #1]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10f      	bne.n	8009b6e <spi_data_read+0xc2>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
 8009b4e:	4b12      	ldr	r3, [pc, #72]	@ (8009b98 <spi_data_read+0xec>)
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10b      	bne.n	8009b6e <spi_data_read+0xc2>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 8009b56:	f107 030c 	add.w	r3, r7, #12
 8009b5a:	2102      	movs	r1, #2
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7ff fdd9 	bl	8009714 <nmi_spi_read>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <spi_data_read+0xc2>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
 8009b68:	23ff      	movs	r3, #255	@ 0xff
 8009b6a:	747b      	strb	r3, [r7, #17]
					break;
 8009b6c:	e00d      	b.n	8009b8a <spi_data_read+0xde>
				}
			}
		}
		ix += nbytes;
 8009b6e:	8aba      	ldrh	r2, [r7, #20]
 8009b70:	8a7b      	ldrh	r3, [r7, #18]
 8009b72:	4413      	add	r3, r2
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
 8009b78:	8a7b      	ldrh	r3, [r7, #18]
 8009b7a:	887a      	ldrh	r2, [r7, #2]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	807b      	strh	r3, [r7, #2]

	} while (sz);
 8009b80:	887b      	ldrh	r3, [r7, #2]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d19e      	bne.n	8009ac4 <spi_data_read+0x18>
 8009b86:	e000      	b.n	8009b8a <spi_data_read+0xde>
			break;
 8009b88:	bf00      	nop

	return result;
 8009b8a:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	20003098 	.word	0x20003098

08009b9c <nm_spi_write_reg>:
 *  @param[in]  u32Val
 *                  Value to be written to the register
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_write_reg(uint32 addr, uint32 u32data)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af02      	add	r7, sp, #8
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 8009ba6:	230a      	movs	r3, #10
 8009ba8:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_WRITE;
 8009bae:	23c9      	movs	r3, #201	@ 0xc9
 8009bb0:	737b      	strb	r3, [r7, #13]
	uint8 clockless = 0;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	733b      	strb	r3, [r7, #12]
	
_RETRY_:	
	if (addr <= 0x30)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b30      	cmp	r3, #48	@ 0x30
 8009bba:	d803      	bhi.n	8009bc4 <nm_spi_write_reg+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
 8009bbc:	23c3      	movs	r3, #195	@ 0xc3
 8009bbe:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	733b      	strb	r3, [r7, #12]
	}

	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 8009bc4:	7b78      	ldrb	r0, [r7, #13]
 8009bc6:	7b3b      	ldrb	r3, [r7, #12]
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	2304      	movs	r3, #4
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	6879      	ldr	r1, [r7, #4]
 8009bd0:	f7ff fdf6 	bl	80097c0 <spi_cmd>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 8009bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d109      	bne.n	8009bf4 <nm_spi_write_reg+0x58>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 8009be0:	7b7b      	ldrb	r3, [r7, #13]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff ff02 	bl	80099ec <spi_cmd_rsp>
 8009be8:	4603      	mov	r3, r0
 8009bea:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 8009bec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bf0:	2b00      	cmp	r3, #0
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
_FAIL_:
 8009bf2:	e000      	b.n	8009bf6 <nm_spi_write_reg+0x5a>
		goto _FAIL_;
 8009bf4:	bf00      	nop
	if(result != N_OK)
 8009bf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d017      	beq.n	8009c2e <nm_spi_write_reg+0x92>
	{
		nm_bsp_sleep(1);
 8009bfe:	2001      	movs	r0, #1
 8009c00:	f7ff faf6 	bl	80091f0 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8009c04:	2300      	movs	r3, #0
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	2300      	movs	r3, #0
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	20cf      	movs	r0, #207	@ 0xcf
 8009c10:	f7ff fdd6 	bl	80097c0 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8009c14:	20cf      	movs	r0, #207	@ 0xcf
 8009c16:	f7ff fee9 	bl	80099ec <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %x\n",retry,addr,u32data);
		nm_bsp_sleep(1);
 8009c1a:	2001      	movs	r0, #1
 8009c1c:	f7ff fae8 	bl	80091f0 <nm_bsp_sleep>
		retry--;
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d000      	beq.n	8009c2e <nm_spi_write_reg+0x92>
 8009c2c:	e7c3      	b.n	8009bb6 <nm_spi_write_reg+0x1a>
	}

	return result;
 8009c2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <nm_spi_read_reg_with_ret>:
 *  @param[out] pu32RetVal
 *                  Pointer to u32 variable used to return the read value
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_read_reg_with_ret(uint32 addr, uint32 *u32data)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b086      	sub	sp, #24
 8009c3e:	af02      	add	r7, sp, #8
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 8009c44:	230a      	movs	r3, #10
 8009c46:	73fb      	strb	r3, [r7, #15]
	volatile sint8 result = N_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	733b      	strb	r3, [r7, #12]
	uint8 cmd = CMD_SINGLE_READ;
 8009c4c:	23ca      	movs	r3, #202	@ 0xca
 8009c4e:	73bb      	strb	r3, [r7, #14]
	uint8 tmp[4];
	uint8 clockless = 0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	737b      	strb	r3, [r7, #13]

_RETRY_:

	if (addr <= 0xff)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2bff      	cmp	r3, #255	@ 0xff
 8009c58:	d803      	bhi.n	8009c62 <nm_spi_read_reg_with_ret+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
 8009c5a:	23c4      	movs	r3, #196	@ 0xc4
 8009c5c:	73bb      	strb	r3, [r7, #14]
		clockless = 1;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	737b      	strb	r3, [r7, #13]
	}

	result = spi_cmd(cmd, addr, 0, 4, clockless);
 8009c62:	7bb8      	ldrb	r0, [r7, #14]
 8009c64:	7b7b      	ldrb	r3, [r7, #13]
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	2304      	movs	r3, #4
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	6879      	ldr	r1, [r7, #4]
 8009c6e:	f7ff fda7 	bl	80097c0 <spi_cmd>
 8009c72:	4603      	mov	r3, r0
 8009c74:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 8009c76:	7b3b      	ldrb	r3, [r7, #12]
 8009c78:	b25b      	sxtb	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d124      	bne.n	8009cc8 <nm_spi_read_reg_with_ret+0x8e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 8009c7e:	7bbb      	ldrb	r3, [r7, #14]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff feb3 	bl	80099ec <spi_cmd_rsp>
 8009c86:	4603      	mov	r3, r0
 8009c88:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 8009c8a:	7b3b      	ldrb	r3, [r7, #12]
 8009c8c:	b25b      	sxtb	r3, r3
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d11c      	bne.n	8009ccc <nm_spi_read_reg_with_ret+0x92>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianness issues */
	result = spi_data_read(&tmp[0], 4, clockless);
 8009c92:	7b7a      	ldrb	r2, [r7, #13]
 8009c94:	f107 0308 	add.w	r3, r7, #8
 8009c98:	2104      	movs	r1, #4
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff ff06 	bl	8009aac <spi_data_read>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 8009ca4:	7b3b      	ldrb	r3, [r7, #12]
 8009ca6:	b25b      	sxtb	r3, r3
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d111      	bne.n	8009cd0 <nm_spi_read_reg_with_ret+0x96>
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}

	*u32data = tmp[0] |
 8009cac:	7a3b      	ldrb	r3, [r7, #8]
 8009cae:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
 8009cb0:	7a7b      	ldrb	r3, [r7, #9]
 8009cb2:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
 8009cb4:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
 8009cb6:	7abb      	ldrb	r3, [r7, #10]
 8009cb8:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
 8009cba:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
 8009cbc:	7afb      	ldrb	r3, [r7, #11]
 8009cbe:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
 8009cc0:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	601a      	str	r2, [r3, #0]
 8009cc6:	e004      	b.n	8009cd2 <nm_spi_read_reg_with_ret+0x98>
		goto _FAIL_;
 8009cc8:	bf00      	nop
 8009cca:	e002      	b.n	8009cd2 <nm_spi_read_reg_with_ret+0x98>
		goto _FAIL_;
 8009ccc:	bf00      	nop
 8009cce:	e000      	b.n	8009cd2 <nm_spi_read_reg_with_ret+0x98>
		goto _FAIL_;
 8009cd0:	bf00      	nop
		
_FAIL_:
	if(result != N_OK)
 8009cd2:	7b3b      	ldrb	r3, [r7, #12]
 8009cd4:	b25b      	sxtb	r3, r3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d017      	beq.n	8009d0a <nm_spi_read_reg_with_ret+0xd0>
	{
		nm_bsp_sleep(1);
 8009cda:	2001      	movs	r0, #1
 8009cdc:	f7ff fa88 	bl	80091f0 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	2100      	movs	r1, #0
 8009cea:	20cf      	movs	r0, #207	@ 0xcf
 8009cec:	f7ff fd68 	bl	80097c0 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8009cf0:	20cf      	movs	r0, #207	@ 0xcf
 8009cf2:	f7ff fe7b 	bl	80099ec <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
 8009cf6:	2001      	movs	r0, #1
 8009cf8:	f7ff fa7a 	bl	80091f0 <nm_bsp_sleep>
		retry--;
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d000      	beq.n	8009d0a <nm_spi_read_reg_with_ret+0xd0>
 8009d08:	e7a4      	b.n	8009c54 <nm_spi_read_reg_with_ret+0x1a>
	}
		
	return result;
 8009d0a:	7b3b      	ldrb	r3, [r7, #12]
 8009d0c:	b25b      	sxtb	r3, r3
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b088      	sub	sp, #32
 8009d1a:	af02      	add	r7, sp, #8
 8009d1c:	60f8      	str	r0, [r7, #12]
 8009d1e:	60b9      	str	r1, [r7, #8]
 8009d20:	4613      	mov	r3, r2
 8009d22:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
 8009d24:	23c8      	movs	r3, #200	@ 0xc8
 8009d26:	753b      	strb	r3, [r7, #20]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 8009d28:	230a      	movs	r3, #10
 8009d2a:	75bb      	strb	r3, [r7, #22]
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	757b      	strb	r3, [r7, #21]
_RETRY_:

	/**
		Command
	**/
	if (size == 1)
 8009d30:	88fb      	ldrh	r3, [r7, #6]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d103      	bne.n	8009d3e <nm_spi_read+0x28>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
 8009d36:	2302      	movs	r3, #2
 8009d38:	80fb      	strh	r3, [r7, #6]
		single_byte_workaround = 1;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	757b      	strb	r3, [r7, #21]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 8009d3e:	88fb      	ldrh	r3, [r7, #6]
 8009d40:	7d38      	ldrb	r0, [r7, #20]
 8009d42:	2200      	movs	r2, #0
 8009d44:	9200      	str	r2, [sp, #0]
 8009d46:	2200      	movs	r2, #0
 8009d48:	68f9      	ldr	r1, [r7, #12]
 8009d4a:	f7ff fd39 	bl	80097c0 <spi_cmd>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 8009d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d125      	bne.n	8009da6 <nm_spi_read+0x90>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 8009d5a:	7d3b      	ldrb	r3, [r7, #20]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7ff fe45 	bl	80099ec <spi_cmd_rsp>
 8009d62:	4603      	mov	r3, r0
 8009d64:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 8009d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d11d      	bne.n	8009daa <nm_spi_read+0x94>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
 8009d6e:	7d7b      	ldrb	r3, [r7, #21]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00c      	beq.n	8009d8e <nm_spi_read+0x78>
	{
		result = spi_data_read(tmp, size,0);
 8009d74:	88f9      	ldrh	r1, [r7, #6]
 8009d76:	f107 0310 	add.w	r3, r7, #16
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7ff fe95 	bl	8009aac <spi_data_read>
 8009d82:	4603      	mov	r3, r0
 8009d84:	75fb      	strb	r3, [r7, #23]
		buf[0] = tmp[0];
 8009d86:	7c3a      	ldrb	r2, [r7, #16]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	701a      	strb	r2, [r3, #0]
 8009d8c:	e007      	b.n	8009d9e <nm_spi_read+0x88>
	}
	else
		result = spi_data_read(buf, size,0);
 8009d8e:	88fb      	ldrh	r3, [r7, #6]
 8009d90:	2200      	movs	r2, #0
 8009d92:	4619      	mov	r1, r3
 8009d94:	68b8      	ldr	r0, [r7, #8]
 8009d96:	f7ff fe89 	bl	8009aac <spi_data_read>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	75fb      	strb	r3, [r7, #23]

	if (result != N_OK) {
 8009d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009da2:	2b00      	cmp	r3, #0
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}

_FAIL_:
 8009da4:	e002      	b.n	8009dac <nm_spi_read+0x96>
		goto _FAIL_;
 8009da6:	bf00      	nop
 8009da8:	e000      	b.n	8009dac <nm_spi_read+0x96>
		goto _FAIL_;
 8009daa:	bf00      	nop
	if(result != N_OK)
 8009dac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d017      	beq.n	8009de4 <nm_spi_read+0xce>
	{
		nm_bsp_sleep(1);
 8009db4:	2001      	movs	r0, #1
 8009db6:	f7ff fa1b 	bl	80091f0 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8009dba:	2300      	movs	r3, #0
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	20cf      	movs	r0, #207	@ 0xcf
 8009dc6:	f7ff fcfb 	bl	80097c0 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8009dca:	20cf      	movs	r0, #207	@ 0xcf
 8009dcc:	f7ff fe0e 	bl	80099ec <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	f7ff fa0d 	bl	80091f0 <nm_bsp_sleep>
		retry--;
 8009dd6:	7dbb      	ldrb	r3, [r7, #22]
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 8009ddc:	7dbb      	ldrb	r3, [r7, #22]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d000      	beq.n	8009de4 <nm_spi_read+0xce>
 8009de2:	e7a5      	b.n	8009d30 <nm_spi_read+0x1a>
	}

	return result;
 8009de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3718      	adds	r7, #24
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 8009dfe:	88fb      	ldrh	r3, [r7, #6]
 8009e00:	461a      	mov	r2, r3
 8009e02:	68b9      	ldr	r1, [r7, #8]
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7ff ff86 	bl	8009d16 <nm_spi_read>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8009e0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d102      	bne.n	8009e1c <nm_spi_read_block+0x2c>
 8009e16:	2300      	movs	r3, #0
 8009e18:	75fb      	strb	r3, [r7, #23]
 8009e1a:	e001      	b.n	8009e20 <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 8009e1c:	23fa      	movs	r3, #250	@ 0xfa
 8009e1e:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 8009e20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <sbrk_aligned>:
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	4e0f      	ldr	r6, [pc, #60]	@ (8009e6c <sbrk_aligned+0x40>)
 8009e30:	460c      	mov	r4, r1
 8009e32:	4605      	mov	r5, r0
 8009e34:	6831      	ldr	r1, [r6, #0]
 8009e36:	b911      	cbnz	r1, 8009e3e <sbrk_aligned+0x12>
 8009e38:	f000 fa8e 	bl	800a358 <_sbrk_r>
 8009e3c:	6030      	str	r0, [r6, #0]
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4628      	mov	r0, r5
 8009e42:	f000 fa89 	bl	800a358 <_sbrk_r>
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	d103      	bne.n	8009e52 <sbrk_aligned+0x26>
 8009e4a:	f04f 34ff 	mov.w	r4, #4294967295
 8009e4e:	4620      	mov	r0, r4
 8009e50:	bd70      	pop	{r4, r5, r6, pc}
 8009e52:	1cc4      	adds	r4, r0, #3
 8009e54:	f024 0403 	bic.w	r4, r4, #3
 8009e58:	42a0      	cmp	r0, r4
 8009e5a:	d0f8      	beq.n	8009e4e <sbrk_aligned+0x22>
 8009e5c:	1a21      	subs	r1, r4, r0
 8009e5e:	4628      	mov	r0, r5
 8009e60:	f000 fa7a 	bl	800a358 <_sbrk_r>
 8009e64:	3001      	adds	r0, #1
 8009e66:	d1f2      	bne.n	8009e4e <sbrk_aligned+0x22>
 8009e68:	e7ef      	b.n	8009e4a <sbrk_aligned+0x1e>
 8009e6a:	bf00      	nop
 8009e6c:	2000309c 	.word	0x2000309c

08009e70 <_malloc_r>:
 8009e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e74:	1ccd      	adds	r5, r1, #3
 8009e76:	4606      	mov	r6, r0
 8009e78:	f025 0503 	bic.w	r5, r5, #3
 8009e7c:	3508      	adds	r5, #8
 8009e7e:	2d0c      	cmp	r5, #12
 8009e80:	bf38      	it	cc
 8009e82:	250c      	movcc	r5, #12
 8009e84:	2d00      	cmp	r5, #0
 8009e86:	db01      	blt.n	8009e8c <_malloc_r+0x1c>
 8009e88:	42a9      	cmp	r1, r5
 8009e8a:	d904      	bls.n	8009e96 <_malloc_r+0x26>
 8009e8c:	230c      	movs	r3, #12
 8009e8e:	6033      	str	r3, [r6, #0]
 8009e90:	2000      	movs	r0, #0
 8009e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f6c <_malloc_r+0xfc>
 8009e9a:	f000 f869 	bl	8009f70 <__malloc_lock>
 8009e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8009ea2:	461c      	mov	r4, r3
 8009ea4:	bb44      	cbnz	r4, 8009ef8 <_malloc_r+0x88>
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	f7ff ffbf 	bl	8009e2c <sbrk_aligned>
 8009eae:	1c43      	adds	r3, r0, #1
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	d158      	bne.n	8009f66 <_malloc_r+0xf6>
 8009eb4:	f8d8 4000 	ldr.w	r4, [r8]
 8009eb8:	4627      	mov	r7, r4
 8009eba:	2f00      	cmp	r7, #0
 8009ebc:	d143      	bne.n	8009f46 <_malloc_r+0xd6>
 8009ebe:	2c00      	cmp	r4, #0
 8009ec0:	d04b      	beq.n	8009f5a <_malloc_r+0xea>
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	4639      	mov	r1, r7
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	eb04 0903 	add.w	r9, r4, r3
 8009ecc:	f000 fa44 	bl	800a358 <_sbrk_r>
 8009ed0:	4581      	cmp	r9, r0
 8009ed2:	d142      	bne.n	8009f5a <_malloc_r+0xea>
 8009ed4:	6821      	ldr	r1, [r4, #0]
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	1a6d      	subs	r5, r5, r1
 8009eda:	4629      	mov	r1, r5
 8009edc:	f7ff ffa6 	bl	8009e2c <sbrk_aligned>
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	d03a      	beq.n	8009f5a <_malloc_r+0xea>
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	442b      	add	r3, r5
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	f8d8 3000 	ldr.w	r3, [r8]
 8009eee:	685a      	ldr	r2, [r3, #4]
 8009ef0:	bb62      	cbnz	r2, 8009f4c <_malloc_r+0xdc>
 8009ef2:	f8c8 7000 	str.w	r7, [r8]
 8009ef6:	e00f      	b.n	8009f18 <_malloc_r+0xa8>
 8009ef8:	6822      	ldr	r2, [r4, #0]
 8009efa:	1b52      	subs	r2, r2, r5
 8009efc:	d420      	bmi.n	8009f40 <_malloc_r+0xd0>
 8009efe:	2a0b      	cmp	r2, #11
 8009f00:	d917      	bls.n	8009f32 <_malloc_r+0xc2>
 8009f02:	1961      	adds	r1, r4, r5
 8009f04:	42a3      	cmp	r3, r4
 8009f06:	6025      	str	r5, [r4, #0]
 8009f08:	bf18      	it	ne
 8009f0a:	6059      	strne	r1, [r3, #4]
 8009f0c:	6863      	ldr	r3, [r4, #4]
 8009f0e:	bf08      	it	eq
 8009f10:	f8c8 1000 	streq.w	r1, [r8]
 8009f14:	5162      	str	r2, [r4, r5]
 8009f16:	604b      	str	r3, [r1, #4]
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f000 f82f 	bl	8009f7c <__malloc_unlock>
 8009f1e:	f104 000b 	add.w	r0, r4, #11
 8009f22:	1d23      	adds	r3, r4, #4
 8009f24:	f020 0007 	bic.w	r0, r0, #7
 8009f28:	1ac2      	subs	r2, r0, r3
 8009f2a:	bf1c      	itt	ne
 8009f2c:	1a1b      	subne	r3, r3, r0
 8009f2e:	50a3      	strne	r3, [r4, r2]
 8009f30:	e7af      	b.n	8009e92 <_malloc_r+0x22>
 8009f32:	6862      	ldr	r2, [r4, #4]
 8009f34:	42a3      	cmp	r3, r4
 8009f36:	bf0c      	ite	eq
 8009f38:	f8c8 2000 	streq.w	r2, [r8]
 8009f3c:	605a      	strne	r2, [r3, #4]
 8009f3e:	e7eb      	b.n	8009f18 <_malloc_r+0xa8>
 8009f40:	4623      	mov	r3, r4
 8009f42:	6864      	ldr	r4, [r4, #4]
 8009f44:	e7ae      	b.n	8009ea4 <_malloc_r+0x34>
 8009f46:	463c      	mov	r4, r7
 8009f48:	687f      	ldr	r7, [r7, #4]
 8009f4a:	e7b6      	b.n	8009eba <_malloc_r+0x4a>
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	d1fb      	bne.n	8009f4c <_malloc_r+0xdc>
 8009f54:	2300      	movs	r3, #0
 8009f56:	6053      	str	r3, [r2, #4]
 8009f58:	e7de      	b.n	8009f18 <_malloc_r+0xa8>
 8009f5a:	230c      	movs	r3, #12
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	6033      	str	r3, [r6, #0]
 8009f60:	f000 f80c 	bl	8009f7c <__malloc_unlock>
 8009f64:	e794      	b.n	8009e90 <_malloc_r+0x20>
 8009f66:	6005      	str	r5, [r0, #0]
 8009f68:	e7d6      	b.n	8009f18 <_malloc_r+0xa8>
 8009f6a:	bf00      	nop
 8009f6c:	200030a0 	.word	0x200030a0

08009f70 <__malloc_lock>:
 8009f70:	4801      	ldr	r0, [pc, #4]	@ (8009f78 <__malloc_lock+0x8>)
 8009f72:	f000 ba3e 	b.w	800a3f2 <__retarget_lock_acquire_recursive>
 8009f76:	bf00      	nop
 8009f78:	200031e4 	.word	0x200031e4

08009f7c <__malloc_unlock>:
 8009f7c:	4801      	ldr	r0, [pc, #4]	@ (8009f84 <__malloc_unlock+0x8>)
 8009f7e:	f000 ba39 	b.w	800a3f4 <__retarget_lock_release_recursive>
 8009f82:	bf00      	nop
 8009f84:	200031e4 	.word	0x200031e4

08009f88 <std>:
 8009f88:	2300      	movs	r3, #0
 8009f8a:	b510      	push	{r4, lr}
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	6083      	str	r3, [r0, #8]
 8009f90:	8181      	strh	r1, [r0, #12]
 8009f92:	4619      	mov	r1, r3
 8009f94:	6643      	str	r3, [r0, #100]	@ 0x64
 8009f96:	81c2      	strh	r2, [r0, #14]
 8009f98:	2208      	movs	r2, #8
 8009f9a:	6183      	str	r3, [r0, #24]
 8009f9c:	e9c0 3300 	strd	r3, r3, [r0]
 8009fa0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fa4:	305c      	adds	r0, #92	@ 0x5c
 8009fa6:	f000 f99b 	bl	800a2e0 <memset>
 8009faa:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe0 <std+0x58>)
 8009fac:	6224      	str	r4, [r4, #32]
 8009fae:	6263      	str	r3, [r4, #36]	@ 0x24
 8009fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8009fe4 <std+0x5c>)
 8009fb2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8009fe8 <std+0x60>)
 8009fb6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8009fec <std+0x64>)
 8009fba:	6323      	str	r3, [r4, #48]	@ 0x30
 8009fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8009ff0 <std+0x68>)
 8009fbe:	429c      	cmp	r4, r3
 8009fc0:	d006      	beq.n	8009fd0 <std+0x48>
 8009fc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009fc6:	4294      	cmp	r4, r2
 8009fc8:	d002      	beq.n	8009fd0 <std+0x48>
 8009fca:	33d0      	adds	r3, #208	@ 0xd0
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	d105      	bne.n	8009fdc <std+0x54>
 8009fd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fd8:	f000 ba0a 	b.w	800a3f0 <__retarget_lock_init_recursive>
 8009fdc:	bd10      	pop	{r4, pc}
 8009fde:	bf00      	nop
 8009fe0:	0800a131 	.word	0x0800a131
 8009fe4:	0800a153 	.word	0x0800a153
 8009fe8:	0800a18b 	.word	0x0800a18b
 8009fec:	0800a1af 	.word	0x0800a1af
 8009ff0:	200030a4 	.word	0x200030a4

08009ff4 <stdio_exit_handler>:
 8009ff4:	4a02      	ldr	r2, [pc, #8]	@ (800a000 <stdio_exit_handler+0xc>)
 8009ff6:	4903      	ldr	r1, [pc, #12]	@ (800a004 <stdio_exit_handler+0x10>)
 8009ff8:	4803      	ldr	r0, [pc, #12]	@ (800a008 <stdio_exit_handler+0x14>)
 8009ffa:	f000 b869 	b.w	800a0d0 <_fwalk_sglue>
 8009ffe:	bf00      	nop
 800a000:	20000028 	.word	0x20000028
 800a004:	0800ab51 	.word	0x0800ab51
 800a008:	20000038 	.word	0x20000038

0800a00c <cleanup_stdio>:
 800a00c:	6841      	ldr	r1, [r0, #4]
 800a00e:	4b0c      	ldr	r3, [pc, #48]	@ (800a040 <cleanup_stdio+0x34>)
 800a010:	4299      	cmp	r1, r3
 800a012:	b510      	push	{r4, lr}
 800a014:	4604      	mov	r4, r0
 800a016:	d001      	beq.n	800a01c <cleanup_stdio+0x10>
 800a018:	f000 fd9a 	bl	800ab50 <_fflush_r>
 800a01c:	68a1      	ldr	r1, [r4, #8]
 800a01e:	4b09      	ldr	r3, [pc, #36]	@ (800a044 <cleanup_stdio+0x38>)
 800a020:	4299      	cmp	r1, r3
 800a022:	d002      	beq.n	800a02a <cleanup_stdio+0x1e>
 800a024:	4620      	mov	r0, r4
 800a026:	f000 fd93 	bl	800ab50 <_fflush_r>
 800a02a:	68e1      	ldr	r1, [r4, #12]
 800a02c:	4b06      	ldr	r3, [pc, #24]	@ (800a048 <cleanup_stdio+0x3c>)
 800a02e:	4299      	cmp	r1, r3
 800a030:	d004      	beq.n	800a03c <cleanup_stdio+0x30>
 800a032:	4620      	mov	r0, r4
 800a034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a038:	f000 bd8a 	b.w	800ab50 <_fflush_r>
 800a03c:	bd10      	pop	{r4, pc}
 800a03e:	bf00      	nop
 800a040:	200030a4 	.word	0x200030a4
 800a044:	2000310c 	.word	0x2000310c
 800a048:	20003174 	.word	0x20003174

0800a04c <global_stdio_init.part.0>:
 800a04c:	b510      	push	{r4, lr}
 800a04e:	4b0b      	ldr	r3, [pc, #44]	@ (800a07c <global_stdio_init.part.0+0x30>)
 800a050:	2104      	movs	r1, #4
 800a052:	4c0b      	ldr	r4, [pc, #44]	@ (800a080 <global_stdio_init.part.0+0x34>)
 800a054:	4a0b      	ldr	r2, [pc, #44]	@ (800a084 <global_stdio_init.part.0+0x38>)
 800a056:	4620      	mov	r0, r4
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f7ff ff94 	bl	8009f88 <std>
 800a060:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a064:	2201      	movs	r2, #1
 800a066:	2109      	movs	r1, #9
 800a068:	f7ff ff8e 	bl	8009f88 <std>
 800a06c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a070:	2202      	movs	r2, #2
 800a072:	2112      	movs	r1, #18
 800a074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a078:	f7ff bf86 	b.w	8009f88 <std>
 800a07c:	200031dc 	.word	0x200031dc
 800a080:	200030a4 	.word	0x200030a4
 800a084:	08009ff5 	.word	0x08009ff5

0800a088 <__sfp_lock_acquire>:
 800a088:	4801      	ldr	r0, [pc, #4]	@ (800a090 <__sfp_lock_acquire+0x8>)
 800a08a:	f000 b9b2 	b.w	800a3f2 <__retarget_lock_acquire_recursive>
 800a08e:	bf00      	nop
 800a090:	200031e5 	.word	0x200031e5

0800a094 <__sfp_lock_release>:
 800a094:	4801      	ldr	r0, [pc, #4]	@ (800a09c <__sfp_lock_release+0x8>)
 800a096:	f000 b9ad 	b.w	800a3f4 <__retarget_lock_release_recursive>
 800a09a:	bf00      	nop
 800a09c:	200031e5 	.word	0x200031e5

0800a0a0 <__sinit>:
 800a0a0:	b510      	push	{r4, lr}
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	f7ff fff0 	bl	800a088 <__sfp_lock_acquire>
 800a0a8:	6a23      	ldr	r3, [r4, #32]
 800a0aa:	b11b      	cbz	r3, 800a0b4 <__sinit+0x14>
 800a0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0b0:	f7ff bff0 	b.w	800a094 <__sfp_lock_release>
 800a0b4:	4b04      	ldr	r3, [pc, #16]	@ (800a0c8 <__sinit+0x28>)
 800a0b6:	6223      	str	r3, [r4, #32]
 800a0b8:	4b04      	ldr	r3, [pc, #16]	@ (800a0cc <__sinit+0x2c>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1f5      	bne.n	800a0ac <__sinit+0xc>
 800a0c0:	f7ff ffc4 	bl	800a04c <global_stdio_init.part.0>
 800a0c4:	e7f2      	b.n	800a0ac <__sinit+0xc>
 800a0c6:	bf00      	nop
 800a0c8:	0800a00d 	.word	0x0800a00d
 800a0cc:	200031dc 	.word	0x200031dc

0800a0d0 <_fwalk_sglue>:
 800a0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0d4:	4607      	mov	r7, r0
 800a0d6:	4688      	mov	r8, r1
 800a0d8:	4614      	mov	r4, r2
 800a0da:	2600      	movs	r6, #0
 800a0dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0e0:	f1b9 0901 	subs.w	r9, r9, #1
 800a0e4:	d505      	bpl.n	800a0f2 <_fwalk_sglue+0x22>
 800a0e6:	6824      	ldr	r4, [r4, #0]
 800a0e8:	2c00      	cmp	r4, #0
 800a0ea:	d1f7      	bne.n	800a0dc <_fwalk_sglue+0xc>
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0f2:	89ab      	ldrh	r3, [r5, #12]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d907      	bls.n	800a108 <_fwalk_sglue+0x38>
 800a0f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	d003      	beq.n	800a108 <_fwalk_sglue+0x38>
 800a100:	4629      	mov	r1, r5
 800a102:	4638      	mov	r0, r7
 800a104:	47c0      	blx	r8
 800a106:	4306      	orrs	r6, r0
 800a108:	3568      	adds	r5, #104	@ 0x68
 800a10a:	e7e9      	b.n	800a0e0 <_fwalk_sglue+0x10>

0800a10c <iprintf>:
 800a10c:	b40f      	push	{r0, r1, r2, r3}
 800a10e:	b507      	push	{r0, r1, r2, lr}
 800a110:	4906      	ldr	r1, [pc, #24]	@ (800a12c <iprintf+0x20>)
 800a112:	ab04      	add	r3, sp, #16
 800a114:	6808      	ldr	r0, [r1, #0]
 800a116:	f853 2b04 	ldr.w	r2, [r3], #4
 800a11a:	6881      	ldr	r1, [r0, #8]
 800a11c:	9301      	str	r3, [sp, #4]
 800a11e:	f000 f9eb 	bl	800a4f8 <_vfiprintf_r>
 800a122:	b003      	add	sp, #12
 800a124:	f85d eb04 	ldr.w	lr, [sp], #4
 800a128:	b004      	add	sp, #16
 800a12a:	4770      	bx	lr
 800a12c:	20000034 	.word	0x20000034

0800a130 <__sread>:
 800a130:	b510      	push	{r4, lr}
 800a132:	460c      	mov	r4, r1
 800a134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a138:	f000 f8fc 	bl	800a334 <_read_r>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	bfab      	itete	ge
 800a140:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a142:	89a3      	ldrhlt	r3, [r4, #12]
 800a144:	181b      	addge	r3, r3, r0
 800a146:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a14a:	bfac      	ite	ge
 800a14c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a14e:	81a3      	strhlt	r3, [r4, #12]
 800a150:	bd10      	pop	{r4, pc}

0800a152 <__swrite>:
 800a152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a156:	461f      	mov	r7, r3
 800a158:	898b      	ldrh	r3, [r1, #12]
 800a15a:	4605      	mov	r5, r0
 800a15c:	460c      	mov	r4, r1
 800a15e:	05db      	lsls	r3, r3, #23
 800a160:	4616      	mov	r6, r2
 800a162:	d505      	bpl.n	800a170 <__swrite+0x1e>
 800a164:	2302      	movs	r3, #2
 800a166:	2200      	movs	r2, #0
 800a168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a16c:	f000 f8d0 	bl	800a310 <_lseek_r>
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	4632      	mov	r2, r6
 800a174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a178:	4628      	mov	r0, r5
 800a17a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a17e:	81a3      	strh	r3, [r4, #12]
 800a180:	463b      	mov	r3, r7
 800a182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a186:	f000 b8f7 	b.w	800a378 <_write_r>

0800a18a <__sseek>:
 800a18a:	b510      	push	{r4, lr}
 800a18c:	460c      	mov	r4, r1
 800a18e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a192:	f000 f8bd 	bl	800a310 <_lseek_r>
 800a196:	1c43      	adds	r3, r0, #1
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	bf15      	itete	ne
 800a19c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a19e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a1a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a1a6:	81a3      	strheq	r3, [r4, #12]
 800a1a8:	bf18      	it	ne
 800a1aa:	81a3      	strhne	r3, [r4, #12]
 800a1ac:	bd10      	pop	{r4, pc}

0800a1ae <__sclose>:
 800a1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b2:	f000 b89d 	b.w	800a2f0 <_close_r>

0800a1b6 <__swbuf_r>:
 800a1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b8:	460e      	mov	r6, r1
 800a1ba:	4614      	mov	r4, r2
 800a1bc:	4605      	mov	r5, r0
 800a1be:	b118      	cbz	r0, 800a1c8 <__swbuf_r+0x12>
 800a1c0:	6a03      	ldr	r3, [r0, #32]
 800a1c2:	b90b      	cbnz	r3, 800a1c8 <__swbuf_r+0x12>
 800a1c4:	f7ff ff6c 	bl	800a0a0 <__sinit>
 800a1c8:	69a3      	ldr	r3, [r4, #24]
 800a1ca:	60a3      	str	r3, [r4, #8]
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	071a      	lsls	r2, r3, #28
 800a1d0:	d501      	bpl.n	800a1d6 <__swbuf_r+0x20>
 800a1d2:	6923      	ldr	r3, [r4, #16]
 800a1d4:	b943      	cbnz	r3, 800a1e8 <__swbuf_r+0x32>
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	4628      	mov	r0, r5
 800a1da:	f000 f82b 	bl	800a234 <__swsetup_r>
 800a1de:	b118      	cbz	r0, 800a1e8 <__swbuf_r+0x32>
 800a1e0:	f04f 37ff 	mov.w	r7, #4294967295
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	b2f6      	uxtb	r6, r6
 800a1ec:	6922      	ldr	r2, [r4, #16]
 800a1ee:	4637      	mov	r7, r6
 800a1f0:	1a98      	subs	r0, r3, r2
 800a1f2:	6963      	ldr	r3, [r4, #20]
 800a1f4:	4283      	cmp	r3, r0
 800a1f6:	dc05      	bgt.n	800a204 <__swbuf_r+0x4e>
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	f000 fca8 	bl	800ab50 <_fflush_r>
 800a200:	2800      	cmp	r0, #0
 800a202:	d1ed      	bne.n	800a1e0 <__swbuf_r+0x2a>
 800a204:	68a3      	ldr	r3, [r4, #8]
 800a206:	3b01      	subs	r3, #1
 800a208:	60a3      	str	r3, [r4, #8]
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	1c5a      	adds	r2, r3, #1
 800a20e:	6022      	str	r2, [r4, #0]
 800a210:	701e      	strb	r6, [r3, #0]
 800a212:	1c43      	adds	r3, r0, #1
 800a214:	6962      	ldr	r2, [r4, #20]
 800a216:	429a      	cmp	r2, r3
 800a218:	d004      	beq.n	800a224 <__swbuf_r+0x6e>
 800a21a:	89a3      	ldrh	r3, [r4, #12]
 800a21c:	07db      	lsls	r3, r3, #31
 800a21e:	d5e1      	bpl.n	800a1e4 <__swbuf_r+0x2e>
 800a220:	2e0a      	cmp	r6, #10
 800a222:	d1df      	bne.n	800a1e4 <__swbuf_r+0x2e>
 800a224:	4621      	mov	r1, r4
 800a226:	4628      	mov	r0, r5
 800a228:	f000 fc92 	bl	800ab50 <_fflush_r>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d0d9      	beq.n	800a1e4 <__swbuf_r+0x2e>
 800a230:	e7d6      	b.n	800a1e0 <__swbuf_r+0x2a>
	...

0800a234 <__swsetup_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4b29      	ldr	r3, [pc, #164]	@ (800a2dc <__swsetup_r+0xa8>)
 800a238:	4605      	mov	r5, r0
 800a23a:	460c      	mov	r4, r1
 800a23c:	6818      	ldr	r0, [r3, #0]
 800a23e:	b118      	cbz	r0, 800a248 <__swsetup_r+0x14>
 800a240:	6a03      	ldr	r3, [r0, #32]
 800a242:	b90b      	cbnz	r3, 800a248 <__swsetup_r+0x14>
 800a244:	f7ff ff2c 	bl	800a0a0 <__sinit>
 800a248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24c:	0719      	lsls	r1, r3, #28
 800a24e:	d422      	bmi.n	800a296 <__swsetup_r+0x62>
 800a250:	06da      	lsls	r2, r3, #27
 800a252:	d407      	bmi.n	800a264 <__swsetup_r+0x30>
 800a254:	2209      	movs	r2, #9
 800a256:	602a      	str	r2, [r5, #0]
 800a258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a25c:	f04f 30ff 	mov.w	r0, #4294967295
 800a260:	81a3      	strh	r3, [r4, #12]
 800a262:	e033      	b.n	800a2cc <__swsetup_r+0x98>
 800a264:	0758      	lsls	r0, r3, #29
 800a266:	d512      	bpl.n	800a28e <__swsetup_r+0x5a>
 800a268:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a26a:	b141      	cbz	r1, 800a27e <__swsetup_r+0x4a>
 800a26c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a270:	4299      	cmp	r1, r3
 800a272:	d002      	beq.n	800a27a <__swsetup_r+0x46>
 800a274:	4628      	mov	r0, r5
 800a276:	f000 f8cb 	bl	800a410 <_free_r>
 800a27a:	2300      	movs	r3, #0
 800a27c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a27e:	89a3      	ldrh	r3, [r4, #12]
 800a280:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a284:	81a3      	strh	r3, [r4, #12]
 800a286:	2300      	movs	r3, #0
 800a288:	6063      	str	r3, [r4, #4]
 800a28a:	6923      	ldr	r3, [r4, #16]
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	f043 0308 	orr.w	r3, r3, #8
 800a294:	81a3      	strh	r3, [r4, #12]
 800a296:	6923      	ldr	r3, [r4, #16]
 800a298:	b94b      	cbnz	r3, 800a2ae <__swsetup_r+0x7a>
 800a29a:	89a3      	ldrh	r3, [r4, #12]
 800a29c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a2a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2a4:	d003      	beq.n	800a2ae <__swsetup_r+0x7a>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	f000 fc9e 	bl	800abea <__smakebuf_r>
 800a2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2b2:	f013 0201 	ands.w	r2, r3, #1
 800a2b6:	d00a      	beq.n	800a2ce <__swsetup_r+0x9a>
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	60a2      	str	r2, [r4, #8]
 800a2bc:	6962      	ldr	r2, [r4, #20]
 800a2be:	4252      	negs	r2, r2
 800a2c0:	61a2      	str	r2, [r4, #24]
 800a2c2:	6922      	ldr	r2, [r4, #16]
 800a2c4:	b942      	cbnz	r2, 800a2d8 <__swsetup_r+0xa4>
 800a2c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a2ca:	d1c5      	bne.n	800a258 <__swsetup_r+0x24>
 800a2cc:	bd38      	pop	{r3, r4, r5, pc}
 800a2ce:	0799      	lsls	r1, r3, #30
 800a2d0:	bf58      	it	pl
 800a2d2:	6962      	ldrpl	r2, [r4, #20]
 800a2d4:	60a2      	str	r2, [r4, #8]
 800a2d6:	e7f4      	b.n	800a2c2 <__swsetup_r+0x8e>
 800a2d8:	2000      	movs	r0, #0
 800a2da:	e7f7      	b.n	800a2cc <__swsetup_r+0x98>
 800a2dc:	20000034 	.word	0x20000034

0800a2e0 <memset>:
 800a2e0:	4402      	add	r2, r0
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d100      	bne.n	800a2ea <memset+0xa>
 800a2e8:	4770      	bx	lr
 800a2ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a2ee:	e7f9      	b.n	800a2e4 <memset+0x4>

0800a2f0 <_close_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4d05      	ldr	r5, [pc, #20]	@ (800a30c <_close_r+0x1c>)
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	4608      	mov	r0, r1
 800a2fa:	602b      	str	r3, [r5, #0]
 800a2fc:	f7f6 ff03 	bl	8001106 <_close>
 800a300:	1c43      	adds	r3, r0, #1
 800a302:	d102      	bne.n	800a30a <_close_r+0x1a>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	b103      	cbz	r3, 800a30a <_close_r+0x1a>
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	bd38      	pop	{r3, r4, r5, pc}
 800a30c:	200031e0 	.word	0x200031e0

0800a310 <_lseek_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4604      	mov	r4, r0
 800a314:	4d06      	ldr	r5, [pc, #24]	@ (800a330 <_lseek_r+0x20>)
 800a316:	4608      	mov	r0, r1
 800a318:	4611      	mov	r1, r2
 800a31a:	2200      	movs	r2, #0
 800a31c:	602a      	str	r2, [r5, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	f7f6 ff18 	bl	8001154 <_lseek>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_lseek_r+0x1e>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_lseek_r+0x1e>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	200031e0 	.word	0x200031e0

0800a334 <_read_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4604      	mov	r4, r0
 800a338:	4d06      	ldr	r5, [pc, #24]	@ (800a354 <_read_r+0x20>)
 800a33a:	4608      	mov	r0, r1
 800a33c:	4611      	mov	r1, r2
 800a33e:	2200      	movs	r2, #0
 800a340:	602a      	str	r2, [r5, #0]
 800a342:	461a      	mov	r2, r3
 800a344:	f7f6 fea6 	bl	8001094 <_read>
 800a348:	1c43      	adds	r3, r0, #1
 800a34a:	d102      	bne.n	800a352 <_read_r+0x1e>
 800a34c:	682b      	ldr	r3, [r5, #0]
 800a34e:	b103      	cbz	r3, 800a352 <_read_r+0x1e>
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	bd38      	pop	{r3, r4, r5, pc}
 800a354:	200031e0 	.word	0x200031e0

0800a358 <_sbrk_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	2300      	movs	r3, #0
 800a35c:	4d05      	ldr	r5, [pc, #20]	@ (800a374 <_sbrk_r+0x1c>)
 800a35e:	4604      	mov	r4, r0
 800a360:	4608      	mov	r0, r1
 800a362:	602b      	str	r3, [r5, #0]
 800a364:	f7f6 ff04 	bl	8001170 <_sbrk>
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	d102      	bne.n	800a372 <_sbrk_r+0x1a>
 800a36c:	682b      	ldr	r3, [r5, #0]
 800a36e:	b103      	cbz	r3, 800a372 <_sbrk_r+0x1a>
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	bd38      	pop	{r3, r4, r5, pc}
 800a374:	200031e0 	.word	0x200031e0

0800a378 <_write_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4604      	mov	r4, r0
 800a37c:	4d06      	ldr	r5, [pc, #24]	@ (800a398 <_write_r+0x20>)
 800a37e:	4608      	mov	r0, r1
 800a380:	4611      	mov	r1, r2
 800a382:	2200      	movs	r2, #0
 800a384:	602a      	str	r2, [r5, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	f7f6 fea1 	bl	80010ce <_write>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d102      	bne.n	800a396 <_write_r+0x1e>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	b103      	cbz	r3, 800a396 <_write_r+0x1e>
 800a394:	6023      	str	r3, [r4, #0]
 800a396:	bd38      	pop	{r3, r4, r5, pc}
 800a398:	200031e0 	.word	0x200031e0

0800a39c <__errno>:
 800a39c:	4b01      	ldr	r3, [pc, #4]	@ (800a3a4 <__errno+0x8>)
 800a39e:	6818      	ldr	r0, [r3, #0]
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	20000034 	.word	0x20000034

0800a3a8 <__libc_init_array>:
 800a3a8:	b570      	push	{r4, r5, r6, lr}
 800a3aa:	4d0d      	ldr	r5, [pc, #52]	@ (800a3e0 <__libc_init_array+0x38>)
 800a3ac:	2600      	movs	r6, #0
 800a3ae:	4c0d      	ldr	r4, [pc, #52]	@ (800a3e4 <__libc_init_array+0x3c>)
 800a3b0:	1b64      	subs	r4, r4, r5
 800a3b2:	10a4      	asrs	r4, r4, #2
 800a3b4:	42a6      	cmp	r6, r4
 800a3b6:	d109      	bne.n	800a3cc <__libc_init_array+0x24>
 800a3b8:	4d0b      	ldr	r5, [pc, #44]	@ (800a3e8 <__libc_init_array+0x40>)
 800a3ba:	2600      	movs	r6, #0
 800a3bc:	4c0b      	ldr	r4, [pc, #44]	@ (800a3ec <__libc_init_array+0x44>)
 800a3be:	f000 fc81 	bl	800acc4 <_init>
 800a3c2:	1b64      	subs	r4, r4, r5
 800a3c4:	10a4      	asrs	r4, r4, #2
 800a3c6:	42a6      	cmp	r6, r4
 800a3c8:	d105      	bne.n	800a3d6 <__libc_init_array+0x2e>
 800a3ca:	bd70      	pop	{r4, r5, r6, pc}
 800a3cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3d0:	3601      	adds	r6, #1
 800a3d2:	4798      	blx	r3
 800a3d4:	e7ee      	b.n	800a3b4 <__libc_init_array+0xc>
 800a3d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3da:	3601      	adds	r6, #1
 800a3dc:	4798      	blx	r3
 800a3de:	e7f2      	b.n	800a3c6 <__libc_init_array+0x1e>
 800a3e0:	0800aec4 	.word	0x0800aec4
 800a3e4:	0800aec4 	.word	0x0800aec4
 800a3e8:	0800aec4 	.word	0x0800aec4
 800a3ec:	0800aec8 	.word	0x0800aec8

0800a3f0 <__retarget_lock_init_recursive>:
 800a3f0:	4770      	bx	lr

0800a3f2 <__retarget_lock_acquire_recursive>:
 800a3f2:	4770      	bx	lr

0800a3f4 <__retarget_lock_release_recursive>:
 800a3f4:	4770      	bx	lr

0800a3f6 <memcpy>:
 800a3f6:	440a      	add	r2, r1
 800a3f8:	1e43      	subs	r3, r0, #1
 800a3fa:	4291      	cmp	r1, r2
 800a3fc:	d100      	bne.n	800a400 <memcpy+0xa>
 800a3fe:	4770      	bx	lr
 800a400:	b510      	push	{r4, lr}
 800a402:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a406:	4291      	cmp	r1, r2
 800a408:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a40c:	d1f9      	bne.n	800a402 <memcpy+0xc>
 800a40e:	bd10      	pop	{r4, pc}

0800a410 <_free_r>:
 800a410:	b538      	push	{r3, r4, r5, lr}
 800a412:	4605      	mov	r5, r0
 800a414:	2900      	cmp	r1, #0
 800a416:	d041      	beq.n	800a49c <_free_r+0x8c>
 800a418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a41c:	1f0c      	subs	r4, r1, #4
 800a41e:	2b00      	cmp	r3, #0
 800a420:	bfb8      	it	lt
 800a422:	18e4      	addlt	r4, r4, r3
 800a424:	f7ff fda4 	bl	8009f70 <__malloc_lock>
 800a428:	4a1d      	ldr	r2, [pc, #116]	@ (800a4a0 <_free_r+0x90>)
 800a42a:	6813      	ldr	r3, [r2, #0]
 800a42c:	b933      	cbnz	r3, 800a43c <_free_r+0x2c>
 800a42e:	6063      	str	r3, [r4, #4]
 800a430:	6014      	str	r4, [r2, #0]
 800a432:	4628      	mov	r0, r5
 800a434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a438:	f7ff bda0 	b.w	8009f7c <__malloc_unlock>
 800a43c:	42a3      	cmp	r3, r4
 800a43e:	d908      	bls.n	800a452 <_free_r+0x42>
 800a440:	6820      	ldr	r0, [r4, #0]
 800a442:	1821      	adds	r1, r4, r0
 800a444:	428b      	cmp	r3, r1
 800a446:	bf01      	itttt	eq
 800a448:	6819      	ldreq	r1, [r3, #0]
 800a44a:	685b      	ldreq	r3, [r3, #4]
 800a44c:	1809      	addeq	r1, r1, r0
 800a44e:	6021      	streq	r1, [r4, #0]
 800a450:	e7ed      	b.n	800a42e <_free_r+0x1e>
 800a452:	461a      	mov	r2, r3
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	b10b      	cbz	r3, 800a45c <_free_r+0x4c>
 800a458:	42a3      	cmp	r3, r4
 800a45a:	d9fa      	bls.n	800a452 <_free_r+0x42>
 800a45c:	6811      	ldr	r1, [r2, #0]
 800a45e:	1850      	adds	r0, r2, r1
 800a460:	42a0      	cmp	r0, r4
 800a462:	d10b      	bne.n	800a47c <_free_r+0x6c>
 800a464:	6820      	ldr	r0, [r4, #0]
 800a466:	4401      	add	r1, r0
 800a468:	1850      	adds	r0, r2, r1
 800a46a:	6011      	str	r1, [r2, #0]
 800a46c:	4283      	cmp	r3, r0
 800a46e:	d1e0      	bne.n	800a432 <_free_r+0x22>
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	4408      	add	r0, r1
 800a476:	6053      	str	r3, [r2, #4]
 800a478:	6010      	str	r0, [r2, #0]
 800a47a:	e7da      	b.n	800a432 <_free_r+0x22>
 800a47c:	d902      	bls.n	800a484 <_free_r+0x74>
 800a47e:	230c      	movs	r3, #12
 800a480:	602b      	str	r3, [r5, #0]
 800a482:	e7d6      	b.n	800a432 <_free_r+0x22>
 800a484:	6820      	ldr	r0, [r4, #0]
 800a486:	1821      	adds	r1, r4, r0
 800a488:	428b      	cmp	r3, r1
 800a48a:	bf02      	ittt	eq
 800a48c:	6819      	ldreq	r1, [r3, #0]
 800a48e:	685b      	ldreq	r3, [r3, #4]
 800a490:	1809      	addeq	r1, r1, r0
 800a492:	6063      	str	r3, [r4, #4]
 800a494:	bf08      	it	eq
 800a496:	6021      	streq	r1, [r4, #0]
 800a498:	6054      	str	r4, [r2, #4]
 800a49a:	e7ca      	b.n	800a432 <_free_r+0x22>
 800a49c:	bd38      	pop	{r3, r4, r5, pc}
 800a49e:	bf00      	nop
 800a4a0:	200030a0 	.word	0x200030a0

0800a4a4 <__sfputc_r>:
 800a4a4:	6893      	ldr	r3, [r2, #8]
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	b410      	push	{r4}
 800a4ac:	6093      	str	r3, [r2, #8]
 800a4ae:	da08      	bge.n	800a4c2 <__sfputc_r+0x1e>
 800a4b0:	6994      	ldr	r4, [r2, #24]
 800a4b2:	42a3      	cmp	r3, r4
 800a4b4:	db01      	blt.n	800a4ba <__sfputc_r+0x16>
 800a4b6:	290a      	cmp	r1, #10
 800a4b8:	d103      	bne.n	800a4c2 <__sfputc_r+0x1e>
 800a4ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4be:	f7ff be7a 	b.w	800a1b6 <__swbuf_r>
 800a4c2:	6813      	ldr	r3, [r2, #0]
 800a4c4:	1c58      	adds	r0, r3, #1
 800a4c6:	6010      	str	r0, [r2, #0]
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	7019      	strb	r1, [r3, #0]
 800a4cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <__sfputs_r>:
 800a4d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	460f      	mov	r7, r1
 800a4d8:	4614      	mov	r4, r2
 800a4da:	18d5      	adds	r5, r2, r3
 800a4dc:	42ac      	cmp	r4, r5
 800a4de:	d101      	bne.n	800a4e4 <__sfputs_r+0x12>
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	e007      	b.n	800a4f4 <__sfputs_r+0x22>
 800a4e4:	463a      	mov	r2, r7
 800a4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	f7ff ffda 	bl	800a4a4 <__sfputc_r>
 800a4f0:	1c43      	adds	r3, r0, #1
 800a4f2:	d1f3      	bne.n	800a4dc <__sfputs_r+0xa>
 800a4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4f8 <_vfiprintf_r>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	460d      	mov	r5, r1
 800a4fe:	b09d      	sub	sp, #116	@ 0x74
 800a500:	4614      	mov	r4, r2
 800a502:	4698      	mov	r8, r3
 800a504:	4606      	mov	r6, r0
 800a506:	b118      	cbz	r0, 800a510 <_vfiprintf_r+0x18>
 800a508:	6a03      	ldr	r3, [r0, #32]
 800a50a:	b90b      	cbnz	r3, 800a510 <_vfiprintf_r+0x18>
 800a50c:	f7ff fdc8 	bl	800a0a0 <__sinit>
 800a510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a512:	07d9      	lsls	r1, r3, #31
 800a514:	d405      	bmi.n	800a522 <_vfiprintf_r+0x2a>
 800a516:	89ab      	ldrh	r3, [r5, #12]
 800a518:	059a      	lsls	r2, r3, #22
 800a51a:	d402      	bmi.n	800a522 <_vfiprintf_r+0x2a>
 800a51c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a51e:	f7ff ff68 	bl	800a3f2 <__retarget_lock_acquire_recursive>
 800a522:	89ab      	ldrh	r3, [r5, #12]
 800a524:	071b      	lsls	r3, r3, #28
 800a526:	d501      	bpl.n	800a52c <_vfiprintf_r+0x34>
 800a528:	692b      	ldr	r3, [r5, #16]
 800a52a:	b99b      	cbnz	r3, 800a554 <_vfiprintf_r+0x5c>
 800a52c:	4629      	mov	r1, r5
 800a52e:	4630      	mov	r0, r6
 800a530:	f7ff fe80 	bl	800a234 <__swsetup_r>
 800a534:	b170      	cbz	r0, 800a554 <_vfiprintf_r+0x5c>
 800a536:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a538:	07dc      	lsls	r4, r3, #31
 800a53a:	d504      	bpl.n	800a546 <_vfiprintf_r+0x4e>
 800a53c:	f04f 30ff 	mov.w	r0, #4294967295
 800a540:	b01d      	add	sp, #116	@ 0x74
 800a542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a546:	89ab      	ldrh	r3, [r5, #12]
 800a548:	0598      	lsls	r0, r3, #22
 800a54a:	d4f7      	bmi.n	800a53c <_vfiprintf_r+0x44>
 800a54c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a54e:	f7ff ff51 	bl	800a3f4 <__retarget_lock_release_recursive>
 800a552:	e7f3      	b.n	800a53c <_vfiprintf_r+0x44>
 800a554:	2300      	movs	r3, #0
 800a556:	f8cd 800c 	str.w	r8, [sp, #12]
 800a55a:	f04f 0901 	mov.w	r9, #1
 800a55e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800a714 <_vfiprintf_r+0x21c>
 800a562:	9309      	str	r3, [sp, #36]	@ 0x24
 800a564:	2320      	movs	r3, #32
 800a566:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a56a:	2330      	movs	r3, #48	@ 0x30
 800a56c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a570:	4623      	mov	r3, r4
 800a572:	469a      	mov	sl, r3
 800a574:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a578:	b10a      	cbz	r2, 800a57e <_vfiprintf_r+0x86>
 800a57a:	2a25      	cmp	r2, #37	@ 0x25
 800a57c:	d1f9      	bne.n	800a572 <_vfiprintf_r+0x7a>
 800a57e:	ebba 0b04 	subs.w	fp, sl, r4
 800a582:	d00b      	beq.n	800a59c <_vfiprintf_r+0xa4>
 800a584:	465b      	mov	r3, fp
 800a586:	4622      	mov	r2, r4
 800a588:	4629      	mov	r1, r5
 800a58a:	4630      	mov	r0, r6
 800a58c:	f7ff ffa1 	bl	800a4d2 <__sfputs_r>
 800a590:	3001      	adds	r0, #1
 800a592:	f000 80a7 	beq.w	800a6e4 <_vfiprintf_r+0x1ec>
 800a596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a598:	445a      	add	r2, fp
 800a59a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a59c:	f89a 3000 	ldrb.w	r3, [sl]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 809f 	beq.w	800a6e4 <_vfiprintf_r+0x1ec>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ac:	f10a 0a01 	add.w	sl, sl, #1
 800a5b0:	9304      	str	r3, [sp, #16]
 800a5b2:	9307      	str	r3, [sp, #28]
 800a5b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5be:	4654      	mov	r4, sl
 800a5c0:	2205      	movs	r2, #5
 800a5c2:	4854      	ldr	r0, [pc, #336]	@ (800a714 <_vfiprintf_r+0x21c>)
 800a5c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c8:	f000 fb6e 	bl	800aca8 <memchr>
 800a5cc:	9a04      	ldr	r2, [sp, #16]
 800a5ce:	b9d8      	cbnz	r0, 800a608 <_vfiprintf_r+0x110>
 800a5d0:	06d1      	lsls	r1, r2, #27
 800a5d2:	bf44      	itt	mi
 800a5d4:	2320      	movmi	r3, #32
 800a5d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5da:	0713      	lsls	r3, r2, #28
 800a5dc:	bf44      	itt	mi
 800a5de:	232b      	movmi	r3, #43	@ 0x2b
 800a5e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a5e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5ea:	d015      	beq.n	800a618 <_vfiprintf_r+0x120>
 800a5ec:	9a07      	ldr	r2, [sp, #28]
 800a5ee:	4654      	mov	r4, sl
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	f04f 0c0a 	mov.w	ip, #10
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5fc:	3b30      	subs	r3, #48	@ 0x30
 800a5fe:	2b09      	cmp	r3, #9
 800a600:	d94b      	bls.n	800a69a <_vfiprintf_r+0x1a2>
 800a602:	b1b0      	cbz	r0, 800a632 <_vfiprintf_r+0x13a>
 800a604:	9207      	str	r2, [sp, #28]
 800a606:	e014      	b.n	800a632 <_vfiprintf_r+0x13a>
 800a608:	eba0 0308 	sub.w	r3, r0, r8
 800a60c:	46a2      	mov	sl, r4
 800a60e:	fa09 f303 	lsl.w	r3, r9, r3
 800a612:	4313      	orrs	r3, r2
 800a614:	9304      	str	r3, [sp, #16]
 800a616:	e7d2      	b.n	800a5be <_vfiprintf_r+0xc6>
 800a618:	9b03      	ldr	r3, [sp, #12]
 800a61a:	1d19      	adds	r1, r3, #4
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	9103      	str	r1, [sp, #12]
 800a622:	bfbb      	ittet	lt
 800a624:	425b      	neglt	r3, r3
 800a626:	f042 0202 	orrlt.w	r2, r2, #2
 800a62a:	9307      	strge	r3, [sp, #28]
 800a62c:	9307      	strlt	r3, [sp, #28]
 800a62e:	bfb8      	it	lt
 800a630:	9204      	strlt	r2, [sp, #16]
 800a632:	7823      	ldrb	r3, [r4, #0]
 800a634:	2b2e      	cmp	r3, #46	@ 0x2e
 800a636:	d10a      	bne.n	800a64e <_vfiprintf_r+0x156>
 800a638:	7863      	ldrb	r3, [r4, #1]
 800a63a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a63c:	d132      	bne.n	800a6a4 <_vfiprintf_r+0x1ac>
 800a63e:	9b03      	ldr	r3, [sp, #12]
 800a640:	3402      	adds	r4, #2
 800a642:	1d1a      	adds	r2, r3, #4
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a64a:	9203      	str	r2, [sp, #12]
 800a64c:	9305      	str	r3, [sp, #20]
 800a64e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a724 <_vfiprintf_r+0x22c>
 800a652:	2203      	movs	r2, #3
 800a654:	7821      	ldrb	r1, [r4, #0]
 800a656:	4650      	mov	r0, sl
 800a658:	f000 fb26 	bl	800aca8 <memchr>
 800a65c:	b138      	cbz	r0, 800a66e <_vfiprintf_r+0x176>
 800a65e:	eba0 000a 	sub.w	r0, r0, sl
 800a662:	2240      	movs	r2, #64	@ 0x40
 800a664:	9b04      	ldr	r3, [sp, #16]
 800a666:	3401      	adds	r4, #1
 800a668:	4082      	lsls	r2, r0
 800a66a:	4313      	orrs	r3, r2
 800a66c:	9304      	str	r3, [sp, #16]
 800a66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a672:	2206      	movs	r2, #6
 800a674:	4828      	ldr	r0, [pc, #160]	@ (800a718 <_vfiprintf_r+0x220>)
 800a676:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a67a:	f000 fb15 	bl	800aca8 <memchr>
 800a67e:	2800      	cmp	r0, #0
 800a680:	d03f      	beq.n	800a702 <_vfiprintf_r+0x20a>
 800a682:	4b26      	ldr	r3, [pc, #152]	@ (800a71c <_vfiprintf_r+0x224>)
 800a684:	bb1b      	cbnz	r3, 800a6ce <_vfiprintf_r+0x1d6>
 800a686:	9b03      	ldr	r3, [sp, #12]
 800a688:	3307      	adds	r3, #7
 800a68a:	f023 0307 	bic.w	r3, r3, #7
 800a68e:	3308      	adds	r3, #8
 800a690:	9303      	str	r3, [sp, #12]
 800a692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a694:	443b      	add	r3, r7
 800a696:	9309      	str	r3, [sp, #36]	@ 0x24
 800a698:	e76a      	b.n	800a570 <_vfiprintf_r+0x78>
 800a69a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a69e:	460c      	mov	r4, r1
 800a6a0:	2001      	movs	r0, #1
 800a6a2:	e7a8      	b.n	800a5f6 <_vfiprintf_r+0xfe>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	3401      	adds	r4, #1
 800a6a8:	f04f 0c0a 	mov.w	ip, #10
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	9305      	str	r3, [sp, #20]
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6b6:	3a30      	subs	r2, #48	@ 0x30
 800a6b8:	2a09      	cmp	r2, #9
 800a6ba:	d903      	bls.n	800a6c4 <_vfiprintf_r+0x1cc>
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d0c6      	beq.n	800a64e <_vfiprintf_r+0x156>
 800a6c0:	9105      	str	r1, [sp, #20]
 800a6c2:	e7c4      	b.n	800a64e <_vfiprintf_r+0x156>
 800a6c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e7f0      	b.n	800a6b0 <_vfiprintf_r+0x1b8>
 800a6ce:	ab03      	add	r3, sp, #12
 800a6d0:	462a      	mov	r2, r5
 800a6d2:	a904      	add	r1, sp, #16
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	4b11      	ldr	r3, [pc, #68]	@ (800a720 <_vfiprintf_r+0x228>)
 800a6da:	f3af 8000 	nop.w
 800a6de:	4607      	mov	r7, r0
 800a6e0:	1c78      	adds	r0, r7, #1
 800a6e2:	d1d6      	bne.n	800a692 <_vfiprintf_r+0x19a>
 800a6e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6e6:	07d9      	lsls	r1, r3, #31
 800a6e8:	d405      	bmi.n	800a6f6 <_vfiprintf_r+0x1fe>
 800a6ea:	89ab      	ldrh	r3, [r5, #12]
 800a6ec:	059a      	lsls	r2, r3, #22
 800a6ee:	d402      	bmi.n	800a6f6 <_vfiprintf_r+0x1fe>
 800a6f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6f2:	f7ff fe7f 	bl	800a3f4 <__retarget_lock_release_recursive>
 800a6f6:	89ab      	ldrh	r3, [r5, #12]
 800a6f8:	065b      	lsls	r3, r3, #25
 800a6fa:	f53f af1f 	bmi.w	800a53c <_vfiprintf_r+0x44>
 800a6fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a700:	e71e      	b.n	800a540 <_vfiprintf_r+0x48>
 800a702:	ab03      	add	r3, sp, #12
 800a704:	462a      	mov	r2, r5
 800a706:	a904      	add	r1, sp, #16
 800a708:	4630      	mov	r0, r6
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	4b04      	ldr	r3, [pc, #16]	@ (800a720 <_vfiprintf_r+0x228>)
 800a70e:	f000 f87d 	bl	800a80c <_printf_i>
 800a712:	e7e4      	b.n	800a6de <_vfiprintf_r+0x1e6>
 800a714:	0800ae88 	.word	0x0800ae88
 800a718:	0800ae92 	.word	0x0800ae92
 800a71c:	00000000 	.word	0x00000000
 800a720:	0800a4d3 	.word	0x0800a4d3
 800a724:	0800ae8e 	.word	0x0800ae8e

0800a728 <_printf_common>:
 800a728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a72c:	4616      	mov	r6, r2
 800a72e:	4698      	mov	r8, r3
 800a730:	688a      	ldr	r2, [r1, #8]
 800a732:	4607      	mov	r7, r0
 800a734:	690b      	ldr	r3, [r1, #16]
 800a736:	460c      	mov	r4, r1
 800a738:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a73c:	4293      	cmp	r3, r2
 800a73e:	bfb8      	it	lt
 800a740:	4613      	movlt	r3, r2
 800a742:	6033      	str	r3, [r6, #0]
 800a744:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a748:	b10a      	cbz	r2, 800a74e <_printf_common+0x26>
 800a74a:	3301      	adds	r3, #1
 800a74c:	6033      	str	r3, [r6, #0]
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	0699      	lsls	r1, r3, #26
 800a752:	bf42      	ittt	mi
 800a754:	6833      	ldrmi	r3, [r6, #0]
 800a756:	3302      	addmi	r3, #2
 800a758:	6033      	strmi	r3, [r6, #0]
 800a75a:	6825      	ldr	r5, [r4, #0]
 800a75c:	f015 0506 	ands.w	r5, r5, #6
 800a760:	d106      	bne.n	800a770 <_printf_common+0x48>
 800a762:	f104 0a19 	add.w	sl, r4, #25
 800a766:	68e3      	ldr	r3, [r4, #12]
 800a768:	6832      	ldr	r2, [r6, #0]
 800a76a:	1a9b      	subs	r3, r3, r2
 800a76c:	42ab      	cmp	r3, r5
 800a76e:	dc2b      	bgt.n	800a7c8 <_printf_common+0xa0>
 800a770:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a774:	6822      	ldr	r2, [r4, #0]
 800a776:	3b00      	subs	r3, #0
 800a778:	bf18      	it	ne
 800a77a:	2301      	movne	r3, #1
 800a77c:	0692      	lsls	r2, r2, #26
 800a77e:	d430      	bmi.n	800a7e2 <_printf_common+0xba>
 800a780:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a784:	4641      	mov	r1, r8
 800a786:	4638      	mov	r0, r7
 800a788:	47c8      	blx	r9
 800a78a:	3001      	adds	r0, #1
 800a78c:	d023      	beq.n	800a7d6 <_printf_common+0xae>
 800a78e:	6823      	ldr	r3, [r4, #0]
 800a790:	341a      	adds	r4, #26
 800a792:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a796:	f003 0306 	and.w	r3, r3, #6
 800a79a:	2b04      	cmp	r3, #4
 800a79c:	bf0a      	itet	eq
 800a79e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a7a2:	2500      	movne	r5, #0
 800a7a4:	6833      	ldreq	r3, [r6, #0]
 800a7a6:	f04f 0600 	mov.w	r6, #0
 800a7aa:	bf08      	it	eq
 800a7ac:	1aed      	subeq	r5, r5, r3
 800a7ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a7b2:	bf08      	it	eq
 800a7b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	bfc4      	itt	gt
 800a7bc:	1a9b      	subgt	r3, r3, r2
 800a7be:	18ed      	addgt	r5, r5, r3
 800a7c0:	42b5      	cmp	r5, r6
 800a7c2:	d11a      	bne.n	800a7fa <_printf_common+0xd2>
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	e008      	b.n	800a7da <_printf_common+0xb2>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	4652      	mov	r2, sl
 800a7cc:	4641      	mov	r1, r8
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	47c8      	blx	r9
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	d103      	bne.n	800a7de <_printf_common+0xb6>
 800a7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7de:	3501      	adds	r5, #1
 800a7e0:	e7c1      	b.n	800a766 <_printf_common+0x3e>
 800a7e2:	18e1      	adds	r1, r4, r3
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	2030      	movs	r0, #48	@ 0x30
 800a7e8:	3302      	adds	r3, #2
 800a7ea:	4422      	add	r2, r4
 800a7ec:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a7f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a7f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a7f8:	e7c2      	b.n	800a780 <_printf_common+0x58>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	4622      	mov	r2, r4
 800a7fe:	4641      	mov	r1, r8
 800a800:	4638      	mov	r0, r7
 800a802:	47c8      	blx	r9
 800a804:	3001      	adds	r0, #1
 800a806:	d0e6      	beq.n	800a7d6 <_printf_common+0xae>
 800a808:	3601      	adds	r6, #1
 800a80a:	e7d9      	b.n	800a7c0 <_printf_common+0x98>

0800a80c <_printf_i>:
 800a80c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a810:	7e0f      	ldrb	r7, [r1, #24]
 800a812:	4691      	mov	r9, r2
 800a814:	4680      	mov	r8, r0
 800a816:	460c      	mov	r4, r1
 800a818:	2f78      	cmp	r7, #120	@ 0x78
 800a81a:	469a      	mov	sl, r3
 800a81c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a81e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a822:	d807      	bhi.n	800a834 <_printf_i+0x28>
 800a824:	2f62      	cmp	r7, #98	@ 0x62
 800a826:	d80a      	bhi.n	800a83e <_printf_i+0x32>
 800a828:	2f00      	cmp	r7, #0
 800a82a:	f000 80d1 	beq.w	800a9d0 <_printf_i+0x1c4>
 800a82e:	2f58      	cmp	r7, #88	@ 0x58
 800a830:	f000 80b8 	beq.w	800a9a4 <_printf_i+0x198>
 800a834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a838:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a83c:	e03a      	b.n	800a8b4 <_printf_i+0xa8>
 800a83e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a842:	2b15      	cmp	r3, #21
 800a844:	d8f6      	bhi.n	800a834 <_printf_i+0x28>
 800a846:	a101      	add	r1, pc, #4	@ (adr r1, 800a84c <_printf_i+0x40>)
 800a848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a84c:	0800a8a5 	.word	0x0800a8a5
 800a850:	0800a8b9 	.word	0x0800a8b9
 800a854:	0800a835 	.word	0x0800a835
 800a858:	0800a835 	.word	0x0800a835
 800a85c:	0800a835 	.word	0x0800a835
 800a860:	0800a835 	.word	0x0800a835
 800a864:	0800a8b9 	.word	0x0800a8b9
 800a868:	0800a835 	.word	0x0800a835
 800a86c:	0800a835 	.word	0x0800a835
 800a870:	0800a835 	.word	0x0800a835
 800a874:	0800a835 	.word	0x0800a835
 800a878:	0800a9b7 	.word	0x0800a9b7
 800a87c:	0800a8e3 	.word	0x0800a8e3
 800a880:	0800a971 	.word	0x0800a971
 800a884:	0800a835 	.word	0x0800a835
 800a888:	0800a835 	.word	0x0800a835
 800a88c:	0800a9d9 	.word	0x0800a9d9
 800a890:	0800a835 	.word	0x0800a835
 800a894:	0800a8e3 	.word	0x0800a8e3
 800a898:	0800a835 	.word	0x0800a835
 800a89c:	0800a835 	.word	0x0800a835
 800a8a0:	0800a979 	.word	0x0800a979
 800a8a4:	6833      	ldr	r3, [r6, #0]
 800a8a6:	1d1a      	adds	r2, r3, #4
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6032      	str	r2, [r6, #0]
 800a8ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e09c      	b.n	800a9f2 <_printf_i+0x1e6>
 800a8b8:	6833      	ldr	r3, [r6, #0]
 800a8ba:	6820      	ldr	r0, [r4, #0]
 800a8bc:	1d19      	adds	r1, r3, #4
 800a8be:	6031      	str	r1, [r6, #0]
 800a8c0:	0606      	lsls	r6, r0, #24
 800a8c2:	d501      	bpl.n	800a8c8 <_printf_i+0xbc>
 800a8c4:	681d      	ldr	r5, [r3, #0]
 800a8c6:	e003      	b.n	800a8d0 <_printf_i+0xc4>
 800a8c8:	0645      	lsls	r5, r0, #25
 800a8ca:	d5fb      	bpl.n	800a8c4 <_printf_i+0xb8>
 800a8cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8d0:	2d00      	cmp	r5, #0
 800a8d2:	da03      	bge.n	800a8dc <_printf_i+0xd0>
 800a8d4:	232d      	movs	r3, #45	@ 0x2d
 800a8d6:	426d      	negs	r5, r5
 800a8d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8dc:	4858      	ldr	r0, [pc, #352]	@ (800aa40 <_printf_i+0x234>)
 800a8de:	230a      	movs	r3, #10
 800a8e0:	e011      	b.n	800a906 <_printf_i+0xfa>
 800a8e2:	6821      	ldr	r1, [r4, #0]
 800a8e4:	6833      	ldr	r3, [r6, #0]
 800a8e6:	0608      	lsls	r0, r1, #24
 800a8e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a8ec:	d402      	bmi.n	800a8f4 <_printf_i+0xe8>
 800a8ee:	0649      	lsls	r1, r1, #25
 800a8f0:	bf48      	it	mi
 800a8f2:	b2ad      	uxthmi	r5, r5
 800a8f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a8f6:	6033      	str	r3, [r6, #0]
 800a8f8:	4851      	ldr	r0, [pc, #324]	@ (800aa40 <_printf_i+0x234>)
 800a8fa:	bf14      	ite	ne
 800a8fc:	230a      	movne	r3, #10
 800a8fe:	2308      	moveq	r3, #8
 800a900:	2100      	movs	r1, #0
 800a902:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a906:	6866      	ldr	r6, [r4, #4]
 800a908:	2e00      	cmp	r6, #0
 800a90a:	60a6      	str	r6, [r4, #8]
 800a90c:	db05      	blt.n	800a91a <_printf_i+0x10e>
 800a90e:	6821      	ldr	r1, [r4, #0]
 800a910:	432e      	orrs	r6, r5
 800a912:	f021 0104 	bic.w	r1, r1, #4
 800a916:	6021      	str	r1, [r4, #0]
 800a918:	d04b      	beq.n	800a9b2 <_printf_i+0x1a6>
 800a91a:	4616      	mov	r6, r2
 800a91c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a920:	fb03 5711 	mls	r7, r3, r1, r5
 800a924:	5dc7      	ldrb	r7, [r0, r7]
 800a926:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a92a:	462f      	mov	r7, r5
 800a92c:	460d      	mov	r5, r1
 800a92e:	42bb      	cmp	r3, r7
 800a930:	d9f4      	bls.n	800a91c <_printf_i+0x110>
 800a932:	2b08      	cmp	r3, #8
 800a934:	d10b      	bne.n	800a94e <_printf_i+0x142>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	07df      	lsls	r7, r3, #31
 800a93a:	d508      	bpl.n	800a94e <_printf_i+0x142>
 800a93c:	6923      	ldr	r3, [r4, #16]
 800a93e:	6861      	ldr	r1, [r4, #4]
 800a940:	4299      	cmp	r1, r3
 800a942:	bfde      	ittt	le
 800a944:	2330      	movle	r3, #48	@ 0x30
 800a946:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a94a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a94e:	1b92      	subs	r2, r2, r6
 800a950:	6122      	str	r2, [r4, #16]
 800a952:	464b      	mov	r3, r9
 800a954:	aa03      	add	r2, sp, #12
 800a956:	4621      	mov	r1, r4
 800a958:	4640      	mov	r0, r8
 800a95a:	f8cd a000 	str.w	sl, [sp]
 800a95e:	f7ff fee3 	bl	800a728 <_printf_common>
 800a962:	3001      	adds	r0, #1
 800a964:	d14a      	bne.n	800a9fc <_printf_i+0x1f0>
 800a966:	f04f 30ff 	mov.w	r0, #4294967295
 800a96a:	b004      	add	sp, #16
 800a96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	f043 0320 	orr.w	r3, r3, #32
 800a976:	6023      	str	r3, [r4, #0]
 800a978:	2778      	movs	r7, #120	@ 0x78
 800a97a:	4832      	ldr	r0, [pc, #200]	@ (800aa44 <_printf_i+0x238>)
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a982:	061f      	lsls	r7, r3, #24
 800a984:	6831      	ldr	r1, [r6, #0]
 800a986:	f851 5b04 	ldr.w	r5, [r1], #4
 800a98a:	d402      	bmi.n	800a992 <_printf_i+0x186>
 800a98c:	065f      	lsls	r7, r3, #25
 800a98e:	bf48      	it	mi
 800a990:	b2ad      	uxthmi	r5, r5
 800a992:	6031      	str	r1, [r6, #0]
 800a994:	07d9      	lsls	r1, r3, #31
 800a996:	bf44      	itt	mi
 800a998:	f043 0320 	orrmi.w	r3, r3, #32
 800a99c:	6023      	strmi	r3, [r4, #0]
 800a99e:	b11d      	cbz	r5, 800a9a8 <_printf_i+0x19c>
 800a9a0:	2310      	movs	r3, #16
 800a9a2:	e7ad      	b.n	800a900 <_printf_i+0xf4>
 800a9a4:	4826      	ldr	r0, [pc, #152]	@ (800aa40 <_printf_i+0x234>)
 800a9a6:	e7e9      	b.n	800a97c <_printf_i+0x170>
 800a9a8:	6823      	ldr	r3, [r4, #0]
 800a9aa:	f023 0320 	bic.w	r3, r3, #32
 800a9ae:	6023      	str	r3, [r4, #0]
 800a9b0:	e7f6      	b.n	800a9a0 <_printf_i+0x194>
 800a9b2:	4616      	mov	r6, r2
 800a9b4:	e7bd      	b.n	800a932 <_printf_i+0x126>
 800a9b6:	6833      	ldr	r3, [r6, #0]
 800a9b8:	6825      	ldr	r5, [r4, #0]
 800a9ba:	1d18      	adds	r0, r3, #4
 800a9bc:	6961      	ldr	r1, [r4, #20]
 800a9be:	6030      	str	r0, [r6, #0]
 800a9c0:	062e      	lsls	r6, r5, #24
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	d501      	bpl.n	800a9ca <_printf_i+0x1be>
 800a9c6:	6019      	str	r1, [r3, #0]
 800a9c8:	e002      	b.n	800a9d0 <_printf_i+0x1c4>
 800a9ca:	0668      	lsls	r0, r5, #25
 800a9cc:	d5fb      	bpl.n	800a9c6 <_printf_i+0x1ba>
 800a9ce:	8019      	strh	r1, [r3, #0]
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	4616      	mov	r6, r2
 800a9d4:	6123      	str	r3, [r4, #16]
 800a9d6:	e7bc      	b.n	800a952 <_printf_i+0x146>
 800a9d8:	6833      	ldr	r3, [r6, #0]
 800a9da:	2100      	movs	r1, #0
 800a9dc:	1d1a      	adds	r2, r3, #4
 800a9de:	6032      	str	r2, [r6, #0]
 800a9e0:	681e      	ldr	r6, [r3, #0]
 800a9e2:	6862      	ldr	r2, [r4, #4]
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f000 f95f 	bl	800aca8 <memchr>
 800a9ea:	b108      	cbz	r0, 800a9f0 <_printf_i+0x1e4>
 800a9ec:	1b80      	subs	r0, r0, r6
 800a9ee:	6060      	str	r0, [r4, #4]
 800a9f0:	6863      	ldr	r3, [r4, #4]
 800a9f2:	6123      	str	r3, [r4, #16]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9fa:	e7aa      	b.n	800a952 <_printf_i+0x146>
 800a9fc:	6923      	ldr	r3, [r4, #16]
 800a9fe:	4632      	mov	r2, r6
 800aa00:	4649      	mov	r1, r9
 800aa02:	4640      	mov	r0, r8
 800aa04:	47d0      	blx	sl
 800aa06:	3001      	adds	r0, #1
 800aa08:	d0ad      	beq.n	800a966 <_printf_i+0x15a>
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	079b      	lsls	r3, r3, #30
 800aa0e:	d413      	bmi.n	800aa38 <_printf_i+0x22c>
 800aa10:	68e0      	ldr	r0, [r4, #12]
 800aa12:	9b03      	ldr	r3, [sp, #12]
 800aa14:	4298      	cmp	r0, r3
 800aa16:	bfb8      	it	lt
 800aa18:	4618      	movlt	r0, r3
 800aa1a:	e7a6      	b.n	800a96a <_printf_i+0x15e>
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	4632      	mov	r2, r6
 800aa20:	4649      	mov	r1, r9
 800aa22:	4640      	mov	r0, r8
 800aa24:	47d0      	blx	sl
 800aa26:	3001      	adds	r0, #1
 800aa28:	d09d      	beq.n	800a966 <_printf_i+0x15a>
 800aa2a:	3501      	adds	r5, #1
 800aa2c:	68e3      	ldr	r3, [r4, #12]
 800aa2e:	9903      	ldr	r1, [sp, #12]
 800aa30:	1a5b      	subs	r3, r3, r1
 800aa32:	42ab      	cmp	r3, r5
 800aa34:	dcf2      	bgt.n	800aa1c <_printf_i+0x210>
 800aa36:	e7eb      	b.n	800aa10 <_printf_i+0x204>
 800aa38:	2500      	movs	r5, #0
 800aa3a:	f104 0619 	add.w	r6, r4, #25
 800aa3e:	e7f5      	b.n	800aa2c <_printf_i+0x220>
 800aa40:	0800ae99 	.word	0x0800ae99
 800aa44:	0800aeaa 	.word	0x0800aeaa

0800aa48 <__sflush_r>:
 800aa48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa50:	0716      	lsls	r6, r2, #28
 800aa52:	4605      	mov	r5, r0
 800aa54:	460c      	mov	r4, r1
 800aa56:	d454      	bmi.n	800ab02 <__sflush_r+0xba>
 800aa58:	684b      	ldr	r3, [r1, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	dc02      	bgt.n	800aa64 <__sflush_r+0x1c>
 800aa5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	dd48      	ble.n	800aaf6 <__sflush_r+0xae>
 800aa64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa66:	2e00      	cmp	r6, #0
 800aa68:	d045      	beq.n	800aaf6 <__sflush_r+0xae>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa70:	682f      	ldr	r7, [r5, #0]
 800aa72:	6a21      	ldr	r1, [r4, #32]
 800aa74:	602b      	str	r3, [r5, #0]
 800aa76:	d030      	beq.n	800aada <__sflush_r+0x92>
 800aa78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	0759      	lsls	r1, r3, #29
 800aa7e:	d505      	bpl.n	800aa8c <__sflush_r+0x44>
 800aa80:	6863      	ldr	r3, [r4, #4]
 800aa82:	1ad2      	subs	r2, r2, r3
 800aa84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa86:	b10b      	cbz	r3, 800aa8c <__sflush_r+0x44>
 800aa88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa8a:	1ad2      	subs	r2, r2, r3
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa90:	6a21      	ldr	r1, [r4, #32]
 800aa92:	4628      	mov	r0, r5
 800aa94:	47b0      	blx	r6
 800aa96:	1c43      	adds	r3, r0, #1
 800aa98:	89a3      	ldrh	r3, [r4, #12]
 800aa9a:	d106      	bne.n	800aaaa <__sflush_r+0x62>
 800aa9c:	6829      	ldr	r1, [r5, #0]
 800aa9e:	291d      	cmp	r1, #29
 800aaa0:	d82b      	bhi.n	800aafa <__sflush_r+0xb2>
 800aaa2:	4a2a      	ldr	r2, [pc, #168]	@ (800ab4c <__sflush_r+0x104>)
 800aaa4:	40ca      	lsrs	r2, r1
 800aaa6:	07d6      	lsls	r6, r2, #31
 800aaa8:	d527      	bpl.n	800aafa <__sflush_r+0xb2>
 800aaaa:	2200      	movs	r2, #0
 800aaac:	04d9      	lsls	r1, r3, #19
 800aaae:	6062      	str	r2, [r4, #4]
 800aab0:	6922      	ldr	r2, [r4, #16]
 800aab2:	6022      	str	r2, [r4, #0]
 800aab4:	d504      	bpl.n	800aac0 <__sflush_r+0x78>
 800aab6:	1c42      	adds	r2, r0, #1
 800aab8:	d101      	bne.n	800aabe <__sflush_r+0x76>
 800aaba:	682b      	ldr	r3, [r5, #0]
 800aabc:	b903      	cbnz	r3, 800aac0 <__sflush_r+0x78>
 800aabe:	6560      	str	r0, [r4, #84]	@ 0x54
 800aac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aac2:	602f      	str	r7, [r5, #0]
 800aac4:	b1b9      	cbz	r1, 800aaf6 <__sflush_r+0xae>
 800aac6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aaca:	4299      	cmp	r1, r3
 800aacc:	d002      	beq.n	800aad4 <__sflush_r+0x8c>
 800aace:	4628      	mov	r0, r5
 800aad0:	f7ff fc9e 	bl	800a410 <_free_r>
 800aad4:	2300      	movs	r3, #0
 800aad6:	6363      	str	r3, [r4, #52]	@ 0x34
 800aad8:	e00d      	b.n	800aaf6 <__sflush_r+0xae>
 800aada:	2301      	movs	r3, #1
 800aadc:	4628      	mov	r0, r5
 800aade:	47b0      	blx	r6
 800aae0:	4602      	mov	r2, r0
 800aae2:	1c50      	adds	r0, r2, #1
 800aae4:	d1c9      	bne.n	800aa7a <__sflush_r+0x32>
 800aae6:	682b      	ldr	r3, [r5, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d0c6      	beq.n	800aa7a <__sflush_r+0x32>
 800aaec:	2b1d      	cmp	r3, #29
 800aaee:	d001      	beq.n	800aaf4 <__sflush_r+0xac>
 800aaf0:	2b16      	cmp	r3, #22
 800aaf2:	d11d      	bne.n	800ab30 <__sflush_r+0xe8>
 800aaf4:	602f      	str	r7, [r5, #0]
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	e021      	b.n	800ab3e <__sflush_r+0xf6>
 800aafa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aafe:	b21b      	sxth	r3, r3
 800ab00:	e01a      	b.n	800ab38 <__sflush_r+0xf0>
 800ab02:	690f      	ldr	r7, [r1, #16]
 800ab04:	2f00      	cmp	r7, #0
 800ab06:	d0f6      	beq.n	800aaf6 <__sflush_r+0xae>
 800ab08:	0793      	lsls	r3, r2, #30
 800ab0a:	680e      	ldr	r6, [r1, #0]
 800ab0c:	600f      	str	r7, [r1, #0]
 800ab0e:	bf0c      	ite	eq
 800ab10:	694b      	ldreq	r3, [r1, #20]
 800ab12:	2300      	movne	r3, #0
 800ab14:	eba6 0807 	sub.w	r8, r6, r7
 800ab18:	608b      	str	r3, [r1, #8]
 800ab1a:	f1b8 0f00 	cmp.w	r8, #0
 800ab1e:	ddea      	ble.n	800aaf6 <__sflush_r+0xae>
 800ab20:	4643      	mov	r3, r8
 800ab22:	463a      	mov	r2, r7
 800ab24:	6a21      	ldr	r1, [r4, #32]
 800ab26:	4628      	mov	r0, r5
 800ab28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab2a:	47b0      	blx	r6
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	dc08      	bgt.n	800ab42 <__sflush_r+0xfa>
 800ab30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3c:	81a3      	strh	r3, [r4, #12]
 800ab3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab42:	4407      	add	r7, r0
 800ab44:	eba8 0800 	sub.w	r8, r8, r0
 800ab48:	e7e7      	b.n	800ab1a <__sflush_r+0xd2>
 800ab4a:	bf00      	nop
 800ab4c:	20400001 	.word	0x20400001

0800ab50 <_fflush_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	690b      	ldr	r3, [r1, #16]
 800ab54:	4605      	mov	r5, r0
 800ab56:	460c      	mov	r4, r1
 800ab58:	b913      	cbnz	r3, 800ab60 <_fflush_r+0x10>
 800ab5a:	2500      	movs	r5, #0
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}
 800ab60:	b118      	cbz	r0, 800ab6a <_fflush_r+0x1a>
 800ab62:	6a03      	ldr	r3, [r0, #32]
 800ab64:	b90b      	cbnz	r3, 800ab6a <_fflush_r+0x1a>
 800ab66:	f7ff fa9b 	bl	800a0a0 <__sinit>
 800ab6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0f3      	beq.n	800ab5a <_fflush_r+0xa>
 800ab72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab74:	07d0      	lsls	r0, r2, #31
 800ab76:	d404      	bmi.n	800ab82 <_fflush_r+0x32>
 800ab78:	0599      	lsls	r1, r3, #22
 800ab7a:	d402      	bmi.n	800ab82 <_fflush_r+0x32>
 800ab7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab7e:	f7ff fc38 	bl	800a3f2 <__retarget_lock_acquire_recursive>
 800ab82:	4628      	mov	r0, r5
 800ab84:	4621      	mov	r1, r4
 800ab86:	f7ff ff5f 	bl	800aa48 <__sflush_r>
 800ab8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab8c:	4605      	mov	r5, r0
 800ab8e:	07da      	lsls	r2, r3, #31
 800ab90:	d4e4      	bmi.n	800ab5c <_fflush_r+0xc>
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	059b      	lsls	r3, r3, #22
 800ab96:	d4e1      	bmi.n	800ab5c <_fflush_r+0xc>
 800ab98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab9a:	f7ff fc2b 	bl	800a3f4 <__retarget_lock_release_recursive>
 800ab9e:	e7dd      	b.n	800ab5c <_fflush_r+0xc>

0800aba0 <__swhatbuf_r>:
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	460c      	mov	r4, r1
 800aba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba8:	b096      	sub	sp, #88	@ 0x58
 800abaa:	4615      	mov	r5, r2
 800abac:	2900      	cmp	r1, #0
 800abae:	461e      	mov	r6, r3
 800abb0:	da0c      	bge.n	800abcc <__swhatbuf_r+0x2c>
 800abb2:	89a3      	ldrh	r3, [r4, #12]
 800abb4:	2100      	movs	r1, #0
 800abb6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800abba:	bf14      	ite	ne
 800abbc:	2340      	movne	r3, #64	@ 0x40
 800abbe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800abc2:	2000      	movs	r0, #0
 800abc4:	6031      	str	r1, [r6, #0]
 800abc6:	602b      	str	r3, [r5, #0]
 800abc8:	b016      	add	sp, #88	@ 0x58
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	466a      	mov	r2, sp
 800abce:	f000 f849 	bl	800ac64 <_fstat_r>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	dbed      	blt.n	800abb2 <__swhatbuf_r+0x12>
 800abd6:	9901      	ldr	r1, [sp, #4]
 800abd8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800abdc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800abe0:	4259      	negs	r1, r3
 800abe2:	4159      	adcs	r1, r3
 800abe4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abe8:	e7eb      	b.n	800abc2 <__swhatbuf_r+0x22>

0800abea <__smakebuf_r>:
 800abea:	898b      	ldrh	r3, [r1, #12]
 800abec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abee:	079d      	lsls	r5, r3, #30
 800abf0:	4606      	mov	r6, r0
 800abf2:	460c      	mov	r4, r1
 800abf4:	d507      	bpl.n	800ac06 <__smakebuf_r+0x1c>
 800abf6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800abfa:	6023      	str	r3, [r4, #0]
 800abfc:	6123      	str	r3, [r4, #16]
 800abfe:	2301      	movs	r3, #1
 800ac00:	6163      	str	r3, [r4, #20]
 800ac02:	b003      	add	sp, #12
 800ac04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac06:	ab01      	add	r3, sp, #4
 800ac08:	466a      	mov	r2, sp
 800ac0a:	f7ff ffc9 	bl	800aba0 <__swhatbuf_r>
 800ac0e:	9f00      	ldr	r7, [sp, #0]
 800ac10:	4605      	mov	r5, r0
 800ac12:	4630      	mov	r0, r6
 800ac14:	4639      	mov	r1, r7
 800ac16:	f7ff f92b 	bl	8009e70 <_malloc_r>
 800ac1a:	b948      	cbnz	r0, 800ac30 <__smakebuf_r+0x46>
 800ac1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac20:	059a      	lsls	r2, r3, #22
 800ac22:	d4ee      	bmi.n	800ac02 <__smakebuf_r+0x18>
 800ac24:	f023 0303 	bic.w	r3, r3, #3
 800ac28:	f043 0302 	orr.w	r3, r3, #2
 800ac2c:	81a3      	strh	r3, [r4, #12]
 800ac2e:	e7e2      	b.n	800abf6 <__smakebuf_r+0xc>
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	6020      	str	r0, [r4, #0]
 800ac34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac38:	81a3      	strh	r3, [r4, #12]
 800ac3a:	9b01      	ldr	r3, [sp, #4]
 800ac3c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac40:	b15b      	cbz	r3, 800ac5a <__smakebuf_r+0x70>
 800ac42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac46:	4630      	mov	r0, r6
 800ac48:	f000 f81e 	bl	800ac88 <_isatty_r>
 800ac4c:	b128      	cbz	r0, 800ac5a <__smakebuf_r+0x70>
 800ac4e:	89a3      	ldrh	r3, [r4, #12]
 800ac50:	f023 0303 	bic.w	r3, r3, #3
 800ac54:	f043 0301 	orr.w	r3, r3, #1
 800ac58:	81a3      	strh	r3, [r4, #12]
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	431d      	orrs	r5, r3
 800ac5e:	81a5      	strh	r5, [r4, #12]
 800ac60:	e7cf      	b.n	800ac02 <__smakebuf_r+0x18>
	...

0800ac64 <_fstat_r>:
 800ac64:	b538      	push	{r3, r4, r5, lr}
 800ac66:	2300      	movs	r3, #0
 800ac68:	4d06      	ldr	r5, [pc, #24]	@ (800ac84 <_fstat_r+0x20>)
 800ac6a:	4604      	mov	r4, r0
 800ac6c:	4608      	mov	r0, r1
 800ac6e:	4611      	mov	r1, r2
 800ac70:	602b      	str	r3, [r5, #0]
 800ac72:	f7f6 fa54 	bl	800111e <_fstat>
 800ac76:	1c43      	adds	r3, r0, #1
 800ac78:	d102      	bne.n	800ac80 <_fstat_r+0x1c>
 800ac7a:	682b      	ldr	r3, [r5, #0]
 800ac7c:	b103      	cbz	r3, 800ac80 <_fstat_r+0x1c>
 800ac7e:	6023      	str	r3, [r4, #0]
 800ac80:	bd38      	pop	{r3, r4, r5, pc}
 800ac82:	bf00      	nop
 800ac84:	200031e0 	.word	0x200031e0

0800ac88 <_isatty_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	4d05      	ldr	r5, [pc, #20]	@ (800aca4 <_isatty_r+0x1c>)
 800ac8e:	4604      	mov	r4, r0
 800ac90:	4608      	mov	r0, r1
 800ac92:	602b      	str	r3, [r5, #0]
 800ac94:	f7f6 fa53 	bl	800113e <_isatty>
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	d102      	bne.n	800aca2 <_isatty_r+0x1a>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	b103      	cbz	r3, 800aca2 <_isatty_r+0x1a>
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	bd38      	pop	{r3, r4, r5, pc}
 800aca4:	200031e0 	.word	0x200031e0

0800aca8 <memchr>:
 800aca8:	b2c9      	uxtb	r1, r1
 800acaa:	4603      	mov	r3, r0
 800acac:	4402      	add	r2, r0
 800acae:	b510      	push	{r4, lr}
 800acb0:	4293      	cmp	r3, r2
 800acb2:	4618      	mov	r0, r3
 800acb4:	d101      	bne.n	800acba <memchr+0x12>
 800acb6:	2000      	movs	r0, #0
 800acb8:	e003      	b.n	800acc2 <memchr+0x1a>
 800acba:	7804      	ldrb	r4, [r0, #0]
 800acbc:	3301      	adds	r3, #1
 800acbe:	428c      	cmp	r4, r1
 800acc0:	d1f6      	bne.n	800acb0 <memchr+0x8>
 800acc2:	bd10      	pop	{r4, pc}

0800acc4 <_init>:
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	bf00      	nop
 800acc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acca:	bc08      	pop	{r3}
 800accc:	469e      	mov	lr, r3
 800acce:	4770      	bx	lr

0800acd0 <_fini>:
 800acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd2:	bf00      	nop
 800acd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd6:	bc08      	pop	{r3}
 800acd8:	469e      	mov	lr, r3
 800acda:	4770      	bx	lr
