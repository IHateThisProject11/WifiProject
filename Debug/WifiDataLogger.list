
WifiDataLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf9c  08000260  08000260  00001260  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800d1fc  0800d1fc  0000e1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5f8  0800d5f8  0000f088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d5f8  0800d5f8  0000e5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d600  0800d600  0000f088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d600  0800d600  0000e600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d604  0800d604  0000e604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800d608  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003188  20000088  0800d690  0000f088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003210  0800d690  0000f210  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000f088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a74f  00000000  00000000  0000f0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c0b  00000000  00000000  0003980d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002400  00000000  00000000  0003f418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c2b  00000000  00000000  00041818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dfb  00000000  00000000  00043443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002decf  00000000  00000000  0006c23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec0c9  00000000  00000000  0009a10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001861d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009db0  00000000  00000000  0018621c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  0018ffcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000260 <__do_global_dtors_aux>:
 8000260:	b510      	push	{r4, lr}
 8000262:	4c05      	ldr	r4, [pc, #20]	@ (8000278 <__do_global_dtors_aux+0x18>)
 8000264:	7823      	ldrb	r3, [r4, #0]
 8000266:	b933      	cbnz	r3, 8000276 <__do_global_dtors_aux+0x16>
 8000268:	4b04      	ldr	r3, [pc, #16]	@ (800027c <__do_global_dtors_aux+0x1c>)
 800026a:	b113      	cbz	r3, 8000272 <__do_global_dtors_aux+0x12>
 800026c:	4804      	ldr	r0, [pc, #16]	@ (8000280 <__do_global_dtors_aux+0x20>)
 800026e:	f3af 8000 	nop.w
 8000272:	2301      	movs	r3, #1
 8000274:	7023      	strb	r3, [r4, #0]
 8000276:	bd10      	pop	{r4, pc}
 8000278:	20000088 	.word	0x20000088
 800027c:	00000000 	.word	0x00000000
 8000280:	0800d1e4 	.word	0x0800d1e4

08000284 <frame_dummy>:
 8000284:	b508      	push	{r3, lr}
 8000286:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <frame_dummy+0x10>)
 8000288:	b11b      	cbz	r3, 8000292 <frame_dummy+0xe>
 800028a:	4903      	ldr	r1, [pc, #12]	@ (8000298 <frame_dummy+0x14>)
 800028c:	4803      	ldr	r0, [pc, #12]	@ (800029c <frame_dummy+0x18>)
 800028e:	f3af 8000 	nop.w
 8000292:	bd08      	pop	{r3, pc}
 8000294:	00000000 	.word	0x00000000
 8000298:	2000008c 	.word	0x2000008c
 800029c:	0800d1e4 	.word	0x0800d1e4

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b9b0 	b.w	8000618 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d6:	4688      	mov	r8, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	468e      	mov	lr, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d95f      	bls.n	80003a6 <__udivmoddi4+0xd6>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 fe06 	lsl.w	lr, r1, r6
 80002f4:	40b7      	lsls	r7, r6
 80002f6:	40b4      	lsls	r4, r6
 80002f8:	fa20 f303 	lsr.w	r3, r0, r3
 80002fc:	ea43 0e0e 	orr.w	lr, r3, lr
 8000300:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	0c23      	lsrs	r3, r4, #16
 800030a:	fbbe f1f8 	udiv	r1, lr, r8
 800030e:	fb08 ee11 	mls	lr, r8, r1, lr
 8000312:	fb01 f20c 	mul.w	r2, r1, ip
 8000316:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x5e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x5c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 8154 	bhi.w	80005d4 <__udivmoddi4+0x304>
 800032c:	4601      	mov	r1, r0
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	b2a2      	uxth	r2, r4
 8000332:	fbb3 f0f8 	udiv	r0, r3, r8
 8000336:	fb08 3310 	mls	r3, r8, r0, r3
 800033a:	fb00 fc0c 	mul.w	ip, r0, ip
 800033e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000342:	4594      	cmp	ip, r2
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x8e>
 8000346:	18ba      	adds	r2, r7, r2
 8000348:	f100 33ff 	add.w	r3, r0, #4294967295
 800034c:	bf2c      	ite	cs
 800034e:	2401      	movcs	r4, #1
 8000350:	2400      	movcc	r4, #0
 8000352:	4594      	cmp	ip, r2
 8000354:	d902      	bls.n	800035c <__udivmoddi4+0x8c>
 8000356:	2c00      	cmp	r4, #0
 8000358:	f000 813f 	beq.w	80005da <__udivmoddi4+0x30a>
 800035c:	4618      	mov	r0, r3
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba2 020c 	sub.w	r2, r2, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f2      	lsrs	r2, r6
 800036c:	2300      	movs	r3, #0
 800036e:	e9c5 2300 	strd	r2, r3, [r5]
 8000372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d14e      	bne.n	800042c <__udivmoddi4+0x15c>
 800038e:	4543      	cmp	r3, r8
 8000390:	f0c0 8112 	bcc.w	80005b8 <__udivmoddi4+0x2e8>
 8000394:	4282      	cmp	r2, r0
 8000396:	f240 810f 	bls.w	80005b8 <__udivmoddi4+0x2e8>
 800039a:	4608      	mov	r0, r1
 800039c:	2d00      	cmp	r5, #0
 800039e:	d0e8      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a0:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a4:	e7e5      	b.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	f000 80ac 	beq.w	8000504 <__udivmoddi4+0x234>
 80003ac:	fab2 f682 	clz	r6, r2
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	f040 80bb 	bne.w	800052c <__udivmoddi4+0x25c>
 80003b6:	1a8b      	subs	r3, r1, r2
 80003b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003bc:	b2bc      	uxth	r4, r7
 80003be:	2101      	movs	r1, #1
 80003c0:	0c02      	lsrs	r2, r0, #16
 80003c2:	b280      	uxth	r0, r0
 80003c4:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80003cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003d0:	fb04 f20c 	mul.w	r2, r4, ip
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d90e      	bls.n	80003f6 <__udivmoddi4+0x126>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003de:	bf2c      	ite	cs
 80003e0:	f04f 0901 	movcs.w	r9, #1
 80003e4:	f04f 0900 	movcc.w	r9, #0
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d903      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003ec:	f1b9 0f00 	cmp.w	r9, #0
 80003f0:	f000 80ec 	beq.w	80005cc <__udivmoddi4+0x2fc>
 80003f4:	46c4      	mov	ip, r8
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	fbb3 f8fe 	udiv	r8, r3, lr
 80003fc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000400:	fb04 f408 	mul.w	r4, r4, r8
 8000404:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000408:	4294      	cmp	r4, r2
 800040a:	d90b      	bls.n	8000424 <__udivmoddi4+0x154>
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	f108 33ff 	add.w	r3, r8, #4294967295
 8000412:	bf2c      	ite	cs
 8000414:	2001      	movcs	r0, #1
 8000416:	2000      	movcc	r0, #0
 8000418:	4294      	cmp	r4, r2
 800041a:	d902      	bls.n	8000422 <__udivmoddi4+0x152>
 800041c:	2800      	cmp	r0, #0
 800041e:	f000 80d1 	beq.w	80005c4 <__udivmoddi4+0x2f4>
 8000422:	4698      	mov	r8, r3
 8000424:	1b12      	subs	r2, r2, r4
 8000426:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800042a:	e79d      	b.n	8000368 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa08 f401 	lsl.w	r4, r8, r1
 8000436:	fa00 f901 	lsl.w	r9, r0, r1
 800043a:	fa22 f706 	lsr.w	r7, r2, r6
 800043e:	fa28 f806 	lsr.w	r8, r8, r6
 8000442:	408a      	lsls	r2, r1
 8000444:	431f      	orrs	r7, r3
 8000446:	fa20 f306 	lsr.w	r3, r0, r6
 800044a:	0c38      	lsrs	r0, r7, #16
 800044c:	4323      	orrs	r3, r4
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	fbb8 fef0 	udiv	lr, r8, r0
 8000458:	fb00 881e 	mls	r8, r0, lr, r8
 800045c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000460:	fb0e f80c 	mul.w	r8, lr, ip
 8000464:	45a0      	cmp	r8, r4
 8000466:	d90e      	bls.n	8000486 <__udivmoddi4+0x1b6>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b4>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 80b8 	beq.w	80005f4 <__udivmoddi4+0x324>
 8000484:	46d6      	mov	lr, sl
 8000486:	eba4 0408 	sub.w	r4, r4, r8
 800048a:	fa1f f883 	uxth.w	r8, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	fb03 fc0c 	mul.w	ip, r3, ip
 800049a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d90e      	bls.n	80004c0 <__udivmoddi4+0x1f0>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	bf2c      	ite	cs
 80004aa:	f04f 0801 	movcs.w	r8, #1
 80004ae:	f04f 0800 	movcc.w	r8, #0
 80004b2:	45a4      	cmp	ip, r4
 80004b4:	d903      	bls.n	80004be <__udivmoddi4+0x1ee>
 80004b6:	f1b8 0f00 	cmp.w	r8, #0
 80004ba:	f000 809f 	beq.w	80005fc <__udivmoddi4+0x32c>
 80004be:	4603      	mov	r3, r0
 80004c0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c4:	eba4 040c 	sub.w	r4, r4, ip
 80004c8:	fba0 ec02 	umull	lr, ip, r0, r2
 80004cc:	4564      	cmp	r4, ip
 80004ce:	4673      	mov	r3, lr
 80004d0:	46e0      	mov	r8, ip
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x20a>
 80004d4:	d107      	bne.n	80004e6 <__udivmoddi4+0x216>
 80004d6:	45f1      	cmp	r9, lr
 80004d8:	d205      	bcs.n	80004e6 <__udivmoddi4+0x216>
 80004da:	ebbe 0302 	subs.w	r3, lr, r2
 80004de:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	46e0      	mov	r8, ip
 80004e6:	b15d      	cbz	r5, 8000500 <__udivmoddi4+0x230>
 80004e8:	ebb9 0203 	subs.w	r2, r9, r3
 80004ec:	eb64 0408 	sbc.w	r4, r4, r8
 80004f0:	fa04 f606 	lsl.w	r6, r4, r6
 80004f4:	fa22 f301 	lsr.w	r3, r2, r1
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	431e      	orrs	r6, r3
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e736      	b.n	8000372 <__udivmoddi4+0xa2>
 8000504:	fbb1 fcf2 	udiv	ip, r1, r2
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	4614      	mov	r4, r2
 800050c:	b280      	uxth	r0, r0
 800050e:	4696      	mov	lr, r2
 8000510:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000514:	2620      	movs	r6, #32
 8000516:	4690      	mov	r8, r2
 8000518:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 800051c:	4610      	mov	r0, r2
 800051e:	fbb1 f1f2 	udiv	r1, r1, r2
 8000522:	eba3 0308 	sub.w	r3, r3, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e74b      	b.n	80003c4 <__udivmoddi4+0xf4>
 800052c:	40b7      	lsls	r7, r6
 800052e:	f1c6 0320 	rsb	r3, r6, #32
 8000532:	fa01 f206 	lsl.w	r2, r1, r6
 8000536:	fa21 f803 	lsr.w	r8, r1, r3
 800053a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800053e:	fa20 f303 	lsr.w	r3, r0, r3
 8000542:	b2bc      	uxth	r4, r7
 8000544:	40b0      	lsls	r0, r6
 8000546:	4313      	orrs	r3, r2
 8000548:	0c02      	lsrs	r2, r0, #16
 800054a:	0c19      	lsrs	r1, r3, #16
 800054c:	b280      	uxth	r0, r0
 800054e:	fbb8 f9fe 	udiv	r9, r8, lr
 8000552:	fb0e 8819 	mls	r8, lr, r9, r8
 8000556:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	4588      	cmp	r8, r1
 8000560:	d951      	bls.n	8000606 <__udivmoddi4+0x336>
 8000562:	1879      	adds	r1, r7, r1
 8000564:	f109 3cff 	add.w	ip, r9, #4294967295
 8000568:	bf2c      	ite	cs
 800056a:	f04f 0a01 	movcs.w	sl, #1
 800056e:	f04f 0a00 	movcc.w	sl, #0
 8000572:	4588      	cmp	r8, r1
 8000574:	d902      	bls.n	800057c <__udivmoddi4+0x2ac>
 8000576:	f1ba 0f00 	cmp.w	sl, #0
 800057a:	d031      	beq.n	80005e0 <__udivmoddi4+0x310>
 800057c:	eba1 0108 	sub.w	r1, r1, r8
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	fb0e 1119 	mls	r1, lr, r9, r1
 800058c:	b29b      	uxth	r3, r3
 800058e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000592:	4543      	cmp	r3, r8
 8000594:	d235      	bcs.n	8000602 <__udivmoddi4+0x332>
 8000596:	18fb      	adds	r3, r7, r3
 8000598:	f109 31ff 	add.w	r1, r9, #4294967295
 800059c:	bf2c      	ite	cs
 800059e:	f04f 0a01 	movcs.w	sl, #1
 80005a2:	f04f 0a00 	movcc.w	sl, #0
 80005a6:	4543      	cmp	r3, r8
 80005a8:	d2bb      	bcs.n	8000522 <__udivmoddi4+0x252>
 80005aa:	f1ba 0f00 	cmp.w	sl, #0
 80005ae:	d1b8      	bne.n	8000522 <__udivmoddi4+0x252>
 80005b0:	f1a9 0102 	sub.w	r1, r9, #2
 80005b4:	443b      	add	r3, r7
 80005b6:	e7b4      	b.n	8000522 <__udivmoddi4+0x252>
 80005b8:	1a84      	subs	r4, r0, r2
 80005ba:	eb68 0203 	sbc.w	r2, r8, r3
 80005be:	2001      	movs	r0, #1
 80005c0:	4696      	mov	lr, r2
 80005c2:	e6eb      	b.n	800039c <__udivmoddi4+0xcc>
 80005c4:	443a      	add	r2, r7
 80005c6:	f1a8 0802 	sub.w	r8, r8, #2
 80005ca:	e72b      	b.n	8000424 <__udivmoddi4+0x154>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e710      	b.n	80003f6 <__udivmoddi4+0x126>
 80005d4:	3902      	subs	r1, #2
 80005d6:	443b      	add	r3, r7
 80005d8:	e6a9      	b.n	800032e <__udivmoddi4+0x5e>
 80005da:	443a      	add	r2, r7
 80005dc:	3802      	subs	r0, #2
 80005de:	e6be      	b.n	800035e <__udivmoddi4+0x8e>
 80005e0:	eba7 0808 	sub.w	r8, r7, r8
 80005e4:	f1a9 0c02 	sub.w	ip, r9, #2
 80005e8:	4441      	add	r1, r8
 80005ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ee:	fb09 f804 	mul.w	r8, r9, r4
 80005f2:	e7c9      	b.n	8000588 <__udivmoddi4+0x2b8>
 80005f4:	f1ae 0e02 	sub.w	lr, lr, #2
 80005f8:	443c      	add	r4, r7
 80005fa:	e744      	b.n	8000486 <__udivmoddi4+0x1b6>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e75e      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000602:	4649      	mov	r1, r9
 8000604:	e78d      	b.n	8000522 <__udivmoddi4+0x252>
 8000606:	eba1 0108 	sub.w	r1, r1, r8
 800060a:	46cc      	mov	ip, r9
 800060c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000610:	fb09 f804 	mul.w	r8, r9, r4
 8000614:	e7b8      	b.n	8000588 <__udivmoddi4+0x2b8>
 8000616:	bf00      	nop

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <wifi_cb>:

/**
 * @brief Wi-Fi event callback.
 */
void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	4603      	mov	r3, r0
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	71fb      	strb	r3, [r7, #7]
    switch (u8MsgType) {
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b2c      	cmp	r3, #44	@ 0x2c
 800062c:	d002      	beq.n	8000634 <wifi_cb+0x18>
 800062e:	2b32      	cmp	r3, #50	@ 0x32
 8000630:	d00e      	beq.n	8000650 <wifi_cb+0x34>
                ip[0], ip[1], ip[2], ip[3]);
        break;
    }

    default:
        break;
 8000632:	e024      	b.n	800067e <wifi_cb+0x62>
        tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	60bb      	str	r3, [r7, #8]
        if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d01d      	beq.n	800067c <wifi_cb+0x60>
        } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d119      	bne.n	800067c <wifi_cb+0x60>
            printf("Station disconnected\r\n");
 8000648:	480f      	ldr	r0, [pc, #60]	@ (8000688 <wifi_cb+0x6c>)
 800064a:	f00b fff9 	bl	800c640 <puts>
        break;
 800064e:	e015      	b.n	800067c <wifi_cb+0x60>
        uint8_t *ip = (uint8_t*)pvMsg;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	60fb      	str	r3, [r7, #12]
                ip[0], ip[1], ip[2], ip[3]);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	781b      	ldrb	r3, [r3, #0]
        printf("DHCP - IP address is %u.%u.%u.%u\r\n",
 8000658:	4619      	mov	r1, r3
                ip[0], ip[1], ip[2], ip[3]);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	781b      	ldrb	r3, [r3, #0]
        printf("DHCP - IP address is %u.%u.%u.%u\r\n",
 8000660:	461a      	mov	r2, r3
                ip[0], ip[1], ip[2], ip[3]);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3302      	adds	r3, #2
 8000666:	781b      	ldrb	r3, [r3, #0]
        printf("DHCP - IP address is %u.%u.%u.%u\r\n",
 8000668:	4618      	mov	r0, r3
                ip[0], ip[1], ip[2], ip[3]);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3303      	adds	r3, #3
 800066e:	781b      	ldrb	r3, [r3, #0]
        printf("DHCP - IP address is %u.%u.%u.%u\r\n",
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	4603      	mov	r3, r0
 8000674:	4805      	ldr	r0, [pc, #20]	@ (800068c <wifi_cb+0x70>)
 8000676:	f00b ff7b 	bl	800c570 <iprintf>
        break;
 800067a:	e000      	b.n	800067e <wifi_cb+0x62>
        break;
 800067c:	bf00      	nop
    }
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	0800d1fc 	.word	0x0800d1fc
 800068c:	0800d214 	.word	0x0800d214

08000690 <WifiApp_InitAP>:
//    }
//
//    printf("AP mode started. You can connect to %s.\r\n", MAIN_WLAN_SSID);
//}
void WifiApp_InitAP(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	@ 0x28
 8000694:	af02      	add	r7, sp, #8
    /* 1. Bring up HAL/BSP */
    nm_bsp_init();
 8000696:	f008 ff2d 	bl	80094f4 <nm_bsp_init>

    /* 2. Initialise driver and register wifi_cb() */
    tstrWifiInitParam initParam;
    memset(&initParam, 0, sizeof(initParam));
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2218      	movs	r2, #24
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f00c f8ad 	bl	800c800 <memset>
    initParam.pfAppWifiCb = wifi_cb;
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <WifiApp_InitAP+0x6c>)
 80006a8:	607b      	str	r3, [r7, #4]
    if (m2m_wifi_init(&initParam) != M2M_SUCCESS) {
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4618      	mov	r0, r3
 80006ae:	f009 ff37 	bl	800a520 <m2m_wifi_init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d004      	beq.n	80006c2 <WifiApp_InitAP+0x32>
        printf("WINC init failed\r\n");
 80006b8:	4811      	ldr	r0, [pc, #68]	@ (8000700 <WifiApp_InitAP+0x70>)
 80006ba:	f00b ffc1 	bl	800c640 <puts>
        Error_Handler();
 80006be:	f000 fb7d 	bl	8000dbc <Error_Handler>
    }

    /* 3. Ask WINC to join the router */
    sint8 ret = m2m_wifi_connect(
 80006c2:	23ff      	movs	r3, #255	@ 0xff
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <WifiApp_InitAP+0x74>)
 80006c8:	2202      	movs	r2, #2
 80006ca:	2111      	movs	r1, #17
 80006cc:	480e      	ldr	r0, [pc, #56]	@ (8000708 <WifiApp_InitAP+0x78>)
 80006ce:	f00a f99b 	bl	800aa08 <m2m_wifi_connect>
 80006d2:	4603      	mov	r3, r0
 80006d4:	77fb      	strb	r3, [r7, #31]
            MAIN_WLAN_SSID,
            strlen(MAIN_WLAN_SSID),
            MAIN_WLAN_AUTH,
            (void*)MAIN_WLAN_PSK,
            MAIN_WLAN_CHANNEL);
    if (ret != M2M_SUCCESS) {
 80006d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <WifiApp_InitAP+0x5c>
        printf("m2m_wifi_connect error %d\r\n", ret);
 80006de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80006e2:	4619      	mov	r1, r3
 80006e4:	4809      	ldr	r0, [pc, #36]	@ (800070c <WifiApp_InitAP+0x7c>)
 80006e6:	f00b ff43 	bl	800c570 <iprintf>
    } else {
        printf("Connecting to %s …\r\n", MAIN_WLAN_SSID);
    }
}
 80006ea:	e003      	b.n	80006f4 <WifiApp_InitAP+0x64>
        printf("Connecting to %s …\r\n", MAIN_WLAN_SSID);
 80006ec:	4906      	ldr	r1, [pc, #24]	@ (8000708 <WifiApp_InitAP+0x78>)
 80006ee:	4808      	ldr	r0, [pc, #32]	@ (8000710 <WifiApp_InitAP+0x80>)
 80006f0:	f00b ff3e 	bl	800c570 <iprintf>
}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	0800061d 	.word	0x0800061d
 8000700:	0800d238 	.word	0x0800d238
 8000704:	0800d24c 	.word	0x0800d24c
 8000708:	0800d25c 	.word	0x0800d25c
 800070c:	0800d270 	.word	0x0800d270
 8000710:	0800d28c 	.word	0x0800d28c

08000714 <EXTI4_IRQHandler>:

/**
 * @brief EXTI line 4 interrupt handler for WINC IRQ.
 */
void EXTI4_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
    /* Clear and handle interrupt */
    if (__HAL_GPIO_EXTI_GET_IT(WINC_INT_PIN) != RESET) {
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <EXTI4_IRQHandler+0x3c>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	2b00      	cmp	r3, #0
 8000722:	d105      	bne.n	8000730 <EXTI4_IRQHandler+0x1c>
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <EXTI4_IRQHandler+0x3c>)
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	f003 0310 	and.w	r3, r3, #16
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <EXTI4_IRQHandler+0x20>
 8000730:	2301      	movs	r3, #1
 8000732:	e000      	b.n	8000736 <EXTI4_IRQHandler+0x22>
 8000734:	2300      	movs	r3, #0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d008      	beq.n	800074c <EXTI4_IRQHandler+0x38>
        __HAL_GPIO_EXTI_CLEAR_IT(WINC_INT_PIN);
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <EXTI4_IRQHandler+0x3c>)
 800073c:	2210      	movs	r2, #16
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	4b03      	ldr	r3, [pc, #12]	@ (8000750 <EXTI4_IRQHandler+0x3c>)
 8000742:	2210      	movs	r2, #16
 8000744:	611a      	str	r2, [r3, #16]
        HAL_GPIO_EXTI_IRQHandler(WINC_INT_PIN);
 8000746:	2010      	movs	r0, #16
 8000748:	f001 fcf8 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
    }
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	44022000 	.word	0x44022000

08000754 <WifiTask>:
#include "WifiApp.h"        // your init functions & callback registration
#include "m2m_wifi.h"       // WINC1500 driver
#include <stdio.h>          // for printf()

void WifiTask(void *argument)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    // 1) Initialize the WINC1500 driver in AP or STA mode:
    //    this will call m2m_wifi_init() under the hood.
    WifiApp_InitAP();    // or WifiApp_InitSTA()
 800075c:	f7ff ff98 	bl	8000690 <WifiApp_InitAP>

    // 2) Enter the driver event loop
    for (;;)
    {
        m2m_wifi_handle_events(NULL);
 8000760:	2000      	movs	r0, #0
 8000762:	f009 fef6 	bl	800a552 <m2m_wifi_handle_events>
        osDelay(1);      // yield for 1 ms
 8000766:	2001      	movs	r0, #1
 8000768:	f006 fcbb 	bl	80070e2 <osDelay>
        m2m_wifi_handle_events(NULL);
 800076c:	bf00      	nop
 800076e:	e7f7      	b.n	8000760 <WifiTask+0xc>

08000770 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	@ 0x28
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	  // … existing threads, mutexes, etc …

	  /* Create WIFI task */
	  const osThreadAttr_t wifiTask_attributes = {
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2224      	movs	r2, #36	@ 0x24
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f00c f83f 	bl	800c800 <memset>
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_FREERTOS_Init+0x44>)
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	2318      	movs	r3, #24
 800078e:	61fb      	str	r3, [r7, #28]
	    .name = "wifiTask",
	    .priority = (osPriority_t) osPriorityNormal,
	    .stack_size = 512
	  };
	  osThreadNew(WifiTask, NULL, &wifiTask_attributes);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	461a      	mov	r2, r3
 8000794:	2100      	movs	r1, #0
 8000796:	4808      	ldr	r0, [pc, #32]	@ (80007b8 <MX_FREERTOS_Init+0x48>)
 8000798:	f006 fc12 	bl	8006fc0 <osThreadNew>

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800079c:	4a07      	ldr	r2, [pc, #28]	@ (80007bc <MX_FREERTOS_Init+0x4c>)
 800079e:	2100      	movs	r1, #0
 80007a0:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <MX_FREERTOS_Init+0x50>)
 80007a2:	f006 fc0d 	bl	8006fc0 <osThreadNew>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a06      	ldr	r2, [pc, #24]	@ (80007c4 <MX_FREERTOS_Init+0x54>)
 80007aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	@ 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	0800d2b0 	.word	0x0800d2b0
 80007b8:	08000755 	.word	0x08000755
 80007bc:	0800d458 	.word	0x0800d458
 80007c0:	080007c9 	.word	0x080007c9
 80007c4:	200000a4 	.word	0x200000a4

080007c8 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f006 fc86 	bl	80070e2 <osDelay>
 80007d6:	e7fb      	b.n	80007d0 <StartDefaultTask+0x8>

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007dc:	f001 f8c0 	bl	8001960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e0:	f000 f84a 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f000 fa1c 	bl	8000c20 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007e8:	f000 f922 	bl	8000a30 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007ec:	f000 f976 	bl	8000adc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80007f0:	f000 f9ca 	bl	8000b88 <MX_USART2_UART_Init>
  MX_ICACHE_Init();
 80007f4:	f000 f908 	bl	8000a08 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007f8:	f006 fb92 	bl	8006f20 <osKernelInitialize>
  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 80007fc:	f7ff ffb8 	bl	8000770 <MX_FREERTOS_Init>

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000800:	2000      	movs	r0, #0
 8000802:	f000 fec1 	bl	8001588 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000806:	2101      	movs	r1, #1
 8000808:	2000      	movs	r0, #0
 800080a:	f000 ff3d 	bl	8001688 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <main+0x94>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000814:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <main+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800081c:	4b13      	ldr	r3, [pc, #76]	@ (800086c <main+0x94>)
 800081e:	2200      	movs	r2, #0
 8000820:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <main+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000828:	4b10      	ldr	r3, [pc, #64]	@ (800086c <main+0x94>)
 800082a:	2200      	movs	r2, #0
 800082c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800082e:	490f      	ldr	r1, [pc, #60]	@ (800086c <main+0x94>)
 8000830:	2000      	movs	r0, #0
 8000832:	f000 ffb7 	bl	80017a4 <BSP_COM_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <main+0x68>
  {
    Error_Handler();
 800083c:	f000 fabe 	bl	8000dbc <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000840:	480b      	ldr	r0, [pc, #44]	@ (8000870 <main+0x98>)
 8000842:	f00b fe95 	bl	800c570 <iprintf>
  /* -- Sample board code to switch on led ---- */
  BSP_LED_On(LED_GREEN);
 8000846:	2000      	movs	r0, #0
 8000848:	f000 fee2 	bl	8001610 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Start scheduler */
  osKernelStart();
 800084c:	f006 fb8e 	bl	8006f6c <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  m2m_wifi_handle_events(NULL);   /* must be called regularly */
 8000850:	2000      	movs	r0, #0
 8000852:	f009 fe7e 	bl	800a552 <m2m_wifi_handle_events>
	      /* … any other low-priority work … */

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000856:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <main+0x9c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d1f8      	bne.n	8000850 <main+0x78>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 800085e:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <main+0x9c>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle led ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000864:	2000      	movs	r0, #0
 8000866:	f000 fef1 	bl	800164c <BSP_LED_Toggle>
	  m2m_wifi_handle_events(NULL);   /* must be called regularly */
 800086a:	e7f1      	b.n	8000850 <main+0x78>
 800086c:	200000a8 	.word	0x200000a8
 8000870:	0800d2bc 	.word	0x0800d2bc
 8000874:	200000b8 	.word	0x200000b8

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b09e      	sub	sp, #120	@ 0x78
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	2250      	movs	r2, #80	@ 0x50
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f00b ffba 	bl	800c800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]
  // 1) Print their addresses & check alignment
  uintptr_t addrOsc = (uintptr_t)&RCC_OscInitStruct;
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	677b      	str	r3, [r7, #116]	@ 0x74
  uintptr_t addrClk = (uintptr_t)&RCC_ClkInitStruct;
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	673b      	str	r3, [r7, #112]	@ 0x70
  printf("OscInitStruct @ 0x%" PRIxPTR, addrOsc);
 80008aa:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80008ac:	484b      	ldr	r0, [pc, #300]	@ (80009dc <SystemClock_Config+0x164>)
 80008ae:	f00b fe5f 	bl	800c570 <iprintf>
  if (addrOsc & 0x3) printf("  **unaligned**\r\n"); else printf("  OK\r\n");
 80008b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80008b4:	f003 0303 	and.w	r3, r3, #3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d003      	beq.n	80008c4 <SystemClock_Config+0x4c>
 80008bc:	4848      	ldr	r0, [pc, #288]	@ (80009e0 <SystemClock_Config+0x168>)
 80008be:	f00b febf 	bl	800c640 <puts>
 80008c2:	e002      	b.n	80008ca <SystemClock_Config+0x52>
 80008c4:	4847      	ldr	r0, [pc, #284]	@ (80009e4 <SystemClock_Config+0x16c>)
 80008c6:	f00b febb 	bl	800c640 <puts>
  printf("ClkInitStruct @ 0x%" PRIxPTR, addrClk);
 80008ca:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80008cc:	4846      	ldr	r0, [pc, #280]	@ (80009e8 <SystemClock_Config+0x170>)
 80008ce:	f00b fe4f 	bl	800c570 <iprintf>
  if (addrClk & 0x3) printf("  **unaligned**\r\n"); else printf("  OK\r\n");
 80008d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80008d4:	f003 0303 	and.w	r3, r3, #3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d003      	beq.n	80008e4 <SystemClock_Config+0x6c>
 80008dc:	4840      	ldr	r0, [pc, #256]	@ (80009e0 <SystemClock_Config+0x168>)
 80008de:	f00b feaf 	bl	800c640 <puts>
 80008e2:	e002      	b.n	80008ea <SystemClock_Config+0x72>
 80008e4:	483f      	ldr	r0, [pc, #252]	@ (80009e4 <SystemClock_Config+0x16c>)
 80008e6:	f00b feab 	bl	800c640 <puts>

  // 2) Trace each HAL call
  printf("-> HAL_RCC_OscConfig\r\n");
 80008ea:	4840      	ldr	r0, [pc, #256]	@ (80009ec <SystemClock_Config+0x174>)
 80008ec:	f00b fea8 	bl	800c640 <puts>
  if ( HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK ) {
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fc8d 	bl	8002214 <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d003      	beq.n	8000908 <SystemClock_Config+0x90>
    printf("   OscConfig FAILED\r\n");
 8000900:	483b      	ldr	r0, [pc, #236]	@ (80009f0 <SystemClock_Config+0x178>)
 8000902:	f00b fe9d 	bl	800c640 <puts>
 8000906:	e002      	b.n	800090e <SystemClock_Config+0x96>
  } else {
    printf("   OscConfig OK\r\n");
 8000908:	483a      	ldr	r0, [pc, #232]	@ (80009f4 <SystemClock_Config+0x17c>)
 800090a:	f00b fe99 	bl	800c640 <puts>
  }

  printf("-> HAL_RCCEx_PeriphCLKConfig\r\n");
 800090e:	483a      	ldr	r0, [pc, #232]	@ (80009f8 <SystemClock_Config+0x180>)
 8000910:	f00b fe96 	bl	800c640 <puts>
  HAL_RCCEx_PeriphCLKConfig(&RCC_ClkInitStruct);
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fc2d 	bl	8003178 <HAL_RCCEx_PeriphCLKConfig>
  printf("   Returned from PeriphCLKConfig\r\n");
 800091e:	4837      	ldr	r0, [pc, #220]	@ (80009fc <SystemClock_Config+0x184>)
 8000920:	f00b fe8e 	bl	800c640 <puts>
  /* USER CODE END SysInit */

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000924:	4b36      	ldr	r3, [pc, #216]	@ (8000a00 <SystemClock_Config+0x188>)
 8000926:	691b      	ldr	r3, [r3, #16]
 8000928:	4a35      	ldr	r2, [pc, #212]	@ (8000a00 <SystemClock_Config+0x188>)
 800092a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800092e:	6113      	str	r3, [r2, #16]
 8000930:	4b33      	ldr	r3, [pc, #204]	@ (8000a00 <SystemClock_Config+0x188>)
 8000932:	691b      	ldr	r3, [r3, #16]
 8000934:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800093c:	bf00      	nop
 800093e:	4b30      	ldr	r3, [pc, #192]	@ (8000a00 <SystemClock_Config+0x188>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	2b08      	cmp	r3, #8
 8000948:	d1f9      	bne.n	800093e <SystemClock_Config+0xc6>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094e:	2301      	movs	r3, #1
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000956:	2340      	movs	r3, #64	@ 0x40
 8000958:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 800095e:	2301      	movs	r3, #1
 8000960:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000962:	2304      	movs	r3, #4
 8000964:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8000966:	231f      	movs	r3, #31
 8000968:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800096e:	2304      	movs	r3, #4
 8000970:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000972:	2302      	movs	r3, #2
 8000974:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000976:	230c      	movs	r3, #12
 8000978:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800097a:	2300      	movs	r3, #0
 800097c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	4618      	mov	r0, r3
 8000988:	f001 fc44 	bl	8002214 <HAL_RCC_OscConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8000992:	f000 fa13 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000996:	231f      	movs	r3, #31
 8000998:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099a:	2303      	movs	r3, #3
 800099c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	2105      	movs	r1, #5
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 f865 	bl	8002a84 <HAL_RCC_ClockConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 80009c0:	f000 f9fc 	bl	8000dbc <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80009c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <SystemClock_Config+0x18c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80009cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a04 <SystemClock_Config+0x18c>)
 80009ce:	f043 0320 	orr.w	r3, r3, #32
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	3778      	adds	r7, #120	@ 0x78
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	0800d2d8 	.word	0x0800d2d8
 80009e0:	0800d2f0 	.word	0x0800d2f0
 80009e4:	0800d304 	.word	0x0800d304
 80009e8:	0800d30c 	.word	0x0800d30c
 80009ec:	0800d324 	.word	0x0800d324
 80009f0:	0800d33c 	.word	0x0800d33c
 80009f4:	0800d354 	.word	0x0800d354
 80009f8:	0800d368 	.word	0x0800d368
 80009fc:	0800d388 	.word	0x0800d388
 8000a00:	44020800 	.word	0x44020800
 8000a04:	40022000 	.word	0x40022000

08000a08 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f001 fbd1 	bl	80021b4 <HAL_ICACHE_ConfigAssociativityMode>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000a18:	f000 f9d0 	bl	8000dbc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000a1c:	f001 fbea 	bl	80021f4 <HAL_ICACHE_Enable>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000a26:	f000 f9c9 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a34:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a36:	4a28      	ldr	r2, [pc, #160]	@ (8000ad8 <MX_SPI1_Init+0xa8>)
 8000a38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3a:	4b26      	ldr	r3, [pc, #152]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a3c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a42:	4b24      	ldr	r3, [pc, #144]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a48:	4b22      	ldr	r3, [pc, #136]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a4a:	2207      	movs	r2, #7
 8000a4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a86:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_SPI1_Init+0xa4>)
 8000ac0:	f004 fc2c 	bl	800531c <HAL_SPI_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000aca:	f000 f977 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000bc 	.word	0x200000bc
 8000ad8:	40013000 	.word	0x40013000

08000adc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000ae2:	4a28      	ldr	r2, [pc, #160]	@ (8000b84 <MX_SPI2_Init+0xa8>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ae6:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000ae8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000aec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aee:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af4:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000af6:	2207      	movs	r2, #7
 8000af8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b00:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b06:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b08:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b0c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b20:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b32:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b58:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <MX_SPI2_Init+0xa4>)
 8000b6c:	f004 fbd6 	bl	800531c <HAL_SPI_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000b76:	f000 f921 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000014c 	.word	0x2000014c
 8000b84:	40003800 	.word	0x40003800

08000b88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	@ (8000c1c <MX_USART2_UART_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b92:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000b94:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000bd2:	f005 fbad 	bl	8006330 <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 f8ee 	bl	8000dbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000be4:	f006 f868 	bl	8006cb8 <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f000 f8e5 	bl	8000dbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000bf6:	f006 f89d 	bl	8006d34 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f000 f8dc 	bl	8000dbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	@ (8000c18 <MX_USART2_UART_Init+0x90>)
 8000c06:	f006 f81e 	bl	8006c46 <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 f8d4 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200001dc 	.word	0x200001dc
 8000c1c:	40004400 	.word	0x40004400

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b4a      	ldr	r3, [pc, #296]	@ (8000d60 <MX_GPIO_Init+0x140>)
 8000c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c3c:	4a48      	ldr	r2, [pc, #288]	@ (8000d60 <MX_GPIO_Init+0x140>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c46:	4b46      	ldr	r3, [pc, #280]	@ (8000d60 <MX_GPIO_Init+0x140>)
 8000c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b42      	ldr	r3, [pc, #264]	@ (8000d60 <MX_GPIO_Init+0x140>)
 8000c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c5a:	4a41      	ldr	r2, [pc, #260]	@ (8000d60 <MX_GPIO_Init+0x140>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c64:	4b3e      	ldr	r3, [pc, #248]	@ (8000d60 <MX_GPIO_Init+0x140>)
 8000c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b3b      	ldr	r3, [pc, #236]	@ (8000d60 <MX_GPIO_Init+0x140>)
 8000c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c78:	4a39      	ldr	r2, [pc, #228]	@ (8000d60 <MX_GPIO_Init+0x140>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c82:	4b37      	ldr	r3, [pc, #220]	@ (8000d60 <MX_GPIO_Init+0x140>)
 8000c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2120      	movs	r1, #32
 8000c94:	4833      	ldr	r0, [pc, #204]	@ (8000d64 <MX_GPIO_Init+0x144>)
 8000c96:	f001 fa1f 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_WINC_GPIO_Port, CS_WINC_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	4832      	ldr	r0, [pc, #200]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000ca0:	f001 fa1a 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_WINC_Pin|CHIP_EN_WINC_Pin|SDCARD_CS_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f240 1103 	movw	r1, #259	@ 0x103
 8000caa:	4830      	ldr	r0, [pc, #192]	@ (8000d6c <MX_GPIO_Init+0x14c>)
 8000cac:	f001 fa14 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000cb0:	2318      	movs	r3, #24
 8000cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000cc0:	230d      	movs	r3, #13
 8000cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4826      	ldr	r0, [pc, #152]	@ (8000d64 <MX_GPIO_Init+0x144>)
 8000ccc:	f001 f8a6 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cd0:	2320      	movs	r3, #32
 8000cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	481f      	ldr	r0, [pc, #124]	@ (8000d64 <MX_GPIO_Init+0x144>)
 8000ce8:	f001 f898 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_WINC_PIN_Pin */
  GPIO_InitStruct.Pin = IRQ_WINC_PIN_Pin;
 8000cec:	2310      	movs	r3, #16
 8000cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_WINC_PIN_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	481a      	ldr	r0, [pc, #104]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000d00:	f001 f88c 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_WINC_Pin */
  GPIO_InitStruct.Pin = CS_WINC_Pin;
 8000d04:	2320      	movs	r3, #32
 8000d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_WINC_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4813      	ldr	r0, [pc, #76]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000d1c:	f001 f87e 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_WINC_Pin CHIP_EN_WINC_Pin SDCARD_CS_Pin */
  GPIO_InitStruct.Pin = RESET_WINC_Pin|CHIP_EN_WINC_Pin|SDCARD_CS_Pin;
 8000d20:	f240 1303 	movw	r3, #259	@ 0x103
 8000d24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	4619      	mov	r1, r3
 8000d38:	480c      	ldr	r0, [pc, #48]	@ (8000d6c <MX_GPIO_Init+0x14c>)
 8000d3a:	f001 f86f 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4806      	ldr	r0, [pc, #24]	@ (8000d6c <MX_GPIO_Init+0x14c>)
 8000d52:	f001 f863 	bl	8001e1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d56:	bf00      	nop
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	44020c00 	.word	0x44020c00
 8000d64:	42020000 	.word	0x42020000
 8000d68:	42020800 	.word	0x42020800
 8000d6c:	42020400 	.word	0x42020400

08000d70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d101      	bne.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d82:	f000 fe15 	bl	80019b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40012c00 	.word	0x40012c00

08000d94 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000da4:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <BSP_PB_Callback+0x24>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	200000b8 	.word	0x200000b8

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <Error_Handler+0x8>

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f06f 0001 	mvn.w	r0, #1
 8000dd4:	f000 ff0c 	bl	8001bf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0b0      	sub	sp, #192	@ 0xc0
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df4:	f107 0320 	add.w	r3, r7, #32
 8000df8:	2288      	movs	r2, #136	@ 0x88
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f00b fcff 	bl	800c800 <memset>
  if(hspi->Instance==SPI1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a86      	ldr	r2, [pc, #536]	@ (8001020 <HAL_SPI_MspInit+0x244>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d17f      	bne.n	8000f0c <HAL_SPI_MspInit+0x130>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e0c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 f9a8 	bl	8003178 <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000e2e:	f7ff ffc5 	bl	8000dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e32:	4b7c      	ldr	r3, [pc, #496]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000e34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e38:	4a7a      	ldr	r2, [pc, #488]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000e3a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e3e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000e42:	4b78      	ldr	r3, [pc, #480]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000e44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b74      	ldr	r3, [pc, #464]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e56:	4a73      	ldr	r2, [pc, #460]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e60:	4b70      	ldr	r3, [pc, #448]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e74:	4a6b      	ldr	r2, [pc, #428]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e7e:	4b69      	ldr	r3, [pc, #420]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e8c:	2340      	movs	r3, #64	@ 0x40
 8000e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000eae:	4619      	mov	r1, r3
 8000eb0:	485d      	ldr	r0, [pc, #372]	@ (8001028 <HAL_SPI_MspInit+0x24c>)
 8000eb2:	f000 ffb3 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eb6:	2380      	movs	r3, #128	@ 0x80
 8000eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4853      	ldr	r0, [pc, #332]	@ (8001028 <HAL_SPI_MspInit+0x24c>)
 8000edc:	f000 ff9e 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ef8:	2305      	movs	r3, #5
 8000efa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f02:	4619      	mov	r1, r3
 8000f04:	4849      	ldr	r0, [pc, #292]	@ (800102c <HAL_SPI_MspInit+0x250>)
 8000f06:	f000 ff89 	bl	8001e1c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f0a:	e084      	b.n	8001016 <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a47      	ldr	r2, [pc, #284]	@ (8001030 <HAL_SPI_MspInit+0x254>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d17f      	bne.n	8001016 <HAL_SPI_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f1a:	f04f 0300 	mov.w	r3, #0
 8000f1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f28:	f107 0320 	add.w	r3, r7, #32
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 f923 	bl	8003178 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_SPI_MspInit+0x160>
      Error_Handler();
 8000f38:	f7ff ff40 	bl	8000dbc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f3c:	4b39      	ldr	r3, [pc, #228]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f42:	4a38      	ldr	r2, [pc, #224]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f48:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f4c:	4b35      	ldr	r3, [pc, #212]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	4b32      	ldr	r3, [pc, #200]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f60:	4a30      	ldr	r2, [pc, #192]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f78:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f7e:	4a29      	ldr	r2, [pc, #164]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f88:	4b26      	ldr	r3, [pc, #152]	@ (8001024 <HAL_SPI_MspInit+0x248>)
 8000f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SDCARD_MOSI_Pin;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fae:	2305      	movs	r3, #5
 8000fb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(SDCARD_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000fb8:	4619      	mov	r1, r3
 8000fba:	481e      	ldr	r0, [pc, #120]	@ (8001034 <HAL_SPI_MspInit+0x258>)
 8000fbc:	f000 ff2e 	bl	8001e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDCARD_MISO_Pin;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fd8:	2305      	movs	r3, #5
 8000fda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(SDCARD_MISO_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4813      	ldr	r0, [pc, #76]	@ (8001034 <HAL_SPI_MspInit+0x258>)
 8000fe6:	f000 ff19 	bl	8001e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDCARD_SCK_Pin;
 8000fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001004:	2305      	movs	r3, #5
 8001006:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(SDCARD_SCK_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800100e:	4619      	mov	r1, r3
 8001010:	4806      	ldr	r0, [pc, #24]	@ (800102c <HAL_SPI_MspInit+0x250>)
 8001012:	f000 ff03 	bl	8001e1c <HAL_GPIO_Init>
}
 8001016:	bf00      	nop
 8001018:	37c0      	adds	r7, #192	@ 0xc0
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40013000 	.word	0x40013000
 8001024:	44020c00 	.word	0x44020c00
 8001028:	42020000 	.word	0x42020000
 800102c:	42020400 	.word	0x42020400
 8001030:	40003800 	.word	0x40003800
 8001034:	42020800 	.word	0x42020800

08001038 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0ae      	sub	sp, #184	@ 0xb8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	2288      	movs	r2, #136	@ 0x88
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f00b fbd1 	bl	800c800 <memset>
  if(huart->Instance==USART2)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a38      	ldr	r2, [pc, #224]	@ (8001144 <HAL_UART_MspInit+0x10c>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d169      	bne.n	800113c <HAL_UART_MspInit+0x104>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001068:	f04f 0202 	mov.w	r2, #2
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001074:	2300      	movs	r3, #0
 8001076:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	4618      	mov	r0, r3
 800107e:	f002 f87b 	bl	8003178 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001088:	f7ff fe98 	bl	8000dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800108c:	4b2e      	ldr	r3, [pc, #184]	@ (8001148 <HAL_UART_MspInit+0x110>)
 800108e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001092:	4a2d      	ldr	r2, [pc, #180]	@ (8001148 <HAL_UART_MspInit+0x110>)
 8001094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001098:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800109c:	4b2a      	ldr	r3, [pc, #168]	@ (8001148 <HAL_UART_MspInit+0x110>)
 800109e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	4b27      	ldr	r3, [pc, #156]	@ (8001148 <HAL_UART_MspInit+0x110>)
 80010ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010b0:	4a25      	ldr	r2, [pc, #148]	@ (8001148 <HAL_UART_MspInit+0x110>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010ba:	4b23      	ldr	r3, [pc, #140]	@ (8001148 <HAL_UART_MspInit+0x110>)
 80010bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <HAL_UART_MspInit+0x110>)
 80010ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001148 <HAL_UART_MspInit+0x110>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <HAL_UART_MspInit+0x110>)
 80010da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PC7     ------> USART2_RX
    PA8     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = DISPLAY_RX_Pin;
 80010e6:	2380      	movs	r3, #128	@ 0x80
 80010e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF13_USART2;
 80010fe:	230d      	movs	r3, #13
 8001100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DISPLAY_RX_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001108:	4619      	mov	r1, r3
 800110a:	4810      	ldr	r0, [pc, #64]	@ (800114c <HAL_UART_MspInit+0x114>)
 800110c:	f000 fe86 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPLAY_TX_Pin;
 8001110:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001114:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800112a:	2304      	movs	r3, #4
 800112c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DISPLAY_TX_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	@ (8001150 <HAL_UART_MspInit+0x118>)
 8001138:	f000 fe70 	bl	8001e1c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800113c:	bf00      	nop
 800113e:	37b8      	adds	r7, #184	@ 0xb8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40004400 	.word	0x40004400
 8001148:	44020c00 	.word	0x44020c00
 800114c:	42020800 	.word	0x42020800
 8001150:	42020000 	.word	0x42020000

08001154 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	@ 0x38
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800115c:	4b2e      	ldr	r3, [pc, #184]	@ (8001218 <HAL_InitTick+0xc4>)
 800115e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001162:	4a2d      	ldr	r2, [pc, #180]	@ (8001218 <HAL_InitTick+0xc4>)
 8001164:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001168:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800116c:	4b2a      	ldr	r3, [pc, #168]	@ (8001218 <HAL_InitTick+0xc4>)
 800116e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800117a:	f107 0210 	add.w	r2, r7, #16
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f001 ffbf 	bl	8003108 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800118a:	f001 ff91 	bl	80030b0 <HAL_RCC_GetPCLK2Freq>
 800118e:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8001190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	4a21      	ldr	r2, [pc, #132]	@ (800121c <HAL_InitTick+0xc8>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	09db      	lsrs	r3, r3, #7
 800119c:	3b01      	subs	r3, #1
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <HAL_InitTick+0xcc>)
 80011a2:	4a20      	ldr	r2, [pc, #128]	@ (8001224 <HAL_InitTick+0xd0>)
 80011a4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (100000U / 1000U) - 1U;
 80011a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001220 <HAL_InitTick+0xcc>)
 80011a8:	2263      	movs	r2, #99	@ 0x63
 80011aa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001220 <HAL_InitTick+0xcc>)
 80011ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <HAL_InitTick+0xcc>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <HAL_InitTick+0xcc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80011be:	4818      	ldr	r0, [pc, #96]	@ (8001220 <HAL_InitTick+0xcc>)
 80011c0:	f004 fddd 	bl	8005d7e <HAL_TIM_Base_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80011ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d118      	bne.n	8001204 <HAL_InitTick+0xb0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011d2:	4813      	ldr	r0, [pc, #76]	@ (8001220 <HAL_InitTick+0xcc>)
 80011d4:	f004 fe34 	bl	8005e40 <HAL_TIM_Base_Start_IT>
 80011d8:	4603      	mov	r3, r0
 80011da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80011de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10e      	bne.n	8001204 <HAL_InitTick+0xb0>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d808      	bhi.n	80011fe <HAL_InitTick+0xaa>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	202a      	movs	r0, #42	@ 0x2a
 80011f2:	f000 fcfd 	bl	8001bf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001228 <HAL_InitTick+0xd4>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	e002      	b.n	8001204 <HAL_InitTick+0xb0>
      }
      else
      {
        status = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
}

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001204:	202a      	movs	r0, #42	@ 0x2a
 8001206:	f000 fd0d 	bl	8001c24 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 800120a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800120e:	4618      	mov	r0, r3
 8001210:	3738      	adds	r7, #56	@ 0x38
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	44020c00 	.word	0x44020c00
 800121c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001220:	20000270 	.word	0x20000270
 8001224:	40012c00 	.word	0x40012c00
 8001228:	20000018 	.word	0x20000018

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <NMI_Handler+0x4>

08001234 <HardFault_Handler>:
/* in stm32h5xx_it.c */

__attribute__((naked))
void HardFault_Handler(void)
{
    __asm volatile(
 8001234:	f01e 0f04 	tst.w	lr, #4
 8001238:	bf0c      	ite	eq
 800123a:	f3ef 8008 	mrseq	r0, MSP
 800123e:	f3ef 8009 	mrsne	r0, PSP
 8001242:	f000 b801 	b.w	8001248 <HardFault_Handler_C>
        "    ite eq                    \n"
        "    mrseq r0, msp             \n"  // if ( (lr & 4)==0 ) r0 = MSP else r0 = PSP
        "    mrsne r0, psp             \n"
        "    b HardFault_Handler_C     \n"
    );
}
 8001246:	bf00      	nop

08001248 <HardFault_Handler_C>:

void HardFault_Handler_C(uint32_t *stacked_regs)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	@ 0x30
 800124c:	af02      	add	r7, sp, #8
 800124e:	6078      	str	r0, [r7, #4]
    uint32_t r0  = stacked_regs[0];
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t r1  = stacked_regs[1];
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	623b      	str	r3, [r7, #32]
    uint32_t r2  = stacked_regs[2];
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	61fb      	str	r3, [r7, #28]
    uint32_t r3  = stacked_regs[3];
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	61bb      	str	r3, [r7, #24]
    uint32_t r12 = stacked_regs[4];
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	617b      	str	r3, [r7, #20]
    uint32_t lr  = stacked_regs[5];
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	613b      	str	r3, [r7, #16]
    uint32_t pc  = stacked_regs[6];
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	60fb      	str	r3, [r7, #12]
    uint32_t psr = stacked_regs[7];
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	60bb      	str	r3, [r7, #8]

    printf("\r\n*** HARDFAULT! ***\r\n");
 8001280:	480b      	ldr	r0, [pc, #44]	@ (80012b0 <HardFault_Handler_C+0x68>)
 8001282:	f00b f9dd 	bl	800c640 <puts>
    printf("  PC = 0x%08lX  LR = 0x%08lX\r\n", pc, lr);
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	68f9      	ldr	r1, [r7, #12]
 800128a:	480a      	ldr	r0, [pc, #40]	@ (80012b4 <HardFault_Handler_C+0x6c>)
 800128c:	f00b f970 	bl	800c570 <iprintf>
    printf("  r0 = 0x%08lX  r1 = 0x%08lX  r2 = 0x%08lX  r3 = 0x%08lX\r\n",
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	6a3a      	ldr	r2, [r7, #32]
 8001298:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800129a:	4807      	ldr	r0, [pc, #28]	@ (80012b8 <HardFault_Handler_C+0x70>)
 800129c:	f00b f968 	bl	800c570 <iprintf>
           r0, r1, r2, r3);
    printf("  r12= 0x%08lX  psr= 0x%08lX\r\n", r12, psr);
 80012a0:	68ba      	ldr	r2, [r7, #8]
 80012a2:	6979      	ldr	r1, [r7, #20]
 80012a4:	4805      	ldr	r0, [pc, #20]	@ (80012bc <HardFault_Handler_C+0x74>)
 80012a6:	f00b f963 	bl	800c570 <iprintf>
    while (1) { }
 80012aa:	bf00      	nop
 80012ac:	e7fd      	b.n	80012aa <HardFault_Handler_C+0x62>
 80012ae:	bf00      	nop
 80012b0:	0800d3ac 	.word	0x0800d3ac
 80012b4:	0800d3c4 	.word	0x0800d3c4
 80012b8:	0800d3e4 	.word	0x0800d3e4
 80012bc:	0800d420 	.word	0x0800d420

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <MemManage_Handler+0x4>

080012c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f000 fa44 	bl	8001778 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012f8:	4802      	ldr	r0, [pc, #8]	@ (8001304 <TIM1_UP_IRQHandler+0x10>)
 80012fa:	f004 fdf5 	bl	8005ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000270 	.word	0x20000270

08001308 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e00a      	b.n	8001330 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800131a:	f3af 8000 	nop.w
 800131e:	4601      	mov	r1, r0
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	60ba      	str	r2, [r7, #8]
 8001326:	b2ca      	uxtb	r2, r1
 8001328:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf0      	blt.n	800131a <_read+0x12>
  }

  return len;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	e009      	b.n	8001368 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	60ba      	str	r2, [r7, #8]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fa85 	bl	800186c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	dbf1      	blt.n	8001354 <_write+0x12>
  }
  return len;
 8001370:	687b      	ldr	r3, [r7, #4]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_close>:

int _close(int file)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013a2:	605a      	str	r2, [r3, #4]
  return 0;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <_isatty>:

int _isatty(int file)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ec:	4a14      	ldr	r2, [pc, #80]	@ (8001440 <_sbrk+0x5c>)
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <_sbrk+0x60>)
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f8:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <_sbrk+0x64>)
 8001402:	4a12      	ldr	r2, [pc, #72]	@ (800144c <_sbrk+0x68>)
 8001404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	429a      	cmp	r2, r3
 8001412:	d207      	bcs.n	8001424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001414:	f00b fa52 	bl	800c8bc <__errno>
 8001418:	4603      	mov	r3, r0
 800141a:	220c      	movs	r2, #12
 800141c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	e009      	b.n	8001438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001424:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142a:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <_sbrk+0x64>)
 8001434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20008000 	.word	0x20008000
 8001444:	00000400 	.word	0x00000400
 8001448:	200002bc 	.word	0x200002bc
 800144c:	20003210 	.word	0x20003210

08001450 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001456:	4b30      	ldr	r3, [pc, #192]	@ (8001518 <SystemInit+0xc8>)
 8001458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800145c:	4a2e      	ldr	r2, [pc, #184]	@ (8001518 <SystemInit+0xc8>)
 800145e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001462:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001466:	4b2d      	ldr	r3, [pc, #180]	@ (800151c <SystemInit+0xcc>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800146c:	4b2b      	ldr	r3, [pc, #172]	@ (800151c <SystemInit+0xcc>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001472:	4b2a      	ldr	r3, [pc, #168]	@ (800151c <SystemInit+0xcc>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001478:	4b28      	ldr	r3, [pc, #160]	@ (800151c <SystemInit+0xcc>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4927      	ldr	r1, [pc, #156]	@ (800151c <SystemInit+0xcc>)
 800147e:	4b28      	ldr	r3, [pc, #160]	@ (8001520 <SystemInit+0xd0>)
 8001480:	4013      	ands	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001484:	4b25      	ldr	r3, [pc, #148]	@ (800151c <SystemInit+0xcc>)
 8001486:	2200      	movs	r2, #0
 8001488:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800148a:	4b24      	ldr	r3, [pc, #144]	@ (800151c <SystemInit+0xcc>)
 800148c:	2200      	movs	r2, #0
 800148e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <SystemInit+0xcc>)
 8001492:	4a24      	ldr	r2, [pc, #144]	@ (8001524 <SystemInit+0xd4>)
 8001494:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001496:	4b21      	ldr	r3, [pc, #132]	@ (800151c <SystemInit+0xcc>)
 8001498:	2200      	movs	r2, #0
 800149a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <SystemInit+0xcc>)
 800149e:	4a21      	ldr	r2, [pc, #132]	@ (8001524 <SystemInit+0xd4>)
 80014a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	@ (800151c <SystemInit+0xcc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80014a8:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <SystemInit+0xcc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1b      	ldr	r2, [pc, #108]	@ (800151c <SystemInit+0xcc>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80014b4:	4b19      	ldr	r3, [pc, #100]	@ (800151c <SystemInit+0xcc>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014ba:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <SystemInit+0xc8>)
 80014bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014c0:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80014c2:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <SystemInit+0xd8>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80014ca:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80014d2:	d003      	beq.n	80014dc <SystemInit+0x8c>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80014da:	d117      	bne.n	800150c <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <SystemInit+0xd8>)
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <SystemInit+0xd8>)
 80014ea:	4a10      	ldr	r2, [pc, #64]	@ (800152c <SystemInit+0xdc>)
 80014ec:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <SystemInit+0xd8>)
 80014f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001530 <SystemInit+0xe0>)
 80014f2:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <SystemInit+0xd8>)
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001528 <SystemInit+0xd8>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <SystemInit+0xd8>)
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	4a08      	ldr	r2, [pc, #32]	@ (8001528 <SystemInit+0xd8>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	61d3      	str	r3, [r2, #28]
  }
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00
 800151c:	44020c00 	.word	0x44020c00
 8001520:	fae2eae3 	.word	0xfae2eae3
 8001524:	01010280 	.word	0x01010280
 8001528:	40022000 	.word	0x40022000
 800152c:	08192a3b 	.word	0x08192a3b
 8001530:	4c5d6e7f 	.word	0x4c5d6e7f

08001534 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800156c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001538:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800153a:	e003      	b.n	8001544 <LoopCopyDataInit>

0800153c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800153e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001540:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001542:	3104      	adds	r1, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001544:	480b      	ldr	r0, [pc, #44]	@ (8001574 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001548:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800154a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800154c:	d3f6      	bcc.n	800153c <CopyDataInit>
	ldr	r2, =_sbss
 800154e:	4a0b      	ldr	r2, [pc, #44]	@ (800157c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001550:	e002      	b.n	8001558 <LoopFillZerobss>

08001552 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001552:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001554:	f842 3b04 	str.w	r3, [r2], #4

08001558 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001558:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <LoopForever+0x16>)
	cmp	r2, r3
 800155a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800155c:	d3f9      	bcc.n	8001552 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800155e:	f7ff ff77 	bl	8001450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001562:	f00b f9b1 	bl	800c8c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001566:	f7ff f937 	bl	80007d8 <main>

0800156a <LoopForever>:

LoopForever:
    b LoopForever
 800156a:	e7fe      	b.n	800156a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800156c:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001570:	0800d608 	.word	0x0800d608
	ldr	r0, =_sdata
 8001574:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001578:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 800157c:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8001580:	20003210 	.word	0x20003210

08001584 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC1_IRQHandler>
	...

08001588 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	@ 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800159c:	f06f 0301 	mvn.w	r3, #1
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a2:	e02c      	b.n	80015fe <BSP_LED_Init+0x76>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10e      	bne.n	80015c8 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 80015aa:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <BSP_LED_Init+0x80>)
 80015ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015b0:	4a15      	ldr	r2, [pc, #84]	@ (8001608 <BSP_LED_Init+0x80>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <BSP_LED_Init+0x80>)
 80015bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80015c8:	2320      	movs	r3, #32
 80015ca:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	4a0c      	ldr	r2, [pc, #48]	@ (800160c <BSP_LED_Init+0x84>)
 80015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e0:	f107 0210 	add.w	r2, r7, #16
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fc18 	bl	8001e1c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4a07      	ldr	r2, [pc, #28]	@ (800160c <BSP_LED_Init+0x84>)
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	2120      	movs	r1, #32
 80015f6:	2200      	movs	r2, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fd6d 	bl	80020d8 <HAL_GPIO_WritePin>
  }

  return ret;
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001600:	4618      	mov	r0, r3
 8001602:	3728      	adds	r7, #40	@ 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	44020c00 	.word	0x44020c00
 800160c:	20000008 	.word	0x20000008

08001610 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <BSP_LED_On+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001624:	f06f 0301 	mvn.w	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	e008      	b.n	800163e <BSP_LED_On+0x2e>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4a06      	ldr	r2, [pc, #24]	@ (8001648 <BSP_LED_On+0x38>)
 8001630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001634:	2120      	movs	r1, #32
 8001636:	2201      	movs	r2, #1
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fd4d 	bl	80020d8 <HAL_GPIO_WritePin>
  }

  return ret;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000008 	.word	0x20000008

0800164c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <BSP_LED_Toggle+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001660:	f06f 0301 	mvn.w	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	e008      	b.n	800167a <BSP_LED_Toggle+0x2e>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4a06      	ldr	r2, [pc, #24]	@ (8001684 <BSP_LED_Toggle+0x38>)
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	2220      	movs	r2, #32
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fd47 	bl	8002108 <HAL_GPIO_TogglePin>
  }

  return ret;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000008 	.word	0x20000008

08001688 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	460a      	mov	r2, r1
 8001692:	71fb      	strb	r3, [r7, #7]
 8001694:	4613      	mov	r3, r2
 8001696:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001698:	4b30      	ldr	r3, [pc, #192]	@ (800175c <BSP_PB_Init+0xd4>)
 800169a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800169e:	4a2f      	ldr	r2, [pc, #188]	@ (800175c <BSP_PB_Init+0xd4>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016a8:	4b2c      	ldr	r3, [pc, #176]	@ (800175c <BSP_PB_Init+0xd4>)
 80016aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80016b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016ba:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80016bc:	2302      	movs	r3, #2
 80016be:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10c      	bne.n	80016e4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	4a23      	ldr	r2, [pc, #140]	@ (8001760 <BSP_PB_Init+0xd8>)
 80016d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d6:	f107 020c 	add.w	r2, r7, #12
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 fb9d 	bl	8001e1c <HAL_GPIO_Init>
 80016e2:	e036      	b.n	8001752 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80016e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <BSP_PB_Init+0xdc>)
 80016e6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001760 <BSP_PB_Init+0xd8>)
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f0:	f107 020c 	add.w	r2, r7, #12
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fb90 	bl	8001e1c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80016fc:	79fa      	ldrb	r2, [r7, #7]
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4a18      	ldr	r2, [pc, #96]	@ (8001768 <BSP_PB_Init+0xe0>)
 8001708:	441a      	add	r2, r3
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4917      	ldr	r1, [pc, #92]	@ (800176c <BSP_PB_Init+0xe4>)
 800170e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001712:	4619      	mov	r1, r3
 8001714:	4610      	mov	r0, r2
 8001716:	f000 fb25 	bl	8001d64 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800171a:	79fa      	ldrb	r2, [r7, #7]
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4a10      	ldr	r2, [pc, #64]	@ (8001768 <BSP_PB_Init+0xe0>)
 8001726:	1898      	adds	r0, r3, r2
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	4a11      	ldr	r2, [pc, #68]	@ (8001770 <BSP_PB_Init+0xe8>)
 800172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001730:	461a      	mov	r2, r3
 8001732:	2100      	movs	r1, #0
 8001734:	f000 faea 	bl	8001d0c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001738:	2018      	movs	r0, #24
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	4a0d      	ldr	r2, [pc, #52]	@ (8001774 <BSP_PB_Init+0xec>)
 800173e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001742:	2200      	movs	r2, #0
 8001744:	4619      	mov	r1, r3
 8001746:	f000 fa53 	bl	8001bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800174a:	2318      	movs	r3, #24
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fa69 	bl	8001c24 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	44020c00 	.word	0x44020c00
 8001760:	2000000c 	.word	0x2000000c
 8001764:	10110000 	.word	0x10110000
 8001768:	200002c0 	.word	0x200002c0
 800176c:	0800d494 	.word	0x0800d494
 8001770:	20000010 	.word	0x20000010
 8001774:	20000014 	.word	0x20000014

08001778 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001782:	79fa      	ldrb	r2, [r7, #7]
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <BSP_PB_IRQHandler+0x28>)
 800178e:	4413      	add	r3, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fafb 	bl	8001d8c <HAL_EXTI_IRQHandler>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200002c0 	.word	0x200002c0

080017a4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017ba:	f06f 0301 	mvn.w	r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	e018      	b.n	80017f4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2294      	movs	r2, #148	@ 0x94
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <BSP_COM_Init+0x5c>)
 80017cc:	4413      	add	r3, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f870 	bl	80018b4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2294      	movs	r2, #148	@ 0x94
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	4a08      	ldr	r2, [pc, #32]	@ (8001800 <BSP_COM_Init+0x5c>)
 80017de:	4413      	add	r3, r2
 80017e0:	6839      	ldr	r1, [r7, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f80e 	bl	8001804 <MX_USART_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80017ee:	f06f 0303 	mvn.w	r3, #3
 80017f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80017f4:	68fb      	ldr	r3, [r7, #12]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200002cc 	.word	0x200002cc

08001804 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800180e:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <MX_USART_Init+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	220c      	movs	r2, #12
 8001822:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	895b      	ldrh	r3, [r3, #10]
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	891b      	ldrh	r3, [r3, #8]
 800183a:	461a      	mov	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	899b      	ldrh	r3, [r3, #12]
 8001844:	461a      	mov	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001850:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f004 fd69 	bl	8006330 <HAL_UART_Init>
 800185e:	4603      	mov	r3, r0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000004 	.word	0x20000004

0800186c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <__io_putchar+0x30>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	2394      	movs	r3, #148	@ 0x94
 800187c:	fb02 f303 	mul.w	r3, r2, r3
 8001880:	4a07      	ldr	r2, [pc, #28]	@ (80018a0 <__io_putchar+0x34>)
 8001882:	1898      	adds	r0, r3, r2
 8001884:	1d39      	adds	r1, r7, #4
 8001886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800188a:	2201      	movs	r2, #1
 800188c:	f004 fda0 	bl	80063d0 <HAL_UART_Transmit>
  return ch;
 8001890:	687b      	ldr	r3, [r7, #4]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000360 	.word	0x20000360
 80018a0:	200002cc 	.word	0x200002cc

080018a4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff fa73 	bl	8000d94 <BSP_PB_Callback>
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	@ 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80018bc:	4b26      	ldr	r3, [pc, #152]	@ (8001958 <COM1_MspInit+0xa4>)
 80018be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018c2:	4a25      	ldr	r2, [pc, #148]	@ (8001958 <COM1_MspInit+0xa4>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018cc:	4b22      	ldr	r3, [pc, #136]	@ (8001958 <COM1_MspInit+0xa4>)
 80018ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80018da:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <COM1_MspInit+0xa4>)
 80018dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001958 <COM1_MspInit+0xa4>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <COM1_MspInit+0xa4>)
 80018ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80018f8:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <COM1_MspInit+0xa4>)
 80018fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018fe:	4a16      	ldr	r2, [pc, #88]	@ (8001958 <COM1_MspInit+0xa4>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001904:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001908:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <COM1_MspInit+0xa4>)
 800190a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800190e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001916:	2310      	movs	r3, #16
 8001918:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800191e:	2302      	movs	r3, #2
 8001920:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001922:	2301      	movs	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001926:	230d      	movs	r3, #13
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	480a      	ldr	r0, [pc, #40]	@ (800195c <COM1_MspInit+0xa8>)
 8001932:	f000 fa73 	bl	8001e1c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001936:	2308      	movs	r3, #8
 8001938:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800193e:	230d      	movs	r3, #13
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4804      	ldr	r0, [pc, #16]	@ (800195c <COM1_MspInit+0xa8>)
 800194a:	f000 fa67 	bl	8001e1c <HAL_GPIO_Init>
}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	@ 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	44020c00 	.word	0x44020c00
 800195c:	42020000 	.word	0x42020000

08001960 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 f938 	bl	8001bda <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800196a:	f001 fa43 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 800196e:	4602      	mov	r2, r0
 8001970:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <HAL_Init+0x44>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	490b      	ldr	r1, [pc, #44]	@ (80019a8 <HAL_Init+0x48>)
 800197a:	5ccb      	ldrb	r3, [r1, r3]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <HAL_Init+0x4c>)
 8001982:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001984:	2004      	movs	r0, #4
 8001986:	f000 f969 	bl	8001c5c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800198a:	200f      	movs	r0, #15
 800198c:	f7ff fbe2 	bl	8001154 <HAL_InitTick>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e002      	b.n	80019a0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800199a:	f7ff fa15 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	44020c00 	.word	0x44020c00
 80019a8:	0800d47c 	.word	0x0800d47c
 80019ac:	20000000 	.word	0x20000000

080019b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_IncTick+0x20>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_IncTick+0x24>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	4a04      	ldr	r2, [pc, #16]	@ (80019d4 <HAL_IncTick+0x24>)
 80019c2:	6013      	str	r3, [r2, #0]
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	2000001c 	.word	0x2000001c
 80019d4:	20000364 	.word	0x20000364

080019d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return uwTick;
 80019dc:	4b03      	ldr	r3, [pc, #12]	@ (80019ec <HAL_GetTick+0x14>)
 80019de:	681b      	ldr	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000364 	.word	0x20000364

080019f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f8:	f7ff ffee 	bl	80019d8 <HAL_GetTick>
 80019fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a08:	d005      	beq.n	8001a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <HAL_Delay+0x44>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a16:	bf00      	nop
 8001a18:	f7ff ffde 	bl	80019d8 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d8f7      	bhi.n	8001a18 <HAL_Delay+0x28>
  {
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000001c 	.word	0x2000001c

08001a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a54:	4013      	ands	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a84:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <__NVIC_GetPriorityGrouping+0x18>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 0307 	and.w	r3, r3, #7
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	db0b      	blt.n	8001ac6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	f003 021f 	and.w	r2, r3, #31
 8001ab4:	4907      	ldr	r1, [pc, #28]	@ (8001ad4 <__NVIC_EnableIRQ+0x38>)
 8001ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	2001      	movs	r0, #1
 8001abe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000e100 	.word	0xe000e100

08001ad8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db12      	blt.n	8001b10 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	f003 021f 	and.w	r2, r3, #31
 8001af0:	490a      	ldr	r1, [pc, #40]	@ (8001b1c <__NVIC_DisableIRQ+0x44>)
 8001af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	2001      	movs	r0, #1
 8001afa:	fa00 f202 	lsl.w	r2, r0, r2
 8001afe:	3320      	adds	r3, #32
 8001b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b04:	f3bf 8f4f 	dsb	sy
}
 8001b08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b0a:	f3bf 8f6f 	isb	sy
}
 8001b0e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100

08001b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	@ (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	@ (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
         );
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	@ 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ff28 	bl	8001a38 <__NVIC_SetPriorityGrouping>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfe:	f7ff ff3f 	bl	8001a80 <__NVIC_GetPriorityGrouping>
 8001c02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	68b9      	ldr	r1, [r7, #8]
 8001c08:	6978      	ldr	r0, [r7, #20]
 8001c0a:	f7ff ffb3 	bl	8001b74 <NVIC_EncodePriority>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff82 	bl	8001b20 <__NVIC_SetPriority>
}
 8001c1c:	bf00      	nop
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff32 	bl	8001a9c <__NVIC_EnableIRQ>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff42 	bl	8001ad8 <__NVIC_DisableIRQ>
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d844      	bhi.n	8001cf4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c70 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c70:	08001c93 	.word	0x08001c93
 8001c74:	08001cb1 	.word	0x08001cb1
 8001c78:	08001cd3 	.word	0x08001cd3
 8001c7c:	08001cf5 	.word	0x08001cf5
 8001c80:	08001c85 	.word	0x08001c85
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001c84:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1e      	ldr	r2, [pc, #120]	@ (8001d04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6013      	str	r3, [r2, #0]
      break;
 8001c90:	e031      	b.n	8001cf6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001c92:	4b1c      	ldr	r3, [pc, #112]	@ (8001d04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1b      	ldr	r2, [pc, #108]	@ (8001d04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c98:	f023 0304 	bic.w	r3, r3, #4
 8001c9c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ca0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001ca4:	4a18      	ldr	r2, [pc, #96]	@ (8001d08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ca6:	f023 030c 	bic.w	r3, r3, #12
 8001caa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001cae:	e022      	b.n	8001cf6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001cb0:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a13      	ldr	r2, [pc, #76]	@ (8001d04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cb6:	f023 0304 	bic.w	r3, r3, #4
 8001cba:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001cbc:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001cbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001cc2:	f023 030c 	bic.w	r3, r3, #12
 8001cc6:	4a10      	ldr	r2, [pc, #64]	@ (8001d08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001cd0:	e011      	b.n	8001cf6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001d04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ce0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001ce4:	f023 030c 	bic.w	r3, r3, #12
 8001ce8:	4a07      	ldr	r2, [pc, #28]	@ (8001d08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001cf2:	e000      	b.n	8001cf6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001cf4:	bf00      	nop
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e010 	.word	0xe000e010
 8001d08:	44020c00 	.word	0x44020c00

08001d0c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	460b      	mov	r3, r1
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d011      	beq.n	8001d48 <HAL_EXTI_RegisterCallback+0x3c>
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	dc13      	bgt.n	8001d50 <HAL_EXTI_RegisterCallback+0x44>
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_EXTI_RegisterCallback+0x26>
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d007      	beq.n	8001d40 <HAL_EXTI_RegisterCallback+0x34>
 8001d30:	e00e      	b.n	8001d50 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
      break;
 8001d3e:	e00a      	b.n	8001d56 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	605a      	str	r2, [r3, #4]
      break;
 8001d46:	e006      	b.n	8001d56 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
      break;
 8001d4e:	e002      	b.n	8001d56 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	75fb      	strb	r3, [r7, #23]
      break;
 8001d54:	bf00      	nop
  }

  return status;
 8001d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e003      	b.n	8001d80 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
  }
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0c1b      	lsrs	r3, r3, #16
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	2201      	movs	r2, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <HAL_EXTI_IRQHandler+0x88>)
 8001db6:	4413      	add	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	015a      	lsls	r2, r3, #5
 8001de2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e18 <HAL_EXTI_IRQHandler+0x8c>)
 8001de4:	4413      	add	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d009      	beq.n	8001e0c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	4798      	blx	r3
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	4402200c 	.word	0x4402200c
 8001e18:	44022010 	.word	0x44022010

08001e1c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e2a:	e142      	b.n	80020b2 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8134 	beq.w	80020ac <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x38>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b12      	cmp	r3, #18
 8001e52:	d125      	bne.n	8001ea0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	08da      	lsrs	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3208      	adds	r2, #8
 8001e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e60:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4013      	ands	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f003 020f 	and.w	r2, r3, #15
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	6979      	ldr	r1, [r7, #20]
 8001e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0203 	and.w	r2, r3, #3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d00b      	beq.n	8001ef4 <HAL_GPIO_Init+0xd8>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ee8:	2b11      	cmp	r3, #17
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b12      	cmp	r3, #18
 8001ef2:	d130      	bne.n	8001f56 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4013      	ands	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f003 0201 	and.w	r2, r3, #1
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d109      	bne.n	8001f76 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d11b      	bne.n	8001fa6 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d017      	beq.n	8001fa6 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	2203      	movs	r2, #3
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d07c      	beq.n	80020ac <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001fb2:	4a47      	ldr	r2, [pc, #284]	@ (80020d0 <HAL_GPIO_Init+0x2b4>)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3318      	adds	r3, #24
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	220f      	movs	r2, #15
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	0a9a      	lsrs	r2, r3, #10
 8001fda:	4b3e      	ldr	r3, [pc, #248]	@ (80020d4 <HAL_GPIO_Init+0x2b8>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	f002 0203 	and.w	r2, r2, #3
 8001fe4:	00d2      	lsls	r2, r2, #3
 8001fe6:	4093      	lsls	r3, r2
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001fee:	4938      	ldr	r1, [pc, #224]	@ (80020d0 <HAL_GPIO_Init+0x2b4>)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3318      	adds	r3, #24
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001ffc:	4b34      	ldr	r3, [pc, #208]	@ (80020d0 <HAL_GPIO_Init+0x2b4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4013      	ands	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002020:	4a2b      	ldr	r2, [pc, #172]	@ (80020d0 <HAL_GPIO_Init+0x2b4>)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002026:	4b2a      	ldr	r3, [pc, #168]	@ (80020d0 <HAL_GPIO_Init+0x2b4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43db      	mvns	r3, r3
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	4013      	ands	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800204a:	4a21      	ldr	r2, [pc, #132]	@ (80020d0 <HAL_GPIO_Init+0x2b4>)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002050:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <HAL_GPIO_Init+0x2b4>)
 8002052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002056:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43db      	mvns	r3, r3
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	4013      	ands	r3, r2
 8002060:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002076:	4a16      	ldr	r2, [pc, #88]	@ (80020d0 <HAL_GPIO_Init+0x2b4>)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800207e:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <HAL_GPIO_Init+0x2b4>)
 8002080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002084:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43db      	mvns	r3, r3
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4013      	ands	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80020a4:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <HAL_GPIO_Init+0x2b4>)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	3301      	adds	r3, #1
 80020b0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f47f aeb5 	bne.w	8001e2c <HAL_GPIO_Init+0x10>
  }
}
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	371c      	adds	r7, #28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	44022000 	.word	0x44022000
 80020d4:	002f7f7f 	.word	0x002f7f7f

080020d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020e8:	787b      	ldrb	r3, [r7, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020f4:	e002      	b.n	80020fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4013      	ands	r3, r2
 8002120:	041a      	lsls	r2, r3, #16
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43d9      	mvns	r1, r3
 8002126:	887b      	ldrh	r3, [r7, #2]
 8002128:	400b      	ands	r3, r1
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002146:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002152:	4a0c      	ldr	r2, [pc, #48]	@ (8002184 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f814 	bl	8002188 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002160:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800216c:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f812 	bl	800219e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	44022000 	.word	0x44022000

08002188 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80021c0:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e007      	b.n	80021e2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80021d2:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 0204 	bic.w	r2, r3, #4
 80021da:	4905      	ldr	r1, [pc, #20]	@ (80021f0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40030400 	.word	0x40030400

080021f4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80021f8:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <HAL_ICACHE_Enable+0x1c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <HAL_ICACHE_Enable+0x1c>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40030400 	.word	0x40030400

08002214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	f000 bc28 	b.w	8002a78 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002228:	4b94      	ldr	r3, [pc, #592]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f003 0318 	and.w	r3, r3, #24
 8002230:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002232:	4b92      	ldr	r3, [pc, #584]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 8002234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	d05b      	beq.n	8002300 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b08      	cmp	r3, #8
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x46>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	2b18      	cmp	r3, #24
 8002252:	d114      	bne.n	800227e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d111      	bne.n	800227e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d102      	bne.n	8002268 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	f000 bc08 	b.w	8002a78 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002268:	4b84      	ldr	r3, [pc, #528]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	041b      	lsls	r3, r3, #16
 8002276:	4981      	ldr	r1, [pc, #516]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 8002278:	4313      	orrs	r3, r2
 800227a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800227c:	e040      	b.n	8002300 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d023      	beq.n	80022ce <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002286:	4b7d      	ldr	r3, [pc, #500]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a7c      	ldr	r2, [pc, #496]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 800228c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002292:	f7ff fba1 	bl	80019d8 <HAL_GetTick>
 8002296:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800229a:	f7ff fb9d 	bl	80019d8 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e3e5      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80022ac:	4b73      	ldr	r3, [pc, #460]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80022b8:	4b70      	ldr	r3, [pc, #448]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	041b      	lsls	r3, r3, #16
 80022c6:	496d      	ldr	r1, [pc, #436]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	618b      	str	r3, [r1, #24]
 80022cc:	e018      	b.n	8002300 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80022ce:	4b6b      	ldr	r3, [pc, #428]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a6a      	ldr	r2, [pc, #424]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80022d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7ff fb7d 	bl	80019d8 <HAL_GetTick>
 80022de:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80022e2:	f7ff fb79 	bl	80019d8 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e3c1      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80022f4:	4b61      	ldr	r3, [pc, #388]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f0      	bne.n	80022e2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a0 	beq.w	800244e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	2b10      	cmp	r3, #16
 8002312:	d005      	beq.n	8002320 <HAL_RCC_OscConfig+0x10c>
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	2b18      	cmp	r3, #24
 8002318:	d109      	bne.n	800232e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d106      	bne.n	800232e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f040 8092 	bne.w	800244e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e3a4      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x132>
 8002338:	4b50      	ldr	r3, [pc, #320]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a4f      	ldr	r2, [pc, #316]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 800233e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	e058      	b.n	80023f8 <HAL_RCC_OscConfig+0x1e4>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d112      	bne.n	8002374 <HAL_RCC_OscConfig+0x160>
 800234e:	4b4b      	ldr	r3, [pc, #300]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a4a      	ldr	r2, [pc, #296]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 8002354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b48      	ldr	r3, [pc, #288]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a47      	ldr	r2, [pc, #284]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 8002360:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	4b45      	ldr	r3, [pc, #276]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a44      	ldr	r2, [pc, #272]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 800236c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e041      	b.n	80023f8 <HAL_RCC_OscConfig+0x1e4>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800237c:	d112      	bne.n	80023a4 <HAL_RCC_OscConfig+0x190>
 800237e:	4b3f      	ldr	r3, [pc, #252]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a3e      	ldr	r2, [pc, #248]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 8002384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b3c      	ldr	r3, [pc, #240]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a3b      	ldr	r2, [pc, #236]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 8002390:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b39      	ldr	r3, [pc, #228]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a38      	ldr	r2, [pc, #224]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e029      	b.n	80023f8 <HAL_RCC_OscConfig+0x1e4>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80023ac:	d112      	bne.n	80023d4 <HAL_RCC_OscConfig+0x1c0>
 80023ae:	4b33      	ldr	r3, [pc, #204]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a32      	ldr	r2, [pc, #200]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b30      	ldr	r3, [pc, #192]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2f      	ldr	r2, [pc, #188]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80023c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2c      	ldr	r2, [pc, #176]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e011      	b.n	80023f8 <HAL_RCC_OscConfig+0x1e4>
 80023d4:	4b29      	ldr	r3, [pc, #164]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a28      	ldr	r2, [pc, #160]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80023da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b26      	ldr	r3, [pc, #152]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a25      	ldr	r2, [pc, #148]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80023e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b23      	ldr	r3, [pc, #140]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a22      	ldr	r2, [pc, #136]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 80023f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80023f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d013      	beq.n	8002428 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7ff faea 	bl	80019d8 <HAL_GetTick>
 8002404:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002408:	f7ff fae6 	bl	80019d8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	@ 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e32e      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800241a:	4b18      	ldr	r3, [pc, #96]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x1f4>
 8002426:	e012      	b.n	800244e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7ff fad6 	bl	80019d8 <HAL_GetTick>
 800242c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002430:	f7ff fad2 	bl	80019d8 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	@ 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e31a      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002442:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <HAL_RCC_OscConfig+0x268>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 809a 	beq.w	8002590 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_RCC_OscConfig+0x25a>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	2b18      	cmp	r3, #24
 8002466:	d149      	bne.n	80024fc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d146      	bne.n	80024fc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d104      	bne.n	8002480 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e2fe      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
 800247a:	bf00      	nop
 800247c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d11c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002486:	4b9a      	ldr	r3, [pc, #616]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0218 	and.w	r2, r3, #24
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	429a      	cmp	r2, r3
 8002494:	d014      	beq.n	80024c0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002496:	4b96      	ldr	r3, [pc, #600]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 0218 	bic.w	r2, r3, #24
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	4993      	ldr	r1, [pc, #588]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80024a8:	f000 fdd0 	bl	800304c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024ac:	4b91      	ldr	r3, [pc, #580]	@ (80026f4 <HAL_RCC_OscConfig+0x4e0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe fe4f 	bl	8001154 <HAL_InitTick>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e2db      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7ff fa8a 	bl	80019d8 <HAL_GetTick>
 80024c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80024c8:	f7ff fa86 	bl	80019d8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e2ce      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024da:	4b85      	ldr	r3, [pc, #532]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80024e6:	4b82      	ldr	r3, [pc, #520]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	497e      	ldr	r1, [pc, #504]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80024fa:	e049      	b.n	8002590 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d02c      	beq.n	800255e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002504:	4b7a      	ldr	r3, [pc, #488]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 0218 	bic.w	r2, r3, #24
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	4977      	ldr	r1, [pc, #476]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002516:	4b76      	ldr	r3, [pc, #472]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a75      	ldr	r2, [pc, #468]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7ff fa59 	bl	80019d8 <HAL_GetTick>
 8002526:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800252a:	f7ff fa55 	bl	80019d8 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e29d      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800253c:	4b6c      	ldr	r3, [pc, #432]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002548:	4b69      	ldr	r3, [pc, #420]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	041b      	lsls	r3, r3, #16
 8002556:	4966      	ldr	r1, [pc, #408]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002558:	4313      	orrs	r3, r2
 800255a:	610b      	str	r3, [r1, #16]
 800255c:	e018      	b.n	8002590 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255e:	4b64      	ldr	r3, [pc, #400]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a63      	ldr	r2, [pc, #396]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7ff fa35 	bl	80019d8 <HAL_GetTick>
 800256e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002572:	f7ff fa31 	bl	80019d8 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e279      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002584:	4b5a      	ldr	r3, [pc, #360]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f0      	bne.n	8002572 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d03c      	beq.n	8002616 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01c      	beq.n	80025de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a4:	4b52      	ldr	r3, [pc, #328]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80025a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025aa:	4a51      	ldr	r2, [pc, #324]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80025ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7ff fa10 	bl	80019d8 <HAL_GetTick>
 80025b8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80025bc:	f7ff fa0c 	bl	80019d8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e254      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80025ce:	4b48      	ldr	r3, [pc, #288]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80025d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ef      	beq.n	80025bc <HAL_RCC_OscConfig+0x3a8>
 80025dc:	e01b      	b.n	8002616 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025de:	4b44      	ldr	r3, [pc, #272]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80025e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025e4:	4a42      	ldr	r2, [pc, #264]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80025e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ee:	f7ff f9f3 	bl	80019d8 <HAL_GetTick>
 80025f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80025f6:	f7ff f9ef 	bl	80019d8 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e237      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002608:	4b39      	ldr	r3, [pc, #228]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800260a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800260e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1ef      	bne.n	80025f6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 80d2 	beq.w	80027c8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002624:	4b34      	ldr	r3, [pc, #208]	@ (80026f8 <HAL_RCC_OscConfig+0x4e4>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d118      	bne.n	8002662 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002630:	4b31      	ldr	r3, [pc, #196]	@ (80026f8 <HAL_RCC_OscConfig+0x4e4>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	4a30      	ldr	r2, [pc, #192]	@ (80026f8 <HAL_RCC_OscConfig+0x4e4>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263c:	f7ff f9cc 	bl	80019d8 <HAL_GetTick>
 8002640:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002644:	f7ff f9c8 	bl	80019d8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e210      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002656:	4b28      	ldr	r3, [pc, #160]	@ (80026f8 <HAL_RCC_OscConfig+0x4e4>)
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d108      	bne.n	800267c <HAL_RCC_OscConfig+0x468>
 800266a:	4b21      	ldr	r3, [pc, #132]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800266c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002670:	4a1f      	ldr	r2, [pc, #124]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800267a:	e074      	b.n	8002766 <HAL_RCC_OscConfig+0x552>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d118      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4a2>
 8002684:	4b1a      	ldr	r3, [pc, #104]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002686:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800268a:	4a19      	ldr	r2, [pc, #100]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002694:	4b16      	ldr	r3, [pc, #88]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002696:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800269a:	4a15      	ldr	r2, [pc, #84]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800269c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026a4:	4b12      	ldr	r3, [pc, #72]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80026a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026aa:	4a11      	ldr	r2, [pc, #68]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80026ac:	f023 0304 	bic.w	r3, r3, #4
 80026b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026b4:	e057      	b.n	8002766 <HAL_RCC_OscConfig+0x552>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b05      	cmp	r3, #5
 80026bc:	d11e      	bne.n	80026fc <HAL_RCC_OscConfig+0x4e8>
 80026be:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80026c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026c4:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026ce:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80026d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026d4:	4a06      	ldr	r2, [pc, #24]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80026d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80026e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026e4:	4a02      	ldr	r2, [pc, #8]	@ (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026ee:	e03a      	b.n	8002766 <HAL_RCC_OscConfig+0x552>
 80026f0:	44020c00 	.word	0x44020c00
 80026f4:	20000018 	.word	0x20000018
 80026f8:	44020800 	.word	0x44020800
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b85      	cmp	r3, #133	@ 0x85
 8002702:	d118      	bne.n	8002736 <HAL_RCC_OscConfig+0x522>
 8002704:	4ba2      	ldr	r3, [pc, #648]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800270a:	4aa1      	ldr	r2, [pc, #644]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002714:	4b9e      	ldr	r3, [pc, #632]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002716:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800271a:	4a9d      	ldr	r2, [pc, #628]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 800271c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002720:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002724:	4b9a      	ldr	r3, [pc, #616]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002726:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800272a:	4a99      	ldr	r2, [pc, #612]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002734:	e017      	b.n	8002766 <HAL_RCC_OscConfig+0x552>
 8002736:	4b96      	ldr	r3, [pc, #600]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800273c:	4a94      	ldr	r2, [pc, #592]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002746:	4b92      	ldr	r3, [pc, #584]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800274c:	4a90      	ldr	r2, [pc, #576]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 800274e:	f023 0304 	bic.w	r3, r3, #4
 8002752:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002756:	4b8e      	ldr	r3, [pc, #568]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800275c:	4a8c      	ldr	r2, [pc, #560]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 800275e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002762:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d016      	beq.n	800279c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7ff f933 	bl	80019d8 <HAL_GetTick>
 8002772:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7ff f92f 	bl	80019d8 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e175      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800278c:	4b80      	ldr	r3, [pc, #512]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 800278e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0ed      	beq.n	8002776 <HAL_RCC_OscConfig+0x562>
 800279a:	e015      	b.n	80027c8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7ff f91c 	bl	80019d8 <HAL_GetTick>
 80027a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a4:	f7ff f918 	bl	80019d8 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e15e      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ba:	4b75      	ldr	r3, [pc, #468]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 80027bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1ed      	bne.n	80027a4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d036      	beq.n	8002842 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d019      	beq.n	8002810 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 80027e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7ff f8f6 	bl	80019d8 <HAL_GetTick>
 80027ec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80027f0:	f7ff f8f2 	bl	80019d8 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e13a      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002802:	4b63      	ldr	r3, [pc, #396]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x5dc>
 800280e:	e018      	b.n	8002842 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002810:	4b5f      	ldr	r3, [pc, #380]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a5e      	ldr	r2, [pc, #376]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002816:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800281a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7ff f8dc 	bl	80019d8 <HAL_GetTick>
 8002820:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002824:	f7ff f8d8 	bl	80019d8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e120      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002836:	4b56      	ldr	r3, [pc, #344]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8115 	beq.w	8002a76 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b18      	cmp	r3, #24
 8002850:	f000 80af 	beq.w	80029b2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002858:	2b02      	cmp	r3, #2
 800285a:	f040 8086 	bne.w	800296a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800285e:	4b4c      	ldr	r3, [pc, #304]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a4b      	ldr	r2, [pc, #300]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002864:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7ff f8b5 	bl	80019d8 <HAL_GetTick>
 800286e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002872:	f7ff f8b1 	bl	80019d8 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e0f9      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002884:	4b42      	ldr	r3, [pc, #264]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002890:	4b3f      	ldr	r3, [pc, #252]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002894:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002898:	f023 0303 	bic.w	r3, r3, #3
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028a4:	0212      	lsls	r2, r2, #8
 80028a6:	430a      	orrs	r2, r1
 80028a8:	4939      	ldr	r1, [pc, #228]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	628b      	str	r3, [r1, #40]	@ 0x28
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b2:	3b01      	subs	r3, #1
 80028b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028bc:	3b01      	subs	r3, #1
 80028be:	025b      	lsls	r3, r3, #9
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c8:	3b01      	subs	r3, #1
 80028ca:	041b      	lsls	r3, r3, #16
 80028cc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	3b01      	subs	r3, #1
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80028de:	492c      	ldr	r1, [pc, #176]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80028e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	4a29      	ldr	r2, [pc, #164]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 80028ea:	f023 0310 	bic.w	r3, r3, #16
 80028ee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f4:	4a26      	ldr	r2, [pc, #152]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80028fa:	4b25      	ldr	r3, [pc, #148]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 80028fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fe:	4a24      	ldr	r2, [pc, #144]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002900:	f043 0310 	orr.w	r3, r3, #16
 8002904:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002906:	4b22      	ldr	r3, [pc, #136]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290a:	f023 020c 	bic.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	491f      	ldr	r1, [pc, #124]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002914:	4313      	orrs	r3, r2
 8002916:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002918:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	f023 0220 	bic.w	r2, r3, #32
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002924:	491a      	ldr	r1, [pc, #104]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002926:	4313      	orrs	r3, r2
 8002928:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800292a:	4b19      	ldr	r3, [pc, #100]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 800292c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292e:	4a18      	ldr	r2, [pc, #96]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002934:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002936:	4b16      	ldr	r3, [pc, #88]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a15      	ldr	r2, [pc, #84]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 800293c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002942:	f7ff f849 	bl	80019d8 <HAL_GetTick>
 8002946:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800294a:	f7ff f845 	bl	80019d8 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e08d      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800295c:	4b0c      	ldr	r3, [pc, #48]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x736>
 8002968:	e085      	b.n	8002a76 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800296a:	4b09      	ldr	r3, [pc, #36]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a08      	ldr	r2, [pc, #32]	@ (8002990 <HAL_RCC_OscConfig+0x77c>)
 8002970:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7ff f82f 	bl	80019d8 <HAL_GetTick>
 800297a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800297e:	f7ff f82b 	bl	80019d8 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d903      	bls.n	8002994 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e073      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
 8002990:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002994:	4b3a      	ldr	r3, [pc, #232]	@ (8002a80 <HAL_RCC_OscConfig+0x86c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ee      	bne.n	800297e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80029a0:	4b37      	ldr	r3, [pc, #220]	@ (8002a80 <HAL_RCC_OscConfig+0x86c>)
 80029a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a4:	4a36      	ldr	r2, [pc, #216]	@ (8002a80 <HAL_RCC_OscConfig+0x86c>)
 80029a6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80029aa:	f023 0303 	bic.w	r3, r3, #3
 80029ae:	6293      	str	r3, [r2, #40]	@ 0x28
 80029b0:	e061      	b.n	8002a76 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80029b2:	4b33      	ldr	r3, [pc, #204]	@ (8002a80 <HAL_RCC_OscConfig+0x86c>)
 80029b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029b8:	4b31      	ldr	r3, [pc, #196]	@ (8002a80 <HAL_RCC_OscConfig+0x86c>)
 80029ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029bc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d031      	beq.n	8002a2a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f003 0203 	and.w	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d12a      	bne.n	8002a2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d122      	bne.n	8002a2a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ee:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d11a      	bne.n	8002a2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	0a5b      	lsrs	r3, r3, #9
 80029f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a00:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d111      	bne.n	8002a2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a12:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d108      	bne.n	8002a2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	0e1b      	lsrs	r3, r3, #24
 8002a1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e024      	b.n	8002a78 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a2e:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <HAL_RCC_OscConfig+0x86c>)
 8002a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a32:	08db      	lsrs	r3, r3, #3
 8002a34:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d01a      	beq.n	8002a76 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002a40:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <HAL_RCC_OscConfig+0x86c>)
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	4a0e      	ldr	r2, [pc, #56]	@ (8002a80 <HAL_RCC_OscConfig+0x86c>)
 8002a46:	f023 0310 	bic.w	r3, r3, #16
 8002a4a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe ffc4 	bl	80019d8 <HAL_GetTick>
 8002a50:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002a52:	bf00      	nop
 8002a54:	f7fe ffc0 	bl	80019d8 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d0f9      	beq.n	8002a54 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a64:	4a06      	ldr	r2, [pc, #24]	@ (8002a80 <HAL_RCC_OscConfig+0x86c>)
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002a6a:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <HAL_RCC_OscConfig+0x86c>)
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6e:	4a04      	ldr	r2, [pc, #16]	@ (8002a80 <HAL_RCC_OscConfig+0x86c>)
 8002a70:	f043 0310 	orr.w	r3, r3, #16
 8002a74:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	44020c00 	.word	0x44020c00

08002a84 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e19e      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b83      	ldr	r3, [pc, #524]	@ (8002ca8 <HAL_RCC_ClockConfig+0x224>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d910      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b80      	ldr	r3, [pc, #512]	@ (8002ca8 <HAL_RCC_ClockConfig+0x224>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 020f 	bic.w	r2, r3, #15
 8002aae:	497e      	ldr	r1, [pc, #504]	@ (8002ca8 <HAL_RCC_ClockConfig+0x224>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ca8 <HAL_RCC_ClockConfig+0x224>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e186      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d012      	beq.n	8002afa <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	4b74      	ldr	r3, [pc, #464]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d909      	bls.n	8002afa <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002ae6:	4b71      	ldr	r3, [pc, #452]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	496d      	ldr	r1, [pc, #436]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d012      	beq.n	8002b2c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	4b68      	ldr	r3, [pc, #416]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d909      	bls.n	8002b2c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002b18:	4b64      	ldr	r3, [pc, #400]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	4961      	ldr	r1, [pc, #388]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d010      	beq.n	8002b5a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d908      	bls.n	8002b5a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002b48:	4b58      	ldr	r3, [pc, #352]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4955      	ldr	r1, [pc, #340]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d010      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	4b50      	ldr	r3, [pc, #320]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d908      	bls.n	8002b88 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002b76:	4b4d      	ldr	r3, [pc, #308]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f023 020f 	bic.w	r2, r3, #15
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	494a      	ldr	r1, [pc, #296]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8093 	beq.w	8002cbc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002b9e:	4b43      	ldr	r3, [pc, #268]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d121      	bne.n	8002bee <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e113      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d115      	bne.n	8002bee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e107      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002bce:	4b37      	ldr	r3, [pc, #220]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0fb      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bde:	4b33      	ldr	r3, [pc, #204]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0f3      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002bee:	4b2f      	ldr	r3, [pc, #188]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	492c      	ldr	r1, [pc, #176]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c00:	f7fe feea 	bl	80019d8 <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d112      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c10:	f7fe fee2 	bl	80019d8 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e0d7      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c26:	4b21      	ldr	r3, [pc, #132]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 0318 	and.w	r3, r3, #24
 8002c2e:	2b18      	cmp	r3, #24
 8002c30:	d1ee      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x18c>
 8002c32:	e043      	b.n	8002cbc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d112      	bne.n	8002c62 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3e:	f7fe fecb 	bl	80019d8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e0c0      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c54:	4b15      	ldr	r3, [pc, #84]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f003 0318 	and.w	r3, r3, #24
 8002c5c:	2b10      	cmp	r3, #16
 8002c5e:	d1ee      	bne.n	8002c3e <HAL_RCC_ClockConfig+0x1ba>
 8002c60:	e02c      	b.n	8002cbc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d122      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6c:	f7fe feb4 	bl	80019d8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e0a9      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002c82:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <HAL_RCC_ClockConfig+0x228>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f003 0318 	and.w	r3, r3, #24
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d1ee      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x1e8>
 8002c8e:	e015      	b.n	8002cbc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c90:	f7fe fea2 	bl	80019d8 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d906      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e097      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x352>
 8002ca6:	bf00      	nop
 8002ca8:	40022000 	.word	0x40022000
 8002cac:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8002de0 <HAL_RCC_ClockConfig+0x35c>)
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	f003 0318 	and.w	r3, r3, #24
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e9      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	4b44      	ldr	r3, [pc, #272]	@ (8002de0 <HAL_RCC_ClockConfig+0x35c>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d208      	bcs.n	8002cea <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002cd8:	4b41      	ldr	r3, [pc, #260]	@ (8002de0 <HAL_RCC_ClockConfig+0x35c>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f023 020f 	bic.w	r2, r3, #15
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	493e      	ldr	r1, [pc, #248]	@ (8002de0 <HAL_RCC_ClockConfig+0x35c>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cea:	4b3e      	ldr	r3, [pc, #248]	@ (8002de4 <HAL_RCC_ClockConfig+0x360>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d210      	bcs.n	8002d1a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8002de4 <HAL_RCC_ClockConfig+0x360>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 020f 	bic.w	r2, r3, #15
 8002d00:	4938      	ldr	r1, [pc, #224]	@ (8002de4 <HAL_RCC_ClockConfig+0x360>)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d08:	4b36      	ldr	r3, [pc, #216]	@ (8002de4 <HAL_RCC_ClockConfig+0x360>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e05d      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d010      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002de0 <HAL_RCC_ClockConfig+0x35c>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d208      	bcs.n	8002d48 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002d36:	4b2a      	ldr	r3, [pc, #168]	@ (8002de0 <HAL_RCC_ClockConfig+0x35c>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	4927      	ldr	r1, [pc, #156]	@ (8002de0 <HAL_RCC_ClockConfig+0x35c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d012      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	4b21      	ldr	r3, [pc, #132]	@ (8002de0 <HAL_RCC_ClockConfig+0x35c>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d209      	bcs.n	8002d7a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002d66:	4b1e      	ldr	r3, [pc, #120]	@ (8002de0 <HAL_RCC_ClockConfig+0x35c>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	491a      	ldr	r1, [pc, #104]	@ (8002de0 <HAL_RCC_ClockConfig+0x35c>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d012      	beq.n	8002dac <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	4b15      	ldr	r3, [pc, #84]	@ (8002de0 <HAL_RCC_ClockConfig+0x35c>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d209      	bcs.n	8002dac <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002d98:	4b11      	ldr	r3, [pc, #68]	@ (8002de0 <HAL_RCC_ClockConfig+0x35c>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	490e      	ldr	r1, [pc, #56]	@ (8002de0 <HAL_RCC_ClockConfig+0x35c>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002dac:	f000 f822 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_RCC_ClockConfig+0x35c>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	490b      	ldr	r1, [pc, #44]	@ (8002de8 <HAL_RCC_ClockConfig+0x364>)
 8002dbc:	5ccb      	ldrb	r3, [r1, r3]
 8002dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dec <HAL_RCC_ClockConfig+0x368>)
 8002dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <HAL_RCC_ClockConfig+0x36c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe f9c2 	bl	8001154 <HAL_InitTick>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002dd4:	7afb      	ldrb	r3, [r7, #11]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	44020c00 	.word	0x44020c00
 8002de4:	40022000 	.word	0x40022000
 8002de8:	0800d47c 	.word	0x0800d47c
 8002dec:	20000000 	.word	0x20000000
 8002df0:	20000018 	.word	0x20000018

08002df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	@ 0x24
 8002df8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002dfa:	4b8c      	ldr	r3, [pc, #560]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f003 0318 	and.w	r3, r3, #24
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d102      	bne.n	8002e0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002e06:	4b8a      	ldr	r3, [pc, #552]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	e107      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e0c:	4b87      	ldr	r3, [pc, #540]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 0318 	and.w	r3, r3, #24
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d112      	bne.n	8002e3e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002e18:	4b84      	ldr	r3, [pc, #528]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d009      	beq.n	8002e38 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e24:	4b81      	ldr	r3, [pc, #516]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	08db      	lsrs	r3, r3, #3
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	4a81      	ldr	r2, [pc, #516]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	e0f1      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002e38:	4b7e      	ldr	r3, [pc, #504]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	e0ee      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e3e:	4b7b      	ldr	r3, [pc, #492]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 0318 	and.w	r3, r3, #24
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d102      	bne.n	8002e50 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e4a:	4b7b      	ldr	r3, [pc, #492]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x244>)
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	e0e5      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e50:	4b76      	ldr	r3, [pc, #472]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f003 0318 	and.w	r3, r3, #24
 8002e58:	2b18      	cmp	r3, #24
 8002e5a:	f040 80dd 	bne.w	8003018 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002e5e:	4b73      	ldr	r3, [pc, #460]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002e68:	4b70      	ldr	r3, [pc, #448]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002e74:	4b6d      	ldr	r3, [pc, #436]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002e80:	4b6a      	ldr	r3, [pc, #424]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002e84:	08db      	lsrs	r3, r3, #3
 8002e86:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	fb02 f303 	mul.w	r3, r2, r3
 8002e90:	ee07 3a90 	vmov	s15, r3
 8002e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e98:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80b7 	beq.w	8003012 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0xbe>
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d056      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x16a>
 8002eb0:	e077      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002eb2:	4b5e      	ldr	r3, [pc, #376]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d02d      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	08db      	lsrs	r3, r3, #3
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	4a5a      	ldr	r2, [pc, #360]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x240>)
 8002eca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ece:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	ee07 3a90 	vmov	s15, r3
 8002ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ee8:	4b50      	ldr	r3, [pc, #320]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ef8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002efc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800303c <HAL_RCC_GetSysClockFreq+0x248>
 8002f00:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f14:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002f18:	e065      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f24:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003040 <HAL_RCC_GetSysClockFreq+0x24c>
 8002f28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f2c:	4b3f      	ldr	r3, [pc, #252]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f34:	ee07 3a90 	vmov	s15, r3
 8002f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f40:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800303c <HAL_RCC_GetSysClockFreq+0x248>
 8002f44:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f50:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f58:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002f5c:	e043      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	ee07 3a90 	vmov	s15, r3
 8002f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f68:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003044 <HAL_RCC_GetSysClockFreq+0x250>
 8002f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f70:	4b2e      	ldr	r3, [pc, #184]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f78:	ee07 3a90 	vmov	s15, r3
 8002f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f80:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f84:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800303c <HAL_RCC_GetSysClockFreq+0x248>
 8002f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002fa0:	e021      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	ee07 3a90 	vmov	s15, r3
 8002fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fac:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003048 <HAL_RCC_GetSysClockFreq+0x254>
 8002fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbc:	ee07 3a90 	vmov	s15, r3
 8002fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fc8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800303c <HAL_RCC_GetSysClockFreq+0x248>
 8002fcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002fe4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	@ (800302c <HAL_RCC_GetSysClockFreq+0x238>)
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fea:	0a5b      	lsrs	r3, r3, #9
 8002fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	ee07 3a90 	vmov	s15, r3
 8002ffa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ffe:	edd7 6a06 	vldr	s13, [r7, #24]
 8003002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800300a:	ee17 3a90 	vmov	r3, s15
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	e004      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	e001      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x240>)
 800301a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800301c:	69fb      	ldr	r3, [r7, #28]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3724      	adds	r7, #36	@ 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	44020c00 	.word	0x44020c00
 8003030:	003d0900 	.word	0x003d0900
 8003034:	03d09000 	.word	0x03d09000
 8003038:	016e3600 	.word	0x016e3600
 800303c:	46000000 	.word	0x46000000
 8003040:	4c742400 	.word	0x4c742400
 8003044:	4bb71b00 	.word	0x4bb71b00
 8003048:	4a742400 	.word	0x4a742400

0800304c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003050:	f7ff fed0 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b08      	ldr	r3, [pc, #32]	@ (8003078 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800305a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800305e:	4907      	ldr	r1, [pc, #28]	@ (800307c <HAL_RCC_GetHCLKFreq+0x30>)
 8003060:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003062:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003066:	fa22 f303 	lsr.w	r3, r2, r3
 800306a:	4a05      	ldr	r2, [pc, #20]	@ (8003080 <HAL_RCC_GetHCLKFreq+0x34>)
 800306c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800306e:	4b04      	ldr	r3, [pc, #16]	@ (8003080 <HAL_RCC_GetHCLKFreq+0x34>)
 8003070:	681b      	ldr	r3, [r3, #0]
}
 8003072:	4618      	mov	r0, r3
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	44020c00 	.word	0x44020c00
 800307c:	0800d47c 	.word	0x0800d47c
 8003080:	20000000 	.word	0x20000000

08003084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003088:	f7ff ffe0 	bl	800304c <HAL_RCC_GetHCLKFreq>
 800308c:	4602      	mov	r2, r0
 800308e:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	4904      	ldr	r1, [pc, #16]	@ (80030ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800309a:	5ccb      	ldrb	r3, [r1, r3]
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	44020c00 	.word	0x44020c00
 80030ac:	0800d48c 	.word	0x0800d48c

080030b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80030b4:	f7ff ffca 	bl	800304c <HAL_RCC_GetHCLKFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4904      	ldr	r1, [pc, #16]	@ (80030d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030c6:	5ccb      	ldrb	r3, [r1, r3]
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	44020c00 	.word	0x44020c00
 80030d8:	0800d48c 	.word	0x0800d48c

080030dc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80030e0:	f7ff ffb4 	bl	800304c <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <HAL_RCC_GetPCLK3Freq+0x24>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	0b1b      	lsrs	r3, r3, #12
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4904      	ldr	r1, [pc, #16]	@ (8003104 <HAL_RCC_GetPCLK3Freq+0x28>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	44020c00 	.word	0x44020c00
 8003104:	0800d48c 	.word	0x0800d48c

08003108 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	221f      	movs	r2, #31
 8003116:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8003118:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <HAL_RCC_GetClockConfig+0x68>)
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f003 0203 	and.w	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8003124:	4b12      	ldr	r3, [pc, #72]	@ (8003170 <HAL_RCC_GetClockConfig+0x68>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 020f 	and.w	r2, r3, #15
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003156:	4b07      	ldr	r3, [pc, #28]	@ (8003174 <HAL_RCC_GetClockConfig+0x6c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	601a      	str	r2, [r3, #0]
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	44020c00 	.word	0x44020c00
 8003174:	40022000 	.word	0x40022000

08003178 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800317c:	b0aa      	sub	sp, #168	@ 0xa8
 800317e:	af00      	add	r7, sp, #0
 8003180:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003184:	2300      	movs	r3, #0
 8003186:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800318a:	2300      	movs	r3, #0
 800318c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003190:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800319c:	2500      	movs	r5, #0
 800319e:	ea54 0305 	orrs.w	r3, r4, r5
 80031a2:	d00b      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80031a4:	4bb8      	ldr	r3, [pc, #736]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031aa:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80031ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b4:	4ab4      	ldr	r2, [pc, #720]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031b6:	430b      	orrs	r3, r1
 80031b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f002 0801 	and.w	r8, r2, #1
 80031c8:	f04f 0900 	mov.w	r9, #0
 80031cc:	ea58 0309 	orrs.w	r3, r8, r9
 80031d0:	d038      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80031d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d8:	2b05      	cmp	r3, #5
 80031da:	d819      	bhi.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80031dc:	a201      	add	r2, pc, #4	@ (adr r2, 80031e4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80031de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e2:	bf00      	nop
 80031e4:	08003219 	.word	0x08003219
 80031e8:	080031fd 	.word	0x080031fd
 80031ec:	08003211 	.word	0x08003211
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003219 	.word	0x08003219
 80031f8:	08003219 	.word	0x08003219
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003200:	3308      	adds	r3, #8
 8003202:	4618      	mov	r0, r3
 8003204:	f001 fff2 	bl	80051ec <RCCEx_PLL2_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 800320e:	e004      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003216:	e000      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8003218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800321a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10c      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003222:	4b99      	ldr	r3, [pc, #612]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003224:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003228:	f023 0107 	bic.w	r1, r3, #7
 800322c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003232:	4a95      	ldr	r2, [pc, #596]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003234:	430b      	orrs	r3, r1
 8003236:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800323a:	e003      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003240:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003244:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324c:	f002 0a02 	and.w	sl, r2, #2
 8003250:	f04f 0b00 	mov.w	fp, #0
 8003254:	ea5a 030b 	orrs.w	r3, sl, fp
 8003258:	d03c      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800325a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800325e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003260:	2b28      	cmp	r3, #40	@ 0x28
 8003262:	d01b      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003264:	2b28      	cmp	r3, #40	@ 0x28
 8003266:	d815      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003268:	2b20      	cmp	r3, #32
 800326a:	d019      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800326c:	2b20      	cmp	r3, #32
 800326e:	d811      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003270:	2b18      	cmp	r3, #24
 8003272:	d017      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003274:	2b18      	cmp	r3, #24
 8003276:	d80d      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d015      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800327c:	2b08      	cmp	r3, #8
 800327e:	d109      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003280:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003284:	3308      	adds	r3, #8
 8003286:	4618      	mov	r0, r3
 8003288:	f001 ffb0 	bl	80051ec <RCCEx_PLL2_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8003292:	e00a      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800329a:	e006      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800329c:	bf00      	nop
 800329e:	e004      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80032a0:	bf00      	nop
 80032a2:	e002      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80032a4:	bf00      	nop
 80032a6:	e000      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80032a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80032b2:	4b75      	ldr	r3, [pc, #468]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80032b8:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80032bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c2:	4a71      	ldr	r2, [pc, #452]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032c4:	430b      	orrs	r3, r1
 80032c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80032ca:	e003      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80032d0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f002 0304 	and.w	r3, r2, #4
 80032e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032e4:	2300      	movs	r3, #0
 80032e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80032ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80032ee:	460b      	mov	r3, r1
 80032f0:	4313      	orrs	r3, r2
 80032f2:	d040      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80032f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80032fe:	d01e      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003300:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003304:	d817      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800330a:	d01a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800330c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003310:	d811      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003312:	2bc0      	cmp	r3, #192	@ 0xc0
 8003314:	d017      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003316:	2bc0      	cmp	r3, #192	@ 0xc0
 8003318:	d80d      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d015      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800331e:	2b40      	cmp	r3, #64	@ 0x40
 8003320:	d109      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003322:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003326:	3308      	adds	r3, #8
 8003328:	4618      	mov	r0, r3
 800332a:	f001 ff5f 	bl	80051ec <RCCEx_PLL2_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003334:	e00a      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800333c:	e006      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800333e:	bf00      	nop
 8003340:	e004      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003342:	bf00      	nop
 8003344:	e002      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003346:	bf00      	nop
 8003348:	e000      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800334a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10c      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003354:	4b4c      	ldr	r3, [pc, #304]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003356:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800335a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800335e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003364:	4a48      	ldr	r2, [pc, #288]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003366:	430b      	orrs	r3, r1
 8003368:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800336c:	e003      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003372:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003376:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003382:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003386:	2300      	movs	r3, #0
 8003388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800338c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003390:	460b      	mov	r3, r1
 8003392:	4313      	orrs	r3, r2
 8003394:	d043      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003396:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80033a0:	d021      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80033a2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80033a6:	d81a      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x266>
 80033a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033ac:	d01d      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x272>
 80033ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033b2:	d814      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x266>
 80033b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033b8:	d019      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x276>
 80033ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033be:	d80e      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x266>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d016      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80033c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033c8:	d109      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033ce:	3308      	adds	r3, #8
 80033d0:	4618      	mov	r0, r3
 80033d2:	f001 ff0b 	bl	80051ec <RCCEx_PLL2_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80033dc:	e00a      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80033e4:	e006      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80033e6:	bf00      	nop
 80033e8:	e004      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80033ea:	bf00      	nop
 80033ec:	e002      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80033ee:	bf00      	nop
 80033f0:	e000      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80033f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10c      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80033fc:	4b22      	ldr	r3, [pc, #136]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003402:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003406:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	4a1e      	ldr	r2, [pc, #120]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800340e:	430b      	orrs	r3, r1
 8003410:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003414:	e003      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003416:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800341a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800341e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003426:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800342a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800342c:	2300      	movs	r3, #0
 800342e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003430:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003434:	460b      	mov	r3, r1
 8003436:	4313      	orrs	r3, r2
 8003438:	d03e      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800343a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800343e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003440:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003444:	d01b      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003446:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800344a:	d814      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800344c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003450:	d017      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003452:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003456:	d80e      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d017      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x314>
 800345c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003460:	d109      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003462:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003466:	3308      	adds	r3, #8
 8003468:	4618      	mov	r0, r3
 800346a:	f001 febf 	bl	80051ec <RCCEx_PLL2_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003474:	e00b      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800347c:	e007      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800347e:	bf00      	nop
 8003480:	e005      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8003482:	bf00      	nop
 8003484:	e003      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003486:	bf00      	nop
 8003488:	44020c00 	.word	0x44020c00
        break;
 800348c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800348e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10c      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003496:	4ba5      	ldr	r3, [pc, #660]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003498:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800349c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80034a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	4aa1      	ldr	r2, [pc, #644]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034a8:	430b      	orrs	r3, r1
 80034aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80034ae:	e003      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034b4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80034c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80034c6:	2300      	movs	r3, #0
 80034c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80034ca:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80034ce:	460b      	mov	r3, r1
 80034d0:	4313      	orrs	r3, r2
 80034d2:	d03b      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80034d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034da:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034de:	d01b      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80034e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034e4:	d814      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80034e6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034ea:	d017      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80034ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034f0:	d80e      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d014      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80034f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034fa:	d109      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003500:	3308      	adds	r3, #8
 8003502:	4618      	mov	r0, r3
 8003504:	f001 fe72 	bl	80051ec <RCCEx_PLL2_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800350e:	e008      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003516:	e004      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003518:	bf00      	nop
 800351a:	e002      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800351c:	bf00      	nop
 800351e:	e000      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003522:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800352a:	4b80      	ldr	r3, [pc, #512]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800352c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003530:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003534:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800353a:	4a7c      	ldr	r2, [pc, #496]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800353c:	430b      	orrs	r3, r1
 800353e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003542:	e003      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003548:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800354c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800355a:	2300      	movs	r3, #0
 800355c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800355e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003562:	460b      	mov	r3, r1
 8003564:	4313      	orrs	r3, r2
 8003566:	d033      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003568:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800356c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003572:	d015      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003574:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003578:	d80e      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d012      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800357e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003582:	d109      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003584:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003588:	3308      	adds	r3, #8
 800358a:	4618      	mov	r0, r3
 800358c:	f001 fe2e 	bl	80051ec <RCCEx_PLL2_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003596:	e006      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800359e:	e002      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80035a0:	bf00      	nop
 80035a2:	e000      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80035a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80035ae:	4b5f      	ldr	r3, [pc, #380]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80035b4:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80035b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035be:	4a5b      	ldr	r2, [pc, #364]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035c0:	430b      	orrs	r3, r1
 80035c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80035c6:	e003      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035cc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80035d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	2100      	movs	r1, #0
 80035da:	6639      	str	r1, [r7, #96]	@ 0x60
 80035dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80035e2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80035e6:	460b      	mov	r3, r1
 80035e8:	4313      	orrs	r3, r2
 80035ea:	d033      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80035ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035f6:	d015      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80035f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035fc:	d80e      	bhi.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d012      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003602:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003606:	d109      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003608:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800360c:	3308      	adds	r3, #8
 800360e:	4618      	mov	r0, r3
 8003610:	f001 fdec 	bl	80051ec <RCCEx_PLL2_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800361a:	e006      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003622:	e002      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003624:	bf00      	nop
 8003626:	e000      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003628:	bf00      	nop
    }
    if (ret == HAL_OK)
 800362a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10c      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003632:	4b3e      	ldr	r3, [pc, #248]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003634:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003638:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800363c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003642:	4a3a      	ldr	r2, [pc, #232]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003644:	430b      	orrs	r3, r1
 8003646:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800364a:	e003      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003650:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003654:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	2100      	movs	r1, #0
 800365e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003664:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003666:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800366a:	460b      	mov	r3, r1
 800366c:	4313      	orrs	r3, r2
 800366e:	d00e      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003670:	4b2e      	ldr	r3, [pc, #184]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	4a2d      	ldr	r2, [pc, #180]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003676:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800367a:	61d3      	str	r3, [r2, #28]
 800367c:	4b2b      	ldr	r3, [pc, #172]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800367e:	69d9      	ldr	r1, [r3, #28]
 8003680:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003688:	4a28      	ldr	r2, [pc, #160]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800368a:	430b      	orrs	r3, r1
 800368c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800368e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800369a:	653b      	str	r3, [r7, #80]	@ 0x50
 800369c:	2300      	movs	r3, #0
 800369e:	657b      	str	r3, [r7, #84]	@ 0x54
 80036a0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80036a4:	460b      	mov	r3, r1
 80036a6:	4313      	orrs	r3, r2
 80036a8:	d046      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80036aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80036b4:	d021      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x582>
 80036b6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80036ba:	d81a      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c0:	d01d      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x586>
 80036c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c6:	d814      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80036c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036cc:	d019      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80036ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036d2:	d80e      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d016      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80036d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036dc:	d109      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036e2:	3308      	adds	r3, #8
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 fd81 	bl	80051ec <RCCEx_PLL2_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80036f0:	e00a      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80036f8:	e006      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80036fa:	bf00      	nop
 80036fc:	e004      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80036fe:	bf00      	nop
 8003700:	e002      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003702:	bf00      	nop
 8003704:	e000      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003708:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10f      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003710:	4b06      	ldr	r3, [pc, #24]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003712:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003716:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800371a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800371e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003720:	4a02      	ldr	r2, [pc, #8]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003722:	430b      	orrs	r3, r1
 8003724:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003728:	e006      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800372a:	bf00      	nop
 800372c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003734:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003738:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003744:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003746:	2300      	movs	r3, #0
 8003748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800374a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800374e:	460b      	mov	r3, r1
 8003750:	4313      	orrs	r3, r2
 8003752:	d043      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003754:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800375e:	d021      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003760:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003764:	d81a      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003766:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800376a:	d01d      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x630>
 800376c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003770:	d814      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003772:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003776:	d019      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003778:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800377c:	d80e      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x624>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d016      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8003782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003786:	d109      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003788:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800378c:	3308      	adds	r3, #8
 800378e:	4618      	mov	r0, r3
 8003790:	f001 fd2c 	bl	80051ec <RCCEx_PLL2_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800379a:	e00a      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80037a2:	e006      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80037a4:	bf00      	nop
 80037a6:	e004      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80037a8:	bf00      	nop
 80037aa:	e002      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80037ac:	bf00      	nop
 80037ae:	e000      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80037b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80037ba:	4bb6      	ldr	r3, [pc, #728]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80037c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ca:	4ab2      	ldr	r2, [pc, #712]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037cc:	430b      	orrs	r3, r1
 80037ce:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80037d2:	e003      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037d8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80037dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80037e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80037ea:	2300      	movs	r3, #0
 80037ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80037f2:	460b      	mov	r3, r1
 80037f4:	4313      	orrs	r3, r2
 80037f6:	d030      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80037f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037fe:	2b05      	cmp	r3, #5
 8003800:	d80f      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8003802:	2b03      	cmp	r3, #3
 8003804:	d211      	bcs.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003806:	2b01      	cmp	r3, #1
 8003808:	d911      	bls.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800380a:	2b02      	cmp	r3, #2
 800380c:	d109      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800380e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003812:	3308      	adds	r3, #8
 8003814:	4618      	mov	r0, r3
 8003816:	f001 fce9 	bl	80051ec <RCCEx_PLL2_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003820:	e006      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003828:	e002      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800382e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003830:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10c      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003838:	4b96      	ldr	r3, [pc, #600]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800383a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800383e:	f023 0107 	bic.w	r1, r3, #7
 8003842:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003848:	4a92      	ldr	r2, [pc, #584]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800384a:	430b      	orrs	r3, r1
 800384c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003850:	e003      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003852:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003856:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800385a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	2100      	movs	r1, #0
 8003864:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003866:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800386a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800386c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003870:	460b      	mov	r3, r1
 8003872:	4313      	orrs	r3, r2
 8003874:	d022      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003876:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800387a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x714>
 8003880:	2b08      	cmp	r3, #8
 8003882:	d005      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800388a:	e002      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 800388c:	bf00      	nop
 800388e:	e000      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003892:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10c      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800389a:	4b7e      	ldr	r3, [pc, #504]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800389c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038a0:	f023 0108 	bic.w	r1, r3, #8
 80038a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038aa:	4a7a      	ldr	r2, [pc, #488]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80038ac:	430b      	orrs	r3, r1
 80038ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80038b2:	e003      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038b8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80038c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80038ca:	2300      	movs	r3, #0
 80038cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80038d2:	460b      	mov	r3, r1
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f000 80b0 	beq.w	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80038da:	4b6f      	ldr	r3, [pc, #444]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	4a6e      	ldr	r2, [pc, #440]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038e6:	f7fe f877 	bl	80019d8 <HAL_GetTick>
 80038ea:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80038ee:	e00b      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f0:	f7fe f872 	bl	80019d8 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d903      	bls.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003906:	e005      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003908:	4b63      	ldr	r3, [pc, #396]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ed      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003914:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003918:	2b00      	cmp	r3, #0
 800391a:	f040 808a 	bne.w	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800391e:	4b5d      	ldr	r3, [pc, #372]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003924:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003928:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800392c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d022      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003934:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800393a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800393e:	429a      	cmp	r2, r3
 8003940:	d01b      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003942:	4b54      	ldr	r3, [pc, #336]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800394c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003950:	4b50      	ldr	r3, [pc, #320]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003956:	4a4f      	ldr	r2, [pc, #316]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003960:	4b4c      	ldr	r3, [pc, #304]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003966:	4a4b      	ldr	r2, [pc, #300]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003968:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800396c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003970:	4a48      	ldr	r2, [pc, #288]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003972:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003976:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800397a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d019      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fe f827 	bl	80019d8 <HAL_GetTick>
 800398a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800398e:	e00d      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003990:	f7fe f822 	bl	80019d8 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d903      	bls.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 80039aa:	e006      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ac:	4b39      	ldr	r3, [pc, #228]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0ea      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 80039ba:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d132      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80039c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039d0:	d10f      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80039d2:	4b30      	ldr	r3, [pc, #192]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80039da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80039e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80039ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039ec:	430b      	orrs	r3, r1
 80039ee:	61d3      	str	r3, [r2, #28]
 80039f0:	e005      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x886>
 80039f2:	4b28      	ldr	r3, [pc, #160]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	4a27      	ldr	r2, [pc, #156]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80039fc:	61d3      	str	r3, [r2, #28]
 80039fe:	4b25      	ldr	r3, [pc, #148]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a04:	4a23      	ldr	r2, [pc, #140]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a0e:	4b21      	ldr	r3, [pc, #132]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a10:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003a14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a20:	430b      	orrs	r3, r1
 8003a22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a26:	e008      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a28:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a2c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003a30:	e003      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a32:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a36:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003a46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a48:	2300      	movs	r3, #0
 8003a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a4c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003a50:	460b      	mov	r3, r1
 8003a52:	4313      	orrs	r3, r2
 8003a54:	d038      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003a56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5c:	2b30      	cmp	r3, #48	@ 0x30
 8003a5e:	d014      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003a60:	2b30      	cmp	r3, #48	@ 0x30
 8003a62:	d80e      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d012      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d80a      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d015      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d106      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a74:	4b07      	ldr	r3, [pc, #28]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a78:	4a06      	ldr	r2, [pc, #24]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a7e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003a80:	e00d      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a88:	e009      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003a8a:	bf00      	nop
 8003a8c:	e007      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003a8e:	bf00      	nop
 8003a90:	e005      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003a92:	bf00      	nop
 8003a94:	44020c00 	.word	0x44020c00
 8003a98:	44020800 	.word	0x44020800
        break;
 8003a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a9e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003aa6:	4bb5      	ldr	r3, [pc, #724]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003aa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003aac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ab0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab6:	49b1      	ldr	r1, [pc, #708]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003abe:	e003      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ac4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003ac8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003ad4:	623b      	str	r3, [r7, #32]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ada:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	d03c      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003ae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ae8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d81d      	bhi.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003aee:	a201      	add	r2, pc, #4	@ (adr r2, 8003af4 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af4:	08003b09 	.word	0x08003b09
 8003af8:	08003b17 	.word	0x08003b17
 8003afc:	08003b2b 	.word	0x08003b2b
 8003b00:	08003b33 	.word	0x08003b33
 8003b04:	08003b33 	.word	0x08003b33
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b08:	4b9c      	ldr	r3, [pc, #624]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0c:	4a9b      	ldr	r2, [pc, #620]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b12:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003b14:	e00e      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f001 fb65 	bl	80051ec <RCCEx_PLL2_Config>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003b28:	e004      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003b30:	e000      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b34:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10c      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003b3c:	4b8f      	ldr	r3, [pc, #572]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b42:	f023 0207 	bic.w	r2, r3, #7
 8003b46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b4c:	498b      	ldr	r1, [pc, #556]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003b54:	e003      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b56:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b5a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003b5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003b74:	460b      	mov	r3, r1
 8003b76:	4313      	orrs	r3, r2
 8003b78:	d03c      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003b7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d01f      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d819      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003b88:	2b18      	cmp	r3, #24
 8003b8a:	d01d      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003b8c:	2b18      	cmp	r3, #24
 8003b8e:	d815      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d007      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003b98:	e010      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b9a:	4b78      	ldr	r3, [pc, #480]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	4a77      	ldr	r2, [pc, #476]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ba4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003ba6:	e010      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ba8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bac:	3308      	adds	r3, #8
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 fb1c 	bl	80051ec <RCCEx_PLL2_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003bba:	e006      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003bc2:	e002      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003bd2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bd8:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003bdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be2:	4966      	ldr	r1, [pc, #408]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003bea:	e003      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003bf0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003bf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	d03e      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c1a:	d020      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c20:	d819      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003c22:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c24:	d01d      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003c26:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c28:	d815      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003c2e:	2b40      	cmp	r3, #64	@ 0x40
 8003c30:	d007      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003c32:	e010      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c34:	4b51      	ldr	r3, [pc, #324]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c38:	4a50      	ldr	r2, [pc, #320]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c3e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003c40:	e010      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c46:	3308      	adds	r3, #8
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f001 facf 	bl	80051ec <RCCEx_PLL2_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003c54:	e006      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c5c:	e002      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003c5e:	bf00      	nop
 8003c60:	e000      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c64:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10c      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003c6c:	4b43      	ldr	r3, [pc, #268]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c72:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003c76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c7c:	493f      	ldr	r1, [pc, #252]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003c84:	e003      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c86:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c8a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	2100      	movs	r1, #0
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	d038      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003caa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb4:	d00e      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cba:	d815      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d017      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cc4:	d110      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cca:	4a2c      	ldr	r2, [pc, #176]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003cd2:	e00e      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cd8:	3308      	adds	r3, #8
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 fa86 	bl	80051ec <RCCEx_PLL2_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003ce6:	e004      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003cee:	e000      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003cfa:	4b20      	ldr	r3, [pc, #128]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0a:	491c      	ldr	r1, [pc, #112]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003d12:	e003      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d18:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	2100      	movs	r1, #0
 8003d26:	6039      	str	r1, [r7, #0]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d32:	460b      	mov	r3, r1
 8003d34:	4313      	orrs	r3, r2
 8003d36:	d039      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003d38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d3e:	2b30      	cmp	r3, #48	@ 0x30
 8003d40:	d01e      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003d42:	2b30      	cmp	r3, #48	@ 0x30
 8003d44:	d815      	bhi.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d002      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d007      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003d4e:	e010      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d50:	4b0a      	ldr	r3, [pc, #40]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	4a09      	ldr	r2, [pc, #36]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d5a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d5c:	e011      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d62:	3308      	adds	r3, #8
 8003d64:	4618      	mov	r0, r3
 8003d66:	f001 fa41 	bl	80051ec <RCCEx_PLL2_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003d70:	e007      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003d78:	e003      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003d7a:	bf00      	nop
 8003d7c:	44020c00 	.word	0x44020c00
        break;
 8003d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d82:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003d8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d9a:	4908      	ldr	r1, [pc, #32]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003da2:	e003      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003da8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003dac:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	37a8      	adds	r7, #168	@ 0xa8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dba:	bf00      	nop
 8003dbc:	44020c00 	.word	0x44020c00

08003dc0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b08b      	sub	sp, #44	@ 0x2c
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003dc8:	4bae      	ldr	r3, [pc, #696]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003dd2:	4bac      	ldr	r3, [pc, #688]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003ddc:	4ba9      	ldr	r3, [pc, #676]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003de6:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003de8:	4ba6      	ldr	r3, [pc, #664]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003df4:	4ba3      	ldr	r3, [pc, #652]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df8:	08db      	lsrs	r3, r3, #3
 8003dfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	fb02 f303 	mul.w	r3, r2, r3
 8003e04:	ee07 3a90 	vmov	s15, r3
 8003e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8126 	beq.w	8004064 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d053      	beq.n	8003ec6 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d86f      	bhi.n	8003f04 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d003      	beq.n	8003e32 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d02b      	beq.n	8003e88 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003e30:	e068      	b.n	8003f04 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e32:	4b94      	ldr	r3, [pc, #592]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	08db      	lsrs	r3, r3, #3
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	4a92      	ldr	r2, [pc, #584]	@ (8004088 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e42:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	ee07 3a90 	vmov	s15, r3
 8003e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	ee07 3a90 	vmov	s15, r3
 8003e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e66:	ed97 6a04 	vldr	s12, [r7, #16]
 8003e6a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800408c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e82:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003e86:	e068      	b.n	8003f5a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	ee07 3a90 	vmov	s15, r3
 8003e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e92:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004090 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	ee07 3a90 	vmov	s15, r3
 8003ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea4:	ed97 6a04 	vldr	s12, [r7, #16]
 8003ea8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800408c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003eac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003ec4:	e049      	b.n	8003f5a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	ee07 3a90 	vmov	s15, r3
 8003ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004094 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8003ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee2:	ed97 6a04 	vldr	s12, [r7, #16]
 8003ee6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800408c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003f02:	e02a      	b.n	8003f5a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f04:	4b5f      	ldr	r3, [pc, #380]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	08db      	lsrs	r3, r3, #3
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	4a5e      	ldr	r2, [pc, #376]	@ (8004088 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
 8003f14:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	ee07 3a90 	vmov	s15, r3
 8003f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	ee07 3a90 	vmov	s15, r3
 8003f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f38:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f3c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800408c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003f40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f54:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003f58:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f66:	d121      	bne.n	8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003f68:	4b46      	ldr	r3, [pc, #280]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d017      	beq.n	8003fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003f74:	4b43      	ldr	r3, [pc, #268]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f78:	0a5b      	lsrs	r3, r3, #9
 8003f7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f7e:	ee07 3a90 	vmov	s15, r3
 8003f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003f86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003f8e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f9a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	e006      	b.n	8003fb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e002      	b.n	8003fb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003fb2:	4b34      	ldr	r3, [pc, #208]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fbe:	d121      	bne.n	8004004 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003fc0:	4b30      	ldr	r3, [pc, #192]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d017      	beq.n	8003ffc <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd0:	0c1b      	lsrs	r3, r3, #16
 8003fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003fde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003fe6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	e006      	b.n	800400a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	e002      	b.n	800400a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800400a:	4b1e      	ldr	r3, [pc, #120]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004012:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004016:	d121      	bne.n	800405c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004018:	4b1a      	ldr	r3, [pc, #104]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d017      	beq.n	8004054 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004024:	4b17      	ldr	r3, [pc, #92]	@ (8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004028:	0e1b      	lsrs	r3, r3, #24
 800402a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004036:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800403a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800403e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800404a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004052:	e010      	b.n	8004076 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	609a      	str	r2, [r3, #8]
}
 800405a:	e00c      	b.n	8004076 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	609a      	str	r2, [r3, #8]
}
 8004062:	e008      	b.n	8004076 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	609a      	str	r2, [r3, #8]
}
 8004076:	bf00      	nop
 8004078:	372c      	adds	r7, #44	@ 0x2c
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	44020c00 	.word	0x44020c00
 8004088:	03d09000 	.word	0x03d09000
 800408c:	46000000 	.word	0x46000000
 8004090:	4a742400 	.word	0x4a742400
 8004094:	4bb71b00 	.word	0x4bb71b00

08004098 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004098:	b480      	push	{r7}
 800409a:	b08b      	sub	sp, #44	@ 0x2c
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80040a0:	4bae      	ldr	r3, [pc, #696]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80040aa:	4bac      	ldr	r3, [pc, #688]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80040b4:	4ba9      	ldr	r3, [pc, #676]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	0a1b      	lsrs	r3, r3, #8
 80040ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040be:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80040c0:	4ba6      	ldr	r3, [pc, #664]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80040cc:	4ba3      	ldr	r3, [pc, #652]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	08db      	lsrs	r3, r3, #3
 80040d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	fb02 f303 	mul.w	r3, r2, r3
 80040dc:	ee07 3a90 	vmov	s15, r3
 80040e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 8126 	beq.w	800433c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d053      	beq.n	800419e <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d86f      	bhi.n	80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d003      	beq.n	800410a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d02b      	beq.n	8004160 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004108:	e068      	b.n	80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800410a:	4b94      	ldr	r3, [pc, #592]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	08db      	lsrs	r3, r3, #3
 8004110:	f003 0303 	and.w	r3, r3, #3
 8004114:	4a92      	ldr	r2, [pc, #584]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004116:	fa22 f303 	lsr.w	r3, r2, r3
 800411a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	ee07 3a90 	vmov	s15, r3
 800412c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004142:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800414a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800415e:	e068      	b.n	8004232 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800416e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	ee07 3a90 	vmov	s15, r3
 8004178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800417c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004180:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800418c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004198:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800419c:	e049      	b.n	8004232 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800436c <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80041ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ba:	ed97 6a04 	vldr	s12, [r7, #16]
 80041be:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80041c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80041da:	e02a      	b.n	8004232 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041dc:	4b5f      	ldr	r3, [pc, #380]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	08db      	lsrs	r3, r3, #3
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ec:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	ee07 3a90 	vmov	s15, r3
 80041f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004210:	ed97 6a04 	vldr	s12, [r7, #16]
 8004214:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800421c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004220:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004230:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004232:	4b4a      	ldr	r3, [pc, #296]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800423a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800423e:	d121      	bne.n	8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004240:	4b46      	ldr	r3, [pc, #280]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d017      	beq.n	800427c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800424c:	4b43      	ldr	r3, [pc, #268]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	0a5b      	lsrs	r3, r3, #9
 8004252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800425e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004262:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004266:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800426a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800426e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004272:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	e006      	b.n	800428a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	e002      	b.n	800428a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800428a:	4b34      	ldr	r3, [pc, #208]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004292:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004296:	d121      	bne.n	80042dc <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004298:	4b30      	ldr	r3, [pc, #192]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800429a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d017      	beq.n	80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80042a4:	4b2d      	ldr	r3, [pc, #180]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80042b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042ba:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80042be:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80042c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ca:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	e006      	b.n	80042e2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	e002      	b.n	80042e2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80042e2:	4b1e      	ldr	r3, [pc, #120]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ee:	d121      	bne.n	8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80042f0:	4b1a      	ldr	r3, [pc, #104]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d017      	beq.n	800432c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80042fc:	4b17      	ldr	r3, [pc, #92]	@ (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004300:	0e1b      	lsrs	r3, r3, #24
 8004302:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800430e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004312:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004316:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800431a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800431e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004322:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800432a:	e010      	b.n	800434e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	609a      	str	r2, [r3, #8]
}
 8004332:	e00c      	b.n	800434e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	609a      	str	r2, [r3, #8]
}
 800433a:	e008      	b.n	800434e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	609a      	str	r2, [r3, #8]
}
 800434e:	bf00      	nop
 8004350:	372c      	adds	r7, #44	@ 0x2c
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	44020c00 	.word	0x44020c00
 8004360:	03d09000 	.word	0x03d09000
 8004364:	46000000 	.word	0x46000000
 8004368:	4a742400 	.word	0x4a742400
 800436c:	4bb71b00 	.word	0x4bb71b00

08004370 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08c      	sub	sp, #48	@ 0x30
 8004374:	af00      	add	r7, sp, #0
 8004376:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800437a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800437e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8004382:	430b      	orrs	r3, r1
 8004384:	d14b      	bne.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004386:	4bc4      	ldr	r3, [pc, #784]	@ (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800438c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004390:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004392:	4bc1      	ldr	r3, [pc, #772]	@ (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b02      	cmp	r3, #2
 800439e:	d108      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80043a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043a6:	d104      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80043a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ae:	f000 bf14 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80043b2:	4bb9      	ldr	r3, [pc, #740]	@ (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80043b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043c0:	d108      	bne.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80043c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c8:	d104      	bne.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80043ca:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80043ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043d0:	f000 bf03 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80043d4:	4bb0      	ldr	r3, [pc, #704]	@ (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043e0:	d119      	bne.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80043e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043e8:	d115      	bne.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80043ea:	4bab      	ldr	r3, [pc, #684]	@ (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80043f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043f6:	d30a      	bcc.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80043f8:	4ba7      	ldr	r3, [pc, #668]	@ (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	0a1b      	lsrs	r3, r3, #8
 80043fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004402:	4aa6      	ldr	r2, [pc, #664]	@ (800469c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800440a:	f000 bee6 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004412:	f000 bee2 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800441a:	f000 bede 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800441e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004422:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8004426:	ea52 0301 	orrs.w	r3, r2, r1
 800442a:	f000 838e 	beq.w	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800442e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004432:	2a01      	cmp	r2, #1
 8004434:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8004438:	f080 86cc 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800443c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004440:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8004444:	ea52 0301 	orrs.w	r3, r2, r1
 8004448:	f000 82aa 	beq.w	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800444c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004450:	2a01      	cmp	r2, #1
 8004452:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8004456:	f080 86bd 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800445a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800445e:	f1a3 0110 	sub.w	r1, r3, #16
 8004462:	ea52 0301 	orrs.w	r3, r2, r1
 8004466:	f000 8681 	beq.w	800516c <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 800446a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800446e:	2a01      	cmp	r2, #1
 8004470:	f173 0310 	sbcs.w	r3, r3, #16
 8004474:	f080 86ae 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800447c:	1f19      	subs	r1, r3, #4
 800447e:	ea52 0301 	orrs.w	r3, r2, r1
 8004482:	f000 84b1 	beq.w	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8004486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800448a:	2a01      	cmp	r2, #1
 800448c:	f173 0304 	sbcs.w	r3, r3, #4
 8004490:	f080 86a0 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004498:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800449c:	430b      	orrs	r3, r1
 800449e:	f000 85aa 	beq.w	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 80044a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044a6:	497e      	ldr	r1, [pc, #504]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80044a8:	428a      	cmp	r2, r1
 80044aa:	f173 0300 	sbcs.w	r3, r3, #0
 80044ae:	f080 8691 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80044b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044b6:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80044ba:	430b      	orrs	r3, r1
 80044bc:	f000 8532 	beq.w	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80044c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044c4:	4977      	ldr	r1, [pc, #476]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80044c6:	428a      	cmp	r2, r1
 80044c8:	f173 0300 	sbcs.w	r3, r3, #0
 80044cc:	f080 8682 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80044d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044d4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80044d8:	430b      	orrs	r3, r1
 80044da:	f000 84bc 	beq.w	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 80044de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044e2:	4971      	ldr	r1, [pc, #452]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80044e4:	428a      	cmp	r2, r1
 80044e6:	f173 0300 	sbcs.w	r3, r3, #0
 80044ea:	f080 8673 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80044ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044f2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80044f6:	430b      	orrs	r3, r1
 80044f8:	f000 85f2 	beq.w	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 80044fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004500:	496a      	ldr	r1, [pc, #424]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8004502:	428a      	cmp	r2, r1
 8004504:	f173 0300 	sbcs.w	r3, r3, #0
 8004508:	f080 8664 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800450c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004510:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004514:	430b      	orrs	r3, r1
 8004516:	f000 81e5 	beq.w	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800451a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800451e:	4964      	ldr	r1, [pc, #400]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8004520:	428a      	cmp	r2, r1
 8004522:	f173 0300 	sbcs.w	r3, r3, #0
 8004526:	f080 8655 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800452a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800452e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004532:	430b      	orrs	r3, r1
 8004534:	f000 83cc 	beq.w	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8004538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800453c:	495d      	ldr	r1, [pc, #372]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800453e:	428a      	cmp	r2, r1
 8004540:	f173 0300 	sbcs.w	r3, r3, #0
 8004544:	f080 8646 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800454c:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004550:	430b      	orrs	r3, r1
 8004552:	f000 8331 	beq.w	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8004556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800455a:	4957      	ldr	r1, [pc, #348]	@ (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 800455c:	428a      	cmp	r2, r1
 800455e:	f173 0300 	sbcs.w	r3, r3, #0
 8004562:	f080 8637 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800456a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800456e:	430b      	orrs	r3, r1
 8004570:	f000 82bb 	beq.w	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8004574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004578:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 800457c:	f173 0300 	sbcs.w	r3, r3, #0
 8004580:	f080 8628 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004588:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800458c:	430b      	orrs	r3, r1
 800458e:	f000 826d 	beq.w	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8004592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004596:	f244 0101 	movw	r1, #16385	@ 0x4001
 800459a:	428a      	cmp	r2, r1
 800459c:	f173 0300 	sbcs.w	r3, r3, #0
 80045a0:	f080 8618 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80045a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045a8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80045ac:	430b      	orrs	r3, r1
 80045ae:	f000 821e 	beq.w	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80045b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045b6:	f242 0101 	movw	r1, #8193	@ 0x2001
 80045ba:	428a      	cmp	r2, r1
 80045bc:	f173 0300 	sbcs.w	r3, r3, #0
 80045c0:	f080 8608 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80045c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045c8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80045cc:	430b      	orrs	r3, r1
 80045ce:	f000 8137 	beq.w	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80045d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045d6:	f241 0101 	movw	r1, #4097	@ 0x1001
 80045da:	428a      	cmp	r2, r1
 80045dc:	f173 0300 	sbcs.w	r3, r3, #0
 80045e0:	f080 85f8 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80045e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e8:	1f11      	subs	r1, r2, #4
 80045ea:	430b      	orrs	r3, r1
 80045ec:	f000 80d2 	beq.w	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80045f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f4:	2a05      	cmp	r2, #5
 80045f6:	f173 0300 	sbcs.w	r3, r3, #0
 80045fa:	f080 85eb 	bcs.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80045fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004602:	1e51      	subs	r1, r2, #1
 8004604:	430b      	orrs	r3, r1
 8004606:	d006      	beq.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800460c:	1e91      	subs	r1, r2, #2
 800460e:	430b      	orrs	r3, r1
 8004610:	d06c      	beq.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004612:	f000 bddf 	b.w	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004616:	4b20      	ldr	r3, [pc, #128]	@ (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004624:	2b00      	cmp	r3, #0
 8004626:	d104      	bne.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004628:	f7fe fd42 	bl	80030b0 <HAL_RCC_GetPCLK2Freq>
 800462c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800462e:	f000 bdd4 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8004632:	4b19      	ldr	r3, [pc, #100]	@ (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800463a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800463e:	d10a      	bne.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8004640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004642:	2b01      	cmp	r3, #1
 8004644:	d107      	bne.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004646:	f107 030c 	add.w	r3, r7, #12
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fd24 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004654:	e048      	b.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004656:	4b10      	ldr	r3, [pc, #64]	@ (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b02      	cmp	r3, #2
 8004660:	d10c      	bne.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8004662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004664:	2b03      	cmp	r3, #3
 8004666:	d109      	bne.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004668:	4b0b      	ldr	r3, [pc, #44]	@ (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	08db      	lsrs	r3, r3, #3
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	4a12      	ldr	r2, [pc, #72]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
 8004678:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800467a:	e035      	b.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800467c:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004688:	d11c      	bne.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468c:	2b04      	cmp	r3, #4
 800468e:	d119      	bne.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8004690:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8004692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004694:	e028      	b.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8004696:	bf00      	nop
 8004698:	44020c00 	.word	0x44020c00
 800469c:	016e3600 	.word	0x016e3600
 80046a0:	20000001 	.word	0x20000001
 80046a4:	10000001 	.word	0x10000001
 80046a8:	08000001 	.word	0x08000001
 80046ac:	04000001 	.word	0x04000001
 80046b0:	00200001 	.word	0x00200001
 80046b4:	00040001 	.word	0x00040001
 80046b8:	00020001 	.word	0x00020001
 80046bc:	03d09000 	.word	0x03d09000
 80046c0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80046c4:	4b9f      	ldr	r3, [pc, #636]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80046c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d106      	bne.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80046d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d4:	2b05      	cmp	r3, #5
 80046d6:	d103      	bne.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80046d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046de:	e003      	b.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80046e4:	f000 bd79 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80046e8:	f000 bd77 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80046ec:	4b95      	ldr	r3, [pc, #596]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80046ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046f6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80046f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80046fe:	f7fe fcc1 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 8004702:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004704:	f000 bd69 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004708:	4b8e      	ldr	r3, [pc, #568]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004710:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004714:	d10a      	bne.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004718:	2b08      	cmp	r3, #8
 800471a:	d107      	bne.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800471c:	f107 030c 	add.w	r3, r7, #12
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fcb9 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800472a:	e031      	b.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800472c:	4b85      	ldr	r3, [pc, #532]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b02      	cmp	r3, #2
 8004736:	d10c      	bne.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473a:	2b18      	cmp	r3, #24
 800473c:	d109      	bne.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800473e:	4b81      	ldr	r3, [pc, #516]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	08db      	lsrs	r3, r3, #3
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	4a7f      	ldr	r2, [pc, #508]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800474a:	fa22 f303 	lsr.w	r3, r2, r3
 800474e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004750:	e01e      	b.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8004752:	4b7c      	ldr	r3, [pc, #496]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800475a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800475e:	d105      	bne.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8004760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004762:	2b20      	cmp	r3, #32
 8004764:	d102      	bne.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8004766:	4b79      	ldr	r3, [pc, #484]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800476a:	e011      	b.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800476c:	4b75      	ldr	r3, [pc, #468]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800476e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d106      	bne.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800477a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477c:	2b28      	cmp	r3, #40	@ 0x28
 800477e:	d103      	bne.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8004780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004786:	e003      	b.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800478c:	f000 bd25 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004790:	f000 bd23 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004794:	4b6b      	ldr	r3, [pc, #428]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004796:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800479a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800479e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80047a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80047a6:	f7fe fc6d 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 80047aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80047ac:	f000 bd15 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80047b0:	4b64      	ldr	r3, [pc, #400]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047bc:	d10a      	bne.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 80047be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c0:	2b40      	cmp	r3, #64	@ 0x40
 80047c2:	d107      	bne.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047c4:	f107 030c 	add.w	r3, r7, #12
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fc65 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047d2:	e033      	b.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80047d4:	4b5b      	ldr	r3, [pc, #364]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d10c      	bne.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80047e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80047e4:	d109      	bne.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047e6:	4b57      	ldr	r3, [pc, #348]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	08db      	lsrs	r3, r3, #3
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	4a55      	ldr	r2, [pc, #340]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80047f2:	fa22 f303 	lsr.w	r3, r2, r3
 80047f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047f8:	e020      	b.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80047fa:	4b52      	ldr	r3, [pc, #328]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004802:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004806:	d106      	bne.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800480e:	d102      	bne.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8004810:	4b4e      	ldr	r3, [pc, #312]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004814:	e012      	b.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004816:	4b4b      	ldr	r3, [pc, #300]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b02      	cmp	r3, #2
 8004822:	d107      	bne.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004826:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800482a:	d103      	bne.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 800482c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004832:	e003      	b.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004838:	f000 bccf 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800483c:	f000 bccd 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004840:	4b40      	ldr	r3, [pc, #256]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004846:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800484a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800484c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d104      	bne.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004852:	f7fe fc43 	bl	80030dc <HAL_RCC_GetPCLK3Freq>
 8004856:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004858:	f000 bcbf 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800485c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004862:	d108      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fc15 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004872:	f000 bcb2 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004876:	4b33      	ldr	r3, [pc, #204]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b02      	cmp	r3, #2
 8004880:	d10d      	bne.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8004882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004884:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004888:	d109      	bne.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800488a:	4b2e      	ldr	r3, [pc, #184]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	08db      	lsrs	r3, r3, #3
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	4a2c      	ldr	r2, [pc, #176]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004896:	fa22 f303 	lsr.w	r3, r2, r3
 800489a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800489c:	e020      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800489e:	4b29      	ldr	r3, [pc, #164]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048aa:	d106      	bne.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80048ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048b2:	d102      	bne.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 80048b4:	4b25      	ldr	r3, [pc, #148]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80048b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048b8:	e012      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80048ba:	4b22      	ldr	r3, [pc, #136]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d107      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80048c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80048ce:	d103      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80048d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048d6:	e003      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048dc:	f000 bc7d 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80048e0:	f000 bc7b 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80048e4:	4b17      	ldr	r3, [pc, #92]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80048f6:	f7fe fba9 	bl	800304c <HAL_RCC_GetHCLKFreq>
 80048fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80048fc:	f000 bc6d 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004902:	2b01      	cmp	r3, #1
 8004904:	d104      	bne.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004906:	f7fe fa75 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 800490a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 800490c:	f000 bc65 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004912:	2b02      	cmp	r3, #2
 8004914:	d108      	bne.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004916:	f107 030c 	add.w	r3, r7, #12
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff fbbc 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004924:	f000 bc59 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004928:	4b06      	ldr	r3, [pc, #24]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004934:	d10e      	bne.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8004936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004938:	2b03      	cmp	r3, #3
 800493a:	d10b      	bne.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 800493c:	4b04      	ldr	r3, [pc, #16]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800493e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004940:	e02c      	b.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8004942:	bf00      	nop
 8004944:	44020c00 	.word	0x44020c00
 8004948:	03d09000 	.word	0x03d09000
 800494c:	003d0900 	.word	0x003d0900
 8004950:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004954:	4b95      	ldr	r3, [pc, #596]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b02      	cmp	r3, #2
 800495e:	d10c      	bne.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8004960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004962:	2b04      	cmp	r3, #4
 8004964:	d109      	bne.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004966:	4b91      	ldr	r3, [pc, #580]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	08db      	lsrs	r3, r3, #3
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	4a8f      	ldr	r2, [pc, #572]	@ (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004972:	fa22 f303 	lsr.w	r3, r2, r3
 8004976:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004978:	e010      	b.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800497a:	4b8c      	ldr	r3, [pc, #560]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004986:	d105      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498a:	2b05      	cmp	r3, #5
 800498c:	d102      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 800498e:	4b89      	ldr	r3, [pc, #548]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004992:	e003      	b.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004998:	f000 bc1f 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800499c:	f000 bc1d 	b.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80049a0:	4b82      	ldr	r3, [pc, #520]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80049ac:	4b7f      	ldr	r3, [pc, #508]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d106      	bne.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80049ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d103      	bne.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 80049c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049c6:	e011      	b.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80049c8:	4b78      	ldr	r3, [pc, #480]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049d6:	d106      	bne.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 80049d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d103      	bne.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 80049de:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80049e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049e4:	e002      	b.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80049ea:	e3f6      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80049ec:	e3f5      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80049ee:	4b6f      	ldr	r3, [pc, #444]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049f8:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80049fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d103      	bne.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a00:	f7fe fb40 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 8004a04:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004a06:	e3e8      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8004a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a10:	f107 030c 	add.w	r3, r7, #12
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff fb3f 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a1e:	e3dc      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004a20:	4b62      	ldr	r3, [pc, #392]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d10d      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a32:	d109      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a34:	4b5d      	ldr	r3, [pc, #372]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	08db      	lsrs	r3, r3, #3
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a40:	fa22 f303 	lsr.w	r3, r2, r3
 8004a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a46:	e010      	b.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004a48:	4b58      	ldr	r3, [pc, #352]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a54:	d106      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a5c:	d102      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8004a5e:	4b55      	ldr	r3, [pc, #340]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a62:	e002      	b.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a68:	e3b7      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004a6a:	e3b6      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a72:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004a76:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d103      	bne.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a7e:	f7fe fb01 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 8004a82:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004a84:	e3a9      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8004a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a8c:	d107      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a8e:	f107 030c 	add.w	r3, r7, #12
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fb00 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a9c:	e39d      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004a9e:	4b43      	ldr	r3, [pc, #268]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d10d      	bne.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ab0:	d109      	bne.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	08db      	lsrs	r3, r3, #3
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	4a3c      	ldr	r2, [pc, #240]	@ (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004abe:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ac4:	e010      	b.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004ac6:	4b39      	ldr	r3, [pc, #228]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad2:	d106      	bne.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ada:	d102      	bne.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004adc:	4b35      	ldr	r3, [pc, #212]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ae0:	e002      	b.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ae6:	e378      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004ae8:	e377      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004aea:	4b30      	ldr	r3, [pc, #192]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004aec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004af0:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004af4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d103      	bne.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004afc:	f7fe fac2 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 8004b00:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004b02:	e36a      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b0c:	f107 030c 	add.w	r3, r7, #12
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff fac1 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b1a:	e35e      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004b1c:	4b23      	ldr	r3, [pc, #140]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d10d      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8004b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b2e:	d109      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b30:	4b1e      	ldr	r3, [pc, #120]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	08db      	lsrs	r3, r3, #3
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b42:	e34a      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b48:	e347      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004b4a:	4b18      	ldr	r3, [pc, #96]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b50:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004b54:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d103      	bne.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004b5c:	f7fe fabe 	bl	80030dc <HAL_RCC_GetPCLK3Freq>
 8004b60:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004b62:	e33a      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8004b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b6c:	f107 030c 	add.w	r3, r7, #12
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff fa91 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b7a:	e32e      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d10d      	bne.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b8e:	d109      	bne.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b90:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	08db      	lsrs	r3, r3, #3
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	4a05      	ldr	r2, [pc, #20]	@ (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ba2:	e31a      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ba8:	e317      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004baa:	bf00      	nop
 8004bac:	44020c00 	.word	0x44020c00
 8004bb0:	03d09000 	.word	0x03d09000
 8004bb4:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004bb8:	4b9b      	ldr	r3, [pc, #620]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004bba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004bbe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bc2:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 8004bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004bca:	d044      	beq.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bce:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004bd2:	d879      	bhi.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bda:	d02d      	beq.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be2:	d871      	bhi.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bea:	d017      	beq.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bf2:	d869      	bhi.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c00:	d004      	beq.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004c02:	e061      	b.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004c04:	f7fe fa6a 	bl	80030dc <HAL_RCC_GetPCLK3Freq>
 8004c08:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004c0a:	e060      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c0c:	f107 030c 	add.w	r3, r7, #12
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fa41 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c1a:	e058      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c1c:	4b82      	ldr	r3, [pc, #520]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d103      	bne.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8004c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004c30:	e04d      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c36:	e04a      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004c38:	4b7b      	ldr	r3, [pc, #492]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c46:	d103      	bne.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8004c48:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004c4e:	e03e      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c54:	e03b      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c56:	4b74      	ldr	r3, [pc, #464]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c5c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c62:	4b71      	ldr	r3, [pc, #452]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d10c      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d109      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c74:	4b6c      	ldr	r3, [pc, #432]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	08db      	lsrs	r3, r3, #3
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	4a6b      	ldr	r2, [pc, #428]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
 8004c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c86:	e01e      	b.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c88:	4b67      	ldr	r3, [pc, #412]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c94:	d106      	bne.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c9c:	d102      	bne.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004c9e:	4b64      	ldr	r3, [pc, #400]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ca2:	e010      	b.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ca4:	4b60      	ldr	r3, [pc, #384]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cb0:	d106      	bne.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cb8:	d102      	bne.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004cba:	4b5e      	ldr	r3, [pc, #376]	@ (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cbe:	e002      	b.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004cc4:	e003      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004cc6:	e002      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ccc:	bf00      	nop
          }
        }
        break;
 8004cce:	e284      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004cd0:	4b55      	ldr	r3, [pc, #340]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004cd2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004cd6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004cda:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 8004cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cde:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004ce2:	d044      	beq.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cea:	d879      	bhi.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cf2:	d02d      	beq.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cfa:	d871      	bhi.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d02:	d017      	beq.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d0a:	d869      	bhi.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d004      	beq.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8004d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d18:	d004      	beq.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004d1a:	e061      	b.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004d1c:	f7fe f9b2 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 8004d20:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004d22:	e060      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d24:	f107 030c 	add.w	r3, r7, #12
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff f9b5 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d32:	e058      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d34:	4b3c      	ldr	r3, [pc, #240]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d103      	bne.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8004d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004d48:	e04d      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d4e:	e04a      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004d50:	4b35      	ldr	r3, [pc, #212]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d5e:	d103      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004d60:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004d66:	e03e      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d6c:	e03b      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d74:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d109      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d8c:	4b26      	ldr	r3, [pc, #152]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	08db      	lsrs	r3, r3, #3
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	4a25      	ldr	r2, [pc, #148]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d9e:	e01e      	b.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004da0:	4b21      	ldr	r3, [pc, #132]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dac:	d106      	bne.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004db4:	d102      	bne.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004db6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dba:	e010      	b.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dc8:	d106      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dd0:	d102      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004dd2:	4b18      	ldr	r3, [pc, #96]	@ (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dd6:	e002      	b.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004ddc:	e003      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004dde:	e002      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004de4:	bf00      	nop
          }
        }
        break;
 8004de6:	e1f8      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004de8:	4b0f      	ldr	r3, [pc, #60]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004dea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004df4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e00:	d105      	bne.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d102      	bne.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8004e08:	4b0a      	ldr	r3, [pc, #40]	@ (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004e0c:	e1e5      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e14:	d110      	bne.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e16:	f107 0318 	add.w	r3, r7, #24
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe ffd0 	bl	8003dc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e24:	e1d9      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004e26:	bf00      	nop
 8004e28:	44020c00 	.word	0x44020c00
 8004e2c:	03d09000 	.word	0x03d09000
 8004e30:	003d0900 	.word	0x003d0900
 8004e34:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e3e:	d107      	bne.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e40:	f107 030c 	add.w	r3, r7, #12
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff f927 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e4e:	e1c4      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e54:	e1c1      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004e56:	4b9d      	ldr	r3, [pc, #628]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d859      	bhi.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004e68:	a201      	add	r2, pc, #4	@ (adr r2, 8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6e:	bf00      	nop
 8004e70:	08004e85 	.word	0x08004e85
 8004e74:	08004e95 	.word	0x08004e95
 8004e78:	08004f1d 	.word	0x08004f1d
 8004e7c:	08004ea5 	.word	0x08004ea5
 8004e80:	08004eab 	.word	0x08004eab
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e84:	f107 0318 	add.w	r3, r7, #24
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fe ff99 	bl	8003dc0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e92:	e046      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e94:	f107 030c 	add.w	r3, r7, #12
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff f8fd 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ea2:	e03e      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004ea4:	4b8a      	ldr	r3, [pc, #552]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ea8:	e03b      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004eaa:	4b88      	ldr	r3, [pc, #544]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004eb0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004eb4:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004eb6:	4b85      	ldr	r3, [pc, #532]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ec8:	4b80      	ldr	r3, [pc, #512]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	08db      	lsrs	r3, r3, #3
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	4a80      	ldr	r2, [pc, #512]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eda:	e01e      	b.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004edc:	4b7b      	ldr	r3, [pc, #492]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee8:	d106      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef0:	d102      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004ef2:	4b79      	ldr	r3, [pc, #484]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ef6:	e010      	b.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ef8:	4b74      	ldr	r3, [pc, #464]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f04:	d106      	bne.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f0c:	d102      	bne.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004f0e:	4b73      	ldr	r3, [pc, #460]	@ (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f12:	e002      	b.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004f18:	e003      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8004f1a:	e002      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f20:	bf00      	nop
          }
        }
        break;
 8004f22:	e15a      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004f24:	4b69      	ldr	r3, [pc, #420]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d022      	beq.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8004f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	d858      	bhi.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3e:	2b18      	cmp	r3, #24
 8004f40:	d019      	beq.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8004f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f44:	2b18      	cmp	r3, #24
 8004f46:	d852      	bhi.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d008      	beq.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004f54:	e04b      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f56:	f107 0318 	add.w	r3, r7, #24
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fe ff30 	bl	8003dc0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f64:	e046      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f66:	f107 030c 	add.w	r3, r7, #12
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff f894 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f74:	e03e      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004f76:	4b56      	ldr	r3, [pc, #344]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f7a:	e03b      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f7c:	4b53      	ldr	r3, [pc, #332]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004f7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f82:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004f86:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f88:	4b50      	ldr	r3, [pc, #320]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d10c      	bne.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	08db      	lsrs	r3, r3, #3
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	4a4b      	ldr	r2, [pc, #300]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fac:	e01e      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004fae:	4b47      	ldr	r3, [pc, #284]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fba:	d106      	bne.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc2:	d102      	bne.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004fc4:	4b44      	ldr	r3, [pc, #272]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fc8:	e010      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fca:	4b40      	ldr	r3, [pc, #256]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fd6:	d106      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fde:	d102      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004fe0:	4b3e      	ldr	r3, [pc, #248]	@ (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fe4:	e002      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004fea:	e003      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8004fec:	e002      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ff2:	bf00      	nop
          }
        }
        break;
 8004ff4:	e0f1      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004ff6:	4b35      	ldr	r3, [pc, #212]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ffc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005000:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8005002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005004:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005008:	d023      	beq.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800500a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005010:	d858      	bhi.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005014:	2bc0      	cmp	r3, #192	@ 0xc0
 8005016:	d019      	beq.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8005018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501a:	2bc0      	cmp	r3, #192	@ 0xc0
 800501c:	d852      	bhi.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800501e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8005024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005026:	2b40      	cmp	r3, #64	@ 0x40
 8005028:	d008      	beq.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 800502a:	e04b      	b.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800502c:	f107 0318 	add.w	r3, r7, #24
 8005030:	4618      	mov	r0, r3
 8005032:	f7fe fec5 	bl	8003dc0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800503a:	e046      	b.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800503c:	f107 030c 	add.w	r3, r7, #12
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff f829 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800504a:	e03e      	b.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800504c:	4b20      	ldr	r3, [pc, #128]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800504e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005050:	e03b      	b.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005052:	4b1e      	ldr	r3, [pc, #120]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005058:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800505e:	4b1b      	ldr	r3, [pc, #108]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b02      	cmp	r3, #2
 8005068:	d10c      	bne.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	2b00      	cmp	r3, #0
 800506e:	d109      	bne.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005070:	4b16      	ldr	r3, [pc, #88]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	08db      	lsrs	r3, r3, #3
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	4a16      	ldr	r2, [pc, #88]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
 8005080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005082:	e01e      	b.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005084:	4b11      	ldr	r3, [pc, #68]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800508c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005090:	d106      	bne.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005098:	d102      	bne.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800509a:	4b0f      	ldr	r3, [pc, #60]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 800509c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800509e:	e010      	b.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050a0:	4b0a      	ldr	r3, [pc, #40]	@ (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050ac:	d106      	bne.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050b4:	d102      	bne.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80050b6:	4b09      	ldr	r3, [pc, #36]	@ (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80050b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050ba:	e002      	b.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80050c0:	e003      	b.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80050c2:	e002      	b.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80050c8:	bf00      	nop
          }
        }
        break;
 80050ca:	e086      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80050cc:	44020c00 	.word	0x44020c00
 80050d0:	00bb8000 	.word	0x00bb8000
 80050d4:	03d09000 	.word	0x03d09000
 80050d8:	003d0900 	.word	0x003d0900
 80050dc:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80050e0:	4b40      	ldr	r3, [pc, #256]	@ (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80050e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80050ea:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80050ec:	4b3d      	ldr	r3, [pc, #244]	@ (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050f8:	d105      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 80050fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8005100:	4b39      	ldr	r3, [pc, #228]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8005102:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005104:	e031      	b.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005106:	4b37      	ldr	r3, [pc, #220]	@ (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005112:	d10a      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005116:	2b10      	cmp	r3, #16
 8005118:	d107      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800511a:	f107 0318 	add.w	r3, r7, #24
 800511e:	4618      	mov	r0, r3
 8005120:	f7fe fe4e 	bl	8003dc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005128:	e01f      	b.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800512a:	4b2e      	ldr	r3, [pc, #184]	@ (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800512c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b02      	cmp	r3, #2
 8005136:	d106      	bne.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8005138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513a:	2b20      	cmp	r3, #32
 800513c:	d103      	bne.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800513e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005142:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005144:	e011      	b.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005146:	4b27      	ldr	r3, [pc, #156]	@ (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800514c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005150:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005154:	d106      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8005156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005158:	2b30      	cmp	r3, #48	@ 0x30
 800515a:	d103      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 800515c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005162:	e002      	b.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8005168:	e037      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800516a:	e036      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800516c:	4b1d      	ldr	r3, [pc, #116]	@ (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800516e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005172:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005176:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517a:	2b10      	cmp	r3, #16
 800517c:	d107      	bne.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800517e:	f107 0318 	add.w	r3, r7, #24
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe fe1c 	bl	8003dc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 800518c:	e025      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 800518e:	4b15      	ldr	r3, [pc, #84]	@ (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005196:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800519a:	d10a      	bne.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 800519c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519e:	2b20      	cmp	r3, #32
 80051a0:	d107      	bne.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051a2:	f107 030c 	add.w	r3, r7, #12
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe ff76 	bl	8004098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051b0:	e00f      	b.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80051b2:	4b0c      	ldr	r3, [pc, #48]	@ (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051be:	d105      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 80051c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c2:	2b30      	cmp	r3, #48	@ 0x30
 80051c4:	d102      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80051c6:	4b08      	ldr	r3, [pc, #32]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80051c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ca:	e002      	b.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 80051d0:	e003      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80051d2:	e002      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051d8:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80051da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3730      	adds	r7, #48	@ 0x30
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	44020c00 	.word	0x44020c00
 80051e8:	02dc6c00 	.word	0x02dc6c00

080051ec <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80051f4:	4b48      	ldr	r3, [pc, #288]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a47      	ldr	r2, [pc, #284]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 80051fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005200:	f7fc fbea 	bl	80019d8 <HAL_GetTick>
 8005204:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005206:	e008      	b.n	800521a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005208:	f7fc fbe6 	bl	80019d8 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e07a      	b.n	8005310 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800521a:	4b3f      	ldr	r3, [pc, #252]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f0      	bne.n	8005208 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005226:	4b3c      	ldr	r3, [pc, #240]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 8005228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6811      	ldr	r1, [r2, #0]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6852      	ldr	r2, [r2, #4]
 800523a:	0212      	lsls	r2, r2, #8
 800523c:	430a      	orrs	r2, r1
 800523e:	4936      	ldr	r1, [pc, #216]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 8005240:	4313      	orrs	r3, r2
 8005242:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	3b01      	subs	r3, #1
 800524a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	3b01      	subs	r3, #1
 8005254:	025b      	lsls	r3, r3, #9
 8005256:	b29b      	uxth	r3, r3
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	3b01      	subs	r3, #1
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	3b01      	subs	r3, #1
 800526e:	061b      	lsls	r3, r3, #24
 8005270:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005274:	4928      	ldr	r1, [pc, #160]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 8005276:	4313      	orrs	r3, r2
 8005278:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800527a:	4b27      	ldr	r3, [pc, #156]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 800527c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527e:	f023 020c 	bic.w	r2, r3, #12
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	4924      	ldr	r1, [pc, #144]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 8005288:	4313      	orrs	r3, r2
 800528a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800528c:	4b22      	ldr	r3, [pc, #136]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	f023 0220 	bic.w	r2, r3, #32
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	491f      	ldr	r1, [pc, #124]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 800529a:	4313      	orrs	r3, r2
 800529c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800529e:	4b1e      	ldr	r3, [pc, #120]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 80052a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	491c      	ldr	r1, [pc, #112]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80052ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 80052ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b0:	4a19      	ldr	r2, [pc, #100]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 80052b2:	f023 0310 	bic.w	r3, r3, #16
 80052b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80052b8:	4b17      	ldr	r3, [pc, #92]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 80052ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052c0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6a12      	ldr	r2, [r2, #32]
 80052c8:	00d2      	lsls	r2, r2, #3
 80052ca:	4913      	ldr	r1, [pc, #76]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80052d0:	4b11      	ldr	r3, [pc, #68]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 80052d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d4:	4a10      	ldr	r2, [pc, #64]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 80052d6:	f043 0310 	orr.w	r3, r3, #16
 80052da:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80052dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 80052e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052e8:	f7fc fb76 	bl	80019d8 <HAL_GetTick>
 80052ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052ee:	e008      	b.n	8005302 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052f0:	f7fc fb72 	bl	80019d8 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e006      	b.n	8005310 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005302:	4b05      	ldr	r3, [pc, #20]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800530e:	2300      	movs	r3, #0

}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	44020c00 	.word	0x44020c00

0800531c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e0e9      	b.n	8005502 <HAL_SPI_Init+0x1e6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a74      	ldr	r2, [pc, #464]	@ (800550c <HAL_SPI_Init+0x1f0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d105      	bne.n	800534a <HAL_SPI_Init+0x2e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	2b0f      	cmp	r3, #15
 8005344:	d901      	bls.n	800534a <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e0db      	b.n	8005502 <HAL_SPI_Init+0x1e6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fcfc 	bl	8005d48 <SPI_GetPacketSize>
 8005350:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a6d      	ldr	r2, [pc, #436]	@ (800550c <HAL_SPI_Init+0x1f0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d102      	bne.n	8005362 <HAL_SPI_Init+0x46>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b08      	cmp	r3, #8
 8005360:	d811      	bhi.n	8005386 <HAL_SPI_Init+0x6a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005366:	4a6a      	ldr	r2, [pc, #424]	@ (8005510 <HAL_SPI_Init+0x1f4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d009      	beq.n	8005380 <HAL_SPI_Init+0x64>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a68      	ldr	r2, [pc, #416]	@ (8005514 <HAL_SPI_Init+0x1f8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <HAL_SPI_Init+0x64>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a67      	ldr	r2, [pc, #412]	@ (8005518 <HAL_SPI_Init+0x1fc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d104      	bne.n	800538a <HAL_SPI_Init+0x6e>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b10      	cmp	r3, #16
 8005384:	d901      	bls.n	800538a <HAL_SPI_Init+0x6e>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0bb      	b.n	8005502 <HAL_SPI_Init+0x1e6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_SPI_Init+0x88>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fb fd1c 	bl	8000ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0201 	bic.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80053c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053d0:	d119      	bne.n	8005406 <HAL_SPI_Init+0xea>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053da:	d103      	bne.n	80053e4 <HAL_SPI_Init+0xc8>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <HAL_SPI_Init+0xda>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10c      	bne.n	8005406 <HAL_SPI_Init+0xea>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80053f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053f4:	d107      	bne.n	8005406 <HAL_SPI_Init+0xea>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005404:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00f      	beq.n	8005432 <HAL_SPI_Init+0x116>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	2b06      	cmp	r3, #6
 8005418:	d90b      	bls.n	8005432 <HAL_SPI_Init+0x116>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e007      	b.n	8005442 <HAL_SPI_Init+0x126>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005440:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69da      	ldr	r2, [r3, #28]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544a:	431a      	orrs	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005454:	ea42 0103 	orr.w	r1, r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ae:	ea42 0103 	orr.w	r1, r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_SPI_Init+0x1d4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	deaddead 	.word	0xdeaddead
 8005510:	40013000 	.word	0x40013000
 8005514:	40003800 	.word	0x40003800
 8005518:	40003c00 	.word	0x40003c00

0800551c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08e      	sub	sp, #56	@ 0x38
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3320      	adds	r3, #32
 8005530:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3330      	adds	r3, #48	@ 0x30
 8005538:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553e:	095b      	lsrs	r3, r3, #5
 8005540:	b29b      	uxth	r3, r3
 8005542:	3301      	adds	r3, #1
 8005544:	83fb      	strh	r3, [r7, #30]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005546:	f7fc fa47 	bl	80019d8 <HAL_GetTick>
 800554a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800554c:	887b      	ldrh	r3, [r7, #2]
 800554e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8005550:	887b      	ldrh	r3, [r7, #2]
 8005552:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b01      	cmp	r3, #1
 800555e:	d001      	beq.n	8005564 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8005560:	2302      	movs	r3, #2
 8005562:	e31e      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x686>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_SPI_TransmitReceive+0x5a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <HAL_SPI_TransmitReceive+0x5a>
 8005570:	887b      	ldrh	r3, [r7, #2]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e313      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x686>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_SPI_TransmitReceive+0x6c>
 8005584:	2302      	movs	r3, #2
 8005586:	e30c      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x686>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2205      	movs	r2, #5
 8005594:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	887a      	ldrh	r2, [r7, #2]
 80055aa:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	887a      	ldrh	r2, [r7, #2]
 80055b2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	887a      	ldrh	r2, [r7, #2]
 80055c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	887a      	ldrh	r2, [r7, #2]
 80055c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80055e6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a78      	ldr	r2, [pc, #480]	@ (80057d0 <HAL_SPI_TransmitReceive+0x2b4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_SPI_TransmitReceive+0xea>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a77      	ldr	r2, [pc, #476]	@ (80057d4 <HAL_SPI_TransmitReceive+0x2b8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_SPI_TransmitReceive+0xea>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a75      	ldr	r2, [pc, #468]	@ (80057d8 <HAL_SPI_TransmitReceive+0x2bc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d102      	bne.n	800560c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005606:	2310      	movs	r3, #16
 8005608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800560a:	e001      	b.n	8005610 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800560c:	2308      	movs	r3, #8
 800560e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	0c1b      	lsrs	r3, r3, #16
 8005618:	041b      	lsls	r3, r3, #16
 800561a:	8879      	ldrh	r1, [r7, #2]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	430b      	orrs	r3, r1
 8005622:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800563c:	d107      	bne.n	800564e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800564c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	2b0f      	cmp	r3, #15
 8005654:	f240 80b2 	bls.w	80057bc <HAL_SPI_TransmitReceive+0x2a0>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a5c      	ldr	r2, [pc, #368]	@ (80057d0 <HAL_SPI_TransmitReceive+0x2b4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00a      	beq.n	8005678 <HAL_SPI_TransmitReceive+0x15c>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a5b      	ldr	r2, [pc, #364]	@ (80057d4 <HAL_SPI_TransmitReceive+0x2b8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d005      	beq.n	8005678 <HAL_SPI_TransmitReceive+0x15c>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a59      	ldr	r2, [pc, #356]	@ (80057d8 <HAL_SPI_TransmitReceive+0x2bc>)
 8005672:	4293      	cmp	r3, r2
 8005674:	f040 80a2 	bne.w	80057bc <HAL_SPI_TransmitReceive+0x2a0>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567a:	089b      	lsrs	r3, r3, #2
 800567c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800567e:	e094      	b.n	80057aa <HAL_SPI_TransmitReceive+0x28e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b02      	cmp	r3, #2
 800568c:	d120      	bne.n	80056d0 <HAL_SPI_TransmitReceive+0x1b4>
 800568e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01d      	beq.n	80056d0 <HAL_SPI_TransmitReceive+0x1b4>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005694:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005696:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800569c:	429a      	cmp	r2, r3
 800569e:	d217      	bcs.n	80056d0 <HAL_SPI_TransmitReceive+0x1b4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6812      	ldr	r2, [r2, #0]
 80056aa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056b0:	1d1a      	adds	r2, r3, #4
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056ce:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80056d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d065      	beq.n	80057aa <HAL_SPI_TransmitReceive+0x28e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d118      	bne.n	800571e <HAL_SPI_TransmitReceive+0x202>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80056f6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056fc:	1d1a      	adds	r2, r3, #4
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800571a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800571c:	e045      	b.n	80057aa <HAL_SPI_TransmitReceive+0x28e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800571e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005720:	8bfb      	ldrh	r3, [r7, #30]
 8005722:	429a      	cmp	r2, r3
 8005724:	d21d      	bcs.n	8005762 <HAL_SPI_TransmitReceive+0x246>
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d018      	beq.n	8005762 <HAL_SPI_TransmitReceive+0x246>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005738:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800573a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005740:	1d1a      	adds	r2, r3, #4
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800575e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005760:	e023      	b.n	80057aa <HAL_SPI_TransmitReceive+0x28e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005762:	f7fc f939 	bl	80019d8 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800576e:	429a      	cmp	r2, r3
 8005770:	d803      	bhi.n	800577a <HAL_SPI_TransmitReceive+0x25e>
 8005772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005778:	d102      	bne.n	8005780 <HAL_SPI_TransmitReceive+0x264>
 800577a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577c:	2b00      	cmp	r3, #0
 800577e:	d114      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x28e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fa13 	bl	8005bac <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800578c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e1fb      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x686>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80057aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f47f af67 	bne.w	8005680 <HAL_SPI_TransmitReceive+0x164>
 80057b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f47f af63 	bne.w	8005680 <HAL_SPI_TransmitReceive+0x164>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80057ba:	e1cc      	b.n	8005b56 <HAL_SPI_TransmitReceive+0x63a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	2b07      	cmp	r3, #7
 80057c2:	f240 81c0 	bls.w	8005b46 <HAL_SPI_TransmitReceive+0x62a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80057c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80057cc:	e0c7      	b.n	800595e <HAL_SPI_TransmitReceive+0x442>
 80057ce:	bf00      	nop
 80057d0:	40013000 	.word	0x40013000
 80057d4:	40003800 	.word	0x40003800
 80057d8:	40003c00 	.word	0x40003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d11f      	bne.n	800582a <HAL_SPI_TransmitReceive+0x30e>
 80057ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01c      	beq.n	800582a <HAL_SPI_TransmitReceive+0x30e>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80057f0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80057f2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80057f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d216      	bcs.n	800582a <HAL_SPI_TransmitReceive+0x30e>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005800:	881a      	ldrh	r2, [r3, #0]
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800580a:	1c9a      	adds	r2, r3, #2
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005828:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005832:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8092 	beq.w	800595e <HAL_SPI_TransmitReceive+0x442>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b01      	cmp	r3, #1
 8005846:	d118      	bne.n	800587a <HAL_SPI_TransmitReceive+0x35e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800584c:	6a3a      	ldr	r2, [r7, #32]
 800584e:	8812      	ldrh	r2, [r2, #0]
 8005850:	b292      	uxth	r2, r2
 8005852:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005858:	1c9a      	adds	r2, r3, #2
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005876:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005878:	e071      	b.n	800595e <HAL_SPI_TransmitReceive+0x442>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800587a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800587c:	8bfb      	ldrh	r3, [r7, #30]
 800587e:	429a      	cmp	r2, r3
 8005880:	d228      	bcs.n	80058d4 <HAL_SPI_TransmitReceive+0x3b8>
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d023      	beq.n	80058d4 <HAL_SPI_TransmitReceive+0x3b8>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005890:	6a3a      	ldr	r2, [r7, #32]
 8005892:	8812      	ldrh	r2, [r2, #0]
 8005894:	b292      	uxth	r2, r2
 8005896:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800589c:	1c9a      	adds	r2, r3, #2
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058a6:	6a3a      	ldr	r2, [r7, #32]
 80058a8:	8812      	ldrh	r2, [r2, #0]
 80058aa:	b292      	uxth	r2, r2
 80058ac:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058b2:	1c9a      	adds	r2, r3, #2
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b02      	subs	r3, #2
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80058d0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80058d2:	e044      	b.n	800595e <HAL_SPI_TransmitReceive+0x442>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80058d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d11d      	bne.n	8005916 <HAL_SPI_TransmitReceive+0x3fa>
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d018      	beq.n	8005916 <HAL_SPI_TransmitReceive+0x3fa>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058e8:	6a3a      	ldr	r2, [r7, #32]
 80058ea:	8812      	ldrh	r2, [r2, #0]
 80058ec:	b292      	uxth	r2, r2
 80058ee:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058f4:	1c9a      	adds	r2, r3, #2
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005900:	b29b      	uxth	r3, r3
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005912:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005914:	e023      	b.n	800595e <HAL_SPI_TransmitReceive+0x442>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005916:	f7fc f85f 	bl	80019d8 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005922:	429a      	cmp	r2, r3
 8005924:	d803      	bhi.n	800592e <HAL_SPI_TransmitReceive+0x412>
 8005926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592c:	d102      	bne.n	8005934 <HAL_SPI_TransmitReceive+0x418>
 800592e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005930:	2b00      	cmp	r3, #0
 8005932:	d114      	bne.n	800595e <HAL_SPI_TransmitReceive+0x442>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 f939 	bl	8005bac <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005940:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e121      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x686>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800595e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005960:	2b00      	cmp	r3, #0
 8005962:	f47f af3b 	bne.w	80057dc <HAL_SPI_TransmitReceive+0x2c0>
 8005966:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005968:	2b00      	cmp	r3, #0
 800596a:	f47f af37 	bne.w	80057dc <HAL_SPI_TransmitReceive+0x2c0>
 800596e:	e0f2      	b.n	8005b56 <HAL_SPI_TransmitReceive+0x63a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b02      	cmp	r3, #2
 800597c:	d121      	bne.n	80059c2 <HAL_SPI_TransmitReceive+0x4a6>
 800597e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01e      	beq.n	80059c2 <HAL_SPI_TransmitReceive+0x4a6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005984:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005986:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800598a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800598c:	429a      	cmp	r2, r3
 800598e:	d218      	bcs.n	80059c2 <HAL_SPI_TransmitReceive+0x4a6>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3320      	adds	r3, #32
 800599a:	7812      	ldrb	r2, [r2, #0]
 800599c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059c0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80059ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80ba 	beq.w	8005b46 <HAL_SPI_TransmitReceive+0x62a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d11b      	bne.n	8005a18 <HAL_SPI_TransmitReceive+0x4fc>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059ec:	7812      	ldrb	r2, [r2, #0]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005a14:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a16:	e096      	b.n	8005b46 <HAL_SPI_TransmitReceive+0x62a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005a18:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a1a:	8bfb      	ldrh	r3, [r7, #30]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d24a      	bcs.n	8005ab6 <HAL_SPI_TransmitReceive+0x59a>
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d045      	beq.n	8005ab6 <HAL_SPI_TransmitReceive+0x59a>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a36:	7812      	ldrb	r2, [r2, #0]
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a52:	7812      	ldrb	r2, [r2, #0]
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a6e:	7812      	ldrb	r2, [r2, #0]
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a8a:	7812      	ldrb	r2, [r2, #0]
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b04      	subs	r3, #4
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005ab2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ab4:	e047      	b.n	8005b46 <HAL_SPI_TransmitReceive+0x62a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005ab6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d820      	bhi.n	8005afe <HAL_SPI_TransmitReceive+0x5e2>
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d01b      	beq.n	8005afe <HAL_SPI_TransmitReceive+0x5e2>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ad2:	7812      	ldrb	r2, [r2, #0]
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005afa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005afc:	e023      	b.n	8005b46 <HAL_SPI_TransmitReceive+0x62a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005afe:	f7fb ff6b 	bl	80019d8 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d803      	bhi.n	8005b16 <HAL_SPI_TransmitReceive+0x5fa>
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b14:	d102      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x600>
 8005b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d114      	bne.n	8005b46 <HAL_SPI_TransmitReceive+0x62a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f845 	bl	8005bac <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e02d      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x686>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005b46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f47f af11 	bne.w	8005970 <HAL_SPI_TransmitReceive+0x454>
 8005b4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f47f af0d 	bne.w	8005970 <HAL_SPI_TransmitReceive+0x454>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2108      	movs	r1, #8
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f8c3 	bl	8005cec <SPI_WaitOnFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <HAL_SPI_TransmitReceive+0x660>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b72:	f043 0220 	orr.w	r2, r3, #32
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 f815 	bl	8005bac <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_SPI_TransmitReceive+0x684>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x686>
  }
  else
  {
    return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3730      	adds	r7, #48	@ 0x30
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop

08005bac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0208 	orr.w	r2, r2, #8
 8005bca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0210 	orr.w	r2, r2, #16
 8005bda:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0201 	bic.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8005bfa:	f023 0303 	bic.w	r3, r3, #3
 8005bfe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005c0e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d014      	beq.n	8005c46 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00f      	beq.n	8005c46 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c2c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699a      	ldr	r2, [r3, #24]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0220 	orr.w	r2, r2, #32
 8005c44:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d014      	beq.n	8005c7c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00f      	beq.n	8005c7c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c62:	f043 0204 	orr.w	r2, r3, #4
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c7a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00f      	beq.n	8005ca6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c8c:	f043 0201 	orr.w	r2, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699a      	ldr	r2, [r3, #24]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ca4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00f      	beq.n	8005cd0 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cb6:	f043 0208 	orr.w	r2, r3, #8
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699a      	ldr	r2, [r3, #24]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cce:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8005ce0:	bf00      	nop
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005cfc:	e010      	b.n	8005d20 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cfe:	f7fb fe6b 	bl	80019d8 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d803      	bhi.n	8005d16 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d102      	bne.n	8005d1c <SPI_WaitOnFlagUntilTimeout+0x30>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e00f      	b.n	8005d40 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	695a      	ldr	r2, [r3, #20]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	bf0c      	ite	eq
 8005d30:	2301      	moveq	r3, #1
 8005d32:	2300      	movne	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d0df      	beq.n	8005cfe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d54:	095b      	lsrs	r3, r3, #5
 8005d56:	3301      	adds	r3, #1
 8005d58:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	3307      	adds	r3, #7
 8005d66:	08db      	lsrs	r3, r3, #3
 8005d68:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e049      	b.n	8005e24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d106      	bne.n	8005daa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f841 	bl	8005e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2202      	movs	r2, #2
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3304      	adds	r3, #4
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	f000 fa0b 	bl	80061d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d001      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e03b      	b.n	8005ed0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a19      	ldr	r2, [pc, #100]	@ (8005edc <HAL_TIM_Base_Start_IT+0x9c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_TIM_Base_Start_IT+0x4e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e82:	d004      	beq.n	8005e8e <HAL_TIM_Base_Start_IT+0x4e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a15      	ldr	r2, [pc, #84]	@ (8005ee0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d115      	bne.n	8005eba <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	4b13      	ldr	r3, [pc, #76]	@ (8005ee4 <HAL_TIM_Base_Start_IT+0xa4>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b06      	cmp	r3, #6
 8005e9e:	d015      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x8c>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea6:	d011      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb8:	e008      	b.n	8005ecc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0201 	orr.w	r2, r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e000      	b.n	8005ece <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ecc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	00010007 	.word	0x00010007

08005ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d020      	beq.n	8005f4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01b      	beq.n	8005f4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0202 	mvn.w	r2, #2
 8005f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f931 	bl	800619a <HAL_TIM_IC_CaptureCallback>
 8005f38:	e005      	b.n	8005f46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f923 	bl	8006186 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f934 	bl	80061ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d020      	beq.n	8005f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01b      	beq.n	8005f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0204 	mvn.w	r2, #4
 8005f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f90b 	bl	800619a <HAL_TIM_IC_CaptureCallback>
 8005f84:	e005      	b.n	8005f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f8fd 	bl	8006186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f90e 	bl	80061ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d020      	beq.n	8005fe4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f003 0308 	and.w	r3, r3, #8
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01b      	beq.n	8005fe4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0208 	mvn.w	r2, #8
 8005fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2204      	movs	r2, #4
 8005fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f003 0303 	and.w	r3, r3, #3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f8e5 	bl	800619a <HAL_TIM_IC_CaptureCallback>
 8005fd0:	e005      	b.n	8005fde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f8d7 	bl	8006186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f8e8 	bl	80061ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f003 0310 	and.w	r3, r3, #16
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d020      	beq.n	8006030 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01b      	beq.n	8006030 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f06f 0210 	mvn.w	r2, #16
 8006000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2208      	movs	r2, #8
 8006006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f8bf 	bl	800619a <HAL_TIM_IC_CaptureCallback>
 800601c:	e005      	b.n	800602a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f8b1 	bl	8006186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f8c2 	bl	80061ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00c      	beq.n	8006054 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0201 	mvn.w	r2, #1
 800604c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fa fe8e 	bl	8000d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00c      	beq.n	8006082 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800607a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f91b 	bl	80062b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00c      	beq.n	80060a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006092:	2b00      	cmp	r3, #0
 8006094:	d007      	beq.n	80060a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800609e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f913 	bl	80062cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00c      	beq.n	80060ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f87c 	bl	80061c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00c      	beq.n	80060ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f06f 0220 	mvn.w	r2, #32
 80060e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f8db 	bl	80062a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00c      	beq.n	8006112 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800610a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f8e7 	bl	80062e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00c      	beq.n	8006136 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d007      	beq.n	8006136 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800612e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f8df 	bl	80062f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00c      	beq.n	800615a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d007      	beq.n	800615a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f8d7 	bl	8006308 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00c      	beq.n	800617e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f8cf 	bl	800631c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800617e:	bf00      	nop
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a2c      	ldr	r2, [pc, #176]	@ (800629c <TIM_Base_SetConfig+0xc4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d007      	beq.n	8006200 <TIM_Base_SetConfig+0x28>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f6:	d003      	beq.n	8006200 <TIM_Base_SetConfig+0x28>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a29      	ldr	r2, [pc, #164]	@ (80062a0 <TIM_Base_SetConfig+0xc8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d108      	bne.n	8006212 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a21      	ldr	r2, [pc, #132]	@ (800629c <TIM_Base_SetConfig+0xc4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d007      	beq.n	800622a <TIM_Base_SetConfig+0x52>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006220:	d003      	beq.n	800622a <TIM_Base_SetConfig+0x52>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a1e      	ldr	r2, [pc, #120]	@ (80062a0 <TIM_Base_SetConfig+0xc8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d108      	bne.n	800623c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a0e      	ldr	r2, [pc, #56]	@ (800629c <TIM_Base_SetConfig+0xc4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d103      	bne.n	8006270 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b01      	cmp	r3, #1
 8006280:	d105      	bne.n	800628e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f023 0201 	bic.w	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	611a      	str	r2, [r3, #16]
  }
}
 800628e:	bf00      	nop
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40000400 	.word	0x40000400

080062a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e042      	b.n	80063c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7fa fe6f 	bl	8001038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2224      	movs	r2, #36	@ 0x24
 800635e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0201 	bic.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fa44 	bl	8006808 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f8c3 	bl	800650c <UART_SetConfig>
 8006386:	4603      	mov	r3, r0
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e01b      	b.n	80063c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800639e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fac3 	bl	800694c <UART_CheckIdleState>
 80063c6:	4603      	mov	r3, r0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08a      	sub	sp, #40	@ 0x28
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	f040 808b 	bne.w	8006502 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_UART_Transmit+0x28>
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e083      	b.n	8006504 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006406:	2b80      	cmp	r3, #128	@ 0x80
 8006408:	d107      	bne.n	800641a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006418:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2221      	movs	r2, #33	@ 0x21
 8006426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800642a:	f7fb fad5 	bl	80019d8 <HAL_GetTick>
 800642e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	88fa      	ldrh	r2, [r7, #6]
 8006434:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	88fa      	ldrh	r2, [r7, #6]
 800643c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006448:	d108      	bne.n	800645c <HAL_UART_Transmit+0x8c>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d104      	bne.n	800645c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	e003      	b.n	8006464 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006460:	2300      	movs	r3, #0
 8006462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006464:	e030      	b.n	80064c8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2200      	movs	r2, #0
 800646e:	2180      	movs	r1, #128	@ 0x80
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 fb15 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2220      	movs	r2, #32
 8006480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e03d      	b.n	8006504 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10b      	bne.n	80064a6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800649c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	3302      	adds	r3, #2
 80064a2:	61bb      	str	r3, [r7, #24]
 80064a4:	e007      	b.n	80064b6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	781a      	ldrb	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	3301      	adds	r3, #1
 80064b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1c8      	bne.n	8006466 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2200      	movs	r2, #0
 80064dc:	2140      	movs	r1, #64	@ 0x40
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 fade 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e006      	b.n	8006504 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	e000      	b.n	8006504 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006502:	2302      	movs	r3, #2
  }
}
 8006504:	4618      	mov	r0, r3
 8006506:	3720      	adds	r7, #32
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800650c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006510:	b094      	sub	sp, #80	@ 0x50
 8006512:	af00      	add	r7, sp, #0
 8006514:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	431a      	orrs	r2, r3
 8006526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	431a      	orrs	r2, r3
 800652c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	4313      	orrs	r3, r2
 8006532:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	498a      	ldr	r1, [pc, #552]	@ (8006764 <UART_SetConfig+0x258>)
 800653c:	4019      	ands	r1, r3
 800653e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006544:	430b      	orrs	r3, r1
 8006546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006554:	68d9      	ldr	r1, [r3, #12]
 8006556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	ea40 0301 	orr.w	r3, r0, r1
 800655e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4b7f      	ldr	r3, [pc, #508]	@ (8006768 <UART_SetConfig+0x25c>)
 800656c:	429a      	cmp	r2, r3
 800656e:	d004      	beq.n	800657a <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006572:	6a1a      	ldr	r2, [r3, #32]
 8006574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006576:	4313      	orrs	r3, r2
 8006578:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800657a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006584:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800658e:	430b      	orrs	r3, r1
 8006590:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006598:	f023 000f 	bic.w	r0, r3, #15
 800659c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800659e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80065a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	ea40 0301 	orr.w	r3, r0, r1
 80065a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	4b6f      	ldr	r3, [pc, #444]	@ (800676c <UART_SetConfig+0x260>)
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d102      	bne.n	80065ba <UART_SetConfig+0xae>
 80065b4:	2301      	movs	r3, #1
 80065b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065b8:	e01a      	b.n	80065f0 <UART_SetConfig+0xe4>
 80065ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	4b6c      	ldr	r3, [pc, #432]	@ (8006770 <UART_SetConfig+0x264>)
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d102      	bne.n	80065ca <UART_SetConfig+0xbe>
 80065c4:	2302      	movs	r3, #2
 80065c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065c8:	e012      	b.n	80065f0 <UART_SetConfig+0xe4>
 80065ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	4b69      	ldr	r3, [pc, #420]	@ (8006774 <UART_SetConfig+0x268>)
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d102      	bne.n	80065da <UART_SetConfig+0xce>
 80065d4:	2304      	movs	r3, #4
 80065d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065d8:	e00a      	b.n	80065f0 <UART_SetConfig+0xe4>
 80065da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	4b62      	ldr	r3, [pc, #392]	@ (8006768 <UART_SetConfig+0x25c>)
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d103      	bne.n	80065ec <UART_SetConfig+0xe0>
 80065e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80065e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065ea:	e001      	b.n	80065f0 <UART_SetConfig+0xe4>
 80065ec:	2300      	movs	r3, #0
 80065ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006768 <UART_SetConfig+0x25c>)
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d171      	bne.n	80066de <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80065fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065fc:	2200      	movs	r2, #0
 80065fe:	623b      	str	r3, [r7, #32]
 8006600:	627a      	str	r2, [r7, #36]	@ 0x24
 8006602:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006606:	f7fd feb3 	bl	8004370 <HAL_RCCEx_GetPeriphCLKFreq>
 800660a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800660c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 80e2 	beq.w	80067d8 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006618:	4a57      	ldr	r2, [pc, #348]	@ (8006778 <UART_SetConfig+0x26c>)
 800661a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800661e:	461a      	mov	r2, r3
 8006620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006622:	fbb3 f3f2 	udiv	r3, r3, r2
 8006626:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	4613      	mov	r3, r2
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	4413      	add	r3, r2
 8006632:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006634:	429a      	cmp	r2, r3
 8006636:	d305      	bcc.n	8006644 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800663e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006640:	429a      	cmp	r2, r3
 8006642:	d903      	bls.n	800664c <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800664a:	e0c5      	b.n	80067d8 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800664c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800664e:	2200      	movs	r2, #0
 8006650:	61bb      	str	r3, [r7, #24]
 8006652:	61fa      	str	r2, [r7, #28]
 8006654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006658:	4a47      	ldr	r2, [pc, #284]	@ (8006778 <UART_SetConfig+0x26c>)
 800665a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800665e:	b29b      	uxth	r3, r3
 8006660:	2200      	movs	r2, #0
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	617a      	str	r2, [r7, #20]
 8006666:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800666a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800666e:	f7f9 fe17 	bl	80002a0 <__aeabi_uldivmod>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4610      	mov	r0, r2
 8006678:	4619      	mov	r1, r3
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	f04f 0300 	mov.w	r3, #0
 8006682:	020b      	lsls	r3, r1, #8
 8006684:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006688:	0202      	lsls	r2, r0, #8
 800668a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800668c:	6849      	ldr	r1, [r1, #4]
 800668e:	0849      	lsrs	r1, r1, #1
 8006690:	2000      	movs	r0, #0
 8006692:	460c      	mov	r4, r1
 8006694:	4605      	mov	r5, r0
 8006696:	eb12 0804 	adds.w	r8, r2, r4
 800669a:	eb43 0905 	adc.w	r9, r3, r5
 800669e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	60bb      	str	r3, [r7, #8]
 80066a6:	60fa      	str	r2, [r7, #12]
 80066a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066ac:	4640      	mov	r0, r8
 80066ae:	4649      	mov	r1, r9
 80066b0:	f7f9 fdf6 	bl	80002a0 <__aeabi_uldivmod>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4613      	mov	r3, r2
 80066ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066c2:	d308      	bcc.n	80066d6 <UART_SetConfig+0x1ca>
 80066c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066ca:	d204      	bcs.n	80066d6 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 80066cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80066d2:	60da      	str	r2, [r3, #12]
 80066d4:	e080      	b.n	80067d8 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80066dc:	e07c      	b.n	80067d8 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066e6:	d149      	bne.n	800677c <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80066e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066ea:	2200      	movs	r2, #0
 80066ec:	603b      	str	r3, [r7, #0]
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066f4:	f7fd fe3c 	bl	8004370 <HAL_RCCEx_GetPeriphCLKFreq>
 80066f8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d06b      	beq.n	80067d8 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006704:	4a1c      	ldr	r2, [pc, #112]	@ (8006778 <UART_SetConfig+0x26c>)
 8006706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800670a:	461a      	mov	r2, r3
 800670c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800670e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006712:	005a      	lsls	r2, r3, #1
 8006714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	085b      	lsrs	r3, r3, #1
 800671a:	441a      	add	r2, r3
 800671c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006728:	2b0f      	cmp	r3, #15
 800672a:	d916      	bls.n	800675a <UART_SetConfig+0x24e>
 800672c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800672e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006732:	d212      	bcs.n	800675a <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006736:	b29b      	uxth	r3, r3
 8006738:	f023 030f 	bic.w	r3, r3, #15
 800673c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800673e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006740:	085b      	lsrs	r3, r3, #1
 8006742:	b29b      	uxth	r3, r3
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	b29a      	uxth	r2, r3
 800674a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800674c:	4313      	orrs	r3, r2
 800674e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006756:	60da      	str	r2, [r3, #12]
 8006758:	e03e      	b.n	80067d8 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006760:	e03a      	b.n	80067d8 <UART_SetConfig+0x2cc>
 8006762:	bf00      	nop
 8006764:	cfff69f3 	.word	0xcfff69f3
 8006768:	44002400 	.word	0x44002400
 800676c:	40013800 	.word	0x40013800
 8006770:	40004400 	.word	0x40004400
 8006774:	40004800 	.word	0x40004800
 8006778:	0800d498 	.word	0x0800d498
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800677c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800677e:	2200      	movs	r2, #0
 8006780:	469a      	mov	sl, r3
 8006782:	4693      	mov	fp, r2
 8006784:	4650      	mov	r0, sl
 8006786:	4659      	mov	r1, fp
 8006788:	f7fd fdf2 	bl	8004370 <HAL_RCCEx_GetPeriphCLKFreq>
 800678c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800678e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d021      	beq.n	80067d8 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006798:	4a1a      	ldr	r2, [pc, #104]	@ (8006804 <UART_SetConfig+0x2f8>)
 800679a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800679e:	461a      	mov	r2, r3
 80067a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80067a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	441a      	add	r2, r3
 80067ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ba:	2b0f      	cmp	r3, #15
 80067bc:	d909      	bls.n	80067d2 <UART_SetConfig+0x2c6>
 80067be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067c4:	d205      	bcs.n	80067d2 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60da      	str	r2, [r3, #12]
 80067d0:	e002      	b.n	80067d8 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067da:	2201      	movs	r2, #1
 80067dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80067e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e2:	2201      	movs	r2, #1
 80067e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ea:	2200      	movs	r2, #0
 80067ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80067ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f0:	2200      	movs	r2, #0
 80067f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80067f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3750      	adds	r7, #80	@ 0x50
 80067fc:	46bd      	mov	sp, r7
 80067fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006802:	bf00      	nop
 8006804:	0800d498 	.word	0x0800d498

08006808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00a      	beq.n	8006876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689c:	f003 0310 	and.w	r3, r3, #16
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01a      	beq.n	800691e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006906:	d10a      	bne.n	800691e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	605a      	str	r2, [r3, #4]
  }
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b098      	sub	sp, #96	@ 0x60
 8006950:	af02      	add	r7, sp, #8
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800695c:	f7fb f83c 	bl	80019d8 <HAL_GetTick>
 8006960:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0308 	and.w	r3, r3, #8
 800696c:	2b08      	cmp	r3, #8
 800696e:	d12f      	bne.n	80069d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006970:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006978:	2200      	movs	r2, #0
 800697a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f88e 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d022      	beq.n	80069d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006992:	e853 3f00 	ldrex	r3, [r3]
 8006996:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800699a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800699e:	653b      	str	r3, [r7, #80]	@ 0x50
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80069aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e6      	bne.n	800698a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e063      	b.n	8006a98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0304 	and.w	r3, r3, #4
 80069da:	2b04      	cmp	r3, #4
 80069dc:	d149      	bne.n	8006a72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069e6:	2200      	movs	r2, #0
 80069e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f857 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d03c      	beq.n	8006a72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	623b      	str	r3, [r7, #32]
   return(result);
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a16:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e6      	bne.n	80069f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f023 0301 	bic.w	r3, r3, #1
 8006a40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a4a:	61fa      	str	r2, [r7, #28]
 8006a4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	69b9      	ldr	r1, [r7, #24]
 8006a50:	69fa      	ldr	r2, [r7, #28]
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	617b      	str	r3, [r7, #20]
   return(result);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e5      	bne.n	8006a2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e012      	b.n	8006a98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3758      	adds	r7, #88	@ 0x58
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab0:	e04f      	b.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab8:	d04b      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aba:	f7fa ff8d 	bl	80019d8 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d302      	bcc.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e04e      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d037      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b80      	cmp	r3, #128	@ 0x80
 8006ae6:	d034      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b40      	cmp	r3, #64	@ 0x40
 8006aec:	d031      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d110      	bne.n	8006b1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2208      	movs	r2, #8
 8006b02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 f838 	bl	8006b7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2208      	movs	r2, #8
 8006b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e029      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b2c:	d111      	bne.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f81e 	bl	8006b7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e00f      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	bf0c      	ite	eq
 8006b62:	2301      	moveq	r3, #1
 8006b64:	2300      	movne	r3, #0
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d0a0      	beq.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b095      	sub	sp, #84	@ 0x54
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ba0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ba2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ba6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e6      	bne.n	8006b82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3308      	adds	r3, #8
 8006bba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bca:	f023 0301 	bic.w	r3, r3, #1
 8006bce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3308      	adds	r3, #8
 8006bd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e3      	bne.n	8006bb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d118      	bne.n	8006c26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f023 0310 	bic.w	r3, r3, #16
 8006c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6979      	ldr	r1, [r7, #20]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e6      	bne.n	8006bf4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c3a:	bf00      	nop
 8006c3c:	3754      	adds	r7, #84	@ 0x54
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b085      	sub	sp, #20
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_UARTEx_DisableFifoMode+0x16>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e027      	b.n	8006cac <HAL_UARTEx_DisableFifoMode+0x66>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2224      	movs	r2, #36	@ 0x24
 8006c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0201 	bic.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e02d      	b.n	8006d2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2224      	movs	r2, #36	@ 0x24
 8006cdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0201 	bic.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f84f 	bl	8006db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e02d      	b.n	8006da8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2224      	movs	r2, #36	@ 0x24
 8006d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0201 	bic.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f811 	bl	8006db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d108      	bne.n	8006dd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006dd0:	e031      	b.n	8006e36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dd2:	2308      	movs	r3, #8
 8006dd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dd6:	2308      	movs	r3, #8
 8006dd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	0e5b      	lsrs	r3, r3, #25
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	0f5b      	lsrs	r3, r3, #29
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	f003 0307 	and.w	r3, r3, #7
 8006df8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	7b3a      	ldrb	r2, [r7, #12]
 8006dfe:	4911      	ldr	r1, [pc, #68]	@ (8006e44 <UARTEx_SetNbDataToProcess+0x94>)
 8006e00:	5c8a      	ldrb	r2, [r1, r2]
 8006e02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e06:	7b3a      	ldrb	r2, [r7, #12]
 8006e08:	490f      	ldr	r1, [pc, #60]	@ (8006e48 <UARTEx_SetNbDataToProcess+0x98>)
 8006e0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	7b7a      	ldrb	r2, [r7, #13]
 8006e1c:	4909      	ldr	r1, [pc, #36]	@ (8006e44 <UARTEx_SetNbDataToProcess+0x94>)
 8006e1e:	5c8a      	ldrb	r2, [r1, r2]
 8006e20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e24:	7b7a      	ldrb	r2, [r7, #13]
 8006e26:	4908      	ldr	r1, [pc, #32]	@ (8006e48 <UARTEx_SetNbDataToProcess+0x98>)
 8006e28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e36:	bf00      	nop
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	0800d4b0 	.word	0x0800d4b0
 8006e48:	0800d4b8 	.word	0x0800d4b8

08006e4c <__NVIC_SetPriority>:
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	6039      	str	r1, [r7, #0]
 8006e56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	db0a      	blt.n	8006e76 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	490c      	ldr	r1, [pc, #48]	@ (8006e98 <__NVIC_SetPriority+0x4c>)
 8006e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e6a:	0112      	lsls	r2, r2, #4
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	440b      	add	r3, r1
 8006e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006e74:	e00a      	b.n	8006e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	4908      	ldr	r1, [pc, #32]	@ (8006e9c <__NVIC_SetPriority+0x50>)
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	3b04      	subs	r3, #4
 8006e84:	0112      	lsls	r2, r2, #4
 8006e86:	b2d2      	uxtb	r2, r2
 8006e88:	440b      	add	r3, r1
 8006e8a:	761a      	strb	r2, [r3, #24]
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	e000e100 	.word	0xe000e100
 8006e9c:	e000ed00 	.word	0xe000ed00

08006ea0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8006ea4:	4b05      	ldr	r3, [pc, #20]	@ (8006ebc <SysTick_Handler+0x1c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006ea8:	f001 fba6 	bl	80085f8 <xTaskGetSchedulerState>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d001      	beq.n	8006eb6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006eb2:	f001 ff51 	bl	8008d58 <xPortSysTickHandler>
  }
}
 8006eb6:	bf00      	nop
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	e000e010 	.word	0xe000e010

08006ec0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	f06f 0004 	mvn.w	r0, #4
 8006eca:	f7ff ffbf 	bl	8006e4c <__NVIC_SetPriority>
#endif
}
 8006ece:	bf00      	nop
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b086      	sub	sp, #24
 8006ed6:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006edc:	f3ef 8305 	mrs	r3, IPSR
 8006ee0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ee2:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	617b      	str	r3, [r7, #20]
 8006eec:	e013      	b.n	8006f16 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8006eee:	f001 fb83 	bl	80085f8 <xTaskGetSchedulerState>
 8006ef2:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d00d      	beq.n	8006f16 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006efa:	f3ef 8310 	mrs	r3, PRIMASK
 8006efe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f00:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d105      	bne.n	8006f12 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f06:	f3ef 8311 	mrs	r3, BASEPRI
 8006f0a:	607b      	str	r3, [r7, #4]
  return(result);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8006f12:	2301      	movs	r3, #1
 8006f14:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8006f16:	697b      	ldr	r3, [r7, #20]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8006f26:	f7ff ffd4 	bl	8006ed2 <IRQ_Context>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8006f30:	f06f 0305 	mvn.w	r3, #5
 8006f34:	607b      	str	r3, [r7, #4]
 8006f36:	e012      	b.n	8006f5e <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8006f38:	f001 fb5e 	bl	80085f8 <xTaskGetSchedulerState>
 8006f3c:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d109      	bne.n	8006f58 <osKernelInitialize+0x38>
 8006f44:	4b08      	ldr	r3, [pc, #32]	@ (8006f68 <osKernelInitialize+0x48>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d105      	bne.n	8006f58 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f4c:	4b06      	ldr	r3, [pc, #24]	@ (8006f68 <osKernelInitialize+0x48>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	607b      	str	r3, [r7, #4]
 8006f56:	e002      	b.n	8006f5e <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8006f58:	f04f 33ff 	mov.w	r3, #4294967295
 8006f5c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8006f5e:	687b      	ldr	r3, [r7, #4]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20000368 	.word	0x20000368

08006f6c <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8006f72:	f7ff ffae 	bl	8006ed2 <IRQ_Context>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <osKernelStart+0x18>
    stat = osErrorISR;
 8006f7c:	f06f 0305 	mvn.w	r3, #5
 8006f80:	607b      	str	r3, [r7, #4]
 8006f82:	e016      	b.n	8006fb2 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8006f84:	f001 fb38 	bl	80085f8 <xTaskGetSchedulerState>
 8006f88:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d10d      	bne.n	8006fac <osKernelStart+0x40>
 8006f90:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <osKernelStart+0x50>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d109      	bne.n	8006fac <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006f98:	f7ff ff92 	bl	8006ec0 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8006f9c:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <osKernelStart+0x50>)
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006fa2:	f000 fdf7 	bl	8007b94 <vTaskStartScheduler>
      stat = osOK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	607b      	str	r3, [r7, #4]
 8006faa:	e002      	b.n	8006fb2 <osKernelStart+0x46>
    } else {
      stat = osError;
 8006fac:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb0:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8006fb2:	687b      	ldr	r3, [r7, #4]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	20000368 	.word	0x20000368

08006fc0 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08e      	sub	sp, #56	@ 0x38
 8006fc4:	af04      	add	r7, sp, #16
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8006fd0:	f7ff ff7f 	bl	8006ed2 <IRQ_Context>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d17e      	bne.n	80070d8 <osThreadNew+0x118>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d07b      	beq.n	80070d8 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8006fe0:	2380      	movs	r3, #128	@ 0x80
 8006fe2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006fe4:	2318      	movs	r3, #24
 8006fe6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006fec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d045      	beq.n	8007084 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <osThreadNew+0x46>
        name = attr->name;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d008      	beq.n	800702c <osThreadNew+0x6c>
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	2b38      	cmp	r3, #56	@ 0x38
 800701e:	d805      	bhi.n	800702c <osThreadNew+0x6c>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800702c:	2300      	movs	r3, #0
 800702e:	e054      	b.n	80070da <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	089b      	lsrs	r3, r3, #2
 800703e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00e      	beq.n	8007066 <osThreadNew+0xa6>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	2b5b      	cmp	r3, #91	@ 0x5b
 800704e:	d90a      	bls.n	8007066 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007054:	2b00      	cmp	r3, #0
 8007056:	d006      	beq.n	8007066 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8007060:	2301      	movs	r3, #1
 8007062:	61bb      	str	r3, [r7, #24]
 8007064:	e010      	b.n	8007088 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10c      	bne.n	8007088 <osThreadNew+0xc8>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d108      	bne.n	8007088 <osThreadNew+0xc8>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d104      	bne.n	8007088 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	e001      	b.n	8007088 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d110      	bne.n	80070b0 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007096:	9202      	str	r2, [sp, #8]
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6a3a      	ldr	r2, [r7, #32]
 80070a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 fba5 	bl	80077f4 <xTaskCreateStatic>
 80070aa:	4603      	mov	r3, r0
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	e013      	b.n	80070d8 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d110      	bne.n	80070d8 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	f107 0314 	add.w	r3, r7, #20
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fbe0 	bl	800788e <xTaskCreate>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d001      	beq.n	80070d8 <osThreadNew+0x118>
            hTask = NULL;
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 80070d8:	697b      	ldr	r3, [r7, #20]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3728      	adds	r7, #40	@ 0x28
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 80070ea:	f7ff fef2 	bl	8006ed2 <IRQ_Context>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <osDelay+0x1a>
    stat = osErrorISR;
 80070f4:	f06f 0305 	mvn.w	r3, #5
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	e007      	b.n	800710c <osDelay+0x2a>
  }
  else {
    stat = osOK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <osDelay+0x2a>
      vTaskDelay(ticks);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fd1e 	bl	8007b48 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800710c:	68fb      	ldr	r3, [r7, #12]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4a07      	ldr	r2, [pc, #28]	@ (8007144 <vApplicationGetIdleTaskMemory+0x2c>)
 8007128:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	4a06      	ldr	r2, [pc, #24]	@ (8007148 <vApplicationGetIdleTaskMemory+0x30>)
 800712e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2280      	movs	r2, #128	@ 0x80
 8007134:	601a      	str	r2, [r3, #0]
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	2000036c 	.word	0x2000036c
 8007148:	200003c8 	.word	0x200003c8

0800714c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4a07      	ldr	r2, [pc, #28]	@ (8007178 <vApplicationGetTimerTaskMemory+0x2c>)
 800715c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	4a06      	ldr	r2, [pc, #24]	@ (800717c <vApplicationGetTimerTaskMemory+0x30>)
 8007162:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2280      	movs	r2, #128	@ 0x80
 8007168:	601a      	str	r2, [r3, #0]
}
 800716a:	bf00      	nop
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	200005c8 	.word	0x200005c8
 800717c:	20000624 	.word	0x20000624

08007180 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f103 0208 	add.w	r2, r3, #8
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f04f 32ff 	mov.w	r2, #4294967295
 8007198:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f103 0208 	add.w	r2, r3, #8
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f103 0208 	add.w	r2, r3, #8
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f0:	d103      	bne.n	80071fa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	e00c      	b.n	8007214 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3308      	adds	r3, #8
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	e002      	b.n	8007208 <vListInsert+0x2e>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	429a      	cmp	r2, r3
 8007212:	d2f6      	bcs.n	8007202 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	601a      	str	r2, [r3, #0]
}
 8007240:	bf00      	nop
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6892      	ldr	r2, [r2, #8]
 8007262:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6852      	ldr	r2, [r2, #4]
 800726c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	429a      	cmp	r2, r3
 8007276:	d103      	bne.n	8007280 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	1e5a      	subs	r2, r3, #1
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80072aa:	2301      	movs	r3, #1
 80072ac:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d103      	bne.n	80072c0 <xQueueGenericReset+0x20>
 80072b8:	f001 febe 	bl	8009038 <ulSetInterruptMask>
 80072bc:	bf00      	nop
 80072be:	e7fd      	b.n	80072bc <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d057      	beq.n	8007376 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d053      	beq.n	8007376 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d6:	2100      	movs	r1, #0
 80072d8:	fba3 2302 	umull	r2, r3, r3, r2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d000      	beq.n	80072e2 <xQueueGenericReset+0x42>
 80072e0:	2101      	movs	r1, #1
 80072e2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d146      	bne.n	8007376 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 80072e8:	f001 fd0a 	bl	8008d00 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072f8:	fb01 f303 	mul.w	r3, r1, r3
 80072fc:	441a      	add	r2, r3
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2200      	movs	r2, #0
 8007306:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007318:	3b01      	subs	r3, #1
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800731e:	fb01 f303 	mul.w	r3, r1, r3
 8007322:	441a      	add	r2, r3
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	22ff      	movs	r2, #255	@ 0xff
 800732c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	22ff      	movs	r2, #255	@ 0xff
 8007334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10e      	bne.n	800735c <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d014      	beq.n	8007370 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	3310      	adds	r3, #16
 800734a:	4618      	mov	r0, r3
 800734c:	f000 ff4a 	bl	80081e4 <xTaskRemoveFromEventList>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00c      	beq.n	8007370 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007356:	f001 fcc1 	bl	8008cdc <vPortYield>
 800735a:	e009      	b.n	8007370 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	3310      	adds	r3, #16
 8007360:	4618      	mov	r0, r3
 8007362:	f7ff ff0d 	bl	8007180 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	3324      	adds	r3, #36	@ 0x24
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff ff08 	bl	8007180 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8007370:	f001 fcd8 	bl	8008d24 <vPortExitCritical>
 8007374:	e001      	b.n	800737a <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d103      	bne.n	8007388 <xQueueGenericReset+0xe8>
 8007380:	f001 fe5a 	bl	8009038 <ulSetInterruptMask>
 8007384:	bf00      	nop
 8007386:	e7fd      	b.n	8007384 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8007388:	68fb      	ldr	r3, [r7, #12]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8007392:	b580      	push	{r7, lr}
 8007394:	b088      	sub	sp, #32
 8007396:	af02      	add	r7, sp, #8
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	607a      	str	r2, [r7, #4]
 800739e:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d103      	bne.n	80073b2 <xQueueGenericCreateStatic+0x20>
 80073aa:	f001 fe45 	bl	8009038 <ulSetInterruptMask>
 80073ae:	bf00      	nop
 80073b0:	e7fd      	b.n	80073ae <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d029      	beq.n	800740c <xQueueGenericCreateStatic+0x7a>
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d026      	beq.n	800740c <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d020      	beq.n	800740c <xQueueGenericCreateStatic+0x7a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d102      	bne.n	80073d6 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d11a      	bne.n	800740c <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80073d6:	2350      	movs	r3, #80	@ 0x50
 80073d8:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	2b50      	cmp	r3, #80	@ 0x50
 80073de:	d003      	beq.n	80073e8 <xQueueGenericCreateStatic+0x56>
 80073e0:	f001 fe2a 	bl	8009038 <ulSetInterruptMask>
 80073e4:	bf00      	nop
 80073e6:	e7fd      	b.n	80073e4 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 80073e8:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	4613      	mov	r3, r2
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f80d 	bl	8007424 <prvInitialiseNewQueue>
 800740a:	e006      	b.n	800741a <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d103      	bne.n	800741a <xQueueGenericCreateStatic+0x88>
 8007412:	f001 fe11 	bl	8009038 <ulSetInterruptMask>
 8007416:	bf00      	nop
 8007418:	e7fd      	b.n	8007416 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800741a:	697b      	ldr	r3, [r7, #20]
    }
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d103      	bne.n	8007440 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e002      	b.n	8007446 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007452:	2101      	movs	r1, #1
 8007454:	69b8      	ldr	r0, [r7, #24]
 8007456:	f7ff ff23 	bl	80072a0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	78fa      	ldrb	r2, [r7, #3]
 800745e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8007462:	bf00      	nop
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b08a      	sub	sp, #40	@ 0x28
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8007476:	2300      	movs	r3, #0
 8007478:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d103      	bne.n	800748c <xQueueReceive+0x22>
 8007484:	f001 fdd8 	bl	8009038 <ulSetInterruptMask>
 8007488:	bf00      	nop
 800748a:	e7fd      	b.n	8007488 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d103      	bne.n	800749a <xQueueReceive+0x30>
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <xQueueReceive+0x34>
 800749a:	2301      	movs	r3, #1
 800749c:	e000      	b.n	80074a0 <xQueueReceive+0x36>
 800749e:	2300      	movs	r3, #0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d103      	bne.n	80074ac <xQueueReceive+0x42>
 80074a4:	f001 fdc8 	bl	8009038 <ulSetInterruptMask>
 80074a8:	bf00      	nop
 80074aa:	e7fd      	b.n	80074a8 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074ac:	f001 f8a4 	bl	80085f8 <xTaskGetSchedulerState>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d102      	bne.n	80074bc <xQueueReceive+0x52>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <xQueueReceive+0x56>
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <xQueueReceive+0x58>
 80074c0:	2300      	movs	r3, #0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d103      	bne.n	80074ce <xQueueReceive+0x64>
 80074c6:	f001 fdb7 	bl	8009038 <ulSetInterruptMask>
 80074ca:	bf00      	nop
 80074cc:	e7fd      	b.n	80074ca <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80074ce:	f001 fc17 	bl	8008d00 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d6:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d019      	beq.n	8007512 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074de:	68b9      	ldr	r1, [r7, #8]
 80074e0:	6a38      	ldr	r0, [r7, #32]
 80074e2:	f000 f87e 	bl	80075e2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	1e5a      	subs	r2, r3, #1
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	3310      	adds	r3, #16
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fe72 	bl	80081e4 <xTaskRemoveFromEventList>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007506:	f001 fbe9 	bl	8008cdc <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800750a:	f001 fc0b 	bl	8008d24 <vPortExitCritical>
                return pdPASS;
 800750e:	2301      	movs	r3, #1
 8007510:	e063      	b.n	80075da <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d103      	bne.n	8007520 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007518:	f001 fc04 	bl	8008d24 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800751c:	2300      	movs	r3, #0
 800751e:	e05c      	b.n	80075da <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007522:	2b00      	cmp	r3, #0
 8007524:	d106      	bne.n	8007534 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007526:	f107 0314 	add.w	r3, r7, #20
 800752a:	4618      	mov	r0, r3
 800752c:	f000 ff28 	bl	8008380 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007530:	2301      	movs	r3, #1
 8007532:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007534:	f001 fbf6 	bl	8008d24 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007538:	f000 fb88 	bl	8007c4c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800753c:	f001 fbe0 	bl	8008d00 <vPortEnterCritical>
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007546:	b25b      	sxtb	r3, r3
 8007548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754c:	d103      	bne.n	8007556 <xQueueReceive+0xec>
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800755c:	b25b      	sxtb	r3, r3
 800755e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007562:	d103      	bne.n	800756c <xQueueReceive+0x102>
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800756c:	f001 fbda 	bl	8008d24 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007570:	1d3a      	adds	r2, r7, #4
 8007572:	f107 0314 	add.w	r3, r7, #20
 8007576:	4611      	mov	r1, r2
 8007578:	4618      	mov	r0, r3
 800757a:	f000 ff17 	bl	80083ac <xTaskCheckForTimeOut>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d11d      	bne.n	80075c0 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007584:	6a38      	ldr	r0, [r7, #32]
 8007586:	f000 f8a4 	bl	80076d2 <prvIsQueueEmpty>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d011      	beq.n	80075b4 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	3324      	adds	r3, #36	@ 0x24
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	4611      	mov	r1, r2
 8007598:	4618      	mov	r0, r3
 800759a:	f000 fdc7 	bl	800812c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800759e:	6a38      	ldr	r0, [r7, #32]
 80075a0:	f000 f845 	bl	800762e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80075a4:	f000 fb60 	bl	8007c68 <xTaskResumeAll>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d18f      	bne.n	80074ce <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 80075ae:	f001 fb95 	bl	8008cdc <vPortYield>
 80075b2:	e78c      	b.n	80074ce <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80075b4:	6a38      	ldr	r0, [r7, #32]
 80075b6:	f000 f83a 	bl	800762e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80075ba:	f000 fb55 	bl	8007c68 <xTaskResumeAll>
 80075be:	e786      	b.n	80074ce <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80075c0:	6a38      	ldr	r0, [r7, #32]
 80075c2:	f000 f834 	bl	800762e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80075c6:	f000 fb4f 	bl	8007c68 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075ca:	6a38      	ldr	r0, [r7, #32]
 80075cc:	f000 f881 	bl	80076d2 <prvIsQueueEmpty>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f43f af7b 	beq.w	80074ce <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80075d8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3728      	adds	r7, #40	@ 0x28
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b082      	sub	sp, #8
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d018      	beq.n	8007626 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68da      	ldr	r2, [r3, #12]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075fc:	441a      	add	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	429a      	cmp	r2, r3
 800760c:	d303      	bcc.n	8007616 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68d9      	ldr	r1, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761e:	461a      	mov	r2, r3
 8007620:	6838      	ldr	r0, [r7, #0]
 8007622:	f005 f978 	bl	800c916 <memcpy>
    }
}
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8007636:	f001 fb63 	bl	8008d00 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007640:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007642:	e011      	b.n	8007668 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007648:	2b00      	cmp	r3, #0
 800764a:	d012      	beq.n	8007672 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3324      	adds	r3, #36	@ 0x24
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fdc7 	bl	80081e4 <xTaskRemoveFromEventList>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800765c:	f000 fefe 	bl	800845c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	3b01      	subs	r3, #1
 8007664:	b2db      	uxtb	r3, r3
 8007666:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800766c:	2b00      	cmp	r3, #0
 800766e:	dce9      	bgt.n	8007644 <prvUnlockQueue+0x16>
 8007670:	e000      	b.n	8007674 <prvUnlockQueue+0x46>
                    break;
 8007672:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	22ff      	movs	r2, #255	@ 0xff
 8007678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800767c:	f001 fb52 	bl	8008d24 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8007680:	f001 fb3e 	bl	8008d00 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800768a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800768c:	e011      	b.n	80076b2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d012      	beq.n	80076bc <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3310      	adds	r3, #16
 800769a:	4618      	mov	r0, r3
 800769c:	f000 fda2 	bl	80081e4 <xTaskRemoveFromEventList>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80076a6:	f000 fed9 	bl	800845c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80076b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	dce9      	bgt.n	800768e <prvUnlockQueue+0x60>
 80076ba:	e000      	b.n	80076be <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80076bc:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	22ff      	movs	r2, #255	@ 0xff
 80076c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80076c6:	f001 fb2d 	bl	8008d24 <vPortExitCritical>
}
 80076ca:	bf00      	nop
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80076da:	f001 fb11 	bl	8008d00 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d102      	bne.n	80076ec <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80076e6:	2301      	movs	r3, #1
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	e001      	b.n	80076f0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80076f0:	f001 fb18 	bl	8008d24 <vPortExitCritical>

    return xReturn;
 80076f4:	68fb      	ldr	r3, [r7, #12]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800770a:	2300      	movs	r3, #0
 800770c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d103      	bne.n	800771c <vQueueAddToRegistry+0x1c>
 8007714:	f001 fc90 	bl	8009038 <ulSetInterruptMask>
 8007718:	bf00      	nop
 800771a:	e7fd      	b.n	8007718 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d024      	beq.n	800776c <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007722:	2300      	movs	r3, #0
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	e01e      	b.n	8007766 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8007728:	4a17      	ldr	r2, [pc, #92]	@ (8007788 <vQueueAddToRegistry+0x88>)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	00db      	lsls	r3, r3, #3
 800772e:	4413      	add	r3, r2
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	429a      	cmp	r2, r3
 8007736:	d105      	bne.n	8007744 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	4a12      	ldr	r2, [pc, #72]	@ (8007788 <vQueueAddToRegistry+0x88>)
 800773e:	4413      	add	r3, r2
 8007740:	60bb      	str	r3, [r7, #8]
                    break;
 8007742:	e013      	b.n	800776c <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <vQueueAddToRegistry+0x60>
 800774a:	4a0f      	ldr	r2, [pc, #60]	@ (8007788 <vQueueAddToRegistry+0x88>)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	4a0b      	ldr	r2, [pc, #44]	@ (8007788 <vQueueAddToRegistry+0x88>)
 800775c:	4413      	add	r3, r2
 800775e:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3301      	adds	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b07      	cmp	r3, #7
 800776a:	d9dd      	bls.n	8007728 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d005      	beq.n	800777e <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800777e:	bf00      	nop
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000824 	.word	0x20000824

0800778c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800779c:	f001 fab0 	bl	8008d00 <vPortEnterCritical>
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077a6:	b25b      	sxtb	r3, r3
 80077a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ac:	d103      	bne.n	80077b6 <vQueueWaitForMessageRestricted+0x2a>
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077bc:	b25b      	sxtb	r3, r3
 80077be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c2:	d103      	bne.n	80077cc <vQueueWaitForMessageRestricted+0x40>
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077cc:	f001 faaa 	bl	8008d24 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d106      	bne.n	80077e6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	3324      	adds	r3, #36	@ 0x24
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	68b9      	ldr	r1, [r7, #8]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 fcc1 	bl	8008168 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80077e6:	6978      	ldr	r0, [r7, #20]
 80077e8:	f7ff ff21 	bl	800762e <prvUnlockQueue>
    }
 80077ec:	bf00      	nop
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08c      	sub	sp, #48	@ 0x30
 80077f8:	af04      	add	r7, sp, #16
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8007802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <xTaskCreateStatic+0x1c>
 8007808:	f001 fc16 	bl	8009038 <ulSetInterruptMask>
 800780c:	bf00      	nop
 800780e:	e7fd      	b.n	800780c <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8007810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007812:	2b00      	cmp	r3, #0
 8007814:	d103      	bne.n	800781e <xTaskCreateStatic+0x2a>
 8007816:	f001 fc0f 	bl	8009038 <ulSetInterruptMask>
 800781a:	bf00      	nop
 800781c:	e7fd      	b.n	800781a <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800781e:	235c      	movs	r3, #92	@ 0x5c
 8007820:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2b5c      	cmp	r3, #92	@ 0x5c
 8007826:	d003      	beq.n	8007830 <xTaskCreateStatic+0x3c>
 8007828:	f001 fc06 	bl	8009038 <ulSetInterruptMask>
 800782c:	bf00      	nop
 800782e:	e7fd      	b.n	800782c <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007830:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	2b00      	cmp	r3, #0
 8007836:	d023      	beq.n	8007880 <xTaskCreateStatic+0x8c>
 8007838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d020      	beq.n	8007880 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800783e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007840:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8007842:	225c      	movs	r2, #92	@ 0x5c
 8007844:	2100      	movs	r1, #0
 8007846:	69f8      	ldr	r0, [r7, #28]
 8007848:	f004 ffda 	bl	800c800 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007850:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	2202      	movs	r2, #2
 8007856:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800785a:	2300      	movs	r3, #0
 800785c:	9303      	str	r3, [sp, #12]
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	9302      	str	r3, [sp, #8]
 8007862:	f107 0318 	add.w	r3, r7, #24
 8007866:	9301      	str	r3, [sp, #4]
 8007868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	68b9      	ldr	r1, [r7, #8]
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 f855 	bl	8007922 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007878:	69f8      	ldr	r0, [r7, #28]
 800787a:	f000 f8d5 	bl	8007a28 <prvAddNewTaskToReadyList>
 800787e:	e001      	b.n	8007884 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 8007880:	2300      	movs	r3, #0
 8007882:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007884:	69bb      	ldr	r3, [r7, #24]
    }
 8007886:	4618      	mov	r0, r3
 8007888:	3720      	adds	r7, #32
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800788e:	b580      	push	{r7, lr}
 8007890:	b08c      	sub	sp, #48	@ 0x30
 8007892:	af04      	add	r7, sp, #16
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	603b      	str	r3, [r7, #0]
 800789a:	4613      	mov	r3, r2
 800789c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 fc28 	bl	80090f8 <pvPortMalloc>
 80078a8:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d013      	beq.n	80078d8 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078b0:	205c      	movs	r0, #92	@ 0x5c
 80078b2:	f001 fc21 	bl	80090f8 <pvPortMalloc>
 80078b6:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d008      	beq.n	80078d0 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80078be:	225c      	movs	r2, #92	@ 0x5c
 80078c0:	2100      	movs	r1, #0
 80078c2:	69f8      	ldr	r0, [r7, #28]
 80078c4:	f004 ff9c 	bl	800c800 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80078ce:	e005      	b.n	80078dc <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80078d0:	6978      	ldr	r0, [r7, #20]
 80078d2:	f001 fccd 	bl	8009270 <vPortFree>
 80078d6:	e001      	b.n	80078dc <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80078d8:	2300      	movs	r3, #0
 80078da:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d017      	beq.n	8007912 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078ea:	88fa      	ldrh	r2, [r7, #6]
 80078ec:	2300      	movs	r3, #0
 80078ee:	9303      	str	r3, [sp, #12]
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	9302      	str	r3, [sp, #8]
 80078f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	68b9      	ldr	r1, [r7, #8]
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f80e 	bl	8007922 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007906:	69f8      	ldr	r0, [r7, #28]
 8007908:	f000 f88e 	bl	8007a28 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800790c:	2301      	movs	r3, #1
 800790e:	61bb      	str	r3, [r7, #24]
 8007910:	e002      	b.n	8007918 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007912:	f04f 33ff 	mov.w	r3, #4294967295
 8007916:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007918:	69bb      	ldr	r3, [r7, #24]
    }
 800791a:	4618      	mov	r0, r3
 800791c:	3720      	adds	r7, #32
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b086      	sub	sp, #24
 8007926:	af00      	add	r7, sp, #0
 8007928:	60f8      	str	r0, [r7, #12]
 800792a:	60b9      	str	r1, [r7, #8]
 800792c:	607a      	str	r2, [r7, #4]
 800792e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007932:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	461a      	mov	r2, r3
 800793a:	21a5      	movs	r1, #165	@ 0xa5
 800793c:	f004 ff60 	bl	800c800 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007942:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800794a:	3b01      	subs	r3, #1
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f023 0307 	bic.w	r3, r3, #7
 8007958:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f003 0307 	and.w	r3, r3, #7
 8007960:	2b00      	cmp	r3, #0
 8007962:	d003      	beq.n	800796c <prvInitialiseNewTask+0x4a>
 8007964:	f001 fb68 	bl	8009038 <ulSetInterruptMask>
 8007968:	bf00      	nop
 800796a:	e7fd      	b.n	8007968 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01e      	beq.n	80079b0 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007972:	2300      	movs	r3, #0
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	e012      	b.n	800799e <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	4413      	add	r3, r2
 800797e:	7819      	ldrb	r1, [r3, #0]
 8007980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	4413      	add	r3, r2
 8007986:	3334      	adds	r3, #52	@ 0x34
 8007988:	460a      	mov	r2, r1
 800798a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	4413      	add	r3, r2
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d006      	beq.n	80079a6 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	3301      	adds	r3, #1
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b0f      	cmp	r3, #15
 80079a2:	d9e9      	bls.n	8007978 <prvInitialiseNewTask+0x56>
 80079a4:	e000      	b.n	80079a8 <prvInitialiseNewTask+0x86>
            {
                break;
 80079a6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	2b37      	cmp	r3, #55	@ 0x37
 80079b4:	d903      	bls.n	80079be <prvInitialiseNewTask+0x9c>
 80079b6:	f001 fb3f 	bl	8009038 <ulSetInterruptMask>
 80079ba:	bf00      	nop
 80079bc:	e7fd      	b.n	80079ba <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	2b37      	cmp	r3, #55	@ 0x37
 80079c2:	d901      	bls.n	80079c8 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079c4:	2337      	movs	r3, #55	@ 0x37
 80079c6:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	6a3a      	ldr	r2, [r7, #32]
 80079cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80079ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d0:	6a3a      	ldr	r2, [r7, #32]
 80079d2:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d6:	3304      	adds	r3, #4
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff fbf1 	bl	80071c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e0:	3318      	adds	r3, #24
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff fbec 	bl	80071c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079ec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80079f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079fc:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 80079fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a00:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	6938      	ldr	r0, [r7, #16]
 8007a08:	f001 f9d8 	bl	8008dbc <pxPortInitialiseStack>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a10:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a1c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007a1e:	bf00      	nop
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
	...

08007a28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007a30:	f001 f966 	bl	8008d00 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007a34:	4b3e      	ldr	r3, [pc, #248]	@ (8007b30 <prvAddNewTaskToReadyList+0x108>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8007b30 <prvAddNewTaskToReadyList+0x108>)
 8007a3c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8007b34 <prvAddNewTaskToReadyList+0x10c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d109      	bne.n	8007a5a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8007a46:	4a3b      	ldr	r2, [pc, #236]	@ (8007b34 <prvAddNewTaskToReadyList+0x10c>)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a4c:	4b38      	ldr	r3, [pc, #224]	@ (8007b30 <prvAddNewTaskToReadyList+0x108>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d110      	bne.n	8007a76 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007a54:	f000 fd1e 	bl	8008494 <prvInitialiseTaskLists>
 8007a58:	e00d      	b.n	8007a76 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8007a5a:	4b37      	ldr	r3, [pc, #220]	@ (8007b38 <prvAddNewTaskToReadyList+0x110>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d109      	bne.n	8007a76 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a62:	4b34      	ldr	r3, [pc, #208]	@ (8007b34 <prvAddNewTaskToReadyList+0x10c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d802      	bhi.n	8007a76 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007a70:	4a30      	ldr	r2, [pc, #192]	@ (8007b34 <prvAddNewTaskToReadyList+0x10c>)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8007a76:	4b31      	ldr	r3, [pc, #196]	@ (8007b3c <prvAddNewTaskToReadyList+0x114>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	4a2f      	ldr	r2, [pc, #188]	@ (8007b3c <prvAddNewTaskToReadyList+0x114>)
 8007a7e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007a80:	4b2e      	ldr	r3, [pc, #184]	@ (8007b3c <prvAddNewTaskToReadyList+0x114>)
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8007b40 <prvAddNewTaskToReadyList+0x118>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d903      	bls.n	8007a9c <prvAddNewTaskToReadyList+0x74>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a98:	4a29      	ldr	r2, [pc, #164]	@ (8007b40 <prvAddNewTaskToReadyList+0x118>)
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa0:	4928      	ldr	r1, [pc, #160]	@ (8007b44 <prvAddNewTaskToReadyList+0x11c>)
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	3304      	adds	r3, #4
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	609a      	str	r2, [r3, #8]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	60da      	str	r2, [r3, #12]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	3204      	adds	r2, #4
 8007ac8:	605a      	str	r2, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	1d1a      	adds	r2, r3, #4
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	609a      	str	r2, [r3, #8]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4a19      	ldr	r2, [pc, #100]	@ (8007b44 <prvAddNewTaskToReadyList+0x11c>)
 8007ae0:	441a      	add	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	615a      	str	r2, [r3, #20]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aea:	4916      	ldr	r1, [pc, #88]	@ (8007b44 <prvAddNewTaskToReadyList+0x11c>)
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	440b      	add	r3, r1
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	1c59      	adds	r1, r3, #1
 8007afa:	4812      	ldr	r0, [pc, #72]	@ (8007b44 <prvAddNewTaskToReadyList+0x11c>)
 8007afc:	4613      	mov	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4403      	add	r3, r0
 8007b06:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8007b08:	f001 f90c 	bl	8008d24 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b38 <prvAddNewTaskToReadyList+0x110>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d008      	beq.n	8007b26 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b14:	4b07      	ldr	r3, [pc, #28]	@ (8007b34 <prvAddNewTaskToReadyList+0x10c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d201      	bcs.n	8007b26 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007b22:	f001 f8db 	bl	8008cdc <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007b26:	bf00      	nop
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000d38 	.word	0x20000d38
 8007b34:	20000864 	.word	0x20000864
 8007b38:	20000d44 	.word	0x20000d44
 8007b3c:	20000d54 	.word	0x20000d54
 8007b40:	20000d40 	.word	0x20000d40
 8007b44:	20000868 	.word	0x20000868

08007b48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8007b50:	2300      	movs	r3, #0
 8007b52:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d010      	beq.n	8007b7c <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b90 <vTaskDelay+0x48>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <vTaskDelay+0x22>
 8007b62:	f001 fa69 	bl	8009038 <ulSetInterruptMask>
 8007b66:	bf00      	nop
 8007b68:	e7fd      	b.n	8007b66 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8007b6a:	f000 f86f 	bl	8007c4c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b6e:	2100      	movs	r1, #0
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fd5f 	bl	8008634 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8007b76:	f000 f877 	bl	8007c68 <xTaskResumeAll>
 8007b7a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8007b82:	f001 f8ab 	bl	8008cdc <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20000d60 	.word	0x20000d60

08007b94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ba2:	463a      	mov	r2, r7
 8007ba4:	1d39      	adds	r1, r7, #4
 8007ba6:	f107 0308 	add.w	r3, r7, #8
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff fab4 	bl	8007118 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	9202      	str	r2, [sp, #8]
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	460a      	mov	r2, r1
 8007bc2:	491b      	ldr	r1, [pc, #108]	@ (8007c30 <vTaskStartScheduler+0x9c>)
 8007bc4:	481b      	ldr	r0, [pc, #108]	@ (8007c34 <vTaskStartScheduler+0xa0>)
 8007bc6:	f7ff fe15 	bl	80077f4 <xTaskCreateStatic>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8007c38 <vTaskStartScheduler+0xa4>)
 8007bce:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8007bd0:	4b19      	ldr	r3, [pc, #100]	@ (8007c38 <vTaskStartScheduler+0xa4>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	e001      	b.n	8007be2 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d102      	bne.n	8007bee <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8007be8:	f000 fd92 	bl	8008710 <xTimerCreateTimerTask>
 8007bec:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d10e      	bne.n	8007c12 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8007bf4:	f001 fa20 	bl	8009038 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8007bf8:	4b10      	ldr	r3, [pc, #64]	@ (8007c3c <vTaskStartScheduler+0xa8>)
 8007bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfe:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8007c00:	4b0f      	ldr	r3, [pc, #60]	@ (8007c40 <vTaskStartScheduler+0xac>)
 8007c02:	2201      	movs	r2, #1
 8007c04:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c06:	4b0f      	ldr	r3, [pc, #60]	@ (8007c44 <vTaskStartScheduler+0xb0>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8007c0c:	f001 f960 	bl	8008ed0 <xPortStartScheduler>
 8007c10:	e007      	b.n	8007c22 <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c18:	d103      	bne.n	8007c22 <vTaskStartScheduler+0x8e>
 8007c1a:	f001 fa0d 	bl	8009038 <ulSetInterruptMask>
 8007c1e:	bf00      	nop
 8007c20:	e7fd      	b.n	8007c1e <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007c22:	4b09      	ldr	r3, [pc, #36]	@ (8007c48 <vTaskStartScheduler+0xb4>)
 8007c24:	681b      	ldr	r3, [r3, #0]
}
 8007c26:	bf00      	nop
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	0800d440 	.word	0x0800d440
 8007c34:	08008475 	.word	0x08008475
 8007c38:	20000d5c 	.word	0x20000d5c
 8007c3c:	20000d58 	.word	0x20000d58
 8007c40:	20000d44 	.word	0x20000d44
 8007c44:	20000d3c 	.word	0x20000d3c
 8007c48:	0800d4c0 	.word	0x0800d4c0

08007c4c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007c50:	4b04      	ldr	r3, [pc, #16]	@ (8007c64 <vTaskSuspendAll+0x18>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3301      	adds	r3, #1
 8007c56:	4a03      	ldr	r2, [pc, #12]	@ (8007c64 <vTaskSuspendAll+0x18>)
 8007c58:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8007c5a:	bf00      	nop
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	20000d60 	.word	0x20000d60

08007c68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007c72:	2300      	movs	r3, #0
 8007c74:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8007c76:	4b6b      	ldr	r3, [pc, #428]	@ (8007e24 <xTaskResumeAll+0x1bc>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d103      	bne.n	8007c86 <xTaskResumeAll+0x1e>
 8007c7e:	f001 f9db 	bl	8009038 <ulSetInterruptMask>
 8007c82:	bf00      	nop
 8007c84:	e7fd      	b.n	8007c82 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8007c86:	f001 f83b 	bl	8008d00 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8007c8a:	4b66      	ldr	r3, [pc, #408]	@ (8007e24 <xTaskResumeAll+0x1bc>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	4a64      	ldr	r2, [pc, #400]	@ (8007e24 <xTaskResumeAll+0x1bc>)
 8007c92:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007c94:	4b63      	ldr	r3, [pc, #396]	@ (8007e24 <xTaskResumeAll+0x1bc>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f040 80bb 	bne.w	8007e14 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c9e:	4b62      	ldr	r3, [pc, #392]	@ (8007e28 <xTaskResumeAll+0x1c0>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 80b6 	beq.w	8007e14 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ca8:	e08b      	b.n	8007dc2 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007caa:	4b60      	ldr	r3, [pc, #384]	@ (8007e2c <xTaskResumeAll+0x1c4>)
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb6:	60bb      	str	r3, [r7, #8]
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	69db      	ldr	r3, [r3, #28]
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	6a12      	ldr	r2, [r2, #32]
 8007cc0:	609a      	str	r2, [r3, #8]
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	69d2      	ldr	r2, [r2, #28]
 8007cca:	605a      	str	r2, [r3, #4]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	3318      	adds	r3, #24
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d103      	bne.n	8007ce0 <xTaskResumeAll+0x78>
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	6a1a      	ldr	r2, [r3, #32]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	605a      	str	r2, [r3, #4]
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	1e5a      	subs	r2, r3, #1
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	607b      	str	r3, [r7, #4]
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	68d2      	ldr	r2, [r2, #12]
 8007cfe:	609a      	str	r2, [r3, #8]
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	6892      	ldr	r2, [r2, #8]
 8007d08:	605a      	str	r2, [r3, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	3304      	adds	r3, #4
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d103      	bne.n	8007d1e <xTaskResumeAll+0xb6>
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	605a      	str	r2, [r3, #4]
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2200      	movs	r2, #0
 8007d22:	615a      	str	r2, [r3, #20]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	1e5a      	subs	r2, r3, #1
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d32:	4b3f      	ldr	r3, [pc, #252]	@ (8007e30 <xTaskResumeAll+0x1c8>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d903      	bls.n	8007d42 <xTaskResumeAll+0xda>
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3e:	4a3c      	ldr	r2, [pc, #240]	@ (8007e30 <xTaskResumeAll+0x1c8>)
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d46:	493b      	ldr	r1, [pc, #236]	@ (8007e34 <xTaskResumeAll+0x1cc>)
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	440b      	add	r3, r1
 8007d52:	3304      	adds	r3, #4
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	603b      	str	r3, [r7, #0]
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	609a      	str	r2, [r3, #8]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	689a      	ldr	r2, [r3, #8]
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	60da      	str	r2, [r3, #12]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	3204      	adds	r2, #4
 8007d6e:	605a      	str	r2, [r3, #4]
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	1d1a      	adds	r2, r3, #4
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	609a      	str	r2, [r3, #8]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4a2b      	ldr	r2, [pc, #172]	@ (8007e34 <xTaskResumeAll+0x1cc>)
 8007d86:	441a      	add	r2, r3
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	615a      	str	r2, [r3, #20]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d90:	4928      	ldr	r1, [pc, #160]	@ (8007e34 <xTaskResumeAll+0x1cc>)
 8007d92:	4613      	mov	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	440b      	add	r3, r1
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	1c59      	adds	r1, r3, #1
 8007da0:	4824      	ldr	r0, [pc, #144]	@ (8007e34 <xTaskResumeAll+0x1cc>)
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4403      	add	r3, r0
 8007dac:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db2:	4b21      	ldr	r3, [pc, #132]	@ (8007e38 <xTaskResumeAll+0x1d0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d902      	bls.n	8007dc2 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8007dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8007e3c <xTaskResumeAll+0x1d4>)
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8007e2c <xTaskResumeAll+0x1c4>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f47f af6f 	bne.w	8007caa <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007dd2:	f000 fbf5 	bl	80085c0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8007e40 <xTaskResumeAll+0x1d8>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d010      	beq.n	8007e04 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007de2:	f000 f83f 	bl	8007e64 <xTaskIncrementTick>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d002      	beq.n	8007df2 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 8007dec:	4b13      	ldr	r3, [pc, #76]	@ (8007e3c <xTaskResumeAll+0x1d4>)
 8007dee:	2201      	movs	r2, #1
 8007df0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1f1      	bne.n	8007de2 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 8007dfe:	4b10      	ldr	r3, [pc, #64]	@ (8007e40 <xTaskResumeAll+0x1d8>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007e04:	4b0d      	ldr	r3, [pc, #52]	@ (8007e3c <xTaskResumeAll+0x1d4>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007e10:	f000 ff64 	bl	8008cdc <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007e14:	f000 ff86 	bl	8008d24 <vPortExitCritical>

    return xAlreadyYielded;
 8007e18:	693b      	ldr	r3, [r7, #16]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20000d60 	.word	0x20000d60
 8007e28:	20000d38 	.word	0x20000d38
 8007e2c:	20000cf8 	.word	0x20000cf8
 8007e30:	20000d40 	.word	0x20000d40
 8007e34:	20000868 	.word	0x20000868
 8007e38:	20000864 	.word	0x20000864
 8007e3c:	20000d4c 	.word	0x20000d4c
 8007e40:	20000d48 	.word	0x20000d48

08007e44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8007e4a:	4b05      	ldr	r3, [pc, #20]	@ (8007e60 <xTaskGetTickCount+0x1c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007e50:	687b      	ldr	r3, [r7, #4]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	20000d3c 	.word	0x20000d3c

08007e64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b088      	sub	sp, #32
 8007e68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007e6e:	4b7a      	ldr	r3, [pc, #488]	@ (8008058 <xTaskIncrementTick+0x1f4>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f040 80e6 	bne.w	8008044 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e78:	4b78      	ldr	r3, [pc, #480]	@ (800805c <xTaskIncrementTick+0x1f8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007e80:	4a76      	ldr	r2, [pc, #472]	@ (800805c <xTaskIncrementTick+0x1f8>)
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d119      	bne.n	8007ec0 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 8007e8c:	4b74      	ldr	r3, [pc, #464]	@ (8008060 <xTaskIncrementTick+0x1fc>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <xTaskIncrementTick+0x3a>
 8007e96:	f001 f8cf 	bl	8009038 <ulSetInterruptMask>
 8007e9a:	bf00      	nop
 8007e9c:	e7fd      	b.n	8007e9a <xTaskIncrementTick+0x36>
 8007e9e:	4b70      	ldr	r3, [pc, #448]	@ (8008060 <xTaskIncrementTick+0x1fc>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	4b6f      	ldr	r3, [pc, #444]	@ (8008064 <xTaskIncrementTick+0x200>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a6d      	ldr	r2, [pc, #436]	@ (8008060 <xTaskIncrementTick+0x1fc>)
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	4a6d      	ldr	r2, [pc, #436]	@ (8008064 <xTaskIncrementTick+0x200>)
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8008068 <xTaskIncrementTick+0x204>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	4a6b      	ldr	r2, [pc, #428]	@ (8008068 <xTaskIncrementTick+0x204>)
 8007eba:	6013      	str	r3, [r2, #0]
 8007ebc:	f000 fb80 	bl	80085c0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007ec0:	4b6a      	ldr	r3, [pc, #424]	@ (800806c <xTaskIncrementTick+0x208>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	f0c0 80a7 	bcc.w	800801a <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ecc:	4b64      	ldr	r3, [pc, #400]	@ (8008060 <xTaskIncrementTick+0x1fc>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d104      	bne.n	8007ee0 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ed6:	4b65      	ldr	r3, [pc, #404]	@ (800806c <xTaskIncrementTick+0x208>)
 8007ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8007edc:	601a      	str	r2, [r3, #0]
                    break;
 8007ede:	e09c      	b.n	800801a <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ee0:	4b5f      	ldr	r3, [pc, #380]	@ (8008060 <xTaskIncrementTick+0x1fc>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d203      	bcs.n	8007f00 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007ef8:	4a5c      	ldr	r2, [pc, #368]	@ (800806c <xTaskIncrementTick+0x208>)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007efe:	e08c      	b.n	800801a <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	60bb      	str	r3, [r7, #8]
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	68d2      	ldr	r2, [r2, #12]
 8007f0e:	609a      	str	r2, [r3, #8]
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	6892      	ldr	r2, [r2, #8]
 8007f18:	605a      	str	r2, [r3, #4]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	3304      	adds	r3, #4
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d103      	bne.n	8007f2e <xTaskIncrementTick+0xca>
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	605a      	str	r2, [r3, #4]
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2200      	movs	r2, #0
 8007f32:	615a      	str	r2, [r3, #20]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	1e5a      	subs	r2, r3, #1
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d01e      	beq.n	8007f84 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f4a:	607b      	str	r3, [r7, #4]
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	6a12      	ldr	r2, [r2, #32]
 8007f54:	609a      	str	r2, [r3, #8]
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	69d2      	ldr	r2, [r2, #28]
 8007f5e:	605a      	str	r2, [r3, #4]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	3318      	adds	r3, #24
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d103      	bne.n	8007f74 <xTaskIncrementTick+0x110>
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	6a1a      	ldr	r2, [r3, #32]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	605a      	str	r2, [r3, #4]
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	2200      	movs	r2, #0
 8007f78:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	1e5a      	subs	r2, r3, #1
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f88:	4b39      	ldr	r3, [pc, #228]	@ (8008070 <xTaskIncrementTick+0x20c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d903      	bls.n	8007f98 <xTaskIncrementTick+0x134>
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f94:	4a36      	ldr	r2, [pc, #216]	@ (8008070 <xTaskIncrementTick+0x20c>)
 8007f96:	6013      	str	r3, [r2, #0]
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f9c:	4935      	ldr	r1, [pc, #212]	@ (8008074 <xTaskIncrementTick+0x210>)
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	3304      	adds	r3, #4
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	603b      	str	r3, [r7, #0]
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	609a      	str	r2, [r3, #8]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	60da      	str	r2, [r3, #12]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	3204      	adds	r2, #4
 8007fc4:	605a      	str	r2, [r3, #4]
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	1d1a      	adds	r2, r3, #4
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	609a      	str	r2, [r3, #8]
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4a26      	ldr	r2, [pc, #152]	@ (8008074 <xTaskIncrementTick+0x210>)
 8007fdc:	441a      	add	r2, r3
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	615a      	str	r2, [r3, #20]
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe6:	4923      	ldr	r1, [pc, #140]	@ (8008074 <xTaskIncrementTick+0x210>)
 8007fe8:	4613      	mov	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	1c59      	adds	r1, r3, #1
 8007ff6:	481f      	ldr	r0, [pc, #124]	@ (8008074 <xTaskIncrementTick+0x210>)
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4403      	add	r3, r0
 8008002:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008008:	4b1b      	ldr	r3, [pc, #108]	@ (8008078 <xTaskIncrementTick+0x214>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800800e:	429a      	cmp	r2, r3
 8008010:	f67f af5c 	bls.w	8007ecc <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 8008014:	2301      	movs	r3, #1
 8008016:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008018:	e758      	b.n	8007ecc <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800801a:	4b17      	ldr	r3, [pc, #92]	@ (8008078 <xTaskIncrementTick+0x214>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008020:	4914      	ldr	r1, [pc, #80]	@ (8008074 <xTaskIncrementTick+0x210>)
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	440b      	add	r3, r1
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d901      	bls.n	8008036 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 8008032:	2301      	movs	r3, #1
 8008034:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8008036:	4b11      	ldr	r3, [pc, #68]	@ (800807c <xTaskIncrementTick+0x218>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d007      	beq.n	800804e <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800803e:	2301      	movs	r3, #1
 8008040:	61fb      	str	r3, [r7, #28]
 8008042:	e004      	b.n	800804e <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008044:	4b0e      	ldr	r3, [pc, #56]	@ (8008080 <xTaskIncrementTick+0x21c>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3301      	adds	r3, #1
 800804a:	4a0d      	ldr	r2, [pc, #52]	@ (8008080 <xTaskIncrementTick+0x21c>)
 800804c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800804e:	69fb      	ldr	r3, [r7, #28]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3720      	adds	r7, #32
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	20000d60 	.word	0x20000d60
 800805c:	20000d3c 	.word	0x20000d3c
 8008060:	20000cf0 	.word	0x20000cf0
 8008064:	20000cf4 	.word	0x20000cf4
 8008068:	20000d50 	.word	0x20000d50
 800806c:	20000d58 	.word	0x20000d58
 8008070:	20000d40 	.word	0x20000d40
 8008074:	20000868 	.word	0x20000868
 8008078:	20000864 	.word	0x20000864
 800807c:	20000d4c 	.word	0x20000d4c
 8008080:	20000d48 	.word	0x20000d48

08008084 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800808a:	4b23      	ldr	r3, [pc, #140]	@ (8008118 <vTaskSwitchContext+0x94>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008092:	4b22      	ldr	r3, [pc, #136]	@ (800811c <vTaskSwitchContext+0x98>)
 8008094:	2201      	movs	r2, #1
 8008096:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8008098:	e039      	b.n	800810e <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800809a:	4b20      	ldr	r3, [pc, #128]	@ (800811c <vTaskSwitchContext+0x98>)
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a0:	4b1f      	ldr	r3, [pc, #124]	@ (8008120 <vTaskSwitchContext+0x9c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	607b      	str	r3, [r7, #4]
 80080a6:	e009      	b.n	80080bc <vTaskSwitchContext+0x38>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d103      	bne.n	80080b6 <vTaskSwitchContext+0x32>
 80080ae:	f000 ffc3 	bl	8009038 <ulSetInterruptMask>
 80080b2:	bf00      	nop
 80080b4:	e7fd      	b.n	80080b2 <vTaskSwitchContext+0x2e>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	607b      	str	r3, [r7, #4]
 80080bc:	4919      	ldr	r1, [pc, #100]	@ (8008124 <vTaskSwitchContext+0xa0>)
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	440b      	add	r3, r1
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0eb      	beq.n	80080a8 <vTaskSwitchContext+0x24>
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	4613      	mov	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4413      	add	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4a12      	ldr	r2, [pc, #72]	@ (8008124 <vTaskSwitchContext+0xa0>)
 80080dc:	4413      	add	r3, r2
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	605a      	str	r2, [r3, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	3308      	adds	r3, #8
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d103      	bne.n	80080fe <vTaskSwitchContext+0x7a>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	605a      	str	r2, [r3, #4]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	4a08      	ldr	r2, [pc, #32]	@ (8008128 <vTaskSwitchContext+0xa4>)
 8008106:	6013      	str	r3, [r2, #0]
 8008108:	4a05      	ldr	r2, [pc, #20]	@ (8008120 <vTaskSwitchContext+0x9c>)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6013      	str	r3, [r2, #0]
}
 800810e:	bf00      	nop
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20000d60 	.word	0x20000d60
 800811c:	20000d4c 	.word	0x20000d4c
 8008120:	20000d40 	.word	0x20000d40
 8008124:	20000868 	.word	0x20000868
 8008128:	20000864 	.word	0x20000864

0800812c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d103      	bne.n	8008144 <vTaskPlaceOnEventList+0x18>
 800813c:	f000 ff7c 	bl	8009038 <ulSetInterruptMask>
 8008140:	bf00      	nop
 8008142:	e7fd      	b.n	8008140 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008144:	4b07      	ldr	r3, [pc, #28]	@ (8008164 <vTaskPlaceOnEventList+0x38>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3318      	adds	r3, #24
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff f844 	bl	80071da <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008152:	2101      	movs	r1, #1
 8008154:	6838      	ldr	r0, [r7, #0]
 8008156:	f000 fa6d 	bl	8008634 <prvAddCurrentTaskToDelayedList>
}
 800815a:	bf00      	nop
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000864 	.word	0x20000864

08008168 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d103      	bne.n	8008182 <vTaskPlaceOnEventListRestricted+0x1a>
 800817a:	f000 ff5d 	bl	8009038 <ulSetInterruptMask>
 800817e:	bf00      	nop
 8008180:	e7fd      	b.n	800817e <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	4b15      	ldr	r3, [pc, #84]	@ (80081e0 <vTaskPlaceOnEventListRestricted+0x78>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	61da      	str	r2, [r3, #28]
 8008190:	4b13      	ldr	r3, [pc, #76]	@ (80081e0 <vTaskPlaceOnEventListRestricted+0x78>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	6892      	ldr	r2, [r2, #8]
 8008198:	621a      	str	r2, [r3, #32]
 800819a:	4b11      	ldr	r3, [pc, #68]	@ (80081e0 <vTaskPlaceOnEventListRestricted+0x78>)
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	3218      	adds	r2, #24
 80081a4:	605a      	str	r2, [r3, #4]
 80081a6:	4b0e      	ldr	r3, [pc, #56]	@ (80081e0 <vTaskPlaceOnEventListRestricted+0x78>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f103 0218 	add.w	r2, r3, #24
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	609a      	str	r2, [r3, #8]
 80081b2:	4b0b      	ldr	r3, [pc, #44]	@ (80081e0 <vTaskPlaceOnEventListRestricted+0x78>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 80081ca:	f04f 33ff 	mov.w	r3, #4294967295
 80081ce:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	68b8      	ldr	r0, [r7, #8]
 80081d4:	f000 fa2e 	bl	8008634 <prvAddCurrentTaskToDelayedList>
    }
 80081d8:	bf00      	nop
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20000864 	.word	0x20000864

080081e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d103      	bne.n	8008202 <xTaskRemoveFromEventList+0x1e>
 80081fa:	f000 ff1d 	bl	8009038 <ulSetInterruptMask>
 80081fe:	bf00      	nop
 8008200:	e7fd      	b.n	80081fe <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008206:	617b      	str	r3, [r7, #20]
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	69db      	ldr	r3, [r3, #28]
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	6a12      	ldr	r2, [r2, #32]
 8008210:	609a      	str	r2, [r3, #8]
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	69d2      	ldr	r2, [r2, #28]
 800821a:	605a      	str	r2, [r3, #4]
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	3318      	adds	r3, #24
 8008224:	429a      	cmp	r2, r3
 8008226:	d103      	bne.n	8008230 <xTaskRemoveFromEventList+0x4c>
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	6a1a      	ldr	r2, [r3, #32]
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	605a      	str	r2, [r3, #4]
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	2200      	movs	r2, #0
 8008234:	629a      	str	r2, [r3, #40]	@ 0x28
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	1e5a      	subs	r2, r3, #1
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008240:	4b49      	ldr	r3, [pc, #292]	@ (8008368 <xTaskRemoveFromEventList+0x184>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d15f      	bne.n	8008308 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	695b      	ldr	r3, [r3, #20]
 800824c:	60fb      	str	r3, [r7, #12]
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	68d2      	ldr	r2, [r2, #12]
 8008256:	609a      	str	r2, [r3, #8]
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	6892      	ldr	r2, [r2, #8]
 8008260:	605a      	str	r2, [r3, #4]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	3304      	adds	r3, #4
 800826a:	429a      	cmp	r2, r3
 800826c:	d103      	bne.n	8008276 <xTaskRemoveFromEventList+0x92>
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	605a      	str	r2, [r3, #4]
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2200      	movs	r2, #0
 800827a:	615a      	str	r2, [r3, #20]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	1e5a      	subs	r2, r3, #1
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800828a:	4b38      	ldr	r3, [pc, #224]	@ (800836c <xTaskRemoveFromEventList+0x188>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	429a      	cmp	r2, r3
 8008290:	d903      	bls.n	800829a <xTaskRemoveFromEventList+0xb6>
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008296:	4a35      	ldr	r2, [pc, #212]	@ (800836c <xTaskRemoveFromEventList+0x188>)
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800829e:	4934      	ldr	r1, [pc, #208]	@ (8008370 <xTaskRemoveFromEventList+0x18c>)
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	3304      	adds	r3, #4
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	60bb      	str	r3, [r7, #8]
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	609a      	str	r2, [r3, #8]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	60da      	str	r2, [r3, #12]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	69ba      	ldr	r2, [r7, #24]
 80082c4:	3204      	adds	r2, #4
 80082c6:	605a      	str	r2, [r3, #4]
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	1d1a      	adds	r2, r3, #4
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	609a      	str	r2, [r3, #8]
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d4:	4613      	mov	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4a24      	ldr	r2, [pc, #144]	@ (8008370 <xTaskRemoveFromEventList+0x18c>)
 80082de:	441a      	add	r2, r3
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	615a      	str	r2, [r3, #20]
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082e8:	4921      	ldr	r1, [pc, #132]	@ (8008370 <xTaskRemoveFromEventList+0x18c>)
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	440b      	add	r3, r1
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	1c59      	adds	r1, r3, #1
 80082f8:	481d      	ldr	r0, [pc, #116]	@ (8008370 <xTaskRemoveFromEventList+0x18c>)
 80082fa:	4613      	mov	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4403      	add	r3, r0
 8008304:	6019      	str	r1, [r3, #0]
 8008306:	e01b      	b.n	8008340 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008308:	4b1a      	ldr	r3, [pc, #104]	@ (8008374 <xTaskRemoveFromEventList+0x190>)
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	613b      	str	r3, [r7, #16]
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	61da      	str	r2, [r3, #28]
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	621a      	str	r2, [r3, #32]
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	3218      	adds	r2, #24
 8008324:	605a      	str	r2, [r3, #4]
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	f103 0218 	add.w	r2, r3, #24
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	609a      	str	r2, [r3, #8]
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	4a10      	ldr	r2, [pc, #64]	@ (8008374 <xTaskRemoveFromEventList+0x190>)
 8008334:	629a      	str	r2, [r3, #40]	@ 0x28
 8008336:	4b0f      	ldr	r3, [pc, #60]	@ (8008374 <xTaskRemoveFromEventList+0x190>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3301      	adds	r3, #1
 800833c:	4a0d      	ldr	r2, [pc, #52]	@ (8008374 <xTaskRemoveFromEventList+0x190>)
 800833e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008344:	4b0c      	ldr	r3, [pc, #48]	@ (8008378 <xTaskRemoveFromEventList+0x194>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834a:	429a      	cmp	r2, r3
 800834c:	d905      	bls.n	800835a <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800834e:	2301      	movs	r3, #1
 8008350:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8008352:	4b0a      	ldr	r3, [pc, #40]	@ (800837c <xTaskRemoveFromEventList+0x198>)
 8008354:	2201      	movs	r2, #1
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	e001      	b.n	800835e <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800835a:	2300      	movs	r3, #0
 800835c:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800835e:	69fb      	ldr	r3, [r7, #28]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3720      	adds	r7, #32
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	20000d60 	.word	0x20000d60
 800836c:	20000d40 	.word	0x20000d40
 8008370:	20000868 	.word	0x20000868
 8008374:	20000cf8 	.word	0x20000cf8
 8008378:	20000864 	.word	0x20000864
 800837c:	20000d4c 	.word	0x20000d4c

08008380 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008388:	4b06      	ldr	r3, [pc, #24]	@ (80083a4 <vTaskInternalSetTimeOutState+0x24>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008390:	4b05      	ldr	r3, [pc, #20]	@ (80083a8 <vTaskInternalSetTimeOutState+0x28>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	605a      	str	r2, [r3, #4]
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	20000d50 	.word	0x20000d50
 80083a8:	20000d3c 	.word	0x20000d3c

080083ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d103      	bne.n	80083c4 <xTaskCheckForTimeOut+0x18>
 80083bc:	f000 fe3c 	bl	8009038 <ulSetInterruptMask>
 80083c0:	bf00      	nop
 80083c2:	e7fd      	b.n	80083c0 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d103      	bne.n	80083d2 <xTaskCheckForTimeOut+0x26>
 80083ca:	f000 fe35 	bl	8009038 <ulSetInterruptMask>
 80083ce:	bf00      	nop
 80083d0:	e7fd      	b.n	80083ce <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 80083d2:	f000 fc95 	bl	8008d00 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80083d6:	4b1f      	ldr	r3, [pc, #124]	@ (8008454 <xTaskCheckForTimeOut+0xa8>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ee:	d102      	bne.n	80083f6 <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80083f0:	2300      	movs	r3, #0
 80083f2:	617b      	str	r3, [r7, #20]
 80083f4:	e026      	b.n	8008444 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	4b17      	ldr	r3, [pc, #92]	@ (8008458 <xTaskCheckForTimeOut+0xac>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d00a      	beq.n	8008418 <xTaskCheckForTimeOut+0x6c>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	429a      	cmp	r2, r3
 800840a:	d305      	bcc.n	8008418 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800840c:	2301      	movs	r3, #1
 800840e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2200      	movs	r2, #0
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	e015      	b.n	8008444 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	429a      	cmp	r2, r3
 8008420:	d20b      	bcs.n	800843a <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	1ad2      	subs	r2, r2, r3
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7ff ffa6 	bl	8008380 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008434:	2300      	movs	r3, #0
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	e004      	b.n	8008444 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2200      	movs	r2, #0
 800843e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008440:	2301      	movs	r3, #1
 8008442:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8008444:	f000 fc6e 	bl	8008d24 <vPortExitCritical>

    return xReturn;
 8008448:	697b      	ldr	r3, [r7, #20]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20000d3c 	.word	0x20000d3c
 8008458:	20000d50 	.word	0x20000d50

0800845c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8008460:	4b03      	ldr	r3, [pc, #12]	@ (8008470 <vTaskMissedYield+0x14>)
 8008462:	2201      	movs	r2, #1
 8008464:	601a      	str	r2, [r3, #0]
}
 8008466:	bf00      	nop
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	20000d4c 	.word	0x20000d4c

08008474 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800847c:	f000 f84a 	bl	8008514 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008480:	4b03      	ldr	r3, [pc, #12]	@ (8008490 <prvIdleTask+0x1c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d9f9      	bls.n	800847c <prvIdleTask+0x8>
            {
                taskYIELD();
 8008488:	f000 fc28 	bl	8008cdc <vPortYield>
        prvCheckTasksWaitingTermination();
 800848c:	e7f6      	b.n	800847c <prvIdleTask+0x8>
 800848e:	bf00      	nop
 8008490:	20000868 	.word	0x20000868

08008494 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800849a:	2300      	movs	r3, #0
 800849c:	607b      	str	r3, [r7, #4]
 800849e:	e00c      	b.n	80084ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	4613      	mov	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4a12      	ldr	r2, [pc, #72]	@ (80084f4 <prvInitialiseTaskLists+0x60>)
 80084ac:	4413      	add	r3, r2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fe66 	bl	8007180 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	3301      	adds	r3, #1
 80084b8:	607b      	str	r3, [r7, #4]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b37      	cmp	r3, #55	@ 0x37
 80084be:	d9ef      	bls.n	80084a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80084c0:	480d      	ldr	r0, [pc, #52]	@ (80084f8 <prvInitialiseTaskLists+0x64>)
 80084c2:	f7fe fe5d 	bl	8007180 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80084c6:	480d      	ldr	r0, [pc, #52]	@ (80084fc <prvInitialiseTaskLists+0x68>)
 80084c8:	f7fe fe5a 	bl	8007180 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80084cc:	480c      	ldr	r0, [pc, #48]	@ (8008500 <prvInitialiseTaskLists+0x6c>)
 80084ce:	f7fe fe57 	bl	8007180 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80084d2:	480c      	ldr	r0, [pc, #48]	@ (8008504 <prvInitialiseTaskLists+0x70>)
 80084d4:	f7fe fe54 	bl	8007180 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80084d8:	480b      	ldr	r0, [pc, #44]	@ (8008508 <prvInitialiseTaskLists+0x74>)
 80084da:	f7fe fe51 	bl	8007180 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80084de:	4b0b      	ldr	r3, [pc, #44]	@ (800850c <prvInitialiseTaskLists+0x78>)
 80084e0:	4a05      	ldr	r2, [pc, #20]	@ (80084f8 <prvInitialiseTaskLists+0x64>)
 80084e2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008510 <prvInitialiseTaskLists+0x7c>)
 80084e6:	4a05      	ldr	r2, [pc, #20]	@ (80084fc <prvInitialiseTaskLists+0x68>)
 80084e8:	601a      	str	r2, [r3, #0]
}
 80084ea:	bf00      	nop
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20000868 	.word	0x20000868
 80084f8:	20000cc8 	.word	0x20000cc8
 80084fc:	20000cdc 	.word	0x20000cdc
 8008500:	20000cf8 	.word	0x20000cf8
 8008504:	20000d0c 	.word	0x20000d0c
 8008508:	20000d24 	.word	0x20000d24
 800850c:	20000cf0 	.word	0x20000cf0
 8008510:	20000cf4 	.word	0x20000cf4

08008514 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800851a:	e019      	b.n	8008550 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800851c:	f000 fbf0 	bl	8008d00 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008520:	4b10      	ldr	r3, [pc, #64]	@ (8008564 <prvCheckTasksWaitingTermination+0x50>)
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	3304      	adds	r3, #4
 800852c:	4618      	mov	r0, r3
 800852e:	f7fe fe8d 	bl	800724c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8008532:	4b0d      	ldr	r3, [pc, #52]	@ (8008568 <prvCheckTasksWaitingTermination+0x54>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	3b01      	subs	r3, #1
 8008538:	4a0b      	ldr	r2, [pc, #44]	@ (8008568 <prvCheckTasksWaitingTermination+0x54>)
 800853a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800853c:	4b0b      	ldr	r3, [pc, #44]	@ (800856c <prvCheckTasksWaitingTermination+0x58>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3b01      	subs	r3, #1
 8008542:	4a0a      	ldr	r2, [pc, #40]	@ (800856c <prvCheckTasksWaitingTermination+0x58>)
 8008544:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8008546:	f000 fbed 	bl	8008d24 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f810 	bl	8008570 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008550:	4b06      	ldr	r3, [pc, #24]	@ (800856c <prvCheckTasksWaitingTermination+0x58>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e1      	bne.n	800851c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8008558:	bf00      	nop
 800855a:	bf00      	nop
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	20000d0c 	.word	0x20000d0c
 8008568:	20000d38 	.word	0x20000d38
 800856c:	20000d20 	.word	0x20000d20

08008570 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800857e:	2b00      	cmp	r3, #0
 8008580:	d108      	bne.n	8008594 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fe72 	bl	8009270 <vPortFree>
                vPortFree( pxTCB );
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fe6f 	bl	8009270 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8008592:	e011      	b.n	80085b8 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800859a:	2b01      	cmp	r3, #1
 800859c:	d103      	bne.n	80085a6 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fe66 	bl	8009270 <vPortFree>
    }
 80085a4:	e008      	b.n	80085b8 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d003      	beq.n	80085b8 <prvDeleteTCB+0x48>
 80085b0:	f000 fd42 	bl	8009038 <ulSetInterruptMask>
 80085b4:	bf00      	nop
 80085b6:	e7fd      	b.n	80085b4 <prvDeleteTCB+0x44>
    }
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085c0:	b480      	push	{r7}
 80085c2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085c4:	4b0a      	ldr	r3, [pc, #40]	@ (80085f0 <prvResetNextTaskUnblockTime+0x30>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d104      	bne.n	80085d8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80085ce:	4b09      	ldr	r3, [pc, #36]	@ (80085f4 <prvResetNextTaskUnblockTime+0x34>)
 80085d0:	f04f 32ff 	mov.w	r2, #4294967295
 80085d4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80085d6:	e005      	b.n	80085e4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80085d8:	4b05      	ldr	r3, [pc, #20]	@ (80085f0 <prvResetNextTaskUnblockTime+0x30>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a04      	ldr	r2, [pc, #16]	@ (80085f4 <prvResetNextTaskUnblockTime+0x34>)
 80085e2:	6013      	str	r3, [r2, #0]
}
 80085e4:	bf00      	nop
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	20000cf0 	.word	0x20000cf0
 80085f4:	20000d58 	.word	0x20000d58

080085f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80085fe:	4b0b      	ldr	r3, [pc, #44]	@ (800862c <xTaskGetSchedulerState+0x34>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d102      	bne.n	800860c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8008606:	2301      	movs	r3, #1
 8008608:	607b      	str	r3, [r7, #4]
 800860a:	e008      	b.n	800861e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800860c:	4b08      	ldr	r3, [pc, #32]	@ (8008630 <xTaskGetSchedulerState+0x38>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d102      	bne.n	800861a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8008614:	2302      	movs	r3, #2
 8008616:	607b      	str	r3, [r7, #4]
 8008618:	e001      	b.n	800861e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800861a:	2300      	movs	r3, #0
 800861c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800861e:	687b      	ldr	r3, [r7, #4]
    }
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	20000d44 	.word	0x20000d44
 8008630:	20000d60 	.word	0x20000d60

08008634 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800863e:	4b2e      	ldr	r3, [pc, #184]	@ (80086f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008644:	4b2d      	ldr	r3, [pc, #180]	@ (80086fc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3304      	adds	r3, #4
 800864a:	4618      	mov	r0, r3
 800864c:	f7fe fdfe 	bl	800724c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008656:	d124      	bne.n	80086a2 <prvAddCurrentTaskToDelayedList+0x6e>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d021      	beq.n	80086a2 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800865e:	4b28      	ldr	r3, [pc, #160]	@ (8008700 <prvAddCurrentTaskToDelayedList+0xcc>)
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	613b      	str	r3, [r7, #16]
 8008664:	4b25      	ldr	r3, [pc, #148]	@ (80086fc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	609a      	str	r2, [r3, #8]
 800866c:	4b23      	ldr	r3, [pc, #140]	@ (80086fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	6892      	ldr	r2, [r2, #8]
 8008674:	60da      	str	r2, [r3, #12]
 8008676:	4b21      	ldr	r3, [pc, #132]	@ (80086fc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	3204      	adds	r2, #4
 8008680:	605a      	str	r2, [r3, #4]
 8008682:	4b1e      	ldr	r3, [pc, #120]	@ (80086fc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	1d1a      	adds	r2, r3, #4
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	609a      	str	r2, [r3, #8]
 800868c:	4b1b      	ldr	r3, [pc, #108]	@ (80086fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a1b      	ldr	r2, [pc, #108]	@ (8008700 <prvAddCurrentTaskToDelayedList+0xcc>)
 8008692:	615a      	str	r2, [r3, #20]
 8008694:	4b1a      	ldr	r3, [pc, #104]	@ (8008700 <prvAddCurrentTaskToDelayedList+0xcc>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3301      	adds	r3, #1
 800869a:	4a19      	ldr	r2, [pc, #100]	@ (8008700 <prvAddCurrentTaskToDelayedList+0xcc>)
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80086a0:	e026      	b.n	80086f0 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4413      	add	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086aa:	4b14      	ldr	r3, [pc, #80]	@ (80086fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d209      	bcs.n	80086ce <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086ba:	4b12      	ldr	r3, [pc, #72]	@ (8008704 <prvAddCurrentTaskToDelayedList+0xd0>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	4b0f      	ldr	r3, [pc, #60]	@ (80086fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3304      	adds	r3, #4
 80086c4:	4619      	mov	r1, r3
 80086c6:	4610      	mov	r0, r2
 80086c8:	f7fe fd87 	bl	80071da <vListInsert>
}
 80086cc:	e010      	b.n	80086f0 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008708 <prvAddCurrentTaskToDelayedList+0xd4>)
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	4b0a      	ldr	r3, [pc, #40]	@ (80086fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4619      	mov	r1, r3
 80086da:	4610      	mov	r0, r2
 80086dc:	f7fe fd7d 	bl	80071da <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80086e0:	4b0a      	ldr	r3, [pc, #40]	@ (800870c <prvAddCurrentTaskToDelayedList+0xd8>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d202      	bcs.n	80086f0 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 80086ea:	4a08      	ldr	r2, [pc, #32]	@ (800870c <prvAddCurrentTaskToDelayedList+0xd8>)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6013      	str	r3, [r2, #0]
}
 80086f0:	bf00      	nop
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	20000d3c 	.word	0x20000d3c
 80086fc:	20000864 	.word	0x20000864
 8008700:	20000d24 	.word	0x20000d24
 8008704:	20000cf4 	.word	0x20000cf4
 8008708:	20000cf0 	.word	0x20000cf0
 800870c:	20000d58 	.word	0x20000d58

08008710 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8008716:	2300      	movs	r3, #0
 8008718:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800871a:	f000 fa5f 	bl	8008bdc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800871e:	4b18      	ldr	r3, [pc, #96]	@ (8008780 <xTimerCreateTimerTask+0x70>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d020      	beq.n	8008768 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8008726:	2300      	movs	r3, #0
 8008728:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800872a:	2300      	movs	r3, #0
 800872c:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800872e:	463a      	mov	r2, r7
 8008730:	1d39      	adds	r1, r7, #4
 8008732:	f107 0308 	add.w	r3, r7, #8
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe fd08 	bl	800714c <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	9202      	str	r2, [sp, #8]
 8008744:	9301      	str	r3, [sp, #4]
 8008746:	2302      	movs	r3, #2
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	2300      	movs	r3, #0
 800874c:	460a      	mov	r2, r1
 800874e:	490d      	ldr	r1, [pc, #52]	@ (8008784 <xTimerCreateTimerTask+0x74>)
 8008750:	480d      	ldr	r0, [pc, #52]	@ (8008788 <xTimerCreateTimerTask+0x78>)
 8008752:	f7ff f84f 	bl	80077f4 <xTaskCreateStatic>
 8008756:	4603      	mov	r3, r0
 8008758:	4a0c      	ldr	r2, [pc, #48]	@ (800878c <xTimerCreateTimerTask+0x7c>)
 800875a:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800875c:	4b0b      	ldr	r3, [pc, #44]	@ (800878c <xTimerCreateTimerTask+0x7c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8008764:	2301      	movs	r3, #1
 8008766:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d103      	bne.n	8008776 <xTimerCreateTimerTask+0x66>
 800876e:	f000 fc63 	bl	8009038 <ulSetInterruptMask>
 8008772:	bf00      	nop
 8008774:	e7fd      	b.n	8008772 <xTimerCreateTimerTask+0x62>
        return xReturn;
 8008776:	68fb      	ldr	r3, [r7, #12]
    }
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	20000d94 	.word	0x20000d94
 8008784:	0800d448 	.word	0x0800d448
 8008788:	08008835 	.word	0x08008835
 800878c:	20000d98 	.word	0x20000d98

08008790 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800879c:	e008      	b.n	80087b0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	4413      	add	r3, r2
 80087a6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a1b      	ldr	r3, [r3, #32]
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	699a      	ldr	r2, [r3, #24]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	18d1      	adds	r1, r2, r3
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 f8d7 	bl	8008970 <prvInsertTimerInActiveList>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1ea      	bne.n	800879e <prvReloadTimer+0xe>
        }
    }
 80087c8:	bf00      	nop
 80087ca:	bf00      	nop
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087de:	4b14      	ldr	r3, [pc, #80]	@ (8008830 <prvProcessExpiredTimer+0x5c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fd2d 	bl	800724c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087f8:	f003 0304 	and.w	r3, r3, #4
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7ff ffc3 	bl	8008790 <prvReloadTimer>
 800880a:	e008      	b.n	800881e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008812:	f023 0301 	bic.w	r3, r3, #1
 8008816:	b2da      	uxtb	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	4798      	blx	r3
    }
 8008826:	bf00      	nop
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20000d8c 	.word	0x20000d8c

08008834 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800883c:	f107 0308 	add.w	r3, r7, #8
 8008840:	4618      	mov	r0, r3
 8008842:	f000 f851 	bl	80088e8 <prvGetNextExpireTime>
 8008846:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	4619      	mov	r1, r3
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 f805 	bl	800885c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8008852:	f000 f8cf 	bl	80089f4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008856:	bf00      	nop
 8008858:	e7f0      	b.n	800883c <prvTimerTask+0x8>
	...

0800885c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8008866:	f7ff f9f1 	bl	8007c4c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800886a:	f107 0308 	add.w	r3, r7, #8
 800886e:	4618      	mov	r0, r3
 8008870:	f000 f85e 	bl	8008930 <prvSampleTimeNow>
 8008874:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d12a      	bne.n	80088d2 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <prvProcessTimerOrBlockTask+0x3c>
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	429a      	cmp	r2, r3
 8008888:	d806      	bhi.n	8008898 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800888a:	f7ff f9ed 	bl	8007c68 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800888e:	68f9      	ldr	r1, [r7, #12]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7ff ff9f 	bl	80087d4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8008896:	e01e      	b.n	80088d6 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d008      	beq.n	80088b0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800889e:	4b10      	ldr	r3, [pc, #64]	@ (80088e0 <prvProcessTimerOrBlockTask+0x84>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <prvProcessTimerOrBlockTask+0x50>
 80088a8:	2301      	movs	r3, #1
 80088aa:	e000      	b.n	80088ae <prvProcessTimerOrBlockTask+0x52>
 80088ac:	2300      	movs	r3, #0
 80088ae:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80088b0:	4b0c      	ldr	r3, [pc, #48]	@ (80088e4 <prvProcessTimerOrBlockTask+0x88>)
 80088b2:	6818      	ldr	r0, [r3, #0]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	4619      	mov	r1, r3
 80088be:	f7fe ff65 	bl	800778c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80088c2:	f7ff f9d1 	bl	8007c68 <xTaskResumeAll>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d104      	bne.n	80088d6 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 80088cc:	f000 fa06 	bl	8008cdc <vPortYield>
    }
 80088d0:	e001      	b.n	80088d6 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 80088d2:	f7ff f9c9 	bl	8007c68 <xTaskResumeAll>
    }
 80088d6:	bf00      	nop
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	20000d90 	.word	0x20000d90
 80088e4:	20000d94 	.word	0x20000d94

080088e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088f0:	4b0e      	ldr	r3, [pc, #56]	@ (800892c <prvGetNextExpireTime+0x44>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <prvGetNextExpireTime+0x16>
 80088fa:	2201      	movs	r2, #1
 80088fc:	e000      	b.n	8008900 <prvGetNextExpireTime+0x18>
 80088fe:	2200      	movs	r2, #0
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d105      	bne.n	8008918 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800890c:	4b07      	ldr	r3, [pc, #28]	@ (800892c <prvGetNextExpireTime+0x44>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	60fb      	str	r3, [r7, #12]
 8008916:	e001      	b.n	800891c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800891c:	68fb      	ldr	r3, [r7, #12]
    }
 800891e:	4618      	mov	r0, r3
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	20000d8c 	.word	0x20000d8c

08008930 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008938:	f7ff fa84 	bl	8007e44 <xTaskGetTickCount>
 800893c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800893e:	4b0b      	ldr	r3, [pc, #44]	@ (800896c <prvSampleTimeNow+0x3c>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	429a      	cmp	r2, r3
 8008946:	d205      	bcs.n	8008954 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008948:	f000 f922 	bl	8008b90 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	e002      	b.n	800895a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800895a:	4a04      	ldr	r2, [pc, #16]	@ (800896c <prvSampleTimeNow+0x3c>)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008960:	68fb      	ldr	r3, [r7, #12]
    }
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	20000d9c 	.word	0x20000d9c

08008970 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	429a      	cmp	r2, r3
 8008994:	d812      	bhi.n	80089bc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	1ad2      	subs	r2, r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d302      	bcc.n	80089aa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80089a4:	2301      	movs	r3, #1
 80089a6:	617b      	str	r3, [r7, #20]
 80089a8:	e01b      	b.n	80089e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80089aa:	4b10      	ldr	r3, [pc, #64]	@ (80089ec <prvInsertTimerInActiveList+0x7c>)
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3304      	adds	r3, #4
 80089b2:	4619      	mov	r1, r3
 80089b4:	4610      	mov	r0, r2
 80089b6:	f7fe fc10 	bl	80071da <vListInsert>
 80089ba:	e012      	b.n	80089e2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d206      	bcs.n	80089d2 <prvInsertTimerInActiveList+0x62>
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d302      	bcc.n	80089d2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80089cc:	2301      	movs	r3, #1
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	e007      	b.n	80089e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089d2:	4b07      	ldr	r3, [pc, #28]	@ (80089f0 <prvInsertTimerInActiveList+0x80>)
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3304      	adds	r3, #4
 80089da:	4619      	mov	r1, r3
 80089dc:	4610      	mov	r0, r2
 80089de:	f7fe fbfc 	bl	80071da <vListInsert>
            }
        }

        return xProcessTimerNow;
 80089e2:	697b      	ldr	r3, [r7, #20]
    }
 80089e4:	4618      	mov	r0, r3
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	20000d90 	.word	0x20000d90
 80089f0:	20000d8c 	.word	0x20000d8c

080089f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089fa:	e0b7      	b.n	8008b6c <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	da11      	bge.n	8008a26 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a02:	1d3b      	adds	r3, r7, #4
 8008a04:	3304      	adds	r3, #4
 8008a06:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d103      	bne.n	8008a16 <prvProcessReceivedCommands+0x22>
 8008a0e:	f000 fb13 	bl	8009038 <ulSetInterruptMask>
 8008a12:	bf00      	nop
 8008a14:	e7fd      	b.n	8008a12 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69fa      	ldr	r2, [r7, #28]
 8008a1c:	6850      	ldr	r0, [r2, #4]
 8008a1e:	69fa      	ldr	r2, [r7, #28]
 8008a20:	6892      	ldr	r2, [r2, #8]
 8008a22:	4611      	mov	r1, r2
 8008a24:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f2c0 809f 	blt.w	8008b6c <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d004      	beq.n	8008a44 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fe fc04 	bl	800724c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a44:	463b      	mov	r3, r7
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff ff72 	bl	8008930 <prvSampleTimeNow>
 8008a4c:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	2b08      	cmp	r3, #8
 8008a54:	f200 8087 	bhi.w	8008b66 <prvProcessReceivedCommands+0x172>
 8008a58:	a201      	add	r2, pc, #4	@ (adr r2, 8008a60 <prvProcessReceivedCommands+0x6c>)
 8008a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5e:	bf00      	nop
 8008a60:	08008a85 	.word	0x08008a85
 8008a64:	08008a85 	.word	0x08008a85
 8008a68:	08008aed 	.word	0x08008aed
 8008a6c:	08008b01 	.word	0x08008b01
 8008a70:	08008b3d 	.word	0x08008b3d
 8008a74:	08008a85 	.word	0x08008a85
 8008a78:	08008a85 	.word	0x08008a85
 8008a7c:	08008aed 	.word	0x08008aed
 8008a80:	08008b01 	.word	0x08008b01
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a8a:	f043 0301 	orr.w	r3, r3, #1
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	18d1      	adds	r1, r2, r3
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	69b8      	ldr	r0, [r7, #24]
 8008aa4:	f7ff ff64 	bl	8008970 <prvInsertTimerInActiveList>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d05d      	beq.n	8008b6a <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ab4:	f003 0304 	and.w	r3, r3, #4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d009      	beq.n	8008ad0 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	69b8      	ldr	r0, [r7, #24]
 8008aca:	f7ff fe61 	bl	8008790 <prvReloadTimer>
 8008ace:	e008      	b.n	8008ae2 <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ad6:	f023 0301 	bic.w	r3, r3, #1
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	69b8      	ldr	r0, [r7, #24]
 8008ae8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8008aea:	e03e      	b.n	8008b6a <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008af2:	f023 0301 	bic.w	r3, r3, #1
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008afe:	e035      	b.n	8008b6c <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b06:	f043 0301 	orr.w	r3, r3, #1
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d103      	bne.n	8008b28 <prvProcessReceivedCommands+0x134>
 8008b20:	f000 fa8a 	bl	8009038 <ulSetInterruptMask>
 8008b24:	bf00      	nop
 8008b26:	e7fd      	b.n	8008b24 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	18d1      	adds	r1, r2, r3
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	69b8      	ldr	r0, [r7, #24]
 8008b36:	f7ff ff1b 	bl	8008970 <prvInsertTimerInActiveList>
                        break;
 8008b3a:	e017      	b.n	8008b6c <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d103      	bne.n	8008b52 <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 8008b4a:	69b8      	ldr	r0, [r7, #24]
 8008b4c:	f000 fb90 	bl	8009270 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008b50:	e00c      	b.n	8008b6c <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b58:	f023 0301 	bic.w	r3, r3, #1
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008b64:	e002      	b.n	8008b6c <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 8008b66:	bf00      	nop
 8008b68:	e000      	b.n	8008b6c <prvProcessReceivedCommands+0x178>
                        break;
 8008b6a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b6c:	4b07      	ldr	r3, [pc, #28]	@ (8008b8c <prvProcessReceivedCommands+0x198>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	1d39      	adds	r1, r7, #4
 8008b72:	2200      	movs	r2, #0
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe fc78 	bl	800746a <xQueueReceive>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f47f af3d 	bne.w	80089fc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8008b82:	bf00      	nop
 8008b84:	bf00      	nop
 8008b86:	3720      	adds	r7, #32
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20000d94 	.word	0x20000d94

08008b90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b96:	e009      	b.n	8008bac <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b98:	4b0e      	ldr	r3, [pc, #56]	@ (8008bd4 <prvSwitchTimerLists+0x44>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8008ba2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ba6:	6838      	ldr	r0, [r7, #0]
 8008ba8:	f7ff fe14 	bl	80087d4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bac:	4b09      	ldr	r3, [pc, #36]	@ (8008bd4 <prvSwitchTimerLists+0x44>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1f0      	bne.n	8008b98 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008bb6:	4b07      	ldr	r3, [pc, #28]	@ (8008bd4 <prvSwitchTimerLists+0x44>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8008bbc:	4b06      	ldr	r3, [pc, #24]	@ (8008bd8 <prvSwitchTimerLists+0x48>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a04      	ldr	r2, [pc, #16]	@ (8008bd4 <prvSwitchTimerLists+0x44>)
 8008bc2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008bc4:	4a04      	ldr	r2, [pc, #16]	@ (8008bd8 <prvSwitchTimerLists+0x48>)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6013      	str	r3, [r2, #0]
    }
 8008bca:	bf00      	nop
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20000d8c 	.word	0x20000d8c
 8008bd8:	20000d90 	.word	0x20000d90

08008bdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008be2:	f000 f88d 	bl	8008d00 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008be6:	4b15      	ldr	r3, [pc, #84]	@ (8008c3c <prvCheckForValidListAndQueue+0x60>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d120      	bne.n	8008c30 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8008bee:	4814      	ldr	r0, [pc, #80]	@ (8008c40 <prvCheckForValidListAndQueue+0x64>)
 8008bf0:	f7fe fac6 	bl	8007180 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008bf4:	4813      	ldr	r0, [pc, #76]	@ (8008c44 <prvCheckForValidListAndQueue+0x68>)
 8008bf6:	f7fe fac3 	bl	8007180 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008bfa:	4b13      	ldr	r3, [pc, #76]	@ (8008c48 <prvCheckForValidListAndQueue+0x6c>)
 8008bfc:	4a10      	ldr	r2, [pc, #64]	@ (8008c40 <prvCheckForValidListAndQueue+0x64>)
 8008bfe:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008c00:	4b12      	ldr	r3, [pc, #72]	@ (8008c4c <prvCheckForValidListAndQueue+0x70>)
 8008c02:	4a10      	ldr	r2, [pc, #64]	@ (8008c44 <prvCheckForValidListAndQueue+0x68>)
 8008c04:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c06:	2300      	movs	r3, #0
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	4b11      	ldr	r3, [pc, #68]	@ (8008c50 <prvCheckForValidListAndQueue+0x74>)
 8008c0c:	4a11      	ldr	r2, [pc, #68]	@ (8008c54 <prvCheckForValidListAndQueue+0x78>)
 8008c0e:	2110      	movs	r1, #16
 8008c10:	200a      	movs	r0, #10
 8008c12:	f7fe fbbe 	bl	8007392 <xQueueGenericCreateStatic>
 8008c16:	4603      	mov	r3, r0
 8008c18:	4a08      	ldr	r2, [pc, #32]	@ (8008c3c <prvCheckForValidListAndQueue+0x60>)
 8008c1a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8008c1c:	4b07      	ldr	r3, [pc, #28]	@ (8008c3c <prvCheckForValidListAndQueue+0x60>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d005      	beq.n	8008c30 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c24:	4b05      	ldr	r3, [pc, #20]	@ (8008c3c <prvCheckForValidListAndQueue+0x60>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	490b      	ldr	r1, [pc, #44]	@ (8008c58 <prvCheckForValidListAndQueue+0x7c>)
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe fd68 	bl	8007700 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008c30:	f000 f878 	bl	8008d24 <vPortExitCritical>
    }
 8008c34:	bf00      	nop
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20000d94 	.word	0x20000d94
 8008c40:	20000d64 	.word	0x20000d64
 8008c44:	20000d78 	.word	0x20000d78
 8008c48:	20000d8c 	.word	0x20000d8c
 8008c4c:	20000d90 	.word	0x20000d90
 8008c50:	20000e40 	.word	0x20000e40
 8008c54:	20000da0 	.word	0x20000da0
 8008c58:	0800d450 	.word	0x0800d450

08008c5c <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c60:	4b0b      	ldr	r3, [pc, #44]	@ (8008c90 <vPortSetupTimerInterrupt+0x34>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c66:	4b0b      	ldr	r3, [pc, #44]	@ (8008c94 <vPortSetupTimerInterrupt+0x38>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c98 <vPortSetupTimerInterrupt+0x3c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a0a      	ldr	r2, [pc, #40]	@ (8008c9c <vPortSetupTimerInterrupt+0x40>)
 8008c72:	fba2 2303 	umull	r2, r3, r2, r3
 8008c76:	099b      	lsrs	r3, r3, #6
 8008c78:	4a09      	ldr	r2, [pc, #36]	@ (8008ca0 <vPortSetupTimerInterrupt+0x44>)
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8008c7e:	4b04      	ldr	r3, [pc, #16]	@ (8008c90 <vPortSetupTimerInterrupt+0x34>)
 8008c80:	2207      	movs	r2, #7
 8008c82:	601a      	str	r2, [r3, #0]
}
 8008c84:	bf00      	nop
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	e000e010 	.word	0xe000e010
 8008c94:	e000e018 	.word	0xe000e018
 8008c98:	20000000 	.word	0x20000000
 8008c9c:	10624dd3 	.word	0x10624dd3
 8008ca0:	e000e014 	.word	0xe000e014

08008ca4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8008cae:	4b0a      	ldr	r3, [pc, #40]	@ (8008cd8 <prvTaskExitError+0x34>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb6:	d003      	beq.n	8008cc0 <prvTaskExitError+0x1c>
 8008cb8:	f000 f9be 	bl	8009038 <ulSetInterruptMask>
 8008cbc:	bf00      	nop
 8008cbe:	e7fd      	b.n	8008cbc <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 8008cc0:	f000 f9ba 	bl	8009038 <ulSetInterruptMask>

    while( ulDummy == 0 )
 8008cc4:	bf00      	nop
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d0fc      	beq.n	8008cc6 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8008ccc:	bf00      	nop
 8008cce:	bf00      	nop
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20000020 	.word	0x20000020

08008cdc <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8008cdc:	b480      	push	{r7}
 8008cde:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ce0:	4b06      	ldr	r3, [pc, #24]	@ (8008cfc <vPortYield+0x20>)
 8008ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ce6:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8008ce8:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8008cec:	f3bf 8f6f 	isb	sy
}
 8008cf0:	bf00      	nop
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	e000ed04 	.word	0xe000ed04

08008d00 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008d04:	f000 f998 	bl	8009038 <ulSetInterruptMask>
    ulCriticalNesting++;
 8008d08:	4b05      	ldr	r3, [pc, #20]	@ (8008d20 <vPortEnterCritical+0x20>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	4a04      	ldr	r2, [pc, #16]	@ (8008d20 <vPortEnterCritical+0x20>)
 8008d10:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8008d12:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8008d16:	f3bf 8f6f 	isb	sy
}
 8008d1a:	bf00      	nop
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	20000020 	.word	0x20000020

08008d24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 8008d28:	4b0a      	ldr	r3, [pc, #40]	@ (8008d54 <vPortExitCritical+0x30>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d103      	bne.n	8008d38 <vPortExitCritical+0x14>
 8008d30:	f000 f982 	bl	8009038 <ulSetInterruptMask>
 8008d34:	bf00      	nop
 8008d36:	e7fd      	b.n	8008d34 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 8008d38:	4b06      	ldr	r3, [pc, #24]	@ (8008d54 <vPortExitCritical+0x30>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	4a05      	ldr	r2, [pc, #20]	@ (8008d54 <vPortExitCritical+0x30>)
 8008d40:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 8008d42:	4b04      	ldr	r3, [pc, #16]	@ (8008d54 <vPortExitCritical+0x30>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d102      	bne.n	8008d50 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	f000 f981 	bl	8009052 <vClearInterruptMask>
    }
}
 8008d50:	bf00      	nop
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20000020 	.word	0x20000020

08008d58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d5e:	f000 f96b 	bl	8009038 <ulSetInterruptMask>
 8008d62:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008d64:	f7ff f87e 	bl	8007e64 <xTaskIncrementTick>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d6e:	4b05      	ldr	r3, [pc, #20]	@ (8008d84 <xPortSysTickHandler+0x2c>)
 8008d70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d74:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f96b 	bl	8009052 <vClearInterruptMask>
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	e000ed04 	.word	0xe000ed04

08008d88 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3b02      	subs	r3, #2
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 8008d9e:	7afb      	ldrb	r3, [r7, #11]
 8008da0:	2b66      	cmp	r3, #102	@ 0x66
 8008da2:	d102      	bne.n	8008daa <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 8008da4:	f000 f914 	bl	8008fd0 <vRestoreContextOfFirstTask>
            break;
 8008da8:	e003      	b.n	8008db2 <vPortSVCHandler_C+0x2a>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 8008daa:	f000 f945 	bl	8009038 <ulSetInterruptMask>
 8008dae:	bf00      	nop
 8008db0:	e7fd      	b.n	8008dae <vPortSVCHandler_C+0x26>
    }
}
 8008db2:	bf00      	nop
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
	...

08008dbc <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3b04      	subs	r3, #4
 8008dce:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008dd6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3b04      	subs	r3, #4
 8008ddc:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3b04      	subs	r3, #4
 8008de8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 8008dea:	4a38      	ldr	r2, [pc, #224]	@ (8008ecc <pxPortInitialiseStack+0x110>)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3b04      	subs	r3, #4
 8008df4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8008dfc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3b04      	subs	r3, #4
 8008e02:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8008e0a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3b04      	subs	r3, #4
 8008e10:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8008e18:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3b04      	subs	r3, #4
 8008e1e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8008e26:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	3b04      	subs	r3, #4
 8008e2c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3b04      	subs	r3, #4
 8008e38:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8008e40:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3b04      	subs	r3, #4
 8008e46:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8008e4e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3b04      	subs	r3, #4
 8008e54:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8008e5c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	3b04      	subs	r3, #4
 8008e62:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8008e6a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	3b04      	subs	r3, #4
 8008e70:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8008e78:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3b04      	subs	r3, #4
 8008e7e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8008e86:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3b04      	subs	r3, #4
 8008e8c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8008e94:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	3b04      	subs	r3, #4
 8008e9a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8008ea2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3b04      	subs	r3, #4
 8008ea8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 8008eb0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3b04      	subs	r3, #4
 8008eb6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
    }
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	08008ca5 	.word	0x08008ca5

08008ed0 <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 8008eda:	4b35      	ldr	r3, [pc, #212]	@ (8008fb0 <xPortStartScheduler+0xe0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 8008ee0:	4b33      	ldr	r3, [pc, #204]	@ (8008fb0 <xPortStartScheduler+0xe0>)
 8008ee2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8008ee6:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 8008ee8:	4b31      	ldr	r3, [pc, #196]	@ (8008fb0 <xPortStartScheduler+0xe0>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	0e1b      	lsrs	r3, r3, #24
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	4b2d      	ldr	r3, [pc, #180]	@ (8008fb4 <xPortStartScheduler+0xe4>)
 8008efe:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8008f00:	4b2c      	ldr	r3, [pc, #176]	@ (8008fb4 <xPortStartScheduler+0xe4>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d103      	bne.n	8008f10 <xPortStartScheduler+0x40>
 8008f08:	f000 f896 	bl	8009038 <ulSetInterruptMask>
 8008f0c:	bf00      	nop
 8008f0e:	e7fd      	b.n	8008f0c <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	43db      	mvns	r3, r3
 8008f16:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00b      	beq.n	8008f36 <xPortStartScheduler+0x66>
 8008f1e:	f000 f88b 	bl	8009038 <ulSetInterruptMask>
 8008f22:	bf00      	nop
 8008f24:	e7fd      	b.n	8008f22 <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f2c:	79fb      	ldrb	r3, [r7, #7]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f36:	79fb      	ldrb	r3, [r7, #7]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f3e:	2b80      	cmp	r3, #128	@ 0x80
 8008f40:	d0f1      	beq.n	8008f26 <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b08      	cmp	r3, #8
 8008f46:	d103      	bne.n	8008f50 <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8008f48:	4b1b      	ldr	r3, [pc, #108]	@ (8008fb8 <xPortStartScheduler+0xe8>)
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	e004      	b.n	8008f5a <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f1c3 0307 	rsb	r3, r3, #7
 8008f56:	4a18      	ldr	r2, [pc, #96]	@ (8008fb8 <xPortStartScheduler+0xe8>)
 8008f58:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f5a:	4b17      	ldr	r3, [pc, #92]	@ (8008fb8 <xPortStartScheduler+0xe8>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	021b      	lsls	r3, r3, #8
 8008f60:	4a15      	ldr	r2, [pc, #84]	@ (8008fb8 <xPortStartScheduler+0xe8>)
 8008f62:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f64:	4b14      	ldr	r3, [pc, #80]	@ (8008fb8 <xPortStartScheduler+0xe8>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f6c:	4a12      	ldr	r2, [pc, #72]	@ (8008fb8 <xPortStartScheduler+0xe8>)
 8008f6e:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 8008f70:	4a0f      	ldr	r2, [pc, #60]	@ (8008fb0 <xPortStartScheduler+0xe0>)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008f76:	4b11      	ldr	r3, [pc, #68]	@ (8008fbc <xPortStartScheduler+0xec>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a10      	ldr	r2, [pc, #64]	@ (8008fbc <xPortStartScheduler+0xec>)
 8008f7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f80:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008f82:	4b0e      	ldr	r3, [pc, #56]	@ (8008fbc <xPortStartScheduler+0xec>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a0d      	ldr	r2, [pc, #52]	@ (8008fbc <xPortStartScheduler+0xec>)
 8008f88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f8c:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008f8e:	f7ff fe65 	bl	8008c5c <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8008f92:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc0 <xPortStartScheduler+0xf0>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 8008f98:	f000 f83a 	bl	8009010 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008f9c:	f7ff f872 	bl	8008084 <vTaskSwitchContext>
    prvTaskExitError();
 8008fa0:	f7ff fe80 	bl	8008ca4 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	e000ed1c 	.word	0xe000ed1c
 8008fb4:	20000e90 	.word	0x20000e90
 8008fb8:	20000e94 	.word	0x20000e94
 8008fbc:	e000ed20 	.word	0xe000ed20
 8008fc0:	20000020 	.word	0x20000020
	...

08008fd0 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8008fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8009000 <pxCurrentTCBConst2>)
 8008fd2:	6811      	ldr	r1, [r2, #0]
 8008fd4:	6808      	ldr	r0, [r1, #0]
 8008fd6:	c806      	ldmia	r0!, {r1, r2}
 8008fd8:	f381 880b 	msr	PSPLIM, r1
 8008fdc:	2102      	movs	r1, #2
 8008fde:	f381 8814 	msr	CONTROL, r1
 8008fe2:	3020      	adds	r0, #32
 8008fe4:	f380 8809 	msr	PSP, r0
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f04f 0000 	mov.w	r0, #0
 8008ff0:	f380 8811 	msr	BASEPRI, r0
 8008ff4:	4710      	bx	r2
 8008ff6:	bf00      	nop
 8008ff8:	f3af 8000 	nop.w
 8008ffc:	f3af 8000 	nop.w

08009000 <pxCurrentTCBConst2>:
 8009000:	20000864 	.word	0x20000864
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 8009004:	bf00      	nop
 8009006:	bf00      	nop
	...

08009010 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009010:	4807      	ldr	r0, [pc, #28]	@ (8009030 <xVTORConst>)
 8009012:	6800      	ldr	r0, [r0, #0]
 8009014:	6800      	ldr	r0, [r0, #0]
 8009016:	f380 8808 	msr	MSP, r0
 800901a:	b662      	cpsie	i
 800901c:	b661      	cpsie	f
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	df66      	svc	102	@ 0x66
 8009028:	bf00      	nop
 800902a:	bf00      	nop
 800902c:	f3af 8000 	nop.w

08009030 <xVTORConst>:
 8009030:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8009034:	bf00      	nop
 8009036:	bf00      	nop

08009038 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009038:	f3ef 8011 	mrs	r0, BASEPRI
 800903c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8009040:	f381 8811 	msr	BASEPRI, r1
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800904e:	bf00      	nop
 8009050:	4618      	mov	r0, r3

08009052 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009052:	f380 8811 	msr	BASEPRI, r0
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 8009060:	bf00      	nop
	...

08009070 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8009070:	f3ef 8009 	mrs	r0, PSP
 8009074:	f3ef 820b 	mrs	r2, PSPLIM
 8009078:	4673      	mov	r3, lr
 800907a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800907e:	4a10      	ldr	r2, [pc, #64]	@ (80090c0 <pxCurrentTCBConst>)
 8009080:	6811      	ldr	r1, [r2, #0]
 8009082:	6008      	str	r0, [r1, #0]
 8009084:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009088:	f380 8811 	msr	BASEPRI, r0
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f7fe fff6 	bl	8008084 <vTaskSwitchContext>
 8009098:	f04f 0000 	mov.w	r0, #0
 800909c:	f380 8811 	msr	BASEPRI, r0
 80090a0:	4a07      	ldr	r2, [pc, #28]	@ (80090c0 <pxCurrentTCBConst>)
 80090a2:	6811      	ldr	r1, [r2, #0]
 80090a4:	6808      	ldr	r0, [r1, #0]
 80090a6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80090aa:	f382 880b 	msr	PSPLIM, r2
 80090ae:	f380 8809 	msr	PSP, r0
 80090b2:	4718      	bx	r3
 80090b4:	f3af 8000 	nop.w
 80090b8:	f3af 8000 	nop.w
 80090bc:	f3af 8000 	nop.w

080090c0 <pxCurrentTCBConst>:
 80090c0:	20000864 	.word	0x20000864
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 80090c4:	bf00      	nop
 80090c6:	bf00      	nop
	...

080090d0 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 80090d0:	f01e 0f04 	tst.w	lr, #4
 80090d4:	bf0c      	ite	eq
 80090d6:	f3ef 8008 	mrseq	r0, MSP
 80090da:	f3ef 8009 	mrsne	r0, PSP
 80090de:	4904      	ldr	r1, [pc, #16]	@ (80090f0 <svchandler_address_const>)
 80090e0:	4708      	bx	r1
 80090e2:	bf00      	nop
 80090e4:	f3af 8000 	nop.w
 80090e8:	f3af 8000 	nop.w
 80090ec:	f3af 8000 	nop.w

080090f0 <svchandler_address_const>:
 80090f0:	08008d89 	.word	0x08008d89
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 80090f4:	bf00      	nop
 80090f6:	bf00      	nop

080090f8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8009100:	2300      	movs	r3, #0
 8009102:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8009104:	f7fe fda2 	bl	8007c4c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8009108:	4b54      	ldr	r3, [pc, #336]	@ (800925c <pvPortMalloc+0x164>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8009110:	f000 f8f8 	bl	8009304 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d022      	beq.n	8009160 <pvPortMalloc+0x68>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800911a:	2308      	movs	r3, #8
 800911c:	43db      	mvns	r3, r3
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	429a      	cmp	r2, r3
 8009122:	d81b      	bhi.n	800915c <pvPortMalloc+0x64>
            {
                xWantedSize += xHeapStructSize;
 8009124:	2208      	movs	r2, #8
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4413      	add	r3, r2
 800912a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f003 0307 	and.w	r3, r3, #7
 8009132:	2b00      	cmp	r3, #0
 8009134:	d014      	beq.n	8009160 <pvPortMalloc+0x68>
                {
                    /* Byte alignment required. */
                    xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f003 0307 	and.w	r3, r3, #7
 800913c:	f1c3 0308 	rsb	r3, r3, #8
 8009140:	613b      	str	r3, [r7, #16]

                    if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	43db      	mvns	r3, r3
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	429a      	cmp	r2, r3
 800914a:	d804      	bhi.n	8009156 <pvPortMalloc+0x5e>
                    {
                        xWantedSize += xAdditionalRequiredSize;
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	4413      	add	r3, r2
 8009152:	607b      	str	r3, [r7, #4]
 8009154:	e004      	b.n	8009160 <pvPortMalloc+0x68>
                    }
                    else
                    {
                        xWantedSize = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	607b      	str	r3, [r7, #4]
 800915a:	e001      	b.n	8009160 <pvPortMalloc+0x68>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	db69      	blt.n	800923a <pvPortMalloc+0x142>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d066      	beq.n	800923a <pvPortMalloc+0x142>
 800916c:	4b3c      	ldr	r3, [pc, #240]	@ (8009260 <pvPortMalloc+0x168>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	429a      	cmp	r2, r3
 8009174:	d861      	bhi.n	800923a <pvPortMalloc+0x142>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009176:	4b3b      	ldr	r3, [pc, #236]	@ (8009264 <pvPortMalloc+0x16c>)
 8009178:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800917a:	4b3a      	ldr	r3, [pc, #232]	@ (8009264 <pvPortMalloc+0x16c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009180:	e004      	b.n	800918c <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	429a      	cmp	r2, r3
 8009194:	d903      	bls.n	800919e <pvPortMalloc+0xa6>
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1f1      	bne.n	8009182 <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800919e:	4b2f      	ldr	r3, [pc, #188]	@ (800925c <pvPortMalloc+0x164>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69fa      	ldr	r2, [r7, #28]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d048      	beq.n	800923a <pvPortMalloc+0x142>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2208      	movs	r2, #8
 80091ae:	4413      	add	r3, r2
 80091b0:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	1ad2      	subs	r2, r2, r3
 80091c2:	2308      	movs	r3, #8
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d918      	bls.n	80091fc <pvPortMalloc+0x104>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091ca:	69fa      	ldr	r2, [r7, #28]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4413      	add	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f003 0307 	and.w	r3, r3, #7
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <pvPortMalloc+0xec>
 80091dc:	f7ff ff2c 	bl	8009038 <ulSetInterruptMask>
 80091e0:	bf00      	nop
 80091e2:	e7fd      	b.n	80091e0 <pvPortMalloc+0xe8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	1ad2      	subs	r2, r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 f8e0 	bl	80093bc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091fc:	4b18      	ldr	r3, [pc, #96]	@ (8009260 <pvPortMalloc+0x168>)
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	4a16      	ldr	r2, [pc, #88]	@ (8009260 <pvPortMalloc+0x168>)
 8009208:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800920a:	4b15      	ldr	r3, [pc, #84]	@ (8009260 <pvPortMalloc+0x168>)
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b16      	ldr	r3, [pc, #88]	@ (8009268 <pvPortMalloc+0x170>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	429a      	cmp	r2, r3
 8009214:	d203      	bcs.n	800921e <pvPortMalloc+0x126>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009216:	4b12      	ldr	r3, [pc, #72]	@ (8009260 <pvPortMalloc+0x168>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a13      	ldr	r2, [pc, #76]	@ (8009268 <pvPortMalloc+0x170>)
 800921c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	2200      	movs	r2, #0
 800922e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8009230:	4b0e      	ldr	r3, [pc, #56]	@ (800926c <pvPortMalloc+0x174>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3301      	adds	r3, #1
 8009236:	4a0d      	ldr	r2, [pc, #52]	@ (800926c <pvPortMalloc+0x174>)
 8009238:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800923a:	f7fe fd15 	bl	8007c68 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f003 0307 	and.w	r3, r3, #7
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <pvPortMalloc+0x158>
 8009248:	f7ff fef6 	bl	8009038 <ulSetInterruptMask>
 800924c:	bf00      	nop
 800924e:	e7fd      	b.n	800924c <pvPortMalloc+0x154>
    return pvReturn;
 8009250:	697b      	ldr	r3, [r7, #20]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3720      	adds	r7, #32
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20002ea0 	.word	0x20002ea0
 8009260:	20002ea4 	.word	0x20002ea4
 8009264:	20002e98 	.word	0x20002e98
 8009268:	20002ea8 	.word	0x20002ea8
 800926c:	20002eac 	.word	0x20002eac

08009270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d037      	beq.n	80092f2 <vPortFree+0x82>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8009282:	2308      	movs	r3, #8
 8009284:	425b      	negs	r3, r3
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	4413      	add	r3, r2
 800928a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	db03      	blt.n	80092a0 <vPortFree+0x30>
 8009298:	f7ff fece 	bl	8009038 <ulSetInterruptMask>
 800929c:	bf00      	nop
 800929e:	e7fd      	b.n	800929c <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <vPortFree+0x40>
 80092a8:	f7ff fec6 	bl	8009038 <ulSetInterruptMask>
 80092ac:	bf00      	nop
 80092ae:	e7fd      	b.n	80092ac <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	da1c      	bge.n	80092f2 <vPortFree+0x82>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d118      	bne.n	80092f2 <vPortFree+0x82>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80092cc:	f7fe fcbe 	bl	8007c4c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	4b09      	ldr	r3, [pc, #36]	@ (80092fc <vPortFree+0x8c>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4413      	add	r3, r2
 80092da:	4a08      	ldr	r2, [pc, #32]	@ (80092fc <vPortFree+0x8c>)
 80092dc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80092de:	68b8      	ldr	r0, [r7, #8]
 80092e0:	f000 f86c 	bl	80093bc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80092e4:	4b06      	ldr	r3, [pc, #24]	@ (8009300 <vPortFree+0x90>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3301      	adds	r3, #1
 80092ea:	4a05      	ldr	r2, [pc, #20]	@ (8009300 <vPortFree+0x90>)
 80092ec:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80092ee:	f7fe fcbb 	bl	8007c68 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80092f2:	bf00      	nop
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20002ea4 	.word	0x20002ea4
 8009300:	20002eb0 	.word	0x20002eb0

08009304 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800930a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800930e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009310:	4b25      	ldr	r3, [pc, #148]	@ (80093a8 <prvHeapInit+0xa4>)
 8009312:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f003 0307 	and.w	r3, r3, #7
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00c      	beq.n	8009338 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3307      	adds	r3, #7
 8009322:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f023 0307 	bic.w	r3, r3, #7
 800932a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	4a1d      	ldr	r2, [pc, #116]	@ (80093a8 <prvHeapInit+0xa4>)
 8009334:	4413      	add	r3, r2
 8009336:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800933c:	4a1b      	ldr	r2, [pc, #108]	@ (80093ac <prvHeapInit+0xa8>)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8009342:	4b1a      	ldr	r3, [pc, #104]	@ (80093ac <prvHeapInit+0xa8>)
 8009344:	2200      	movs	r2, #0
 8009346:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ( pucAlignedHeap + xTotalHeapSize );
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	4413      	add	r3, r2
 800934e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8009350:	2208      	movs	r2, #8
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	1a9b      	subs	r3, r3, r2
 8009356:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f023 0307 	bic.w	r3, r3, #7
 800935e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4a13      	ldr	r2, [pc, #76]	@ (80093b0 <prvHeapInit+0xac>)
 8009364:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009366:	4b12      	ldr	r3, [pc, #72]	@ (80093b0 <prvHeapInit+0xac>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2200      	movs	r2, #0
 800936c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800936e:	4b10      	ldr	r3, [pc, #64]	@ (80093b0 <prvHeapInit+0xac>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2200      	movs	r2, #0
 8009374:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	1ad2      	subs	r2, r2, r3
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009384:	4b0a      	ldr	r3, [pc, #40]	@ (80093b0 <prvHeapInit+0xac>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	4a08      	ldr	r2, [pc, #32]	@ (80093b4 <prvHeapInit+0xb0>)
 8009392:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	4a07      	ldr	r2, [pc, #28]	@ (80093b8 <prvHeapInit+0xb4>)
 800939a:	6013      	str	r3, [r2, #0]
}
 800939c:	bf00      	nop
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr
 80093a8:	20000e98 	.word	0x20000e98
 80093ac:	20002e98 	.word	0x20002e98
 80093b0:	20002ea0 	.word	0x20002ea0
 80093b4:	20002ea8 	.word	0x20002ea8
 80093b8:	20002ea4 	.word	0x20002ea4

080093bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093c4:	4b28      	ldr	r3, [pc, #160]	@ (8009468 <prvInsertBlockIntoFreeList+0xac>)
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	e002      	b.n	80093d0 <prvInsertBlockIntoFreeList+0x14>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	60fb      	str	r3, [r7, #12]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d8f7      	bhi.n	80093ca <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	4413      	add	r3, r2
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d108      	bne.n	80093fe <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	441a      	add	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	441a      	add	r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	d118      	bne.n	8009444 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	4b15      	ldr	r3, [pc, #84]	@ (800946c <prvInsertBlockIntoFreeList+0xb0>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	429a      	cmp	r2, r3
 800941c:	d00d      	beq.n	800943a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685a      	ldr	r2, [r3, #4]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	441a      	add	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	e008      	b.n	800944c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800943a:	4b0c      	ldr	r3, [pc, #48]	@ (800946c <prvInsertBlockIntoFreeList+0xb0>)
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	e003      	b.n	800944c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	429a      	cmp	r2, r3
 8009452:	d002      	beq.n	800945a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800945a:	bf00      	nop
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	20002e98 	.word	0x20002e98
 800946c:	20002ea0 	.word	0x20002ea0

08009470 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009476:	1d3b      	adds	r3, r7, #4
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	605a      	str	r2, [r3, #4]
 800947e:	609a      	str	r2, [r3, #8]
 8009480:	60da      	str	r2, [r3, #12]
 8009482:	611a      	str	r2, [r3, #16]

    /* ---- RESET (active low) ---- */
    GPIO_InitStruct.Pin   = RESET_WINC_Pin;
 8009484:	2301      	movs	r3, #1
 8009486:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8009488:	2301      	movs	r3, #1
 800948a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009490:	2300      	movs	r3, #0
 8009492:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(RESET_WINC_GPIO_Port, &GPIO_InitStruct);
 8009494:	1d3b      	adds	r3, r7, #4
 8009496:	4619      	mov	r1, r3
 8009498:	4815      	ldr	r0, [pc, #84]	@ (80094f0 <init_chip_pins+0x80>)
 800949a:	f7f8 fcbf 	bl	8001e1c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(RESET_WINC_GPIO_Port, RESET_WINC_Pin, GPIO_PIN_RESET);
 800949e:	2200      	movs	r2, #0
 80094a0:	2101      	movs	r1, #1
 80094a2:	4813      	ldr	r0, [pc, #76]	@ (80094f0 <init_chip_pins+0x80>)
 80094a4:	f7f8 fe18 	bl	80020d8 <HAL_GPIO_WritePin>

    /* ---- CHIP ENABLE ---- */
    GPIO_InitStruct.Pin = CHIP_EN_WINC_Pin;
 80094a8:	2302      	movs	r3, #2
 80094aa:	607b      	str	r3, [r7, #4]
    /* same Mode/Pull/Speed as above */
    HAL_GPIO_Init(CHIP_EN_WINC_GPIO_Port, &GPIO_InitStruct);
 80094ac:	1d3b      	adds	r3, r7, #4
 80094ae:	4619      	mov	r1, r3
 80094b0:	480f      	ldr	r0, [pc, #60]	@ (80094f0 <init_chip_pins+0x80>)
 80094b2:	f7f8 fcb3 	bl	8001e1c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(CHIP_EN_WINC_GPIO_Port, CHIP_EN_WINC_Pin, GPIO_PIN_RESET);
 80094b6:	2200      	movs	r2, #0
 80094b8:	2102      	movs	r1, #2
 80094ba:	480d      	ldr	r0, [pc, #52]	@ (80094f0 <init_chip_pins+0x80>)
 80094bc:	f7f8 fe0c 	bl	80020d8 <HAL_GPIO_WritePin>

    /* perform a hardware reset pulse */
    HAL_Delay(50);
 80094c0:	2032      	movs	r0, #50	@ 0x32
 80094c2:	f7f8 fa95 	bl	80019f0 <HAL_Delay>
    HAL_GPIO_WritePin(CHIP_EN_WINC_GPIO_Port, CHIP_EN_WINC_Pin, GPIO_PIN_SET);
 80094c6:	2201      	movs	r2, #1
 80094c8:	2102      	movs	r1, #2
 80094ca:	4809      	ldr	r0, [pc, #36]	@ (80094f0 <init_chip_pins+0x80>)
 80094cc:	f7f8 fe04 	bl	80020d8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80094d0:	2032      	movs	r0, #50	@ 0x32
 80094d2:	f7f8 fa8d 	bl	80019f0 <HAL_Delay>
    HAL_GPIO_WritePin(RESET_WINC_GPIO_Port, RESET_WINC_Pin, GPIO_PIN_SET);
 80094d6:	2201      	movs	r2, #1
 80094d8:	2101      	movs	r1, #1
 80094da:	4805      	ldr	r0, [pc, #20]	@ (80094f0 <init_chip_pins+0x80>)
 80094dc:	f7f8 fdfc 	bl	80020d8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80094e0:	2064      	movs	r0, #100	@ 0x64
 80094e2:	f7f8 fa85 	bl	80019f0 <HAL_Delay>
}
 80094e6:	bf00      	nop
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	42020400 	.word	0x42020400

080094f4 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 80094f8:	f7ff ffba 	bl	8009470 <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 80094fc:	f000 f804 	bl	8009508 <nm_bsp_reset>

	return M2M_SUCCESS;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	bd80      	pop	{r7, pc}
	...

08009508 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
    /* Set Power sequence of GPIO lines */
    /* -------------------------------- */

    /* Power enable (3.3V) - 3V3_DC2DC_EN output */
    HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_SET);
 800950c:	2201      	movs	r2, #1
 800950e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009512:	4811      	ldr	r0, [pc, #68]	@ (8009558 <nm_bsp_reset+0x50>)
 8009514:	f7f8 fde0 	bl	80020d8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8009518:	2064      	movs	r0, #100	@ 0x64
 800951a:	f7f8 fa69 	bl	80019f0 <HAL_Delay>

    /* Level Shifter Translate enable - LEVEL_TRNSLT_EN output */
    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_RESET);
 800951e:	2200      	movs	r2, #0
 8009520:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009524:	480d      	ldr	r0, [pc, #52]	@ (800955c <nm_bsp_reset+0x54>)
 8009526:	f7f8 fdd7 	bl	80020d8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800952a:	2064      	movs	r0, #100	@ 0x64
 800952c:	f7f8 fa60 	bl	80019f0 <HAL_Delay>

    /* Set CHIP enable */
   // HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 8009530:	2201      	movs	r2, #1
 8009532:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009536:	4808      	ldr	r0, [pc, #32]	@ (8009558 <nm_bsp_reset+0x50>)
 8009538:	f7f8 fdce 	bl	80020d8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800953c:	2064      	movs	r0, #100	@ 0x64
 800953e:	f7f8 fa57 	bl	80019f0 <HAL_Delay>

    /* Set RSTN 1.8V */
    HAL_GPIO_WritePin(GPIOC,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 8009542:	2201      	movs	r2, #1
 8009544:	2180      	movs	r1, #128	@ 0x80
 8009546:	4805      	ldr	r0, [pc, #20]	@ (800955c <nm_bsp_reset+0x54>)
 8009548:	f7f8 fdc6 	bl	80020d8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800954c:	2064      	movs	r0, #100	@ 0x64
 800954e:	f7f8 fa4f 	bl	80019f0 <HAL_Delay>

}
 8009552:	bf00      	nop
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	42020000 	.word	0x42020000
 800955c:	42020800 	.word	0x42020800

08009560 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f7f8 fa41 	bl	80019f0 <HAL_Delay>
}
 800956e:	bf00      	nop
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
	...

08009578 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b088      	sub	sp, #32
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    /* EXTI2 init ISR function - called from nm_bsp_register_isr() */

     __GPIOC_CLK_ENABLE();
 8009580:	4b13      	ldr	r3, [pc, #76]	@ (80095d0 <nm_bsp_register_isr+0x58>)
 8009582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009586:	4a12      	ldr	r2, [pc, #72]	@ (80095d0 <nm_bsp_register_isr+0x58>)
 8009588:	f043 0304 	orr.w	r3, r3, #4
 800958c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009590:	4b0f      	ldr	r3, [pc, #60]	@ (80095d0 <nm_bsp_register_isr+0x58>)
 8009592:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009596:	f003 0304 	and.w	r3, r3, #4
 800959a:	60bb      	str	r3, [r7, #8]
 800959c:	68bb      	ldr	r3, [r7, #8]
	 //__GPIOA_CLK_ENABLE();

    /*Configure GPIO pin : PA2 */
    GPIO_InitStruct.Pin   = CONF_WINC_SPI_INT_PIN;
 800959e:	2301      	movs	r3, #1
 80095a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80095a2:	4b0c      	ldr	r3, [pc, #48]	@ (80095d4 <nm_bsp_register_isr+0x5c>)
 80095a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80095a6:	2300      	movs	r3, #0
 80095a8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80095aa:	f107 030c 	add.w	r3, r7, #12
 80095ae:	4619      	mov	r1, r3
 80095b0:	4809      	ldr	r0, [pc, #36]	@ (80095d8 <nm_bsp_register_isr+0x60>)
 80095b2:	f7f8 fc33 	bl	8001e1c <HAL_GPIO_Init>

    /* EXTI 2 (PA2) interrupt init*/
    HAL_NVIC_SetPriority(CONF_WINC_EXTI_IRQN, 0x00, 0);
 80095b6:	2200      	movs	r2, #0
 80095b8:	2100      	movs	r1, #0
 80095ba:	200b      	movs	r0, #11
 80095bc:	f7f8 fb18 	bl	8001bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CONF_WINC_EXTI_IRQN);
 80095c0:	200b      	movs	r0, #11
 80095c2:	f7f8 fb2f 	bl	8001c24 <HAL_NVIC_EnableIRQ>
	/* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
#endif

}
 80095c6:	bf00      	nop
 80095c8:	3720      	adds	r7, #32
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	44020c00 	.word	0x44020c00
 80095d4:	10210000 	.word	0x10210000
 80095d8:	42020400 	.word	0x42020400

080095dc <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	71fb      	strb	r3, [r7, #7]
    if (1 == u8Enable)
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d108      	bne.n	80095fe <nm_bsp_interrupt_ctrl+0x22>
    {
        HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x01, 0);
 80095ec:	2200      	movs	r2, #0
 80095ee:	2101      	movs	r1, #1
 80095f0:	200b      	movs	r0, #11
 80095f2:	f7f8 fafd 	bl	8001bf0 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 80095f6:	200b      	movs	r0, #11
 80095f8:	f7f8 fb14 	bl	8001c24 <HAL_NVIC_EnableIRQ>
    }
    else
    {
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
    }
}
 80095fc:	e002      	b.n	8009604 <nm_bsp_interrupt_ctrl+0x28>
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 80095fe:	200b      	movs	r0, #11
 8009600:	f7f8 fb1e 	bl	8001c40 <HAL_NVIC_DisableIRQ>
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	4603      	mov	r3, r0
 8009614:	71fb      	strb	r3, [r7, #7]
    if (select)
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d005      	beq.n	8009628 <spi_select_slave+0x1c>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 800961c:	2200      	movs	r2, #0
 800961e:	2110      	movs	r1, #16
 8009620:	4806      	ldr	r0, [pc, #24]	@ (800963c <spi_select_slave+0x30>)
 8009622:	f7f8 fd59 	bl	80020d8 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 8009626:	e004      	b.n	8009632 <spi_select_slave+0x26>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 8009628:	2201      	movs	r2, #1
 800962a:	2110      	movs	r1, #16
 800962c:	4803      	ldr	r0, [pc, #12]	@ (800963c <spi_select_slave+0x30>)
 800962e:	f7f8 fd53 	bl	80020d8 <HAL_GPIO_WritePin>
}
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	42020000 	.word	0x42020000

08009640 <spi_rw>:
	return M2M_SUCCESS;
}
#else

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b088      	sub	sp, #32
 8009644:	af02      	add	r7, sp, #8
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	4613      	mov	r3, r2
 800964c:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;
   
    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 800964e:	2001      	movs	r0, #1
 8009650:	f7ff ffdc 	bl	800960c <spi_select_slave>
    
    
    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10b      	bne.n	8009672 <spi_rw+0x32>
	{
		status = HAL_SPI_TransmitReceive(&hspiWifi,spiDummyBuf,pu8Miso,u16Sz,1000);
 800965a:	88fb      	ldrh	r3, [r7, #6]
 800965c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009660:	9200      	str	r2, [sp, #0]
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	491a      	ldr	r1, [pc, #104]	@ (80096d0 <spi_rw+0x90>)
 8009666:	481b      	ldr	r0, [pc, #108]	@ (80096d4 <spi_rw+0x94>)
 8009668:	f7fb ff58 	bl	800551c <HAL_SPI_TransmitReceive>
 800966c:	4603      	mov	r3, r0
 800966e:	75fb      	strb	r3, [r7, #23]
 8009670:	e01f      	b.n	80096b2 <spi_rw+0x72>
    }
    else if(pu8Miso == NULL)
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d111      	bne.n	800969c <spi_rw+0x5c>
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,spiDummyBuf,u16Sz,1000);
 8009678:	88fb      	ldrh	r3, [r7, #6]
 800967a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800967e:	9200      	str	r2, [sp, #0]
 8009680:	4a13      	ldr	r2, [pc, #76]	@ (80096d0 <spi_rw+0x90>)
 8009682:	68f9      	ldr	r1, [r7, #12]
 8009684:	4813      	ldr	r0, [pc, #76]	@ (80096d4 <spi_rw+0x94>)
 8009686:	f7fb ff49 	bl	800551c <HAL_SPI_TransmitReceive>
 800968a:	4603      	mov	r3, r0
 800968c:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 800968e:	88fb      	ldrh	r3, [r7, #6]
 8009690:	461a      	mov	r2, r3
 8009692:	2100      	movs	r1, #0
 8009694:	480e      	ldr	r0, [pc, #56]	@ (80096d0 <spi_rw+0x90>)
 8009696:	f003 f8b3 	bl	800c800 <memset>
 800969a:	e00a      	b.n	80096b2 <spi_rw+0x72>
    }
    else
    {     
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,pu8Miso,u16Sz,1000);
 800969c:	88fb      	ldrh	r3, [r7, #6]
 800969e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80096a2:	9200      	str	r2, [sp, #0]
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	68f9      	ldr	r1, [r7, #12]
 80096a8:	480a      	ldr	r0, [pc, #40]	@ (80096d4 <spi_rw+0x94>)
 80096aa:	f7fb ff37 	bl	800551c <HAL_SPI_TransmitReceive>
 80096ae:	4603      	mov	r3, r0
 80096b0:	75fb      	strb	r3, [r7, #23]
    } 
    
    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 80096b2:	7dfb      	ldrb	r3, [r7, #23]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <spi_rw+0x7e>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
        return status;
 80096b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096bc:	e003      	b.n	80096c6 <spi_rw+0x86>
    }
    
  	spi_select_slave(false);
 80096be:	2000      	movs	r0, #0
 80096c0:	f7ff ffa4 	bl	800960c <spi_select_slave>

	return M2M_SUCCESS;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20002f44 	.word	0x20002f44
 80096d4:	20002eb4 	.word	0x20002eb4

080096d8 <nm_spi_rw>:

/**
 * @brief  Expose nm_spi_rw to the WINC1500 driver.
 */
sint8 nm_spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	4613      	mov	r3, r2
 80096e4:	80fb      	strh	r3, [r7, #6]
    return spi_rw(pu8Mosi, pu8Miso, u16Sz);
 80096e6:	88fb      	ldrh	r3, [r7, #6]
 80096e8:	461a      	mov	r2, r3
 80096ea:	68b9      	ldr	r1, [r7, #8]
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f7ff ffa7 	bl	8009640 <spi_rw>
 80096f2:	4603      	mov	r3, r0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
 8009704:	2300      	movs	r3, #0
 8009706:	73fb      	strb	r3, [r7, #15]

	 /* WiFi SPI init function - called from nm_bus_init() */

	hspiWifi.Instance			   = SPI_WIFI;
 8009708:	4b19      	ldr	r3, [pc, #100]	@ (8009770 <nm_bus_init+0x74>)
 800970a:	4a1a      	ldr	r2, [pc, #104]	@ (8009774 <nm_bus_init+0x78>)
 800970c:	601a      	str	r2, [r3, #0]
	hspiWifi.Init.Mode			   = SPI_MODE_MASTER;
 800970e:	4b18      	ldr	r3, [pc, #96]	@ (8009770 <nm_bus_init+0x74>)
 8009710:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8009714:	605a      	str	r2, [r3, #4]
	hspiWifi.Init.Direction 	   = SPI_DIRECTION_2LINES;
 8009716:	4b16      	ldr	r3, [pc, #88]	@ (8009770 <nm_bus_init+0x74>)
 8009718:	2200      	movs	r2, #0
 800971a:	609a      	str	r2, [r3, #8]
	hspiWifi.Init.DataSize		   = SPI_DATASIZE_8BIT;
 800971c:	4b14      	ldr	r3, [pc, #80]	@ (8009770 <nm_bus_init+0x74>)
 800971e:	2207      	movs	r2, #7
 8009720:	60da      	str	r2, [r3, #12]
	hspiWifi.Init.CLKPolarity	   = SPI_POLARITY_LOW;
 8009722:	4b13      	ldr	r3, [pc, #76]	@ (8009770 <nm_bus_init+0x74>)
 8009724:	2200      	movs	r2, #0
 8009726:	611a      	str	r2, [r3, #16]
	hspiWifi.Init.CLKPhase		   = SPI_PHASE_1EDGE;
 8009728:	4b11      	ldr	r3, [pc, #68]	@ (8009770 <nm_bus_init+0x74>)
 800972a:	2200      	movs	r2, #0
 800972c:	615a      	str	r2, [r3, #20]
	hspiWifi.Init.NSS			   = SPI_NSS_SOFT;
 800972e:	4b10      	ldr	r3, [pc, #64]	@ (8009770 <nm_bus_init+0x74>)
 8009730:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8009734:	619a      	str	r2, [r3, #24]
	hspiWifi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8009736:	4b0e      	ldr	r3, [pc, #56]	@ (8009770 <nm_bus_init+0x74>)
 8009738:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800973c:	61da      	str	r2, [r3, #28]
	hspiWifi.Init.FirstBit		   = SPI_FIRSTBIT_MSB;
 800973e:	4b0c      	ldr	r3, [pc, #48]	@ (8009770 <nm_bus_init+0x74>)
 8009740:	2200      	movs	r2, #0
 8009742:	621a      	str	r2, [r3, #32]
	hspiWifi.Init.TIMode		   = SPI_TIMODE_DISABLE;
 8009744:	4b0a      	ldr	r3, [pc, #40]	@ (8009770 <nm_bus_init+0x74>)
 8009746:	2200      	movs	r2, #0
 8009748:	625a      	str	r2, [r3, #36]	@ 0x24
	hspiWifi.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 800974a:	4b09      	ldr	r3, [pc, #36]	@ (8009770 <nm_bus_init+0x74>)
 800974c:	2200      	movs	r2, #0
 800974e:	629a      	str	r2, [r3, #40]	@ 0x28
	hspiWifi.Init.CRCPolynomial    = 10;
 8009750:	4b07      	ldr	r3, [pc, #28]	@ (8009770 <nm_bus_init+0x74>)
 8009752:	220a      	movs	r2, #10
 8009754:	62da      	str	r2, [r3, #44]	@ 0x2c
//	  hspiWifi.Init.CRCLength		 = SPI_CRC_LENGTH_DATASIZE;
//	  hspiWifi.Init.NSSPMode		 = SPI_NSS_PULSE_DISABLE;
	if (HAL_SPI_Init(&hspiWifi) != HAL_OK)
 8009756:	4806      	ldr	r0, [pc, #24]	@ (8009770 <nm_bus_init+0x74>)
 8009758:	f7fb fde0 	bl	800531c <HAL_SPI_Init>
	{
		M2M_ERR("SPI bus Initialization error\r\n");
	}

	HAL_SPI_MspInit(&hspiWifi);
 800975c:	4804      	ldr	r0, [pc, #16]	@ (8009770 <nm_bus_init+0x74>)
 800975e:	f7f7 fb3d 	bl	8000ddc <HAL_SPI_MspInit>
	return result;
 8009762:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	20002eb4 	.word	0x20002eb4
 8009774:	40013000 	.word	0x40013000

08009778 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 8009778:	b480      	push	{r7}
 800977a:	af00      	add	r7, sp, #0
	return M2M_SUCCESS;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d010      	beq.n	80097bc <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	781a      	ldrb	r2, [r3, #0]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	701a      	strb	r2, [r3, #0]
		pDst++;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	3301      	adds	r3, #1
 80097a6:	60fb      	str	r3, [r7, #12]
		pSrc++;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	3301      	adds	r3, #1
 80097ac:	60bb      	str	r3, [r7, #8]
	}while(--sz);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	607b      	str	r3, [r7, #4]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1ef      	bne.n	800979a <m2m_memcpy+0x12>
 80097ba:	e000      	b.n	80097be <m2m_memcpy+0x36>
	if(sz == 0) return;
 80097bc:	bf00      	nop
}
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	460b      	mov	r3, r1
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	72fb      	strb	r3, [r7, #11]
	if(sz == 0) return;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00c      	beq.n	80097f6 <m2m_memset+0x2e>
	do
	{
		*pBuf = val;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	7afa      	ldrb	r2, [r7, #11]
 80097e0:	701a      	strb	r2, [r3, #0]
		pBuf++;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3301      	adds	r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]
	}while(--sz);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	607b      	str	r3, [r7, #4]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1f3      	bne.n	80097dc <m2m_memset+0x14>
 80097f4:	e000      	b.n	80097f8 <m2m_memset+0x30>
	if(sz == 0) return;
 80097f6:	bf00      	nop
}
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
 8009802:	b480      	push	{r7}
 8009804:	b085      	sub	sp, #20
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
 800980a:	2300      	movs	r3, #0
 800980c:	81fb      	strh	r3, [r7, #14]
	while(*pcStr)
 800980e:	e005      	b.n	800981c <m2m_strlen+0x1a>
	{
		u16StrLen ++;
 8009810:	89fb      	ldrh	r3, [r7, #14]
 8009812:	3301      	adds	r3, #1
 8009814:	81fb      	strh	r3, [r7, #14]
		pcStr++;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	3301      	adds	r3, #1
 800981a:	607b      	str	r3, [r7, #4]
	while(*pcStr)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1f5      	bne.n	8009810 <m2m_strlen+0xe>
	}
	return u16StrLen;
 8009824:	89fb      	ldrh	r3, [r7, #14]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <hexchar_2_val>:
	return s8Result;
}

/* Convert hexchar to value 0-15 */
static uint8 hexchar_2_val(uint8 ch)
{
 8009832:	b480      	push	{r7}
 8009834:	b083      	sub	sp, #12
 8009836:	af00      	add	r7, sp, #0
 8009838:	4603      	mov	r3, r0
 800983a:	71fb      	strb	r3, [r7, #7]
    /* ch -= '0' */
    ch -= 0x30;
 800983c:	79fb      	ldrb	r3, [r7, #7]
 800983e:	3b30      	subs	r3, #48	@ 0x30
 8009840:	71fb      	strb	r3, [r7, #7]
    if(ch <= 9)
 8009842:	79fb      	ldrb	r3, [r7, #7]
 8009844:	2b09      	cmp	r3, #9
 8009846:	d801      	bhi.n	800984c <hexchar_2_val+0x1a>
        return ch;
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	e00e      	b.n	800986a <hexchar_2_val+0x38>
    /* OR with 0x20 to convert upper case to lower case. */
    ch |= 0x20;
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	f043 0320 	orr.w	r3, r3, #32
 8009852:	71fb      	strb	r3, [r7, #7]
    /* ch -= ('a'-'0') */
    ch -= 0x31;
 8009854:	79fb      	ldrb	r3, [r7, #7]
 8009856:	3b31      	subs	r3, #49	@ 0x31
 8009858:	71fb      	strb	r3, [r7, #7]
    if(ch <= 5)
 800985a:	79fb      	ldrb	r3, [r7, #7]
 800985c:	2b05      	cmp	r3, #5
 800985e:	d803      	bhi.n	8009868 <hexchar_2_val+0x36>
        return ch + 10;
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	330a      	adds	r3, #10
 8009864:	b2db      	uxtb	r3, r3
 8009866:	e000      	b.n	800986a <hexchar_2_val+0x38>
    return 0xFF;
 8009868:	23ff      	movs	r3, #255	@ 0xff
}
 800986a:	4618      	mov	r0, r3
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <hexstr_2_bytes>:

/* Convert hexstring to bytes */
sint8 hexstr_2_bytes(uint8 *pu8Out, uint8 *pu8In, uint8 u8SizeOut)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b086      	sub	sp, #24
 800987a:	af00      	add	r7, sp, #0
 800987c:	60f8      	str	r0, [r7, #12]
 800987e:	60b9      	str	r1, [r7, #8]
 8009880:	4613      	mov	r3, r2
 8009882:	71fb      	strb	r3, [r7, #7]
    while(u8SizeOut--)
 8009884:	e02c      	b.n	80098e0 <hexstr_2_bytes+0x6a>
    {
        uint8   u8Out = hexchar_2_val(*pu8In++);
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	60ba      	str	r2, [r7, #8]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff ffcf 	bl	8009832 <hexchar_2_val>
 8009894:	4603      	mov	r3, r0
 8009896:	75fb      	strb	r3, [r7, #23]
        if(u8Out > 0xF)
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	2b0f      	cmp	r3, #15
 800989c:	d902      	bls.n	80098a4 <hexstr_2_bytes+0x2e>
            return M2M_ERR_INVALID_ARG;
 800989e:	f06f 030e 	mvn.w	r3, #14
 80098a2:	e023      	b.n	80098ec <hexstr_2_bytes+0x76>
        *pu8Out = u8Out * 0x10;
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	011b      	lsls	r3, r3, #4
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	701a      	strb	r2, [r3, #0]
        u8Out = hexchar_2_val(*pu8In++);
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	1c5a      	adds	r2, r3, #1
 80098b2:	60ba      	str	r2, [r7, #8]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7ff ffbb 	bl	8009832 <hexchar_2_val>
 80098bc:	4603      	mov	r3, r0
 80098be:	75fb      	strb	r3, [r7, #23]
        if(u8Out > 0xF)
 80098c0:	7dfb      	ldrb	r3, [r7, #23]
 80098c2:	2b0f      	cmp	r3, #15
 80098c4:	d902      	bls.n	80098cc <hexstr_2_bytes+0x56>
            return M2M_ERR_INVALID_ARG;
 80098c6:	f06f 030e 	mvn.w	r3, #14
 80098ca:	e00f      	b.n	80098ec <hexstr_2_bytes+0x76>
        *pu8Out += u8Out;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	781a      	ldrb	r2, [r3, #0]
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
 80098d2:	4413      	add	r3, r2
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	701a      	strb	r2, [r3, #0]
        pu8Out++;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3301      	adds	r3, #1
 80098de:	60fb      	str	r3, [r7, #12]
    while(u8SizeOut--)
 80098e0:	79fb      	ldrb	r3, [r7, #7]
 80098e2:	1e5a      	subs	r2, r3, #1
 80098e4:	71fa      	strb	r2, [r7, #7]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1cd      	bne.n	8009886 <hexstr_2_bytes+0x10>
    }
    return M2M_SUCCESS;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
 80098f4:	b480      	push	{r7}
 80098f6:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
 80098f8:	4b05      	ldr	r3, [pc, #20]	@ (8009910 <isr+0x1c>)
 80098fa:	78db      	ldrb	r3, [r3, #3]
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	3301      	adds	r3, #1
 8009900:	b2da      	uxtb	r2, r3
 8009902:	4b03      	ldr	r3, [pc, #12]	@ (8009910 <isr+0x1c>)
 8009904:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 8009906:	bf00      	nop
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	20003070 	.word	0x20003070

08009914 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800991a:	2300      	movs	r3, #0
 800991c:	71fb      	strb	r3, [r7, #7]

	gstrHifCxt.u8HifRXDone = 0;
 800991e:	4b14      	ldr	r3, [pc, #80]	@ (8009970 <hif_set_rx_done+0x5c>)
 8009920:	2200      	movs	r2, #0
 8009922:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
 8009924:	2001      	movs	r0, #1
 8009926:	f7ff fe59 	bl	80095dc <nm_bsp_interrupt_ctrl>
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
 800992a:	463b      	mov	r3, r7
 800992c:	4619      	mov	r1, r3
 800992e:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009932:	f001 fc5d 	bl	800b1f0 <nm_read_reg_with_ret>
 8009936:	4603      	mov	r3, r0
 8009938:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800993a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10f      	bne.n	8009962 <hif_set_rx_done+0x4e>
	/* Set RX Done */
	reg |= NBIT1;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	f043 0302 	orr.w	r3, r3, #2
 8009948:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	4619      	mov	r1, r3
 800994e:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009952:	f001 fc5b 	bl	800b20c <nm_write_reg>
 8009956:	4603      	mov	r3, r0
 8009958:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800995a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800995e:	2b00      	cmp	r3, #0
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
 8009960:	e000      	b.n	8009964 <hif_set_rx_done+0x50>
	if(ret != M2M_SUCCESS)goto ERR1;
 8009962:	bf00      	nop
	return ret;
 8009964:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	20003070 	.word	0x20003070

08009974 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	4603      	mov	r3, r0
 800997c:	603a      	str	r2, [r7, #0]
 800997e:	71fb      	strb	r3, [r7, #7]
 8009980:	460b      	mov	r3, r1
 8009982:	80bb      	strh	r3, [r7, #4]


}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8009996:	2300      	movs	r3, #0
 8009998:	71fb      	strb	r3, [r7, #7]
	if(gstrHifCxt.u8HifRXDone)
 800999a:	4b14      	ldr	r3, [pc, #80]	@ (80099ec <hif_chip_wake+0x5c>)
 800999c:	789b      	ldrb	r3, [r3, #2]
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <hif_chip_wake+0x1a>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
 80099a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099a8:	e01c      	b.n	80099e4 <hif_chip_wake+0x54>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
 80099aa:	4b10      	ldr	r3, [pc, #64]	@ (80099ec <hif_chip_wake+0x5c>)
 80099ac:	785b      	ldrb	r3, [r3, #1]
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10c      	bne.n	80099ce <hif_chip_wake+0x3e>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 80099b4:	4b0d      	ldr	r3, [pc, #52]	@ (80099ec <hif_chip_wake+0x5c>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d007      	beq.n	80099ce <hif_chip_wake+0x3e>
		{
			ret = chip_wake();
 80099be:	f001 fa61 	bl	800ae84 <chip_wake>
 80099c2:	4603      	mov	r3, r0
 80099c4:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 80099c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d107      	bne.n	80099de <hif_chip_wake+0x4e>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
 80099ce:	4b07      	ldr	r3, [pc, #28]	@ (80099ec <hif_chip_wake+0x5c>)
 80099d0:	785b      	ldrb	r3, [r3, #1]
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	3301      	adds	r3, #1
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	4b04      	ldr	r3, [pc, #16]	@ (80099ec <hif_chip_wake+0x5c>)
 80099da:	705a      	strb	r2, [r3, #1]
 80099dc:	e000      	b.n	80099e0 <hif_chip_wake+0x50>
			if(ret != M2M_SUCCESS)goto ERR1;
 80099de:	bf00      	nop
ERR1:
	return ret;
 80099e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	20003070 	.word	0x20003070

080099f0 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
 80099f0:	b480      	push	{r7}
 80099f2:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
 80099f4:	4b08      	ldr	r3, [pc, #32]	@ (8009a18 <hif_chip_sleep_sc+0x28>)
 80099f6:	785b      	ldrb	r3, [r3, #1]
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d006      	beq.n	8009a0c <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
 80099fe:	4b06      	ldr	r3, [pc, #24]	@ (8009a18 <hif_chip_sleep_sc+0x28>)
 8009a00:	785b      	ldrb	r3, [r3, #1]
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	3b01      	subs	r3, #1
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	4b03      	ldr	r3, [pc, #12]	@ (8009a18 <hif_chip_sleep_sc+0x28>)
 8009a0a:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	20003070 	.word	0x20003070

08009a1c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8009a22:	2300      	movs	r3, #0
 8009a24:	71fb      	strb	r3, [r7, #7]

	if(gstrHifCxt.u8ChipSleep >= 1)
 8009a26:	4b12      	ldr	r3, [pc, #72]	@ (8009a70 <hif_chip_sleep+0x54>)
 8009a28:	785b      	ldrb	r3, [r3, #1]
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d006      	beq.n	8009a3e <hif_chip_sleep+0x22>
	{
		gstrHifCxt.u8ChipSleep--;
 8009a30:	4b0f      	ldr	r3, [pc, #60]	@ (8009a70 <hif_chip_sleep+0x54>)
 8009a32:	785b      	ldrb	r3, [r3, #1]
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	3b01      	subs	r3, #1
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a70 <hif_chip_sleep+0x54>)
 8009a3c:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
 8009a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8009a70 <hif_chip_sleep+0x54>)
 8009a40:	785b      	ldrb	r3, [r3, #1]
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10c      	bne.n	8009a62 <hif_chip_sleep+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 8009a48:	4b09      	ldr	r3, [pc, #36]	@ (8009a70 <hif_chip_sleep+0x54>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d007      	beq.n	8009a62 <hif_chip_sleep+0x46>
		{
			ret = chip_sleep();
 8009a52:	f001 f9b3 	bl	800adbc <chip_sleep>
 8009a56:	4603      	mov	r3, r0
 8009a58:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 8009a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	e000      	b.n	8009a64 <hif_chip_sleep+0x48>
		}
		else
		{
		}
	}
ERR1:
 8009a62:	bf00      	nop
	return ret;
 8009a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	20003070 	.word	0x20003070

08009a74 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
 8009a7c:	222c      	movs	r2, #44	@ 0x2c
 8009a7e:	2100      	movs	r1, #0
 8009a80:	4807      	ldr	r0, [pc, #28]	@ (8009aa0 <hif_init+0x2c>)
 8009a82:	f7ff fea1 	bl	80097c8 <m2m_memset>
	nm_bsp_register_isr(isr);
 8009a86:	4807      	ldr	r0, [pc, #28]	@ (8009aa4 <hif_init+0x30>)
 8009a88:	f7ff fd76 	bl	8009578 <nm_bsp_register_isr>
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
 8009a8c:	4906      	ldr	r1, [pc, #24]	@ (8009aa8 <hif_init+0x34>)
 8009a8e:	2003      	movs	r0, #3
 8009a90:	f000 fad8 	bl	800a044 <hif_register_cb>
	return M2M_SUCCESS;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20003070 	.word	0x20003070
 8009aa4:	080098f5 	.word	0x080098f5
 8009aa8:	08009975 	.word	0x08009975

08009aac <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b088      	sub	sp, #32
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	603a      	str	r2, [r7, #0]
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	71fb      	strb	r3, [r7, #7]
 8009aba:	460b      	mov	r3, r1
 8009abc:	71bb      	strb	r3, [r7, #6]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	80bb      	strh	r3, [r7, #4]
	sint8		ret = M2M_ERR_SEND;
 8009ac2:	23ff      	movs	r3, #255	@ 0xff
 8009ac4:	77fb      	strb	r3, [r7, #31]
	tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 8009ac6:	79bb      	ldrb	r3, [r7, #6]
 8009ac8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 8009ad4:	2308      	movs	r3, #8
 8009ad6:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
 8009ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d008      	beq.n	8009af0 <hif_send+0x44>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
 8009ade:	8b7a      	ldrh	r2, [r7, #26]
 8009ae0:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8009ae2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009ae4:	440b      	add	r3, r1
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	4413      	add	r3, r2
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	837b      	strh	r3, [r7, #26]
 8009aee:	e004      	b.n	8009afa <hif_send+0x4e>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 8009af0:	8b7a      	ldrh	r2, [r7, #26]
 8009af2:	88bb      	ldrh	r3, [r7, #4]
 8009af4:	4413      	add	r3, r2
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	837b      	strh	r3, [r7, #26]
	}
    if (strHif.u16Length <= M2M_HIF_MAX_PACKET_SIZE)
 8009afa:	8b7b      	ldrh	r3, [r7, #26]
 8009afc:	f240 623c 	movw	r2, #1596	@ 0x63c
 8009b00:	4293      	cmp	r3, r2
 8009b02:	f200 80d9 	bhi.w	8009cb8 <hif_send+0x20c>
    {
	ret = hif_chip_wake();
 8009b06:	f7ff ff43 	bl	8009990 <hif_chip_wake>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
 8009b0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f040 80e6 	bne.w	8009ce4 <hif_send+0x238>
	{
		volatile uint32 reg, dma_addr = 0;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	81fb      	strh	r3, [r7, #14]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 8009b20:	2300      	movs	r3, #0
 8009b22:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
 8009b24:	79fa      	ldrb	r2, [r7, #7]
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
 8009b2c:	79bb      	ldrb	r3, [r7, #6]
 8009b2e:	021a      	lsls	r2, r3, #8
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
 8009b36:	8b7b      	ldrh	r3, [r7, #26]
 8009b38:	041a      	lsls	r2, r3, #16
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	4619      	mov	r1, r3
 8009b44:	f241 008c 	movw	r0, #4236	@ 0x108c
 8009b48:	f001 fb60 	bl	800b20c <nm_write_reg>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 8009b50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f040 80b9 	bne.w	8009ccc <hif_send+0x220>

		reg = 0UL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f043 0302 	orr.w	r3, r3, #2
 8009b64:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	f241 0078 	movw	r0, #4216	@ 0x1078
 8009b6e:	f001 fb4d 	bl	800b20c <nm_write_reg>
 8009b72:	4603      	mov	r3, r0
 8009b74:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 8009b76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f040 80a8 	bne.w	8009cd0 <hif_send+0x224>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
 8009b80:	2300      	movs	r3, #0
 8009b82:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
 8009b84:	2300      	movs	r3, #0
 8009b86:	81fb      	strh	r3, [r7, #14]
 8009b88:	e02e      	b.n	8009be8 <hif_send+0x13c>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
 8009b8a:	f107 0314 	add.w	r3, r7, #20
 8009b8e:	4619      	mov	r1, r3
 8009b90:	f241 0078 	movw	r0, #4216	@ 0x1078
 8009b94:	f001 fb2c 	bl	800b1f0 <nm_read_reg_with_ret>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
 8009b9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d127      	bne.n	8009bf4 <hif_send+0x148>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
 8009ba4:	89fb      	ldrh	r3, [r7, #14]
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009bac:	d303      	bcc.n	8009bb6 <hif_send+0x10a>
				if(cnt < 501) {
 8009bae:	89fb      	ldrh	r3, [r7, #14]
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
 8009bb0:	2001      	movs	r0, #1
 8009bb2:	f7ff fcd5 	bl	8009560 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	f003 0302 	and.w	r3, r3, #2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10e      	bne.n	8009bde <hif_send+0x132>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
 8009bc0:	f107 0310 	add.w	r3, r7, #16
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	484b      	ldr	r0, [pc, #300]	@ (8009cf4 <hif_send+0x248>)
 8009bc8:	f001 fb12 	bl	800b1f0 <nm_read_reg_with_ret>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
 8009bd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00f      	beq.n	8009bf8 <hif_send+0x14c>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	613b      	str	r3, [r7, #16]
					goto ERR1;
 8009bdc:	e07f      	b.n	8009cde <hif_send+0x232>
		for(cnt = 0; cnt < 1000; cnt ++)
 8009bde:	89fb      	ldrh	r3, [r7, #14]
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	3301      	adds	r3, #1
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	81fb      	strh	r3, [r7, #14]
 8009be8:	89fb      	ldrh	r3, [r7, #14]
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009bf0:	d3cb      	bcc.n	8009b8a <hif_send+0xde>
 8009bf2:	e002      	b.n	8009bfa <hif_send+0x14e>
			if(ret != M2M_SUCCESS) break;
 8009bf4:	bf00      	nop
 8009bf6:	e000      	b.n	8009bfa <hif_send+0x14e>
				}
				/*in case of success break */
				break;
 8009bf8:	bf00      	nop
			}
		}

		if (dma_addr != 0)
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d054      	beq.n	8009caa <hif_send+0x1fe>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 8009c04:	8b7b      	ldrh	r3, [r7, #26]
 8009c06:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	f107 0118 	add.w	r1, r7, #24
 8009c0e:	2208      	movs	r2, #8
 8009c10:	4618      	mov	r0, r3
 8009c12:	f001 fb77 	bl	800b304 <nm_write_block>
 8009c16:	4603      	mov	r3, r0
 8009c18:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 8009c1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d158      	bne.n	8009cd4 <hif_send+0x228>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	3308      	adds	r3, #8
 8009c26:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00f      	beq.n	8009c4e <hif_send+0x1a2>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	88ba      	ldrh	r2, [r7, #4]
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f001 fb65 	bl	800b304 <nm_write_block>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 8009c3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d148      	bne.n	8009cd8 <hif_send+0x22c>
				u32CurrAddr += u16CtrlBufSize;
 8009c46:	88ba      	ldrh	r2, [r7, #4]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
 8009c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d016      	beq.n	8009c82 <hif_send+0x1d6>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
 8009c54:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009c56:	88bb      	ldrh	r3, [r7, #4]
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	4413      	add	r3, r2
 8009c60:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009c66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f001 fb4b 	bl	800b304 <nm_write_block>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 8009c72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d130      	bne.n	8009cdc <hif_send+0x230>
				u32CurrAddr += u16DataSize;
 8009c7a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	4413      	add	r3, r2
 8009c80:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	f043 0302 	orr.w	r3, r3, #2
 8009c8e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	4619      	mov	r1, r3
 8009c94:	f241 006c 	movw	r0, #4204	@ 0x106c
 8009c98:	f001 fab8 	bl	800b20c <nm_write_reg>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 8009ca0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00a      	beq.n	8009cbe <hif_send+0x212>
 8009ca8:	e019      	b.n	8009cde <hif_send+0x232>
		}
		else
		{
			ret = hif_chip_sleep();
 8009caa:	f7ff feb7 	bl	8009a1c <hif_chip_sleep>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	77fb      	strb	r3, [r7, #31]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
 8009cb2:	23fd      	movs	r3, #253	@ 0xfd
 8009cb4:	77fb      	strb	r3, [r7, #31]
			goto ERR2;
 8009cb6:	e016      	b.n	8009ce6 <hif_send+0x23a>
        }
	}
	else
	{
        M2M_ERR("HIF message length (%d) exceeds max length (%d)\n",strHif.u16Length, M2M_HIF_MAX_PACKET_SIZE);
        ret = M2M_ERR_SEND;
 8009cb8:	23ff      	movs	r3, #255	@ 0xff
 8009cba:	77fb      	strb	r3, [r7, #31]
		goto ERR2;
 8009cbc:	e013      	b.n	8009ce6 <hif_send+0x23a>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
 8009cbe:	f7ff fead 	bl	8009a1c <hif_chip_sleep>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	77fb      	strb	r3, [r7, #31]
	return ret;
 8009cc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009cca:	e00e      	b.n	8009cea <hif_send+0x23e>
		if(M2M_SUCCESS != ret) goto ERR1;
 8009ccc:	bf00      	nop
 8009cce:	e006      	b.n	8009cde <hif_send+0x232>
		if(M2M_SUCCESS != ret) goto ERR1;
 8009cd0:	bf00      	nop
 8009cd2:	e004      	b.n	8009cde <hif_send+0x232>
			if(M2M_SUCCESS != ret) goto ERR1;
 8009cd4:	bf00      	nop
 8009cd6:	e002      	b.n	8009cde <hif_send+0x232>
				if(M2M_SUCCESS != ret) goto ERR1;
 8009cd8:	bf00      	nop
 8009cda:	e000      	b.n	8009cde <hif_send+0x232>
				if(M2M_SUCCESS != ret) goto ERR1;
 8009cdc:	bf00      	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
 8009cde:	f7ff fe87 	bl	80099f0 <hif_chip_sleep_sc>
 8009ce2:	e000      	b.n	8009ce6 <hif_send+0x23a>
            goto ERR2;
 8009ce4:	bf00      	nop
ERR2:
	/*logical error*/
	return ret;
 8009ce6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3720      	adds	r7, #32
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	00150400 	.word	0x00150400

08009cf8 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	73fb      	strb	r3, [r7, #15]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 8009d02:	f107 0308 	add.w	r3, r7, #8
 8009d06:	4619      	mov	r1, r3
 8009d08:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009d0c:	f001 fa70 	bl	800b1f0 <nm_read_reg_with_ret>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]
	if(M2M_SUCCESS == ret)
 8009d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f040 80e2 	bne.w	8009ee2 <hif_isr+0x1ea>
	{
		if(reg & 0x1)	/* New interrupt has been received */
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 80de 	beq.w	8009ee6 <hif_isr+0x1ee>
		{
			uint16 size;

			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	f023 0301 	bic.w	r3, r3, #1
 8009d30:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	4619      	mov	r1, r3
 8009d36:	f241 0070 	movw	r0, #4208	@ 0x1070
 8009d3a:	f001 fa67 	bl	800b20c <nm_write_reg>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	73fb      	strb	r3, [r7, #15]
			if(ret != M2M_SUCCESS)goto ERR1;
 8009d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f040 80cf 	bne.w	8009eea <hif_isr+0x1f2>
			gstrHifCxt.u8HifRXDone = 1;
 8009d4c:	4b6c      	ldr	r3, [pc, #432]	@ (8009f00 <hif_isr+0x208>)
 8009d4e:	2201      	movs	r2, #1
 8009d50:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	089b      	lsrs	r3, r3, #2
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d5c:	81bb      	strh	r3, [r7, #12]
			if (size > 0) {
 8009d5e:	89bb      	ldrh	r3, [r7, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 80bb 	beq.w	8009edc <hif_isr+0x1e4>
				uint32 address = 0;
 8009d66:	2300      	movs	r3, #0
 8009d68:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 8009d6a:	463b      	mov	r3, r7
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	f241 0084 	movw	r0, #4228	@ 0x1084
 8009d72:	f001 fa3d 	bl	800b1f0 <nm_read_reg_with_ret>
 8009d76:	4603      	mov	r3, r0
 8009d78:	73fb      	strb	r3, [r7, #15]
				if(M2M_SUCCESS != ret)
 8009d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f040 80b5 	bne.w	8009eee <hif_isr+0x1f6>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
					goto ERR1;
				}
				gstrHifCxt.u32RxAddr = address;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	4a5e      	ldr	r2, [pc, #376]	@ (8009f00 <hif_isr+0x208>)
 8009d88:	6093      	str	r3, [r2, #8]
				gstrHifCxt.u32RxSize = size;
 8009d8a:	89bb      	ldrh	r3, [r7, #12]
 8009d8c:	4a5c      	ldr	r2, [pc, #368]	@ (8009f00 <hif_isr+0x208>)
 8009d8e:	60d3      	str	r3, [r2, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	1d39      	adds	r1, r7, #4
 8009d94:	2204      	movs	r2, #4
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 fa58 	bl	800b24c <nm_read_block>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73fb      	strb	r3, [r7, #15]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 8009da0:	88fb      	ldrh	r3, [r7, #6]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	80fb      	strh	r3, [r7, #6]
				if(M2M_SUCCESS != ret)
 8009da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f040 80a1 	bne.w	8009ef2 <hif_isr+0x1fa>
				{
					M2M_ERR("(hif) address bus fail\n");
					goto ERR1;
				}
				if(strHif.u16Length != size)
 8009db0:	88fb      	ldrh	r3, [r7, #6]
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	89ba      	ldrh	r2, [r7, #12]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d008      	beq.n	8009dcc <hif_isr+0xd4>
				{
					if((size - strHif.u16Length) > 4)
 8009dba:	89bb      	ldrh	r3, [r7, #12]
 8009dbc:	88fa      	ldrh	r2, [r7, #6]
 8009dbe:	b292      	uxth	r2, r2
 8009dc0:	1a9b      	subs	r3, r3, r2
 8009dc2:	2b04      	cmp	r3, #4
 8009dc4:	dd02      	ble.n	8009dcc <hif_isr+0xd4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						ret = M2M_ERR_BUS_FAIL;
 8009dc6:	23fa      	movs	r3, #250	@ 0xfa
 8009dc8:	73fb      	strb	r3, [r7, #15]
						goto ERR1;
 8009dca:	e093      	b.n	8009ef4 <hif_isr+0x1fc>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 8009dcc:	793b      	ldrb	r3, [r7, #4]
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d10f      	bne.n	8009df4 <hif_isr+0xfc>
				{
					if(gstrHifCxt.pfWifiCb)
 8009dd4:	4b4a      	ldr	r3, [pc, #296]	@ (8009f00 <hif_isr+0x208>)
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d072      	beq.n	8009ec2 <hif_isr+0x1ca>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009ddc:	4b48      	ldr	r3, [pc, #288]	@ (8009f00 <hif_isr+0x208>)
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	797a      	ldrb	r2, [r7, #5]
 8009de2:	b2d0      	uxtb	r0, r2
 8009de4:	88fa      	ldrh	r2, [r7, #6]
 8009de6:	b292      	uxth	r2, r2
 8009de8:	3a08      	subs	r2, #8
 8009dea:	b291      	uxth	r1, r2
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	3208      	adds	r2, #8
 8009df0:	4798      	blx	r3
 8009df2:	e066      	b.n	8009ec2 <hif_isr+0x1ca>
					else
						M2M_ERR("WIFI callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 8009df4:	793b      	ldrb	r3, [r7, #4]
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d10f      	bne.n	8009e1c <hif_isr+0x124>
				{
					if(gstrHifCxt.pfIpCb)
 8009dfc:	4b40      	ldr	r3, [pc, #256]	@ (8009f00 <hif_isr+0x208>)
 8009dfe:	695b      	ldr	r3, [r3, #20]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d05e      	beq.n	8009ec2 <hif_isr+0x1ca>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009e04:	4b3e      	ldr	r3, [pc, #248]	@ (8009f00 <hif_isr+0x208>)
 8009e06:	695b      	ldr	r3, [r3, #20]
 8009e08:	797a      	ldrb	r2, [r7, #5]
 8009e0a:	b2d0      	uxtb	r0, r2
 8009e0c:	88fa      	ldrh	r2, [r7, #6]
 8009e0e:	b292      	uxth	r2, r2
 8009e10:	3a08      	subs	r2, #8
 8009e12:	b291      	uxth	r1, r2
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	3208      	adds	r2, #8
 8009e18:	4798      	blx	r3
 8009e1a:	e052      	b.n	8009ec2 <hif_isr+0x1ca>
					else
						M2M_ERR("Socket callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 8009e1c:	793b      	ldrb	r3, [r7, #4]
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d10f      	bne.n	8009e44 <hif_isr+0x14c>
				{
					if(gstrHifCxt.pfOtaCb)
 8009e24:	4b36      	ldr	r3, [pc, #216]	@ (8009f00 <hif_isr+0x208>)
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d04a      	beq.n	8009ec2 <hif_isr+0x1ca>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009e2c:	4b34      	ldr	r3, [pc, #208]	@ (8009f00 <hif_isr+0x208>)
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	797a      	ldrb	r2, [r7, #5]
 8009e32:	b2d0      	uxtb	r0, r2
 8009e34:	88fa      	ldrh	r2, [r7, #6]
 8009e36:	b292      	uxth	r2, r2
 8009e38:	3a08      	subs	r2, #8
 8009e3a:	b291      	uxth	r1, r2
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	3208      	adds	r2, #8
 8009e40:	4798      	blx	r3
 8009e42:	e03e      	b.n	8009ec2 <hif_isr+0x1ca>
					else
						M2M_ERR("Ota callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 8009e44:	793b      	ldrb	r3, [r7, #4]
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b06      	cmp	r3, #6
 8009e4a:	d10f      	bne.n	8009e6c <hif_isr+0x174>
				{
					if(gstrHifCxt.pfCryptoCb)
 8009e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8009f00 <hif_isr+0x208>)
 8009e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d036      	beq.n	8009ec2 <hif_isr+0x1ca>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009e54:	4b2a      	ldr	r3, [pc, #168]	@ (8009f00 <hif_isr+0x208>)
 8009e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e58:	797a      	ldrb	r2, [r7, #5]
 8009e5a:	b2d0      	uxtb	r0, r2
 8009e5c:	88fa      	ldrh	r2, [r7, #6]
 8009e5e:	b292      	uxth	r2, r2
 8009e60:	3a08      	subs	r2, #8
 8009e62:	b291      	uxth	r1, r2
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	3208      	adds	r2, #8
 8009e68:	4798      	blx	r3
 8009e6a:	e02a      	b.n	8009ec2 <hif_isr+0x1ca>
					else
						M2M_ERR("Crypto callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 8009e6c:	793b      	ldrb	r3, [r7, #4]
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b07      	cmp	r3, #7
 8009e72:	d10f      	bne.n	8009e94 <hif_isr+0x19c>
				{
					if(gstrHifCxt.pfSigmaCb)
 8009e74:	4b22      	ldr	r3, [pc, #136]	@ (8009f00 <hif_isr+0x208>)
 8009e76:	69db      	ldr	r3, [r3, #28]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d022      	beq.n	8009ec2 <hif_isr+0x1ca>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009e7c:	4b20      	ldr	r3, [pc, #128]	@ (8009f00 <hif_isr+0x208>)
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	797a      	ldrb	r2, [r7, #5]
 8009e82:	b2d0      	uxtb	r0, r2
 8009e84:	88fa      	ldrh	r2, [r7, #6]
 8009e86:	b292      	uxth	r2, r2
 8009e88:	3a08      	subs	r2, #8
 8009e8a:	b291      	uxth	r1, r2
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	3208      	adds	r2, #8
 8009e90:	4798      	blx	r3
 8009e92:	e016      	b.n	8009ec2 <hif_isr+0x1ca>
					else
						M2M_ERR("Sigma callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 8009e94:	793b      	ldrb	r3, [r7, #4]
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b05      	cmp	r3, #5
 8009e9a:	d10f      	bne.n	8009ebc <hif_isr+0x1c4>
				{
				    if(gstrHifCxt.pfSslCb)
 8009e9c:	4b18      	ldr	r3, [pc, #96]	@ (8009f00 <hif_isr+0x208>)
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00e      	beq.n	8009ec2 <hif_isr+0x1ca>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8009ea4:	4b16      	ldr	r3, [pc, #88]	@ (8009f00 <hif_isr+0x208>)
 8009ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea8:	797a      	ldrb	r2, [r7, #5]
 8009eaa:	b2d0      	uxtb	r0, r2
 8009eac:	88fa      	ldrh	r2, [r7, #6]
 8009eae:	b292      	uxth	r2, r2
 8009eb0:	3a08      	subs	r2, #8
 8009eb2:	b291      	uxth	r1, r2
 8009eb4:	683a      	ldr	r2, [r7, #0]
 8009eb6:	3208      	adds	r2, #8
 8009eb8:	4798      	blx	r3
 8009eba:	e002      	b.n	8009ec2 <hif_isr+0x1ca>
                        M2M_ERR("SSL callback is not registered\n");
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
					ret = M2M_ERR_BUS_FAIL;
 8009ebc:	23fa      	movs	r3, #250	@ 0xfa
 8009ebe:	73fb      	strb	r3, [r7, #15]
					goto ERR1;
 8009ec0:	e018      	b.n	8009ef4 <hif_isr+0x1fc>
				}
				if(gstrHifCxt.u8HifRXDone)
 8009ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8009f00 <hif_isr+0x208>)
 8009ec4:	789b      	ldrb	r3, [r3, #2]
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d013      	beq.n	8009ef4 <hif_isr+0x1fc>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
					ret = hif_set_rx_done();
 8009ecc:	f7ff fd22 	bl	8009914 <hif_set_rx_done>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	73fb      	strb	r3, [r7, #15]
					if(ret != M2M_SUCCESS) goto ERR1;
 8009ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	e00b      	b.n	8009ef4 <hif_isr+0x1fc>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
				ret = M2M_ERR_RCV;
 8009edc:	23fe      	movs	r3, #254	@ 0xfe
 8009ede:	73fb      	strb	r3, [r7, #15]
				goto ERR1;
 8009ee0:	e008      	b.n	8009ef4 <hif_isr+0x1fc>
		}
	}
	else
	{
		M2M_ERR("(hif) Failed to Read interrupt reg\n");
		goto ERR1;
 8009ee2:	bf00      	nop
 8009ee4:	e006      	b.n	8009ef4 <hif_isr+0x1fc>
			goto ERR1;
 8009ee6:	bf00      	nop
 8009ee8:	e004      	b.n	8009ef4 <hif_isr+0x1fc>
			if(ret != M2M_SUCCESS)goto ERR1;
 8009eea:	bf00      	nop
 8009eec:	e002      	b.n	8009ef4 <hif_isr+0x1fc>
					goto ERR1;
 8009eee:	bf00      	nop
 8009ef0:	e000      	b.n	8009ef4 <hif_isr+0x1fc>
					goto ERR1;
 8009ef2:	bf00      	nop
	}

ERR1:
	return ret;
 8009ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20003070 	.word	0x20003070

08009f04 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	71fb      	strb	r3, [r7, #7]
	
	gstrHifCxt.u8Yield = 0;
 8009f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8009f78 <hif_handle_isr+0x74>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	711a      	strb	r2, [r3, #4]
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 8009f14:	e020      	b.n	8009f58 <hif_handle_isr+0x54>
         * during which the ISR could fire again.
         * If LEVEL interrupt is used instead of EDGE then the atomicity isn't needed since the interrupt
         * is turned off in the ISR and back on again only after the interrupt has been serviced in hif_isr(). */

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(0);
 8009f16:	2000      	movs	r0, #0
 8009f18:	f7ff fb60 	bl	80095dc <nm_bsp_interrupt_ctrl>
#endif

		gstrHifCxt.u8Interrupt--;
 8009f1c:	4b16      	ldr	r3, [pc, #88]	@ (8009f78 <hif_handle_isr+0x74>)
 8009f1e:	78db      	ldrb	r3, [r3, #3]
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	3b01      	subs	r3, #1
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	4b14      	ldr	r3, [pc, #80]	@ (8009f78 <hif_handle_isr+0x74>)
 8009f28:	70da      	strb	r2, [r3, #3]

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(1);
 8009f2a:	2001      	movs	r0, #1
 8009f2c:	f7ff fb56 	bl	80095dc <nm_bsp_interrupt_ctrl>
#endif

		uint8 retries = 5;
 8009f30:	2305      	movs	r3, #5
 8009f32:	71bb      	strb	r3, [r7, #6]
		while(1)
		{
			ret = hif_isr();
 8009f34:	f7ff fee0 	bl	8009cf8 <hif_isr>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	71fb      	strb	r3, [r7, #7]
			if(ret == M2M_SUCCESS) {
 8009f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d006      	beq.n	8009f52 <hif_handle_isr+0x4e>
				/*we will try forever until we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				retries--;
 8009f44:	79bb      	ldrb	r3, [r7, #6]
 8009f46:	3b01      	subs	r3, #1
 8009f48:	71bb      	strb	r3, [r7, #6]
				if(!retries)
 8009f4a:	79bb      	ldrb	r3, [r7, #6]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <hif_handle_isr+0x52>
			ret = hif_isr();
 8009f50:	e7f0      	b.n	8009f34 <hif_handle_isr+0x30>
				break;
 8009f52:	bf00      	nop
 8009f54:	e000      	b.n	8009f58 <hif_handle_isr+0x54>
				{
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
					break;
 8009f56:	bf00      	nop
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 8009f58:	4b07      	ldr	r3, [pc, #28]	@ (8009f78 <hif_handle_isr+0x74>)
 8009f5a:	78db      	ldrb	r3, [r3, #3]
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d004      	beq.n	8009f6c <hif_handle_isr+0x68>
 8009f62:	4b05      	ldr	r3, [pc, #20]	@ (8009f78 <hif_handle_isr+0x74>)
 8009f64:	791b      	ldrb	r3, [r3, #4]
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d0d4      	beq.n	8009f16 <hif_handle_isr+0x12>
					M2M_ERR("(HIF) Failed to handle interrupt %d try again... (%u)\n", ret, retries);
			}
		}
	}

	return ret;
 8009f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	20003070 	.word	0x20003070

08009f7c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	4611      	mov	r1, r2
 8009f88:	461a      	mov	r2, r3
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	80fb      	strh	r3, [r7, #6]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	717b      	strb	r3, [r7, #5]
	sint8 ret = M2M_SUCCESS;
 8009f92:	2300      	movs	r3, #0
 8009f94:	75fb      	strb	r3, [r7, #23]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d005      	beq.n	8009fa8 <hif_receive+0x2c>
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d002      	beq.n	8009fa8 <hif_receive+0x2c>
 8009fa2:	88fb      	ldrh	r3, [r7, #6]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10a      	bne.n	8009fbe <hif_receive+0x42>
	{
		if(isDone)
 8009fa8:	797b      	ldrb	r3, [r7, #5]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d004      	beq.n	8009fb8 <hif_receive+0x3c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
 8009fae:	f7ff fcb1 	bl	8009914 <hif_set_rx_done>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	75fb      	strb	r3, [r7, #23]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
 8009fb6:	e03d      	b.n	800a034 <hif_receive+0xb8>
			ret = M2M_ERR_FAIL;
 8009fb8:	23f4      	movs	r3, #244	@ 0xf4
 8009fba:	75fb      	strb	r3, [r7, #23]
		goto ERR1;
 8009fbc:	e03a      	b.n	800a034 <hif_receive+0xb8>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
 8009fbe:	88fa      	ldrh	r2, [r7, #6]
 8009fc0:	4b1f      	ldr	r3, [pc, #124]	@ (800a040 <hif_receive+0xc4>)
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d902      	bls.n	8009fce <hif_receive+0x52>
	{
		ret = M2M_ERR_FAIL;
 8009fc8:	23f4      	movs	r3, #244	@ 0xf4
 8009fca:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Size is larger than the received buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
 8009fcc:	e032      	b.n	800a034 <hif_receive+0xb8>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 8009fce:	4b1c      	ldr	r3, [pc, #112]	@ (800a040 <hif_receive+0xc4>)
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d309      	bcc.n	8009fec <hif_receive+0x70>
 8009fd8:	88fa      	ldrh	r2, [r7, #6]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	441a      	add	r2, r3
 8009fde:	4b18      	ldr	r3, [pc, #96]	@ (800a040 <hif_receive+0xc4>)
 8009fe0:	6899      	ldr	r1, [r3, #8]
 8009fe2:	4b17      	ldr	r3, [pc, #92]	@ (800a040 <hif_receive+0xc4>)
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	440b      	add	r3, r1
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d902      	bls.n	8009ff2 <hif_receive+0x76>
	{
		ret = M2M_ERR_FAIL;
 8009fec:	23f4      	movs	r3, #244	@ 0xf4
 8009fee:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Address beyond the received buffer address and length\n");
		goto ERR1;
 8009ff0:	e020      	b.n	800a034 <hif_receive+0xb8>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 8009ff2:	88fb      	ldrh	r3, [r7, #6]
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	68b9      	ldr	r1, [r7, #8]
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f001 f927 	bl	800b24c <nm_read_block>
 8009ffe:	4603      	mov	r3, r0
 800a000:	75fb      	strb	r3, [r7, #23]
	if(ret != M2M_SUCCESS)goto ERR1;
 800a002:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d111      	bne.n	800a02e <hif_receive+0xb2>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 800a00a:	4b0d      	ldr	r3, [pc, #52]	@ (800a040 <hif_receive+0xc4>)
 800a00c:	689a      	ldr	r2, [r3, #8]
 800a00e:	4b0c      	ldr	r3, [pc, #48]	@ (800a040 <hif_receive+0xc4>)
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	441a      	add	r2, r3
 800a014:	88f9      	ldrh	r1, [r7, #6]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	440b      	add	r3, r1
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d002      	beq.n	800a024 <hif_receive+0xa8>
 800a01e:	797b      	ldrb	r3, [r7, #5]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d006      	beq.n	800a032 <hif_receive+0xb6>
	{
		/* set RX done */
		ret = hif_set_rx_done();
 800a024:	f7ff fc76 	bl	8009914 <hif_set_rx_done>
 800a028:	4603      	mov	r3, r0
 800a02a:	75fb      	strb	r3, [r7, #23]
 800a02c:	e002      	b.n	800a034 <hif_receive+0xb8>
	if(ret != M2M_SUCCESS)goto ERR1;
 800a02e:	bf00      	nop
 800a030:	e000      	b.n	800a034 <hif_receive+0xb8>
	}

ERR1:
 800a032:	bf00      	nop
	return ret;
 800a034:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3718      	adds	r7, #24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20003070 	.word	0x20003070

0800a044 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	4603      	mov	r3, r0
 800a04c:	6039      	str	r1, [r7, #0]
 800a04e:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800a050:	2300      	movs	r3, #0
 800a052:	73fb      	strb	r3, [r7, #15]
	switch(u8Grp)
 800a054:	79fb      	ldrb	r3, [r7, #7]
 800a056:	3b01      	subs	r3, #1
 800a058:	2b06      	cmp	r3, #6
 800a05a:	d82d      	bhi.n	800a0b8 <hif_register_cb+0x74>
 800a05c:	a201      	add	r2, pc, #4	@ (adr r2, 800a064 <hif_register_cb+0x20>)
 800a05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a062:	bf00      	nop
 800a064:	0800a089 	.word	0x0800a089
 800a068:	0800a081 	.word	0x0800a081
 800a06c:	0800a099 	.word	0x0800a099
 800a070:	0800a091 	.word	0x0800a091
 800a074:	0800a0b1 	.word	0x0800a0b1
 800a078:	0800a0a1 	.word	0x0800a0a1
 800a07c:	0800a0a9 	.word	0x0800a0a9
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
 800a080:	4a13      	ldr	r2, [pc, #76]	@ (800a0d0 <hif_register_cb+0x8c>)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	6153      	str	r3, [r2, #20]
			break;
 800a086:	e01a      	b.n	800a0be <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
 800a088:	4a11      	ldr	r2, [pc, #68]	@ (800a0d0 <hif_register_cb+0x8c>)
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	6113      	str	r3, [r2, #16]
			break;
 800a08e:	e016      	b.n	800a0be <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
 800a090:	4a0f      	ldr	r2, [pc, #60]	@ (800a0d0 <hif_register_cb+0x8c>)
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	6193      	str	r3, [r2, #24]
			break;
 800a096:	e012      	b.n	800a0be <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 800a098:	4a0d      	ldr	r2, [pc, #52]	@ (800a0d0 <hif_register_cb+0x8c>)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	6213      	str	r3, [r2, #32]
			break;
 800a09e:	e00e      	b.n	800a0be <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
 800a0a0:	4a0b      	ldr	r2, [pc, #44]	@ (800a0d0 <hif_register_cb+0x8c>)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	6253      	str	r3, [r2, #36]	@ 0x24
			break;
 800a0a6:	e00a      	b.n	800a0be <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
 800a0a8:	4a09      	ldr	r2, [pc, #36]	@ (800a0d0 <hif_register_cb+0x8c>)
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	61d3      	str	r3, [r2, #28]
			break;
 800a0ae:	e006      	b.n	800a0be <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
 800a0b0:	4a07      	ldr	r2, [pc, #28]	@ (800a0d0 <hif_register_cb+0x8c>)
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	6293      	str	r3, [r2, #40]	@ 0x28
			break;
 800a0b6:	e002      	b.n	800a0be <hif_register_cb+0x7a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
 800a0b8:	23f4      	movs	r3, #244	@ 0xf4
 800a0ba:	73fb      	strb	r3, [r7, #15]
			break;
 800a0bc:	bf00      	nop
	}
	return ret;
 800a0be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	20003070 	.word	0x20003070

0800a0d4 <m2m_wifi_cb>:
                HIF address.
@param[in]  grp
                HIF group type.
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b0ac      	sub	sp, #176	@ 0xb0
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	4603      	mov	r3, r0
 800a0dc:	603a      	str	r2, [r7, #0]
 800a0de:	71fb      	strb	r3, [r7, #7]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	80bb      	strh	r3, [r7, #4]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 800a0e4:	79fb      	ldrb	r3, [r7, #7]
 800a0e6:	2b2c      	cmp	r3, #44	@ 0x2c
 800a0e8:	d117      	bne.n	800a11a <m2m_wifi_cb+0x46>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 800a0ea:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	2204      	movs	r2, #4
 800a0f2:	6838      	ldr	r0, [r7, #0]
 800a0f4:	f7ff ff42 	bl	8009f7c <hif_receive>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f040 819d 	bne.w	800a43a <m2m_wifi_cb+0x366>
		{
			if (gpfAppWifiCb)
 800a100:	4bac      	ldr	r3, [pc, #688]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 8198 	beq.w	800a43a <m2m_wifi_cb+0x366>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 800a10a:	4baa      	ldr	r3, [pc, #680]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800a112:	4611      	mov	r1, r2
 800a114:	202c      	movs	r0, #44	@ 0x2c
 800a116:	4798      	blx	r3
#endif  /* ETH_MODE */
    else
    {
        M2M_ERR("REQ Not defined %d\n", u8OpCode);
    }
}
 800a118:	e18f      	b.n	800a43a <m2m_wifi_cb+0x366>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 800a11a:	79fb      	ldrb	r3, [r7, #7]
 800a11c:	2b1b      	cmp	r3, #27
 800a11e:	d117      	bne.n	800a150 <m2m_wifi_cb+0x7c>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 800a120:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 800a124:	2300      	movs	r3, #0
 800a126:	2208      	movs	r2, #8
 800a128:	6838      	ldr	r0, [r7, #0]
 800a12a:	f7ff ff27 	bl	8009f7c <hif_receive>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	f040 8182 	bne.w	800a43a <m2m_wifi_cb+0x366>
			if (gpfAppWifiCb)
 800a136:	4b9f      	ldr	r3, [pc, #636]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 817d 	beq.w	800a43a <m2m_wifi_cb+0x366>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 800a140:	4b9c      	ldr	r3, [pc, #624]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800a148:	4611      	mov	r1, r2
 800a14a:	201b      	movs	r0, #27
 800a14c:	4798      	blx	r3
}
 800a14e:	e174      	b.n	800a43a <m2m_wifi_cb+0x366>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 800a150:	79fb      	ldrb	r3, [r7, #7]
 800a152:	2b06      	cmp	r3, #6
 800a154:	d117      	bne.n	800a186 <m2m_wifi_cb+0xb2>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 800a156:	f107 0108 	add.w	r1, r7, #8
 800a15a:	2301      	movs	r3, #1
 800a15c:	2230      	movs	r2, #48	@ 0x30
 800a15e:	6838      	ldr	r0, [r7, #0]
 800a160:	f7ff ff0c 	bl	8009f7c <hif_receive>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	f040 8167 	bne.w	800a43a <m2m_wifi_cb+0x366>
			if(gpfAppWifiCb)
 800a16c:	4b91      	ldr	r3, [pc, #580]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	f000 8162 	beq.w	800a43a <m2m_wifi_cb+0x366>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 800a176:	4b8f      	ldr	r3, [pc, #572]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f107 0208 	add.w	r2, r7, #8
 800a17e:	4611      	mov	r1, r2
 800a180:	2006      	movs	r0, #6
 800a182:	4798      	blx	r3
}
 800a184:	e159      	b.n	800a43a <m2m_wifi_cb+0x366>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 800a186:	79fb      	ldrb	r3, [r7, #7]
 800a188:	2b0e      	cmp	r3, #14
 800a18a:	f000 8156 	beq.w	800a43a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	2b32      	cmp	r3, #50	@ 0x32
 800a192:	d117      	bne.n	800a1c4 <m2m_wifi_cb+0xf0>
        if(hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 800a194:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 800a198:	2300      	movs	r3, #0
 800a19a:	2218      	movs	r2, #24
 800a19c:	6838      	ldr	r0, [r7, #0]
 800a19e:	f7ff feed 	bl	8009f7c <hif_receive>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f040 8148 	bne.w	800a43a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a1aa:	4b82      	ldr	r3, [pc, #520]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 8143 	beq.w	800a43a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 800a1b4:	4b7f      	ldr	r3, [pc, #508]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 800a1bc:	4611      	mov	r1, r2
 800a1be:	2032      	movs	r0, #50	@ 0x32
 800a1c0:	4798      	blx	r3
}
 800a1c2:	e13a      	b.n	800a43a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_REQ_DHCP_FAILURE)
 800a1c4:	79fb      	ldrb	r3, [r7, #7]
 800a1c6:	2b3d      	cmp	r3, #61	@ 0x3d
 800a1c8:	d114      	bne.n	800a1f4 <m2m_wifi_cb+0x120>
        if(hif_receive(u32Addr, NULL, 0, 1) == M2M_SUCCESS)
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	6838      	ldr	r0, [r7, #0]
 800a1d2:	f7ff fed3 	bl	8009f7c <hif_receive>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f040 812e 	bne.w	800a43a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a1de:	4b75      	ldr	r3, [pc, #468]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f000 8129 	beq.w	800a43a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_REQ_DHCP_FAILURE, NULL);
 800a1e8:	4b72      	ldr	r3, [pc, #456]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	203d      	movs	r0, #61	@ 0x3d
 800a1f0:	4798      	blx	r3
}
 800a1f2:	e122      	b.n	800a43a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_REQ_WPS)
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	2b2f      	cmp	r3, #47	@ 0x2f
 800a1f8:	d11e      	bne.n	800a238 <m2m_wifi_cb+0x164>
        m2m_memset((uint8 *)&strWps, 0, sizeof(tstrM2MWPSInfo));
 800a1fa:	f107 0308 	add.w	r3, r7, #8
 800a1fe:	2264      	movs	r2, #100	@ 0x64
 800a200:	2100      	movs	r1, #0
 800a202:	4618      	mov	r0, r3
 800a204:	f7ff fae0 	bl	80097c8 <m2m_memset>
        if(hif_receive(u32Addr, (uint8 *)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 800a208:	f107 0108 	add.w	r1, r7, #8
 800a20c:	2300      	movs	r3, #0
 800a20e:	2264      	movs	r2, #100	@ 0x64
 800a210:	6838      	ldr	r0, [r7, #0]
 800a212:	f7ff feb3 	bl	8009f7c <hif_receive>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f040 810e 	bne.w	800a43a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a21e:	4b65      	ldr	r3, [pc, #404]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	f000 8109 	beq.w	800a43a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 800a228:	4b62      	ldr	r3, [pc, #392]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f107 0208 	add.w	r2, r7, #8
 800a230:	4611      	mov	r1, r2
 800a232:	202f      	movs	r0, #47	@ 0x2f
 800a234:	4798      	blx	r3
}
 800a236:	e100      	b.n	800a43a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 800a238:	79fb      	ldrb	r3, [r7, #7]
 800a23a:	2b34      	cmp	r3, #52	@ 0x34
 800a23c:	d115      	bne.n	800a26a <m2m_wifi_cb+0x196>
        if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 800a23e:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800a242:	2300      	movs	r3, #0
 800a244:	2204      	movs	r2, #4
 800a246:	6838      	ldr	r0, [r7, #0]
 800a248:	f7ff fe98 	bl	8009f7c <hif_receive>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f040 80f3 	bne.w	800a43a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a254:	4b57      	ldr	r3, [pc, #348]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 80ee 	beq.w	800a43a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 800a25e:	4b55      	ldr	r3, [pc, #340]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2100      	movs	r1, #0
 800a264:	2034      	movs	r0, #52	@ 0x34
 800a266:	4798      	blx	r3
}
 800a268:	e0e7      	b.n	800a43a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 800a26a:	79fb      	ldrb	r3, [r7, #7]
 800a26c:	2b11      	cmp	r3, #17
 800a26e:	d11e      	bne.n	800a2ae <m2m_wifi_cb+0x1da>
        gu8scanInProgress = 0;
 800a270:	4b51      	ldr	r3, [pc, #324]	@ (800a3b8 <m2m_wifi_cb+0x2e4>)
 800a272:	2200      	movs	r2, #0
 800a274:	701a      	strb	r2, [r3, #0]
        if(hif_receive(u32Addr, (uint8 *)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 800a276:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800a27a:	2300      	movs	r3, #0
 800a27c:	2204      	movs	r2, #4
 800a27e:	6838      	ldr	r0, [r7, #0]
 800a280:	f7ff fe7c 	bl	8009f7c <hif_receive>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	f040 80d7 	bne.w	800a43a <m2m_wifi_cb+0x366>
            gu8ChNum = strState.u8NumofCh;
 800a28c:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 800a290:	4b4a      	ldr	r3, [pc, #296]	@ (800a3bc <m2m_wifi_cb+0x2e8>)
 800a292:	701a      	strb	r2, [r3, #0]
            if(gpfAppWifiCb)
 800a294:	4b47      	ldr	r3, [pc, #284]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 80ce 	beq.w	800a43a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 800a29e:	4b45      	ldr	r3, [pc, #276]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	2011      	movs	r0, #17
 800a2aa:	4798      	blx	r3
}
 800a2ac:	e0c5      	b.n	800a43a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 800a2ae:	79fb      	ldrb	r3, [r7, #7]
 800a2b0:	2b13      	cmp	r3, #19
 800a2b2:	d117      	bne.n	800a2e4 <m2m_wifi_cb+0x210>
        if(hif_receive(u32Addr, (uint8 *)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 800a2b4:	f107 0108 	add.w	r1, r7, #8
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	222c      	movs	r2, #44	@ 0x2c
 800a2bc:	6838      	ldr	r0, [r7, #0]
 800a2be:	f7ff fe5d 	bl	8009f7c <hif_receive>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f040 80b8 	bne.w	800a43a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a2ca:	4b3a      	ldr	r3, [pc, #232]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f000 80b3 	beq.w	800a43a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 800a2d4:	4b37      	ldr	r3, [pc, #220]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f107 0208 	add.w	r2, r7, #8
 800a2dc:	4611      	mov	r1, r2
 800a2de:	2013      	movs	r0, #19
 800a2e0:	4798      	blx	r3
}
 800a2e2:	e0aa      	b.n	800a43a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 800a2e4:	79fb      	ldrb	r3, [r7, #7]
 800a2e6:	2b04      	cmp	r3, #4
 800a2e8:	d117      	bne.n	800a31a <m2m_wifi_cb+0x246>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800a2ea:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	2204      	movs	r2, #4
 800a2f2:	6838      	ldr	r0, [r7, #0]
 800a2f4:	f7ff fe42 	bl	8009f7c <hif_receive>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f040 809d 	bne.w	800a43a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a300:	4b2c      	ldr	r3, [pc, #176]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	f000 8098 	beq.w	800a43a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 800a30a:	4b2a      	ldr	r3, [pc, #168]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800a312:	4611      	mov	r1, r2
 800a314:	2004      	movs	r0, #4
 800a316:	4798      	blx	r3
}
 800a318:	e08f      	b.n	800a43a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 800a31a:	79fb      	ldrb	r3, [r7, #7]
 800a31c:	2b65      	cmp	r3, #101	@ 0x65
 800a31e:	d116      	bne.n	800a34e <m2m_wifi_cb+0x27a>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800a320:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800a324:	2300      	movs	r3, #0
 800a326:	2204      	movs	r2, #4
 800a328:	6838      	ldr	r0, [r7, #0]
 800a32a:	f7ff fe27 	bl	8009f7c <hif_receive>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	f040 8082 	bne.w	800a43a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a336:	4b1f      	ldr	r3, [pc, #124]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d07d      	beq.n	800a43a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 800a33e:	4b1d      	ldr	r3, [pc, #116]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800a346:	4611      	mov	r1, r2
 800a348:	2065      	movs	r0, #101	@ 0x65
 800a34a:	4798      	blx	r3
}
 800a34c:	e075      	b.n	800a43a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 800a34e:	79fb      	ldrb	r3, [r7, #7]
 800a350:	2b09      	cmp	r3, #9
 800a352:	d115      	bne.n	800a380 <m2m_wifi_cb+0x2ac>
        if(hif_receive(u32Addr, (uint8 *)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 800a354:	f107 0108 	add.w	r1, r7, #8
 800a358:	2301      	movs	r3, #1
 800a35a:	2264      	movs	r2, #100	@ 0x64
 800a35c:	6838      	ldr	r0, [r7, #0]
 800a35e:	f7ff fe0d 	bl	8009f7c <hif_receive>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d168      	bne.n	800a43a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a368:	4b12      	ldr	r3, [pc, #72]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d064      	beq.n	800a43a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 800a370:	4b10      	ldr	r3, [pc, #64]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f107 0208 	add.w	r2, r7, #8
 800a378:	4611      	mov	r1, r2
 800a37a:	2009      	movs	r0, #9
 800a37c:	4798      	blx	r3
}
 800a37e:	e05c      	b.n	800a43a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 800a380:	79fb      	ldrb	r3, [r7, #7]
 800a382:	2b2a      	cmp	r3, #42	@ 0x2a
 800a384:	d11c      	bne.n	800a3c0 <m2m_wifi_cb+0x2ec>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 800a386:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800a38a:	2301      	movs	r3, #1
 800a38c:	2204      	movs	r2, #4
 800a38e:	6838      	ldr	r0, [r7, #0]
 800a390:	f7ff fdf4 	bl	8009f7c <hif_receive>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d14f      	bne.n	800a43a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a39a:	4b06      	ldr	r3, [pc, #24]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d04b      	beq.n	800a43a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 800a3a2:	4b04      	ldr	r3, [pc, #16]	@ (800a3b4 <m2m_wifi_cb+0x2e0>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	202a      	movs	r0, #42	@ 0x2a
 800a3ae:	4798      	blx	r3
}
 800a3b0:	e043      	b.n	800a43a <m2m_wifi_cb+0x366>
 800a3b2:	bf00      	nop
 800a3b4:	200030a0 	.word	0x200030a0
 800a3b8:	200030a4 	.word	0x200030a4
 800a3bc:	2000309c 	.word	0x2000309c
    else if(u8OpCode == M2M_WIFI_REQRSP_DELETE_APID)
 800a3c0:	79fb      	ldrb	r3, [r7, #7]
 800a3c2:	2b27      	cmp	r3, #39	@ 0x27
 800a3c4:	d115      	bne.n	800a3f2 <m2m_wifi_cb+0x31e>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MGenericResp), 0) == M2M_SUCCESS)
 800a3c6:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	2204      	movs	r2, #4
 800a3ce:	6838      	ldr	r0, [r7, #0]
 800a3d0:	f7ff fdd4 	bl	8009f7c <hif_receive>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d12f      	bne.n	800a43a <m2m_wifi_cb+0x366>
            if(gpfAppWifiCb)
 800a3da:	4b1a      	ldr	r3, [pc, #104]	@ (800a444 <m2m_wifi_cb+0x370>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d02b      	beq.n	800a43a <m2m_wifi_cb+0x366>
                gpfAppWifiCb(M2M_WIFI_REQRSP_DELETE_APID, &strResp);
 800a3e2:	4b18      	ldr	r3, [pc, #96]	@ (800a444 <m2m_wifi_cb+0x370>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	2027      	movs	r0, #39	@ 0x27
 800a3ee:	4798      	blx	r3
}
 800a3f0:	e023      	b.n	800a43a <m2m_wifi_cb+0x366>
    else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 800a3f2:	79fb      	ldrb	r3, [r7, #7]
 800a3f4:	2b20      	cmp	r3, #32
 800a3f6:	d120      	bne.n	800a43a <m2m_wifi_cb+0x366>
        if(hif_receive(u32Addr, (uint8 *)&strPrng, sizeof(tstrPrng), 0) == M2M_SUCCESS)
 800a3f8:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	2208      	movs	r2, #8
 800a400:	6838      	ldr	r0, [r7, #0]
 800a402:	f7ff fdbb 	bl	8009f7c <hif_receive>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d116      	bne.n	800a43a <m2m_wifi_cb+0x366>
            if(hif_receive(u32Addr + sizeof(tstrPrng), strPrng.pu8RngBuff, strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	f103 0008 	add.w	r0, r3, #8
 800a412:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a414:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 800a418:	2301      	movs	r3, #1
 800a41a:	f7ff fdaf 	bl	8009f7c <hif_receive>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10a      	bne.n	800a43a <m2m_wifi_cb+0x366>
                if(gpfAppWifiCb)
 800a424:	4b07      	ldr	r3, [pc, #28]	@ (800a444 <m2m_wifi_cb+0x370>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d006      	beq.n	800a43a <m2m_wifi_cb+0x366>
                    gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG, &strPrng);
 800a42c:	4b05      	ldr	r3, [pc, #20]	@ (800a444 <m2m_wifi_cb+0x370>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800a434:	4611      	mov	r1, r2
 800a436:	2020      	movs	r0, #32
 800a438:	4798      	blx	r3
}
 800a43a:	bf00      	nop
 800a43c:	37b0      	adds	r7, #176	@ 0xb0
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	200030a0 	.word	0x200030a0

0800a448 <m2m_wifi_init_hold>:
    s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8 *)pCRL, sizeof(tstrTlsCrlInfo), 0);
    return s8Ret;
}

sint8 m2m_wifi_init_hold(void)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
    sint8 ret = M2M_ERR_FAIL;
 800a44e:	23f4      	movs	r3, #244	@ 0xf4
 800a450:	71fb      	strb	r3, [r7, #7]

    /* Apply device specific initialization. */
    ret = nm_drv_init_hold();
 800a452:	f001 f845 	bl	800b4e0 <nm_drv_init_hold>
 800a456:	4603      	mov	r3, r0
 800a458:	71fb      	strb	r3, [r7, #7]

    if(M2M_SUCCESS == ret)
 800a45a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d102      	bne.n	800a468 <m2m_wifi_init_hold+0x20>
        gu8WifiState = WIFI_STATE_INIT;
 800a462:	4b04      	ldr	r3, [pc, #16]	@ (800a474 <m2m_wifi_init_hold+0x2c>)
 800a464:	2201      	movs	r2, #1
 800a466:	701a      	strb	r2, [r3, #0]

    return ret;
 800a468:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	2000309d 	.word	0x2000309d

0800a478 <m2m_wifi_init_start>:

sint8 m2m_wifi_init_start(tstrWifiInitParam *pWifiInitParam)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08e      	sub	sp, #56	@ 0x38
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
    tstrM2mRev strtmp;
    sint8 ret = M2M_SUCCESS;
 800a480:	2300      	movs	r3, #0
 800a482:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 800a486:	2301      	movs	r3, #1
 800a488:	72fb      	strb	r3, [r7, #11]

    if(pWifiInitParam == NULL) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d103      	bne.n	800a498 <m2m_wifi_init_start+0x20>
        ret = M2M_ERR_FAIL;
 800a490:	23f4      	movs	r3, #244	@ 0xf4
 800a492:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        goto _EXIT0;
 800a496:	e035      	b.n	800a504 <m2m_wifi_init_start+0x8c>
    }

    gpfAppWifiCb = pWifiInitParam->pfAppWifiCb;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a1c      	ldr	r2, [pc, #112]	@ (800a510 <m2m_wifi_init_start+0x98>)
 800a49e:	6013      	str	r3, [r2, #0]
    gu16ethRcvBufSize = pWifiInitParam->strEthInitParam.u16ethRcvBufSize;
	if (pWifiInitParam->strEthInitParam.u8EthernetEnable)		
		u8WifiMode = M2M_WIFI_MODE_ETHERNET;
#endif /* ETH_MODE */

    gu8scanInProgress = 0;
 800a4a0:	4b1c      	ldr	r3, [pc, #112]	@ (800a514 <m2m_wifi_init_start+0x9c>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	701a      	strb	r2, [r3, #0]
    /* Apply device specific initialization. */
    ret = nm_drv_init_start(&u8WifiMode);
 800a4a6:	f107 030b 	add.w	r3, r7, #11
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f001 f832 	bl	800b514 <nm_drv_init_start>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if(ret != M2M_SUCCESS) goto _EXIT0;
 800a4b6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d121      	bne.n	800a502 <m2m_wifi_init_start+0x8a>

    gu8WifiState = WIFI_STATE_START;
 800a4be:	4b16      	ldr	r3, [pc, #88]	@ (800a518 <m2m_wifi_init_start+0xa0>)
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	701a      	strb	r2, [r3, #0]

    /* Initialize host interface module */
    ret = hif_init(NULL);
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	f7ff fad5 	bl	8009a74 <hif_init>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if(ret != M2M_SUCCESS) goto _EXIT1;
 800a4d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10c      	bne.n	800a4f2 <m2m_wifi_init_start+0x7a>

    hif_register_cb(M2M_REQ_GROUP_WIFI, m2m_wifi_cb);
 800a4d8:	4910      	ldr	r1, [pc, #64]	@ (800a51c <m2m_wifi_init_start+0xa4>)
 800a4da:	2001      	movs	r0, #1
 800a4dc:	f7ff fdb2 	bl	800a044 <hif_register_cb>

    ret = nm_get_firmware_full_info(&strtmp);
 800a4e0:	f107 030c 	add.w	r3, r7, #12
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f000 ff57 	bl	800b398 <nm_get_firmware_full_info>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmware Version\n");
	}

    goto _EXIT0;
 800a4f0:	e008      	b.n	800a504 <m2m_wifi_init_start+0x8c>
    if(ret != M2M_SUCCESS) goto _EXIT1;
 800a4f2:	bf00      	nop

_EXIT1:
    gu8WifiState = WIFI_STATE_DEINIT;
 800a4f4:	4b08      	ldr	r3, [pc, #32]	@ (800a518 <m2m_wifi_init_start+0xa0>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	701a      	strb	r2, [r3, #0]
    nm_drv_deinit(NULL);
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	f001 f856 	bl	800b5ac <nm_drv_deinit>
 800a500:	e000      	b.n	800a504 <m2m_wifi_init_start+0x8c>
    if(ret != M2M_SUCCESS) goto _EXIT0;
 800a502:	bf00      	nop
_EXIT0:

    return ret;
 800a504:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3738      	adds	r7, #56	@ 0x38
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	200030a0 	.word	0x200030a0
 800a514:	200030a4 	.word	0x200030a4
 800a518:	2000309d 	.word	0x2000309d
 800a51c:	0800a0d5 	.word	0x0800a0d5

0800a520 <m2m_wifi_init>:

sint8 m2m_wifi_init(tstrWifiInitParam *pWifiInitParam)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 800a528:	2300      	movs	r3, #0
 800a52a:	73fb      	strb	r3, [r7, #15]

    ret = m2m_wifi_init_hold();
 800a52c:	f7ff ff8c 	bl	800a448 <m2m_wifi_init_hold>
 800a530:	4603      	mov	r3, r0
 800a532:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 800a534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d104      	bne.n	800a546 <m2m_wifi_init+0x26>
    {
        ret = m2m_wifi_init_start(pWifiInitParam);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f7ff ff9b 	bl	800a478 <m2m_wifi_init_start>
 800a542:	4603      	mov	r3, r0
 800a544:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 800a546:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <m2m_wifi_handle_events>:
{
    hif_yield();
}

sint8 m2m_wifi_handle_events(void *arg)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
    return hif_handle_isr();
 800a55a:	f7ff fcd3 	bl	8009f04 <hif_handle_isr>
 800a55e:	4603      	mov	r3, r0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <m2m_wifi_connect_prepare_msg>:
    tenuM2mSecType      enuAuthType,
    uint16              u16AuthSize,
    tstrNetworkId       *pstrNetworkId,
    tstrM2mWifiConnHdr  *pstrWifiConn
)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b086      	sub	sp, #24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	603b      	str	r3, [r7, #0]
 800a570:	4603      	mov	r3, r0
 800a572:	71fb      	strb	r3, [r7, #7]
 800a574:	460b      	mov	r3, r1
 800a576:	71bb      	strb	r3, [r7, #6]
 800a578:	4613      	mov	r3, r2
 800a57a:	80bb      	strh	r3, [r7, #4]
    sint8   ret = M2M_ERR_FAIL;
 800a57c:	23f4      	movs	r3, #244	@ 0xf4
 800a57e:	75fb      	strb	r3, [r7, #23]
    uint16  u16CredSize = sizeof(tstrM2mConnCredCmn) + u16AuthSize;
 800a580:	88bb      	ldrh	r3, [r7, #4]
 800a582:	332c      	adds	r3, #44	@ 0x2c
 800a584:	82bb      	strh	r3, [r7, #20]

    /* Check application params. */
    if(
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d074      	beq.n	800a676 <m2m_wifi_connect_prepare_msg+0x10e>
        (pstrNetworkId == NULL)
        || (pstrNetworkId->pu8Ssid == NULL)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d070      	beq.n	800a676 <m2m_wifi_connect_prepare_msg+0x10e>
        || (pstrNetworkId->u8SsidLen >= M2M_MAX_SSID_LEN)
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	7a1b      	ldrb	r3, [r3, #8]
 800a598:	2b20      	cmp	r3, #32
 800a59a:	d86c      	bhi.n	800a676 <m2m_wifi_connect_prepare_msg+0x10e>
    )
        goto INVALID_ARG;

    if(pstrWifiConn != NULL)
 800a59c:	6a3b      	ldr	r3, [r7, #32]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d066      	beq.n	800a670 <m2m_wifi_connect_prepare_msg+0x108>
    {
        tstrM2mConnCredHdr  *pstrHdr = &pstrWifiConn->strConnCredHdr;
 800a5a2:	6a3b      	ldr	r3, [r7, #32]
 800a5a4:	613b      	str	r3, [r7, #16]
        tstrM2mConnCredCmn  *pstrCmn = &pstrWifiConn->strConnCredCmn;
 800a5a6:	6a3b      	ldr	r3, [r7, #32]
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	60fb      	str	r3, [r7, #12]

        m2m_memset((uint8 *)pstrWifiConn, 0, sizeof(tstrM2mWifiConnHdr));
 800a5ac:	2230      	movs	r2, #48	@ 0x30
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	6a38      	ldr	r0, [r7, #32]
 800a5b2:	f7ff f909 	bl	80097c8 <m2m_memset>

        pstrHdr->u16CredSize = u16CredSize;
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	8aba      	ldrh	r2, [r7, #20]
 800a5ba:	801a      	strh	r2, [r3, #0]
        switch(enuCredStoreOption)
 800a5bc:	79fb      	ldrb	r3, [r7, #7]
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d006      	beq.n	800a5d0 <m2m_wifi_connect_prepare_msg+0x68>
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	dc59      	bgt.n	800a67a <m2m_wifi_connect_prepare_msg+0x112>
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d010      	beq.n	800a5ec <m2m_wifi_connect_prepare_msg+0x84>
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d007      	beq.n	800a5de <m2m_wifi_connect_prepare_msg+0x76>
            pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
        // intentional fall through...
        case WIFI_CRED_DONTSAVE:
            break;
        default:
            goto INVALID_ARG;
 800a5ce:	e054      	b.n	800a67a <m2m_wifi_connect_prepare_msg+0x112>
            pstrHdr->u8CredStoreFlags |= M2M_CRED_ENCRYPT_FLAG;
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	789b      	ldrb	r3, [r3, #2]
 800a5d4:	f043 0302 	orr.w	r3, r3, #2
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	709a      	strb	r2, [r3, #2]
            pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	789b      	ldrb	r3, [r3, #2]
 800a5e2:	f043 0301 	orr.w	r3, r3, #1
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	709a      	strb	r2, [r3, #2]
            break;
 800a5ec:	bf00      	nop
        }

        if(pstrNetworkId->enuChannel == M2M_WIFI_CH_ALL)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	7a5b      	ldrb	r3, [r3, #9]
 800a5f2:	2bff      	cmp	r3, #255	@ 0xff
 800a5f4:	d104      	bne.n	800a600 <m2m_wifi_connect_prepare_msg+0x98>
            pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel);
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	7a5a      	ldrb	r2, [r3, #9]
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	70da      	strb	r2, [r3, #3]
 800a5fe:	e00d      	b.n	800a61c <m2m_wifi_connect_prepare_msg+0xb4>
        else if((pstrNetworkId->enuChannel <= M2M_WIFI_CH_14) && (pstrNetworkId->enuChannel >= M2M_WIFI_CH_1))
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	7a5b      	ldrb	r3, [r3, #9]
 800a604:	2b0e      	cmp	r3, #14
 800a606:	d83a      	bhi.n	800a67e <m2m_wifi_connect_prepare_msg+0x116>
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	7a5b      	ldrb	r3, [r3, #9]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d036      	beq.n	800a67e <m2m_wifi_connect_prepare_msg+0x116>
            pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel) - 1;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	7a5b      	ldrb	r3, [r3, #9]
 800a614:	3b01      	subs	r3, #1
 800a616:	b2da      	uxtb	r2, r3
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	70da      	strb	r2, [r3, #3]
        else
            goto INVALID_ARG;

        if((enuAuthType == M2M_WIFI_SEC_INVALID) || (enuAuthType >= M2M_WIFI_NUM_AUTH_TYPES))
 800a61c:	79bb      	ldrb	r3, [r7, #6]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d02f      	beq.n	800a682 <m2m_wifi_connect_prepare_msg+0x11a>
 800a622:	79bb      	ldrb	r3, [r7, #6]
 800a624:	2b04      	cmp	r3, #4
 800a626:	d82c      	bhi.n	800a682 <m2m_wifi_connect_prepare_msg+0x11a>
            goto INVALID_ARG;
        pstrCmn->u8AuthType = (uint8)enuAuthType;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	79ba      	ldrb	r2, [r7, #6]
 800a62c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        pstrCmn->u8SsidLen = pstrNetworkId->u8SsidLen;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	7a1a      	ldrb	r2, [r3, #8]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	701a      	strb	r2, [r3, #0]
        m2m_memcpy(pstrCmn->au8Ssid, pstrNetworkId->pu8Ssid, pstrNetworkId->u8SsidLen);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	1c58      	adds	r0, r3, #1
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	6859      	ldr	r1, [r3, #4]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	7a1b      	ldrb	r3, [r3, #8]
 800a644:	461a      	mov	r2, r3
 800a646:	f7ff f89f 	bl	8009788 <m2m_memcpy>
        if(pstrNetworkId->pu8Bssid != NULL)
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00c      	beq.n	800a66c <m2m_wifi_connect_prepare_msg+0x104>
        {
            pstrCmn->u8Options = M2M_WIFI_CONN_BSSID_FLAG;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            m2m_memcpy(pstrCmn->au8Bssid, pstrNetworkId->pu8Bssid, M2M_MAC_ADDRES_LEN);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f103 0022 	add.w	r0, r3, #34	@ 0x22
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2206      	movs	r2, #6
 800a666:	4619      	mov	r1, r3
 800a668:	f7ff f88e 	bl	8009788 <m2m_memcpy>
        }
        /* Everything is ok, set return value. */
        ret = M2M_SUCCESS;
 800a66c:	2300      	movs	r3, #0
 800a66e:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 800a670:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a674:	e008      	b.n	800a688 <m2m_wifi_connect_prepare_msg+0x120>
        goto INVALID_ARG;
 800a676:	bf00      	nop
 800a678:	e004      	b.n	800a684 <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800a67a:	bf00      	nop
 800a67c:	e002      	b.n	800a684 <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800a67e:	bf00      	nop
 800a680:	e000      	b.n	800a684 <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 800a682:	bf00      	nop
INVALID_ARG:
    return M2M_ERR_INVALID_ARG;
 800a684:	f06f 030e 	mvn.w	r3, #14
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3718      	adds	r7, #24
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <m2m_wifi_connect_open>:
/*************************************************************************************************/
sint8 m2m_wifi_connect_open(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId      *pstrNetworkId
)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b094      	sub	sp, #80	@ 0x50
 800a694:	af04      	add	r7, sp, #16
 800a696:	4603      	mov	r3, r0
 800a698:	6039      	str	r1, [r7, #0]
 800a69a:	71fb      	strb	r3, [r7, #7]
    sint8               ret = M2M_ERR_INVALID_ARG;
 800a69c:	23f1      	movs	r3, #241	@ 0xf1
 800a69e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    tstrM2mWifiConnHdr  strConnHdr;

    ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption, M2M_WIFI_SEC_OPEN, 0, pstrNetworkId, &strConnHdr);
 800a6a2:	79f8      	ldrb	r0, [r7, #7]
 800a6a4:	f107 030c 	add.w	r3, r7, #12
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2101      	movs	r1, #1
 800a6b0:	f7ff ff5a 	bl	800a568 <m2m_wifi_connect_prepare_msg>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if(ret == M2M_SUCCESS)
 800a6ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10f      	bne.n	800a6e2 <m2m_wifi_connect_open+0x52>
    {
        ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN,
 800a6c2:	f107 020c 	add.w	r2, r7, #12
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	9302      	str	r3, [sp, #8]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	9301      	str	r3, [sp, #4]
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	2330      	movs	r3, #48	@ 0x30
 800a6d4:	213b      	movs	r1, #59	@ 0x3b
 800a6d6:	2001      	movs	r0, #1
 800a6d8:	f7ff f9e8 	bl	8009aac <hif_send>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                       (uint8 *)&strConnHdr, sizeof(strConnHdr),
                       NULL, 0, 0);
    }
    return ret;
 800a6e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3740      	adds	r7, #64	@ 0x40
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <m2m_wifi_connect_wep>:
sint8 m2m_wifi_connect_wep(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuthWep         *pstrAuthWep
)
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	b085      	sub	sp, #20
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	60b9      	str	r1, [r7, #8]
 800a6f8:	607a      	str	r2, [r7, #4]
 800a6fa:	73fb      	strb	r3, [r7, #15]
    /* As of 19.7.5 the WEP protocol is deprecated */
    return M2M_ERR_INVALID;
 800a6fc:	f06f 030f 	mvn.w	r3, #15
}
 800a700:	4618      	mov	r0, r3
 800a702:	3714      	adds	r7, #20
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <m2m_wifi_connect_psk>:
sint8 m2m_wifi_connect_psk(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuthPsk         *pstrAuthPsk
)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b096      	sub	sp, #88	@ 0x58
 800a710:	af04      	add	r7, sp, #16
 800a712:	4603      	mov	r3, r0
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
 800a718:	73fb      	strb	r3, [r7, #15]
    sint8   ret = M2M_ERR_INVALID_ARG;
 800a71a:	23f1      	movs	r3, #241	@ 0xf1
 800a71c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if(pstrAuthPsk != NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d07e      	beq.n	800a824 <m2m_wifi_connect_psk+0x118>
    {
        tstrM2mWifiConnHdr  strConnHdr;

        ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption,
 800a726:	7bf8      	ldrb	r0, [r7, #15]
 800a728:	f107 0310 	add.w	r3, r7, #16
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	226c      	movs	r2, #108	@ 0x6c
 800a732:	2102      	movs	r1, #2
 800a734:	f7ff ff18 	bl	800a568 <m2m_wifi_connect_prepare_msg>
 800a738:	4603      	mov	r3, r0
 800a73a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                           M2M_WIFI_SEC_WPA_PSK,
                                           sizeof(tstrM2mWifiPsk),
                                           pstrNetworkId,
                                           &strConnHdr);

        if(ret == M2M_SUCCESS)
 800a73e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800a742:	2b00      	cmp	r3, #0
 800a744:	d16e      	bne.n	800a824 <m2m_wifi_connect_psk+0x118>
        {
            tstrM2mWifiPsk  *pstrPsk = (tstrM2mWifiPsk *)malloc(sizeof(tstrM2mWifiPsk));
 800a746:	206c      	movs	r0, #108	@ 0x6c
 800a748:	f001 fd92 	bl	800c270 <malloc>
 800a74c:	4603      	mov	r3, r0
 800a74e:	643b      	str	r3, [r7, #64]	@ 0x40
            if(pstrPsk != NULL)
 800a750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a752:	2b00      	cmp	r3, #0
 800a754:	d063      	beq.n	800a81e <m2m_wifi_connect_psk+0x112>
            {
                m2m_memset((uint8 *)pstrPsk, 0, sizeof(tstrM2mWifiPsk));
 800a756:	226c      	movs	r2, #108	@ 0x6c
 800a758:	2100      	movs	r1, #0
 800a75a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a75c:	f7ff f834 	bl	80097c8 <m2m_memset>
                if(pstrAuthPsk->pu8Psk != NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d025      	beq.n	800a7b4 <m2m_wifi_connect_psk+0xa8>
                {
                    if(pstrAuthPsk->pu8Passphrase != NULL)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d003      	beq.n	800a778 <m2m_wifi_connect_psk+0x6c>
                        ret = M2M_ERR_INVALID_ARG;
 800a770:	23f1      	movs	r3, #241	@ 0xf1
 800a772:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a776:	e03a      	b.n	800a7ee <m2m_wifi_connect_psk+0xe2>
                    else
                    {
                        pstrPsk->u8PassphraseLen = M2M_MAX_PSK_LEN-1;
 800a778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a77a:	2240      	movs	r2, #64	@ 0x40
 800a77c:	701a      	strb	r2, [r3, #0]
                        /* Use hexstr_2_bytes to verify pu8Psk input. */
                        if(M2M_SUCCESS != hexstr_2_bytes(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen/2))
 800a77e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a780:	1c58      	adds	r0, r3, #1
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6819      	ldr	r1, [r3, #0]
 800a786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	085b      	lsrs	r3, r3, #1
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	461a      	mov	r2, r3
 800a790:	f7ff f871 	bl	8009876 <hexstr_2_bytes>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d002      	beq.n	800a7a0 <m2m_wifi_connect_psk+0x94>
                            ret = M2M_ERR_INVALID_ARG;
 800a79a:	23f1      	movs	r3, #241	@ 0xf1
 800a79c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                        m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen);
 800a7a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7a2:	1c58      	adds	r0, r3, #1
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6819      	ldr	r1, [r3, #0]
 800a7a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	f7fe ffeb 	bl	8009788 <m2m_memcpy>
 800a7b2:	e01c      	b.n	800a7ee <m2m_wifi_connect_psk+0xe2>
                    }
                }
                else if(pstrAuthPsk->pu8Passphrase != NULL)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d015      	beq.n	800a7e8 <m2m_wifi_connect_psk+0xdc>
                {
                    if(pstrAuthPsk->u8PassphraseLen > M2M_MAX_PSK_LEN-1)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	7a1b      	ldrb	r3, [r3, #8]
 800a7c0:	2b40      	cmp	r3, #64	@ 0x40
 800a7c2:	d903      	bls.n	800a7cc <m2m_wifi_connect_psk+0xc0>
                        ret = M2M_ERR_INVALID_ARG;
 800a7c4:	23f1      	movs	r3, #241	@ 0xf1
 800a7c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a7ca:	e010      	b.n	800a7ee <m2m_wifi_connect_psk+0xe2>
                    else
                    {
                        pstrPsk->u8PassphraseLen = pstrAuthPsk->u8PassphraseLen;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	7a1a      	ldrb	r2, [r3, #8]
 800a7d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7d2:	701a      	strb	r2, [r3, #0]
                        m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Passphrase, pstrPsk->u8PassphraseLen);
 800a7d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7d6:	1c58      	adds	r0, r3, #1
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6859      	ldr	r1, [r3, #4]
 800a7dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	f7fe ffd1 	bl	8009788 <m2m_memcpy>
 800a7e6:	e002      	b.n	800a7ee <m2m_wifi_connect_psk+0xe2>
                    }
                }
                else
                    ret = M2M_ERR_INVALID_ARG;
 800a7e8:	23f1      	movs	r3, #241	@ 0xf1
 800a7ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                if(ret == M2M_SUCCESS)
 800a7ee:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d10f      	bne.n	800a816 <m2m_wifi_connect_psk+0x10a>
                {
                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
 800a7f6:	f107 0210 	add.w	r2, r7, #16
 800a7fa:	2330      	movs	r3, #48	@ 0x30
 800a7fc:	9302      	str	r3, [sp, #8]
 800a7fe:	236c      	movs	r3, #108	@ 0x6c
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	2330      	movs	r3, #48	@ 0x30
 800a808:	21bb      	movs	r1, #187	@ 0xbb
 800a80a:	2001      	movs	r0, #1
 800a80c:	f7ff f94e 	bl	8009aac <hif_send>
 800a810:	4603      	mov	r3, r0
 800a812:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                   (uint8 *)&strConnHdr, sizeof(tstrM2mWifiConnHdr),
                                   (uint8 *)pstrPsk, sizeof(tstrM2mWifiPsk), sizeof(tstrM2mWifiConnHdr));
                }
                free(pstrPsk);
 800a816:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a818:	f001 fd32 	bl	800c280 <free>
 800a81c:	e002      	b.n	800a824 <m2m_wifi_connect_psk+0x118>
            }
            else
                ret = M2M_ERR_MEM_ALLOC;
 800a81e:	23fd      	movs	r3, #253	@ 0xfd
 800a820:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }
    return ret;
 800a824:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3748      	adds	r7, #72	@ 0x48
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <m2m_wifi_connect_1x_mschap2>:
sint8 m2m_wifi_connect_1x_mschap2(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuth1xMschap2   *pstrAuth1xMschap2
)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b098      	sub	sp, #96	@ 0x60
 800a834:	af04      	add	r7, sp, #16
 800a836:	4603      	mov	r3, r0
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
 800a83c:	73fb      	strb	r3, [r7, #15]
    sint8 ret = M2M_ERR_INVALID_ARG;
 800a83e:	23f1      	movs	r3, #241	@ 0xf1
 800a840:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if(pstrAuth1xMschap2 != NULL)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	f000 80d3 	beq.w	800a9f2 <m2m_wifi_connect_1x_mschap2+0x1c2>
    {
        if(pstrAuth1xMschap2->pu8Domain == NULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d102      	bne.n	800a85a <m2m_wifi_connect_1x_mschap2+0x2a>
            pstrAuth1xMschap2->u16DomainLen = 0;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	819a      	strh	r2, [r3, #12]
        if(
            (pstrAuth1xMschap2->pu8UserName != NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
        if(
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f000 80c7 	beq.w	800a9f2 <m2m_wifi_connect_1x_mschap2+0x1c2>
            && (pstrAuth1xMschap2->pu8Password != NULL)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f000 80c2 	beq.w	800a9f2 <m2m_wifi_connect_1x_mschap2+0x1c2>
            && ((uint32)(pstrAuth1xMschap2->u16DomainLen) + pstrAuth1xMschap2->u16UserNameLen <= M2M_AUTH_1X_USER_LEN_MAX)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	899b      	ldrh	r3, [r3, #12]
 800a872:	461a      	mov	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	89db      	ldrh	r3, [r3, #14]
 800a878:	4413      	add	r3, r2
 800a87a:	2b64      	cmp	r3, #100	@ 0x64
 800a87c:	f200 80b9 	bhi.w	800a9f2 <m2m_wifi_connect_1x_mschap2+0x1c2>
            && (pstrAuth1xMschap2->u16PasswordLen <= M2M_AUTH_1X_PASSWORD_LEN_MAX)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	8a1b      	ldrh	r3, [r3, #16]
 800a884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a888:	f200 80b3 	bhi.w	800a9f2 <m2m_wifi_connect_1x_mschap2+0x1c2>
        )
        {
            tstrM2mWifiConnHdr  strConnHdr;
            uint16              u16AuthSize =   sizeof(tstrM2mWifi1xHdr) +
                                                pstrAuth1xMschap2->u16DomainLen +
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	899a      	ldrh	r2, [r3, #12]
                                                pstrAuth1xMschap2->u16UserNameLen +
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	89db      	ldrh	r3, [r3, #14]
                                                pstrAuth1xMschap2->u16DomainLen +
 800a894:	4413      	add	r3, r2
 800a896:	b29a      	uxth	r2, r3
                                                pstrAuth1xMschap2->u16PasswordLen;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	8a1b      	ldrh	r3, [r3, #16]
                                                pstrAuth1xMschap2->u16UserNameLen +
 800a89c:	4413      	add	r3, r2
 800a89e:	b29b      	uxth	r3, r3
            uint16              u16AuthSize =   sizeof(tstrM2mWifi1xHdr) +
 800a8a0:	332c      	adds	r3, #44	@ 0x2c
 800a8a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

            ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption,
 800a8a6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a8aa:	7bf8      	ldrb	r0, [r7, #15]
 800a8ac:	f107 0310 	add.w	r3, r7, #16
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	2104      	movs	r1, #4
 800a8b6:	f7ff fe57 	bl	800a568 <m2m_wifi_connect_prepare_msg>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                                               M2M_WIFI_SEC_802_1X,
                                               u16AuthSize,
                                               pstrNetworkId,
                                               &strConnHdr);

            if(ret == M2M_SUCCESS)
 800a8c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f040 8094 	bne.w	800a9f2 <m2m_wifi_connect_1x_mschap2+0x1c2>
            {
                tstrM2mWifi1xHdr    *pstr1xHdr = (tstrM2mWifi1xHdr *)malloc(u16AuthSize);
 800a8ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f001 fcce 	bl	800c270 <malloc>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	643b      	str	r3, [r7, #64]	@ 0x40
                if(pstr1xHdr != NULL)
 800a8d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f000 8086 	beq.w	800a9ec <m2m_wifi_connect_1x_mschap2+0x1bc>
                {
                    uint8   *pu8AuthPtr = pstr1xHdr->au81xAuthDetails;
 800a8e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8e2:	332c      	adds	r3, #44	@ 0x2c
 800a8e4:	64bb      	str	r3, [r7, #72]	@ 0x48
                    m2m_memset((uint8 *)pstr1xHdr, 0, u16AuthSize);
 800a8e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a8f0:	f7fe ff6a 	bl	80097c8 <m2m_memset>

                    pstr1xHdr->u8Flags = M2M_802_1X_MSCHAP2_FLAG;
 800a8f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	701a      	strb	r2, [r3, #0]
                    if(pstrAuth1xMschap2->bUnencryptedUserName == true)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	7c9b      	ldrb	r3, [r3, #18]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d006      	beq.n	800a910 <m2m_wifi_connect_1x_mschap2+0xe0>
                        pstr1xHdr->u8Flags |= M2M_802_1X_UNENCRYPTED_USERNAME_FLAG;
 800a902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a90e:	701a      	strb	r2, [r3, #0]
                    if(pstrAuth1xMschap2->bPrependDomain == true)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	7cdb      	ldrb	r3, [r3, #19]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d006      	beq.n	800a926 <m2m_wifi_connect_1x_mschap2+0xf6>
                        pstr1xHdr->u8Flags |= M2M_802_1X_PREPEND_DOMAIN_FLAG;
 800a918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a920:	b2da      	uxtb	r2, r3
 800a922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a924:	701a      	strb	r2, [r3, #0]

                    pstr1xHdr->u8HdrLength = sizeof(tstrM2mWifi1xHdr);
 800a926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a928:	222c      	movs	r2, #44	@ 0x2c
 800a92a:	70da      	strb	r2, [r3, #3]
                    pstr1xHdr->u32TlsHsFlags = gu321xTlsHsFlags;
 800a92c:	4b34      	ldr	r3, [pc, #208]	@ (800aa00 <m2m_wifi_connect_1x_mschap2+0x1d0>)
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a932:	625a      	str	r2, [r3, #36]	@ 0x24
                    m2m_memcpy(pstr1xHdr->au8TlsSpecificRootNameSha1, gau81xRootSha1, sizeof(gau81xRootSha1));
 800a934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a936:	330c      	adds	r3, #12
 800a938:	2214      	movs	r2, #20
 800a93a:	4932      	ldr	r1, [pc, #200]	@ (800aa04 <m2m_wifi_connect_1x_mschap2+0x1d4>)
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7fe ff23 	bl	8009788 <m2m_memcpy>

                    pstr1xHdr->u8DomainLength = 0;
 800a942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a944:	2200      	movs	r2, #0
 800a946:	705a      	strb	r2, [r3, #1]
                    if(pstrAuth1xMschap2->pu8Domain != NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d012      	beq.n	800a976 <m2m_wifi_connect_1x_mschap2+0x146>
                    {
                        pstr1xHdr->u8DomainLength = (uint8)(pstrAuth1xMschap2->u16DomainLen);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	899b      	ldrh	r3, [r3, #12]
 800a954:	b2da      	uxtb	r2, r3
 800a956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a958:	705a      	strb	r2, [r3, #1]
                        m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8Domain, pstr1xHdr->u8DomainLength);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6819      	ldr	r1, [r3, #0]
 800a95e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a960:	785b      	ldrb	r3, [r3, #1]
 800a962:	461a      	mov	r2, r3
 800a964:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a966:	f7fe ff0f 	bl	8009788 <m2m_memcpy>
                        pu8AuthPtr += pstr1xHdr->u8DomainLength;
 800a96a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a96c:	785b      	ldrb	r3, [r3, #1]
 800a96e:	461a      	mov	r2, r3
 800a970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a972:	4413      	add	r3, r2
 800a974:	64bb      	str	r3, [r7, #72]	@ 0x48
                    }

                    pstr1xHdr->u8UserNameLength = (pstrAuth1xMschap2->u16UserNameLen);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	89db      	ldrh	r3, [r3, #14]
 800a97a:	b2da      	uxtb	r2, r3
 800a97c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a97e:	709a      	strb	r2, [r3, #2]
                    m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8UserName, pstr1xHdr->u8UserNameLength);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6859      	ldr	r1, [r3, #4]
 800a984:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a986:	789b      	ldrb	r3, [r3, #2]
 800a988:	461a      	mov	r2, r3
 800a98a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a98c:	f7fe fefc 	bl	8009788 <m2m_memcpy>
                    pu8AuthPtr += pstr1xHdr->u8UserNameLength;
 800a990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a992:	789b      	ldrb	r3, [r3, #2]
 800a994:	461a      	mov	r2, r3
 800a996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a998:	4413      	add	r3, r2
 800a99a:	64bb      	str	r3, [r7, #72]	@ 0x48

                    pstr1xHdr->u16PrivateKeyOffset = pu8AuthPtr - pstr1xHdr->au81xAuthDetails;
 800a99c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a99e:	332c      	adds	r3, #44	@ 0x2c
 800a9a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9a8:	809a      	strh	r2, [r3, #4]
                    pstr1xHdr->u16PrivateKeyLength = pstrAuth1xMschap2->u16PasswordLen;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	8a1a      	ldrh	r2, [r3, #16]
 800a9ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9b0:	80da      	strh	r2, [r3, #6]
                    m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8Password, pstr1xHdr->u16PrivateKeyLength);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6899      	ldr	r1, [r3, #8]
 800a9b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9b8:	88db      	ldrh	r3, [r3, #6]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a9be:	f7fe fee3 	bl	8009788 <m2m_memcpy>

                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
 800a9c2:	f107 0210 	add.w	r2, r7, #16
 800a9c6:	2330      	movs	r3, #48	@ 0x30
 800a9c8:	9302      	str	r3, [sp, #8]
 800a9ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a9ce:	9301      	str	r3, [sp, #4]
 800a9d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	2330      	movs	r3, #48	@ 0x30
 800a9d6:	21bb      	movs	r1, #187	@ 0xbb
 800a9d8:	2001      	movs	r0, #1
 800a9da:	f7ff f867 	bl	8009aac <hif_send>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                                   (uint8 *)&strConnHdr, sizeof(tstrM2mWifiConnHdr),
                                   (uint8 *)pstr1xHdr, u16AuthSize,
                                   sizeof(tstrM2mWifiConnHdr));
                    free(pstr1xHdr);
 800a9e4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a9e6:	f001 fc4b 	bl	800c280 <free>
 800a9ea:	e002      	b.n	800a9f2 <m2m_wifi_connect_1x_mschap2+0x1c2>
                }
                else
                    ret = M2M_ERR_MEM_ALLOC;
 800a9ec:	23fd      	movs	r3, #253	@ 0xfd
 800a9ee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            }
        }
    }
    return ret;
 800a9f2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3750      	adds	r7, #80	@ 0x50
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000028 	.word	0x20000028
 800aa04:	200030a8 	.word	0x200030a8

0800aa08 <m2m_wifi_connect>:
    }
    return ret;
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af02      	add	r7, sp, #8
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	607b      	str	r3, [r7, #4]
 800aa12:	460b      	mov	r3, r1
 800aa14:	72fb      	strb	r3, [r7, #11]
 800aa16:	4613      	mov	r3, r2
 800aa18:	72bb      	strb	r3, [r7, #10]
    return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch, 0);
 800aa1a:	7aba      	ldrb	r2, [r7, #10]
 800aa1c:	7af9      	ldrb	r1, [r7, #11]
 800aa1e:	2300      	movs	r3, #0
 800aa20:	9301      	str	r3, [sp, #4]
 800aa22:	8b3b      	ldrh	r3, [r7, #24]
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f000 f805 	bl	800aa38 <m2m_wifi_connect_sc>
 800aa2e:	4603      	mov	r3, r0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <m2m_wifi_connect_sc>:

sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b096      	sub	sp, #88	@ 0x58
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	607b      	str	r3, [r7, #4]
 800aa42:	460b      	mov	r3, r1
 800aa44:	72fb      	strb	r3, [r7, #11]
 800aa46:	4613      	mov	r3, r2
 800aa48:	72bb      	strb	r3, [r7, #10]
    sint8               s8Ret              = M2M_ERR_INVALID_ARG;
 800aa4a:	23f1      	movs	r3, #241	@ 0xf1
 800aa4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    tstrNetworkId       strNetworkId       = {NULL, (uint8 *)pcSsid, u8SsidLen, (tenuM2mScanCh)u16Ch};
 800aa50:	2300      	movs	r3, #0
 800aa52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa58:	7afb      	ldrb	r3, [r7, #11]
 800aa5a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800aa5e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    tenuCredStoreOption enuCredStoreOption = u8NoSaveCred ? WIFI_CRED_DONTSAVE : WIFI_CRED_SAVE_ENCRYPTED;
 800aa68:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d001      	beq.n	800aa74 <m2m_wifi_connect_sc+0x3c>
 800aa70:	2300      	movs	r3, #0
 800aa72:	e000      	b.n	800aa76 <m2m_wifi_connect_sc+0x3e>
 800aa74:	2302      	movs	r3, #2
 800aa76:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    /* This API does not support SSIDs which contain '\0'. If there is a '\0' character within the
     * first u8SsidLen characters, then assume that the input u8SsidLen was incorrect - set length
     * to strlen(pcSsid) and continue. This is to avoid a change from the behaviour of previously
     * released drivers. */
    if(u8SsidLen < M2M_MAX_SSID_LEN)
 800aa7a:	7afb      	ldrb	r3, [r7, #11]
 800aa7c:	2b20      	cmp	r3, #32
 800aa7e:	d80e      	bhi.n	800aa9e <m2m_wifi_connect_sc+0x66>
        while(u8SsidLen--)
 800aa80:	e008      	b.n	800aa94 <m2m_wifi_connect_sc+0x5c>
            if(strNetworkId.pu8Ssid[u8SsidLen] == 0)
 800aa82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa84:	7afb      	ldrb	r3, [r7, #11]
 800aa86:	4413      	add	r3, r2
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d102      	bne.n	800aa94 <m2m_wifi_connect_sc+0x5c>
                strNetworkId.u8SsidLen = u8SsidLen;
 800aa8e:	7afb      	ldrb	r3, [r7, #11]
 800aa90:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        while(u8SsidLen--)
 800aa94:	7afb      	ldrb	r3, [r7, #11]
 800aa96:	1e5a      	subs	r2, r3, #1
 800aa98:	72fa      	strb	r2, [r7, #11]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1f1      	bne.n	800aa82 <m2m_wifi_connect_sc+0x4a>

    switch((tenuM2mSecType)u8SecType)
 800aa9e:	7abb      	ldrb	r3, [r7, #10]
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	f200 808e 	bhi.w	800abc4 <m2m_wifi_connect_sc+0x18c>
 800aaa8:	a201      	add	r2, pc, #4	@ (adr r2, 800aab0 <m2m_wifi_connect_sc+0x78>)
 800aaaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaae:	bf00      	nop
 800aab0:	0800aac1 	.word	0x0800aac1
 800aab4:	0800aad9 	.word	0x0800aad9
 800aab8:	0800ab2f 	.word	0x0800ab2f
 800aabc:	0800ab6d 	.word	0x0800ab6d
    {
    case M2M_WIFI_SEC_OPEN:
        s8Ret = m2m_wifi_connect_open(enuCredStoreOption, &strNetworkId);
 800aac0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800aac4:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800aac8:	4611      	mov	r1, r2
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7ff fde0 	bl	800a690 <m2m_wifi_connect_open>
 800aad0:	4603      	mov	r3, r0
 800aad2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        break;
 800aad6:	e07c      	b.n	800abd2 <m2m_wifi_connect_sc+0x19a>
    case M2M_WIFI_SEC_WPA_PSK:
        if(pvAuthInfo != NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d074      	beq.n	800abc8 <m2m_wifi_connect_sc+0x190>
        {
            tstrAuthPsk strAuthPsk = {NULL, NULL, 0};
 800aade:	2300      	movs	r3, #0
 800aae0:	633b      	str	r3, [r7, #48]	@ 0x30
 800aae2:	2300      	movs	r3, #0
 800aae4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aae6:	2300      	movs	r3, #0
 800aae8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            uint16      len        = m2m_strlen((uint8 *)pvAuthInfo);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7fe fe88 	bl	8009802 <m2m_strlen>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

            if(len == M2M_MAX_PSK_LEN-1)
 800aaf8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800aafc:	2b40      	cmp	r3, #64	@ 0x40
 800aafe:	d102      	bne.n	800ab06 <m2m_wifi_connect_sc+0xce>
            {
                strAuthPsk.pu8Psk = (uint8 *)pvAuthInfo;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab04:	e006      	b.n	800ab14 <m2m_wifi_connect_sc+0xdc>
            }
            else
            {
                strAuthPsk.pu8Passphrase   = (uint8 *)pvAuthInfo;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	637b      	str	r3, [r7, #52]	@ 0x34
                strAuthPsk.u8PassphraseLen = len;
 800ab0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            }
            s8Ret = m2m_wifi_connect_psk(enuCredStoreOption, &strNetworkId, &strAuthPsk);
 800ab14:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ab18:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800ab1c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7ff fdf3 	bl	800a70c <m2m_wifi_connect_psk>
 800ab26:	4603      	mov	r3, r0
 800ab28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800ab2c:	e04c      	b.n	800abc8 <m2m_wifi_connect_sc+0x190>
    case M2M_WIFI_SEC_WEP:
        if(pvAuthInfo != NULL)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d04b      	beq.n	800abcc <m2m_wifi_connect_sc+0x194>
        {
            tstrM2mWifiWepParams    *pstrWepParams = (tstrM2mWifiWepParams *)pvAuthInfo;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	64fb      	str	r3, [r7, #76]	@ 0x4c
            tstrAuthWep             strAuthWep     = {pstrWepParams->au8WepKey, pstrWepParams->u8KeySz-1, pstrWepParams->u8KeyIndx};
 800ab38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab3a:	3302      	adds	r3, #2
 800ab3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab40:	785b      	ldrb	r3, [r3, #1]
 800ab42:	3b01      	subs	r3, #1
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800ab4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

            s8Ret = m2m_wifi_connect_wep(enuCredStoreOption, &strNetworkId, &strAuthWep);
 800ab52:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800ab56:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800ab5a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff fdc5 	bl	800a6ee <m2m_wifi_connect_wep>
 800ab64:	4603      	mov	r3, r0
 800ab66:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800ab6a:	e02f      	b.n	800abcc <m2m_wifi_connect_sc+0x194>
    case M2M_WIFI_SEC_802_1X:
        if(pvAuthInfo != NULL)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d02e      	beq.n	800abd0 <m2m_wifi_connect_sc+0x198>
        {
            tstr1xAuthCredentials   *pstr1xParams    = (tstr1xAuthCredentials *)pvAuthInfo;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	653b      	str	r3, [r7, #80]	@ 0x50
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800ab76:	f107 0314 	add.w	r3, r7, #20
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	605a      	str	r2, [r3, #4]
 800ab80:	609a      	str	r2, [r3, #8]
 800ab82:	60da      	str	r2, [r3, #12]
 800ab84:	611a      	str	r2, [r3, #16]
                                                        pstr1xParams->au8UserName,
 800ab86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800ab88:	61bb      	str	r3, [r7, #24]
                                                        pstr1xParams->au8Passwd,
 800ab8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab8c:	3315      	adds	r3, #21
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800ab8e:	61fb      	str	r3, [r7, #28]
                                                        0,
                                                        m2m_strlen(pstr1xParams->au8UserName),
 800ab90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fe fe35 	bl	8009802 <m2m_strlen>
 800ab98:	4603      	mov	r3, r0
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800ab9a:	847b      	strh	r3, [r7, #34]	@ 0x22
                                                        m2m_strlen(pstr1xParams->au8Passwd),
 800ab9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab9e:	3315      	adds	r3, #21
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fe fe2e 	bl	8009802 <m2m_strlen>
 800aba6:	4603      	mov	r3, r0
            tstrAuth1xMschap2       strAuth1xMschap2 = {NULL,
 800aba8:	84bb      	strh	r3, [r7, #36]	@ 0x24
                                                        false};

            s8Ret = m2m_wifi_connect_1x_mschap2(enuCredStoreOption, &strNetworkId, &strAuth1xMschap2);
 800abaa:	f107 0214 	add.w	r2, r7, #20
 800abae:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800abb2:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7ff fe3a 	bl	800a830 <m2m_wifi_connect_1x_mschap2>
 800abbc:	4603      	mov	r3, r0
 800abbe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        break;
 800abc2:	e005      	b.n	800abd0 <m2m_wifi_connect_sc+0x198>
    default:
        break;
 800abc4:	bf00      	nop
 800abc6:	e004      	b.n	800abd2 <m2m_wifi_connect_sc+0x19a>
        break;
 800abc8:	bf00      	nop
 800abca:	e002      	b.n	800abd2 <m2m_wifi_connect_sc+0x19a>
        break;
 800abcc:	bf00      	nop
 800abce:	e000      	b.n	800abd2 <m2m_wifi_connect_sc+0x19a>
        break;
 800abd0:	bf00      	nop
    }
    return s8Ret;
 800abd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3758      	adds	r7, #88	@ 0x58
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop

0800abe0 <chip_apply_conf>:

#define TIMEOUT						(0x2000ul)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800abe8:	2300      	movs	r3, #0
 800abea:	75fb      	strb	r3, [r7, #23]
	uint32 val32 = u32Conf;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800abf6:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
 800abf8:	6939      	ldr	r1, [r7, #16]
 800abfa:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800abfe:	f000 fb05 	bl	800b20c <nm_write_reg>
		if(val32 != 0) {		
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d013      	beq.n	800ac30 <chip_apply_conf+0x50>
			uint32 reg = 0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 800ac0c:	f107 030c 	add.w	r3, r7, #12
 800ac10:	4619      	mov	r1, r3
 800ac12:	f44f 50a5 	mov.w	r0, #5280	@ 0x14a0
 800ac16:	f000 faeb 	bl	800b1f0 <nm_read_reg_with_ret>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	75fb      	strb	r3, [r7, #23]
			if(ret == M2M_SUCCESS) {
 800ac1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1e8      	bne.n	800abf8 <chip_apply_conf+0x18>
				if(reg == val32)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	693a      	ldr	r2, [r7, #16]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d002      	beq.n	800ac34 <chip_apply_conf+0x54>
		nm_write_reg(rNMI_GP_REG_1, val32);
 800ac2e:	e7e3      	b.n	800abf8 <chip_apply_conf+0x18>
					break;
			}
		} else {
			break;
 800ac30:	bf00      	nop
 800ac32:	e000      	b.n	800ac36 <chip_apply_conf+0x56>
					break;
 800ac34:	bf00      	nop
		}
	} while(1);

	return M2M_SUCCESS;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800ac46:	2300      	movs	r3, #0
 800ac48:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	71fb      	strb	r3, [r7, #7]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 800ac4e:	463b      	mov	r3, r7
 800ac50:	4619      	mov	r1, r3
 800ac52:	f241 4008 	movw	r0, #5128	@ 0x1408
 800ac56:	f000 facb 	bl	800b1f0 <nm_read_reg_with_ret>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d12b      	bne.n	800acbe <enable_interrupts+0x7e>
	
	reg |= ((uint32) 1 << 8);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac6c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	4619      	mov	r1, r3
 800ac72:	f241 4008 	movw	r0, #5128	@ 0x1408
 800ac76:	f000 fac9 	bl	800b20c <nm_write_reg>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d11d      	bne.n	800acc2 <enable_interrupts+0x82>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 800ac86:	463b      	mov	r3, r7
 800ac88:	4619      	mov	r1, r3
 800ac8a:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800ac8e:	f000 faaf 	bl	800b1f0 <nm_read_reg_with_ret>
 800ac92:	4603      	mov	r3, r0
 800ac94:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800ac96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d113      	bne.n	800acc6 <enable_interrupts+0x86>
	
	reg |= ((uint32) 1 << 16);
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aca4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	4619      	mov	r1, r3
 800acaa:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800acae:	f000 faad 	bl	800b20c <nm_write_reg>
 800acb2:	4603      	mov	r3, r0
 800acb4:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800acb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acba:	2b00      	cmp	r3, #0
ERR1:	
 800acbc:	e004      	b.n	800acc8 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800acbe:	bf00      	nop
 800acc0:	e002      	b.n	800acc8 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800acc2:	bf00      	nop
 800acc4:	e000      	b.n	800acc8 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800acc6:	bf00      	nop
	return ret;
 800acc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
 800acda:	4b31      	ldr	r3, [pc, #196]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d157      	bne.n	800ad92 <nmi_get_chipid+0xbe>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 800ace2:	492f      	ldr	r1, [pc, #188]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ace4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ace8:	f000 fa82 	bl	800b1f0 <nm_read_reg_with_ret>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d004      	beq.n	800acfc <nmi_get_chipid+0x28>
			chipid = 0;
 800acf2:	4b2b      	ldr	r3, [pc, #172]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800acf4:	2200      	movs	r2, #0
 800acf6:	601a      	str	r2, [r3, #0]
			return 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	e04c      	b.n	800ad96 <nmi_get_chipid+0xc2>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 800acfc:	1d3b      	adds	r3, r7, #4
 800acfe:	4619      	mov	r1, r3
 800ad00:	f241 30f4 	movw	r0, #5108	@ 0x13f4
 800ad04:	f000 fa74 	bl	800b1f0 <nm_read_reg_with_ret>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d004      	beq.n	800ad18 <nmi_get_chipid+0x44>
			chipid = 0;
 800ad0e:	4b24      	ldr	r3, [pc, #144]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	601a      	str	r2, [r3, #0]
			return 0;
 800ad14:	2300      	movs	r3, #0
 800ad16:	e03e      	b.n	800ad96 <nmi_get_chipid+0xc2>
		}

		if (chipid == 0x1002a0)  {
 800ad18:	4b21      	ldr	r3, [pc, #132]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a21      	ldr	r2, [pc, #132]	@ (800ada4 <nmi_get_chipid+0xd0>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d106      	bne.n	800ad30 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d028      	beq.n	800ad7a <nmi_get_chipid+0xa6>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
 800ad28:	4b1d      	ldr	r3, [pc, #116]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ad2a:	4a1f      	ldr	r2, [pc, #124]	@ (800ada8 <nmi_get_chipid+0xd4>)
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	e024      	b.n	800ad7a <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1002b0) {
 800ad30:	4b1b      	ldr	r3, [pc, #108]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a1d      	ldr	r2, [pc, #116]	@ (800adac <nmi_get_chipid+0xd8>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d10d      	bne.n	800ad56 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b03      	cmp	r3, #3
 800ad3e:	d01c      	beq.n	800ad7a <nmi_get_chipid+0xa6>
			} else if(rfrevid == 4) { /* 1002B1 */
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b04      	cmp	r3, #4
 800ad44:	d103      	bne.n	800ad4e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
 800ad46:	4b16      	ldr	r3, [pc, #88]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ad48:	4a19      	ldr	r2, [pc, #100]	@ (800adb0 <nmi_get_chipid+0xdc>)
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	e015      	b.n	800ad7a <nmi_get_chipid+0xa6>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
 800ad4e:	4b14      	ldr	r3, [pc, #80]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ad50:	4a18      	ldr	r2, [pc, #96]	@ (800adb4 <nmi_get_chipid+0xe0>)
 800ad52:	601a      	str	r2, [r3, #0]
 800ad54:	e011      	b.n	800ad7a <nmi_get_chipid+0xa6>
			}
		}else if(chipid == 0x1000F0) { 
 800ad56:	4b12      	ldr	r3, [pc, #72]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a17      	ldr	r2, [pc, #92]	@ (800adb8 <nmi_get_chipid+0xe4>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d10c      	bne.n	800ad7a <nmi_get_chipid+0xa6>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 800ad60:	490f      	ldr	r1, [pc, #60]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ad62:	f44f 106c 	mov.w	r0, #3866624	@ 0x3b0000
 800ad66:	f000 fa43 	bl	800b1f0 <nm_read_reg_with_ret>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d004      	beq.n	800ad7a <nmi_get_chipid+0xa6>
			chipid = 0;
 800ad70:	4b0b      	ldr	r3, [pc, #44]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ad72:	2200      	movs	r2, #0
 800ad74:	601a      	str	r2, [r3, #0]
			return 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	e00d      	b.n	800ad96 <nmi_get_chipid+0xc2>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
 800ad7a:	4b09      	ldr	r3, [pc, #36]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800ad82:	4a07      	ldr	r2, [pc, #28]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ad84:	6013      	str	r3, [r2, #0]
		chipid |= 0x050000;
 800ad86:	4b06      	ldr	r3, [pc, #24]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800ad8e:	4a04      	ldr	r2, [pc, #16]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ad90:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
 800ad92:	4b03      	ldr	r3, [pc, #12]	@ (800ada0 <nmi_get_chipid+0xcc>)
 800ad94:	681b      	ldr	r3, [r3, #0]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	200030bc 	.word	0x200030bc
 800ada4:	001002a0 	.word	0x001002a0
 800ada8:	001002a1 	.word	0x001002a1
 800adac:	001002b0 	.word	0x001002b0
 800adb0:	001002b1 	.word	0x001002b1
 800adb4:	001002b2 	.word	0x001002b2
 800adb8:	001000f0 	.word	0x001000f0

0800adbc <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800adc2:	2300      	movs	r3, #0
 800adc4:	71fb      	strb	r3, [r7, #7]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800adc6:	463b      	mov	r3, r7
 800adc8:	4619      	mov	r1, r3
 800adca:	2010      	movs	r0, #16
 800adcc:	f000 fa10 	bl	800b1f0 <nm_read_reg_with_ret>
 800add0:	4603      	mov	r3, r0
 800add2:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS) goto ERR1;
 800add4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d144      	bne.n	800ae66 <chip_sleep+0xaa>
		if((reg & NBIT0) == 0) break;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d000      	beq.n	800ade8 <chip_sleep+0x2c>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800ade6:	e7ee      	b.n	800adc6 <chip_sleep+0xa>
		if((reg & NBIT0) == 0) break;
 800ade8:	bf00      	nop
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800adea:	463b      	mov	r3, r7
 800adec:	4619      	mov	r1, r3
 800adee:	2001      	movs	r0, #1
 800adf0:	f000 f9fe 	bl	800b1f0 <nm_read_reg_with_ret>
 800adf4:	4603      	mov	r3, r0
 800adf6:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800adf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d134      	bne.n	800ae6a <chip_sleep+0xae>
	if(reg & NBIT1)
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	f003 0302 	and.w	r3, r3, #2
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00e      	beq.n	800ae28 <chip_sleep+0x6c>
	{
		reg &=~NBIT1;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	f023 0302 	bic.w	r3, r3, #2
 800ae10:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	4619      	mov	r1, r3
 800ae16:	2001      	movs	r0, #1
 800ae18:	f000 f9f8 	bl	800b20c <nm_write_reg>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800ae20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d122      	bne.n	800ae6e <chip_sleep+0xb2>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800ae28:	463b      	mov	r3, r7
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	200b      	movs	r0, #11
 800ae2e:	f000 f9df 	bl	800b1f0 <nm_read_reg_with_ret>
 800ae32:	4603      	mov	r3, r0
 800ae34:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800ae36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d119      	bne.n	800ae72 <chip_sleep+0xb6>
	if(reg & NBIT0)
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d016      	beq.n	800ae76 <chip_sleep+0xba>
	{
		reg &= ~NBIT0;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	f023 0301 	bic.w	r3, r3, #1
 800ae4e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	4619      	mov	r1, r3
 800ae54:	200b      	movs	r0, #11
 800ae56:	f000 f9d9 	bl	800b20c <nm_write_reg>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800ae5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae62:	2b00      	cmp	r3, #0
	}

ERR1:
 800ae64:	e007      	b.n	800ae76 <chip_sleep+0xba>
		if(ret != M2M_SUCCESS) goto ERR1;
 800ae66:	bf00      	nop
 800ae68:	e006      	b.n	800ae78 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800ae6a:	bf00      	nop
 800ae6c:	e004      	b.n	800ae78 <chip_sleep+0xbc>
		if(ret != M2M_SUCCESS)goto ERR1;
 800ae6e:	bf00      	nop
 800ae70:	e002      	b.n	800ae78 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800ae72:	bf00      	nop
 800ae74:	e000      	b.n	800ae78 <chip_sleep+0xbc>
ERR1:
 800ae76:	bf00      	nop
	return ret;
 800ae78:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <chip_wake>:
sint8 chip_wake(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	73fb      	strb	r3, [r7, #15]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	607b      	str	r3, [r7, #4]
 800ae92:	2300      	movs	r3, #0
 800ae94:	603b      	str	r3, [r7, #0]
 800ae96:	2300      	movs	r3, #0
 800ae98:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800ae9a:	1d3b      	adds	r3, r7, #4
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	200b      	movs	r0, #11
 800aea0:	f000 f9a6 	bl	800b1f0 <nm_read_reg_with_ret>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800aea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d150      	bne.n	800af52 <chip_wake+0xce>
	
	if(!(reg & NBIT0))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f003 0301 	and.w	r3, r3, #1
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d10c      	bne.n	800aed4 <chip_wake+0x50>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f043 0301 	orr.w	r3, r3, #1
 800aec0:	4619      	mov	r1, r3
 800aec2:	200b      	movs	r0, #11
 800aec4:	f000 f9a2 	bl	800b20c <nm_write_reg>
 800aec8:	4603      	mov	r3, r0
 800aeca:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800aecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d140      	bne.n	800af56 <chip_wake+0xd2>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800aed4:	1d3b      	adds	r3, r7, #4
 800aed6:	4619      	mov	r1, r3
 800aed8:	2001      	movs	r0, #1
 800aeda:	f000 f989 	bl	800b1f0 <nm_read_reg_with_ret>
 800aede:	4603      	mov	r3, r0
 800aee0:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800aee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d137      	bne.n	800af5a <chip_wake+0xd6>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f003 0302 	and.w	r3, r3, #2
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d000      	beq.n	800aef6 <chip_wake+0x72>
 800aef4:	e00d      	b.n	800af12 <chip_wake+0x8e>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f043 0302 	orr.w	r3, r3, #2
 800aefc:	4619      	mov	r1, r3
 800aefe:	2001      	movs	r0, #1
 800af00:	f000 f984 	bl	800b20c <nm_write_reg>
 800af04:	4603      	mov	r3, r0
 800af06:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
 800af08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d000      	beq.n	800af12 <chip_wake+0x8e>
 800af10:	e026      	b.n	800af60 <chip_wake+0xdc>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 800af12:	463b      	mov	r3, r7
 800af14:	4619      	mov	r1, r3
 800af16:	200f      	movs	r0, #15
 800af18:	f000 f96a 	bl	800b1f0 <nm_read_reg_with_ret>
 800af1c:	4603      	mov	r3, r0
 800af1e:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) {
 800af20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d11a      	bne.n	800af5e <chip_wake+0xda>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	f003 0304 	and.w	r3, r3, #4
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10b      	bne.n	800af4a <chip_wake+0xc6>
			break;
		}
		nm_bsp_sleep(2);
 800af32:	2002      	movs	r0, #2
 800af34:	f7fe fb14 	bl	8009560 <nm_bsp_sleep>
		trials++;
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	3301      	adds	r3, #1
 800af3c:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	2b04      	cmp	r3, #4
 800af42:	d9e6      	bls.n	800af12 <chip_wake+0x8e>
		{
			M2M_ERR("Failed to wake up the chip\n");
			ret = M2M_ERR_TIME_OUT;
 800af44:	23fc      	movs	r3, #252	@ 0xfc
 800af46:	73fb      	strb	r3, [r7, #15]
			goto _WAKE_EXIT;
 800af48:	e00a      	b.n	800af60 <chip_wake+0xdc>
			break;
 800af4a:	bf00      	nop
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
 800af4c:	f000 f938 	bl	800b1c0 <nm_bus_reset>
 800af50:	e006      	b.n	800af60 <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800af52:	bf00      	nop
 800af54:	e004      	b.n	800af60 <chip_wake+0xdc>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800af56:	bf00      	nop
 800af58:	e002      	b.n	800af60 <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800af5a:	bf00      	nop
 800af5c:	e000      	b.n	800af60 <chip_wake+0xdc>
			goto _WAKE_EXIT;
 800af5e:	bf00      	nop
	
_WAKE_EXIT:
	return ret;
 800af60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b088      	sub	sp, #32
 800af70:	af00      	add	r7, sp, #0
 800af72:	4603      	mov	r3, r0
 800af74:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800af76:	2300      	movs	r3, #0
 800af78:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800af7a:	2300      	movs	r3, #0
 800af7c:	61bb      	str	r3, [r7, #24]
 800af7e:	2300      	movs	r3, #0
 800af80:	617b      	str	r3, [r7, #20]
	uint32 u32GpReg1 = 0;
 800af82:	2300      	movs	r3, #0
 800af84:	613b      	str	r3, [r7, #16]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
 800af86:	4b3e      	ldr	r3, [pc, #248]	@ (800b080 <wait_for_bootrom+0x114>)
 800af88:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	61bb      	str	r3, [r7, #24]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800af8e:	f241 0014 	movw	r0, #4116	@ 0x1014
 800af92:	f000 f921 	bl	800b1d8 <nm_read_reg>
 800af96:	61b8      	str	r0, [r7, #24]
		if (reg & 0x80000000) {
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	db03      	blt.n	800afa6 <wait_for_bootrom+0x3a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
 800af9e:	2001      	movs	r0, #1
 800afa0:	f7fe fade 	bl	8009560 <nm_bsp_sleep>
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800afa4:	e7f3      	b.n	800af8e <wait_for_bootrom+0x22>
			break;
 800afa6:	bf00      	nop
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 800afa8:	4836      	ldr	r0, [pc, #216]	@ (800b084 <wait_for_bootrom+0x118>)
 800afaa:	f000 f915 	bl	800b1d8 <nm_read_reg>
 800afae:	61b8      	str	r0, [r7, #24]
	reg &= 0x1;
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	f003 0301 	and.w	r3, r3, #1
 800afb6:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d118      	bne.n	800aff0 <wait_for_bootrom+0x84>
	{
		reg = 0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
 800afc2:	e011      	b.n	800afe8 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
 800afc4:	2001      	movs	r0, #1
 800afc6:	f7fe facb 	bl	8009560 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
 800afca:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800afce:	f000 f903 	bl	800b1d8 <nm_read_reg>
 800afd2:	61b8      	str	r0, [r7, #24]

			if(++cnt > TIMEOUT)
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	3301      	adds	r3, #1
 800afd8:	617b      	str	r3, [r7, #20]
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afe0:	d902      	bls.n	800afe8 <wait_for_bootrom+0x7c>
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
 800afe2:	23fb      	movs	r3, #251	@ 0xfb
 800afe4:	77fb      	strb	r3, [r7, #31]
				goto ERR2;
 800afe6:	e045      	b.n	800b074 <wait_for_bootrom+0x108>
		while(reg != M2M_FINISH_BOOT_ROM)
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	4a27      	ldr	r2, [pc, #156]	@ (800b088 <wait_for_bootrom+0x11c>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d1e9      	bne.n	800afc4 <wait_for_bootrom+0x58>
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
 800aff0:	79fb      	ldrb	r3, [r7, #7]
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	d10a      	bne.n	800b00c <wait_for_bootrom+0xa0>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800aff6:	4925      	ldr	r1, [pc, #148]	@ (800b08c <wait_for_bootrom+0x120>)
 800aff8:	4825      	ldr	r0, [pc, #148]	@ (800b090 <wait_for_bootrom+0x124>)
 800affa:	f000 f907 	bl	800b20c <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
 800affe:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 800b002:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b006:	f000 f901 	bl	800b20c <nm_write_reg>
 800b00a:	e01c      	b.n	800b046 <wait_for_bootrom+0xda>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
 800b00c:	79fb      	ldrb	r3, [r7, #7]
 800b00e:	2b03      	cmp	r3, #3
 800b010:	d109      	bne.n	800b026 <wait_for_bootrom+0xba>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800b012:	491e      	ldr	r1, [pc, #120]	@ (800b08c <wait_for_bootrom+0x120>)
 800b014:	481e      	ldr	r0, [pc, #120]	@ (800b090 <wait_for_bootrom+0x124>)
 800b016:	f000 f8f9 	bl	800b20c <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
 800b01a:	2100      	movs	r1, #0
 800b01c:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b020:	f000 f8f4 	bl	800b20c <nm_write_reg>
 800b024:	e00f      	b.n	800b046 <wait_for_bootrom+0xda>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
 800b026:	79fb      	ldrb	r3, [r7, #7]
 800b028:	2b04      	cmp	r3, #4
 800b02a:	d107      	bne.n	800b03c <wait_for_bootrom+0xd0>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 800b02c:	2380      	movs	r3, #128	@ 0x80
 800b02e:	613b      	str	r3, [r7, #16]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800b030:	68f9      	ldr	r1, [r7, #12]
 800b032:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b036:	f000 f8e9 	bl	800b20c <nm_write_reg>
 800b03a:	e004      	b.n	800b046 <wait_for_bootrom+0xda>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800b03c:	68f9      	ldr	r1, [r7, #12]
 800b03e:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b042:	f000 f8e3 	bl	800b20c <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 800b046:	f7ff fe45 	bl	800acd4 <nmi_get_chipid>
 800b04a:	4603      	mov	r3, r0
 800b04c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b050:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 800b054:	d306      	bcc.n	800b064 <wait_for_bootrom+0xf8>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	f043 0302 	orr.w	r3, r3, #2
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7ff fdbf 	bl	800abe0 <chip_apply_conf>
 800b062:	e002      	b.n	800b06a <wait_for_bootrom+0xfe>
	} else {
		chip_apply_conf(u32GpReg1);
 800b064:	6938      	ldr	r0, [r7, #16]
 800b066:	f7ff fdbb 	bl	800abe0 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 800b06a:	490a      	ldr	r1, [pc, #40]	@ (800b094 <wait_for_bootrom+0x128>)
 800b06c:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800b070:	f000 f8cc 	bl	800b20c <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
 800b074:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3720      	adds	r7, #32
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	13301376 	.word	0x13301376
 800b084:	000207bc 	.word	0x000207bc
 800b088:	10add09e 	.word	0x10add09e
 800b08c:	3c1cd57d 	.word	0x3c1cd57d
 800b090:	000207ac 	.word	0x000207ac
 800b094:	ef522f61 	.word	0xef522f61

0800b098 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b088      	sub	sp, #32
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	4603      	mov	r3, r0
 800b0a0:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	61bb      	str	r3, [r7, #24]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
 800b0ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b0b2:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
 800b0b4:	f241 038c 	movw	r3, #4236	@ 0x108c
 800b0b8:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 800b0ba:	4b1a      	ldr	r3, [pc, #104]	@ (800b124 <wait_for_firmware_start+0x8c>)
 800b0bc:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 800b0be:	79fb      	ldrb	r3, [r7, #7]
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d002      	beq.n	800b0ca <wait_for_firmware_start+0x32>
 800b0c4:	79fb      	ldrb	r3, [r7, #7]
 800b0c6:	2b03      	cmp	r3, #3
 800b0c8:	d116      	bne.n	800b0f8 <wait_for_firmware_start+0x60>
		regAddress = NMI_REV_REG;
 800b0ca:	4b17      	ldr	r3, [pc, #92]	@ (800b128 <wait_for_firmware_start+0x90>)
 800b0cc:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
 800b0ce:	4b17      	ldr	r3, [pc, #92]	@ (800b12c <wait_for_firmware_start+0x94>)
 800b0d0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
 800b0d2:	e011      	b.n	800b0f8 <wait_for_firmware_start+0x60>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
 800b0d4:	2002      	movs	r0, #2
 800b0d6:	f7fe fa43 	bl	8009560 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f000 f87b 	bl	800b1d8 <nm_read_reg>
 800b0e2:	61b8      	str	r0, [r7, #24]
		if(++cnt >= u32Timeout)
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	617b      	str	r3, [r7, #20]
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d302      	bcc.n	800b0f8 <wait_for_firmware_start+0x60>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
 800b0f2:	23fb      	movs	r3, #251	@ 0xfb
 800b0f4:	77fb      	strb	r3, [r7, #31]
			goto ERR;
 800b0f6:	e00e      	b.n	800b116 <wait_for_firmware_start+0x7e>
	while (checkValue != reg)
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d1e9      	bne.n	800b0d4 <wait_for_firmware_start+0x3c>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	4a08      	ldr	r2, [pc, #32]	@ (800b124 <wait_for_firmware_start+0x8c>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d105      	bne.n	800b114 <wait_for_firmware_start+0x7c>
	{
		nm_write_reg(NMI_STATE_REG, 0);
 800b108:	2100      	movs	r1, #0
 800b10a:	f241 008c 	movw	r0, #4236	@ 0x108c
 800b10e:	f000 f87d 	bl	800b20c <nm_write_reg>
 800b112:	e000      	b.n	800b116 <wait_for_firmware_start+0x7e>
	}
ERR:
 800b114:	bf00      	nop
	return ret;
 800b116:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3720      	adds	r7, #32
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	02532636 	.word	0x02532636
 800b128:	000207ac 	.word	0x000207ac
 800b12c:	d75dc1c3 	.word	0xd75dc1c3

0800b130 <chip_deinit>:

sint8 chip_deinit(void)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800b136:	2300      	movs	r3, #0
 800b138:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 800b13a:	463b      	mov	r3, r7
 800b13c:	4619      	mov	r1, r3
 800b13e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800b142:	f000 f855 	bl	800b1f0 <nm_read_reg_with_ret>
 800b146:	4603      	mov	r3, r0
 800b148:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800b14a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10f      	bne.n	800b172 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b158:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	4619      	mov	r1, r3
 800b15e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800b162:	f000 f853 	bl	800b20c <nm_write_reg>
 800b166:	4603      	mov	r3, r0
 800b168:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800b16a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b16e:	2b00      	cmp	r3, #0
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}

ERR1:
 800b170:	e000      	b.n	800b174 <chip_deinit+0x44>
		goto ERR1;
 800b172:	bf00      	nop
	return ret;
 800b174:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800b188:	2300      	movs	r3, #0
 800b18a:	73fb      	strb	r3, [r7, #15]
	ret = nm_bus_init(pvInitVal);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7fe fab5 	bl	80096fc <nm_bus_init>
 800b192:	4603      	mov	r3, r0
 800b194:	73fb      	strb	r3, [r7, #15]
	return ret;
 800b196:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	71fb      	strb	r3, [r7, #7]
	ret = nm_bus_deinit();
 800b1ac:	f7fe fae4 	bl	8009778 <nm_bus_deinit>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	71fb      	strb	r3, [r7, #7]

	return ret;
 800b1b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3708      	adds	r7, #8
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	71fb      	strb	r3, [r7, #7]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
 800b1ca:	f000 fc32 	bl	800ba32 <nm_spi_reset>
 800b1ce:	4603      	mov	r3, r0
#else
#error "Please define bus usage"
#endif

	return ret;
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 ff43 	bl	800c06c <nm_spi_read_reg>
 800b1e6:	4603      	mov	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Please define bus usage"
#endif

}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fdde 	bl	800bdbe <nm_spi_read_reg_with_ret>
 800b202:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Please define bus usage"
#endif
}
 800b204:	4618      	mov	r0, r3
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fd1d 	bl	800bc58 <nm_spi_write_reg>
 800b21e:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Please define bus usage"
#endif
}
 800b220:	4618      	mov	r0, r3
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	4613      	mov	r3, r2
 800b234:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
 800b236:	88fb      	ldrh	r3, [r7, #6]
 800b238:	461a      	mov	r2, r3
 800b23a:	68b9      	ldr	r1, [r7, #8]
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f000 ff24 	bl	800c08a <nm_spi_read_block>
 800b242:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Please define bus usage"
#endif

}
 800b244:	4618      	mov	r0, r3
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800b258:	4b20      	ldr	r3, [pc, #128]	@ (800b2dc <nm_read_block+0x90>)
 800b25a:	881b      	ldrh	r3, [r3, #0]
 800b25c:	3b08      	subs	r3, #8
 800b25e:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800b260:	2300      	movs	r3, #0
 800b262:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800b264:	2300      	movs	r3, #0
 800b266:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800b268:	8a3b      	ldrh	r3, [r7, #16]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d80f      	bhi.n	800b290 <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	4413      	add	r3, r2
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	b292      	uxth	r2, r2
 800b27a:	4619      	mov	r1, r3
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f7ff ffd3 	bl	800b228 <p_nm_read_block>
 800b282:	4603      	mov	r3, r0
 800b284:	b2da      	uxtb	r2, r3
 800b286:	7cfb      	ldrb	r3, [r7, #19]
 800b288:	4413      	add	r3, r2
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	74fb      	strb	r3, [r7, #19]
			break;
 800b28e:	e01f      	b.n	800b2d0 <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	4413      	add	r3, r2
 800b296:	8a3a      	ldrh	r2, [r7, #16]
 800b298:	4619      	mov	r1, r3
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f7ff ffc4 	bl	800b228 <p_nm_read_block>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	b2da      	uxtb	r2, r3
 800b2a4:	7cfb      	ldrb	r3, [r7, #19]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800b2ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10c      	bne.n	800b2ce <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800b2b4:	8a3b      	ldrh	r3, [r7, #16]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800b2bc:	8a3b      	ldrh	r3, [r7, #16]
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800b2c4:	8a3b      	ldrh	r3, [r7, #16]
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800b2cc:	e7cc      	b.n	800b268 <nm_read_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800b2ce:	bf00      	nop
		}
	}

	return s8Ret;
 800b2d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	20000024 	.word	0x20000024

0800b2e0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
 800b2ee:	88fb      	ldrh	r3, [r7, #6]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	68b9      	ldr	r1, [r7, #8]
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f000 fee6 	bl	800c0c6 <nm_spi_write_block>
 800b2fa:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Please define bus usage"
#endif

}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b086      	sub	sp, #24
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800b310:	4b20      	ldr	r3, [pc, #128]	@ (800b394 <nm_write_block+0x90>)
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	3b08      	subs	r3, #8
 800b316:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800b31c:	2300      	movs	r3, #0
 800b31e:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800b320:	8a3b      	ldrh	r3, [r7, #16]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	429a      	cmp	r2, r3
 800b326:	d80f      	bhi.n	800b348 <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	4413      	add	r3, r2
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	b292      	uxth	r2, r2
 800b332:	4619      	mov	r1, r3
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f7ff ffd3 	bl	800b2e0 <p_nm_write_block>
 800b33a:	4603      	mov	r3, r0
 800b33c:	b2da      	uxtb	r2, r3
 800b33e:	7cfb      	ldrb	r3, [r7, #19]
 800b340:	4413      	add	r3, r2
 800b342:	b2db      	uxtb	r3, r3
 800b344:	74fb      	strb	r3, [r7, #19]
			break;
 800b346:	e01f      	b.n	800b388 <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	4413      	add	r3, r2
 800b34e:	8a3a      	ldrh	r2, [r7, #16]
 800b350:	4619      	mov	r1, r3
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f7ff ffc4 	bl	800b2e0 <p_nm_write_block>
 800b358:	4603      	mov	r3, r0
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	7cfb      	ldrb	r3, [r7, #19]
 800b35e:	4413      	add	r3, r2
 800b360:	b2db      	uxtb	r3, r3
 800b362:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800b364:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d10c      	bne.n	800b386 <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800b36c:	8a3b      	ldrh	r3, [r7, #16]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800b374:	8a3b      	ldrh	r3, [r7, #16]
 800b376:	697a      	ldr	r2, [r7, #20]
 800b378:	4413      	add	r3, r2
 800b37a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800b37c:	8a3b      	ldrh	r3, [r7, #16]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	4413      	add	r3, r2
 800b382:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800b384:	e7cc      	b.n	800b320 <nm_write_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800b386:	bf00      	nop
		}
	}

	return s8Ret;
 800b388:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	20000024 	.word	0x20000024

0800b398 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b088      	sub	sp, #32
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	77fb      	strb	r3, [r7, #31]
	tstrGpRegs strgp = {0};
 800b3a8:	f107 030c 	add.w	r3, r7, #12
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	601a      	str	r2, [r3, #0]
 800b3b0:	605a      	str	r2, [r3, #4]
	if (pstrRev != NULL)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f000 808a 	beq.w	800b4ce <nm_get_firmware_full_info+0x136>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
 800b3ba:	2228      	movs	r2, #40	@ 0x28
 800b3bc:	2100      	movs	r1, #0
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7fe fa02 	bl	80097c8 <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
 800b3c4:	f107 0314 	add.w	r3, r7, #20
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	4844      	ldr	r0, [pc, #272]	@ (800b4dc <nm_get_firmware_full_info+0x144>)
 800b3cc:	f7ff ff10 	bl	800b1f0 <nm_read_reg_with_ret>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	77fb      	strb	r3, [r7, #31]
		if(ret == M2M_SUCCESS)
 800b3d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d178      	bne.n	800b4ce <nm_get_firmware_full_info+0x136>
		{
			if(reg != 0)
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d072      	beq.n	800b4c8 <nm_get_firmware_full_info+0x130>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800b3e8:	f107 010c 	add.w	r1, r7, #12
 800b3ec:	2208      	movs	r2, #8
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7ff ff2c 	bl	800b24c <nm_read_block>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	77fb      	strb	r3, [r7, #31]
				if(ret == M2M_SUCCESS)
 800b3f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d167      	bne.n	800b4d0 <nm_get_firmware_full_info+0x138>
				{
					reg = strgp.u32Firmware_Ota_rev;
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	b29b      	uxth	r3, r3
 800b408:	617b      	str	r3, [r7, #20]
					if(reg != 0)
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d058      	beq.n	800b4c2 <nm_get_firmware_full_info+0x12a>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800b416:	2228      	movs	r2, #40	@ 0x28
 800b418:	6879      	ldr	r1, [r7, #4]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7ff ff16 	bl	800b24c <nm_read_block>
 800b420:	4603      	mov	r3, r0
 800b422:	77fb      	strb	r3, [r7, #31]
						if(ret == M2M_SUCCESS)
 800b424:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d151      	bne.n	800b4d0 <nm_get_firmware_full_info+0x138>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	791b      	ldrb	r3, [r3, #4]
 800b430:	b21b      	sxth	r3, r3
 800b432:	021b      	lsls	r3, r3, #8
 800b434:	b21a      	sxth	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	795b      	ldrb	r3, [r3, #5]
 800b43a:	b21b      	sxth	r3, r3
 800b43c:	011b      	lsls	r3, r3, #4
 800b43e:	b21b      	sxth	r3, r3
 800b440:	b2db      	uxtb	r3, r3
 800b442:	b21b      	sxth	r3, r3
 800b444:	4313      	orrs	r3, r2
 800b446:	b21a      	sxth	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	799b      	ldrb	r3, [r3, #6]
 800b44c:	b21b      	sxth	r3, r3
 800b44e:	f003 030f 	and.w	r3, r3, #15
 800b452:	b21b      	sxth	r3, r3
 800b454:	4313      	orrs	r3, r2
 800b456:	b21b      	sxth	r3, r3
 800b458:	83bb      	strh	r3, [r7, #28]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800b45a:	f241 3376 	movw	r3, #4982	@ 0x1376
 800b45e:	837b      	strh	r3, [r7, #26]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	79db      	ldrb	r3, [r3, #7]
 800b464:	b21b      	sxth	r3, r3
 800b466:	021b      	lsls	r3, r3, #8
 800b468:	b21a      	sxth	r2, r3
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	7a1b      	ldrb	r3, [r3, #8]
 800b46e:	b21b      	sxth	r3, r3
 800b470:	011b      	lsls	r3, r3, #4
 800b472:	b21b      	sxth	r3, r3
 800b474:	b2db      	uxtb	r3, r3
 800b476:	b21b      	sxth	r3, r3
 800b478:	4313      	orrs	r3, r2
 800b47a:	b21a      	sxth	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	7a5b      	ldrb	r3, [r3, #9]
 800b480:	b21b      	sxth	r3, r3
 800b482:	f003 030f 	and.w	r3, r3, #15
 800b486:	b21b      	sxth	r3, r3
 800b488:	4313      	orrs	r3, r2
 800b48a:	b21b      	sxth	r3, r3
 800b48c:	833b      	strh	r3, [r7, #24]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 800b48e:	8bbb      	ldrh	r3, [r7, #28]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d005      	beq.n	800b4a0 <nm_get_firmware_full_info+0x108>
 800b494:	8b3b      	ldrh	r3, [r7, #24]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <nm_get_firmware_full_info+0x108>
 800b49a:	8b3b      	ldrh	r3, [r7, #24]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d102      	bne.n	800b4a6 <nm_get_firmware_full_info+0x10e>
								ret = M2M_ERR_FAIL;
 800b4a0:	23f4      	movs	r3, #244	@ 0xf4
 800b4a2:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800b4a4:	e014      	b.n	800b4d0 <nm_get_firmware_full_info+0x138>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
 800b4a6:	8b7a      	ldrh	r2, [r7, #26]
 800b4a8:	8b3b      	ldrh	r3, [r7, #24]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d202      	bcs.n	800b4b4 <nm_get_firmware_full_info+0x11c>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
 800b4ae:	23f3      	movs	r3, #243	@ 0xf3
 800b4b0:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800b4b2:	e00d      	b.n	800b4d0 <nm_get_firmware_full_info+0x138>
							}
							if(curr_drv_ver >  curr_firm_ver) {
 800b4b4:	8b7a      	ldrh	r2, [r7, #26]
 800b4b6:	8bbb      	ldrh	r3, [r7, #28]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d909      	bls.n	800b4d0 <nm_get_firmware_full_info+0x138>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
 800b4bc:	23f3      	movs	r3, #243	@ 0xf3
 800b4be:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800b4c0:	e006      	b.n	800b4d0 <nm_get_firmware_full_info+0x138>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
 800b4c2:	23f4      	movs	r3, #244	@ 0xf4
 800b4c4:	77fb      	strb	r3, [r7, #31]
 800b4c6:	e003      	b.n	800b4d0 <nm_get_firmware_full_info+0x138>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
 800b4c8:	23f4      	movs	r3, #244	@ 0xf4
 800b4ca:	77fb      	strb	r3, [r7, #31]
 800b4cc:	e000      	b.n	800b4d0 <nm_get_firmware_full_info+0x138>
			}
		}
	}
EXIT:
 800b4ce:	bf00      	nop
	return ret;
 800b4d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3720      	adds	r7, #32
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	000c0008 	.word	0x000c0008

0800b4e0 <nm_drv_init_hold>:
ERR1:
	return ret;
}

sint8 nm_drv_init_hold(void)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	71fb      	strb	r3, [r7, #7]

	ret = nm_bus_iface_init(NULL);
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	f7ff fe48 	bl	800b180 <nm_bus_iface_init>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) {
 800b4f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d104      	bne.n	800b506 <nm_drv_init_hold+0x26>
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
 800b4fc:	f000 fd54 	bl	800bfa8 <nm_spi_init>
#endif

	return ret;
 800b500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b504:	e002      	b.n	800b50c <nm_drv_init_hold+0x2c>
		goto ERR1;
 800b506:	bf00      	nop
ERR2:
	nm_bus_iface_deinit();
ERR1:
	return ret;
 800b508:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <nm_drv_init_start>:

sint8 nm_drv_init_start(void * arg)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800b51c:	2300      	movs	r3, #0
 800b51e:	73fb      	strb	r3, [r7, #15]
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
 800b520:	2301      	movs	r3, #1
 800b522:	73bb      	strb	r3, [r7, #14]

	if(NULL != arg) {
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00a      	beq.n	800b540 <nm_drv_init_start+0x2c>
		u8Mode = *((uint8 *)arg);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	73bb      	strb	r3, [r7, #14]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
 800b530:	7bbb      	ldrb	r3, [r7, #14]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d002      	beq.n	800b53c <nm_drv_init_start+0x28>
 800b536:	7bbb      	ldrb	r3, [r7, #14]
 800b538:	2b04      	cmp	r3, #4
 800b53a:	d901      	bls.n	800b540 <nm_drv_init_start+0x2c>
			u8Mode = M2M_WIFI_MODE_NORMAL;
 800b53c:	2301      	movs	r3, #1
 800b53e:	73bb      	strb	r3, [r7, #14]
		}
	}

	ret = wait_for_bootrom(u8Mode);
 800b540:	7bbb      	ldrb	r3, [r7, #14]
 800b542:	4618      	mov	r0, r3
 800b544:	f7ff fd12 	bl	800af6c <wait_for_bootrom>
 800b548:	4603      	mov	r3, r0
 800b54a:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b54c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d11a      	bne.n	800b58a <nm_drv_init_start+0x76>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
 800b554:	7bbb      	ldrb	r3, [r7, #14]
 800b556:	4618      	mov	r0, r3
 800b558:	f7ff fd9e 	bl	800b098 <wait_for_firmware_start>
 800b55c:	4603      	mov	r3, r0
 800b55e:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d112      	bne.n	800b58e <nm_drv_init_start+0x7a>
		goto ERR2;
	}

	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
 800b568:	7bbb      	ldrb	r3, [r7, #14]
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d017      	beq.n	800b59e <nm_drv_init_start+0x8a>
 800b56e:	7bbb      	ldrb	r3, [r7, #14]
 800b570:	2b03      	cmp	r3, #3
 800b572:	d014      	beq.n	800b59e <nm_drv_init_start+0x8a>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
 800b574:	f7ff fb64 	bl	800ac40 <enable_interrupts>
 800b578:	4603      	mov	r3, r0
 800b57a:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b57c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d106      	bne.n	800b592 <nm_drv_init_start+0x7e>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}

	return ret;
 800b584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b588:	e00c      	b.n	800b5a4 <nm_drv_init_start+0x90>
		goto ERR2;
 800b58a:	bf00      	nop
 800b58c:	e002      	b.n	800b594 <nm_drv_init_start+0x80>
		goto ERR2;
 800b58e:	bf00      	nop
 800b590:	e000      	b.n	800b594 <nm_drv_init_start+0x80>
		goto ERR2;
 800b592:	bf00      	nop
ERR2:
	nm_bus_iface_deinit();
 800b594:	f7ff fe05 	bl	800b1a2 <nm_bus_iface_deinit>
#ifdef CONF_WINC_USE_SPI
	nm_spi_deinit();
 800b598:	f000 fd5a 	bl	800c050 <nm_spi_deinit>
 800b59c:	e000      	b.n	800b5a0 <nm_drv_init_start+0x8c>
		goto ERR1;
 800b59e:	bf00      	nop
#endif
ERR1:
	return ret;
 800b5a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3710      	adds	r7, #16
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
 800b5b4:	f7ff fdbc 	bl	800b130 <chip_deinit>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b5bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d113      	bne.n	800b5ec <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	f000 fe09 	bl	800c1dc <spi_flash_enable>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b5ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10c      	bne.n	800b5f0 <nm_drv_deinit+0x44>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
 800b5d6:	f7ff fde4 	bl	800b1a2 <nm_bus_iface_deinit>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800b5de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d106      	bne.n	800b5f4 <nm_drv_deinit+0x48>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
 800b5e6:	f000 fd33 	bl	800c050 <nm_spi_deinit>
 800b5ea:	e004      	b.n	800b5f6 <nm_drv_deinit+0x4a>
		goto ERR1;
 800b5ec:	bf00      	nop
 800b5ee:	e002      	b.n	800b5f6 <nm_drv_deinit+0x4a>
		goto ERR1;
 800b5f0:	bf00      	nop
 800b5f2:	e000      	b.n	800b5f6 <nm_drv_deinit+0x4a>
		goto ERR1;
 800b5f4:	bf00      	nop
#endif

ERR1:
	return ret;
 800b5f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static inline sint8 nmi_spi_read(uint8 *b, uint16 sz)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b082      	sub	sp, #8
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
 800b60a:	460b      	mov	r3, r1
 800b60c:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(NULL, b, sz);
 800b60e:	887b      	ldrh	r3, [r7, #2]
 800b610:	461a      	mov	r2, r3
 800b612:	6879      	ldr	r1, [r7, #4]
 800b614:	2000      	movs	r0, #0
 800b616:	f7fe f85f 	bl	80096d8 <nm_spi_rw>
 800b61a:	4603      	mov	r3, r0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <nmi_spi_write>:
static inline sint8 nmi_spi_write(uint8 *b, uint16 sz)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	460b      	mov	r3, r1
 800b62e:	807b      	strh	r3, [r7, #2]
    return nm_spi_rw(b, NULL, sz);
 800b630:	887b      	ldrh	r3, [r7, #2]
 800b632:	461a      	mov	r2, r3
 800b634:	2100      	movs	r1, #0
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7fe f84e 	bl	80096d8 <nm_spi_rw>
 800b63c:	4603      	mov	r3, r0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <nmi_spi_writeread>:
static sint8 nmi_spi_writeread(uint8 *bw, uint8 *br, uint16 sz)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	60f8      	str	r0, [r7, #12]
 800b64e:	60b9      	str	r1, [r7, #8]
 800b650:	4613      	mov	r3, r2
 800b652:	80fb      	strh	r3, [r7, #6]
    return nm_spi_rw(bw, br, sz);
 800b654:	88fb      	ldrh	r3, [r7, #6]
 800b656:	461a      	mov	r2, r3
 800b658:	68b9      	ldr	r1, [r7, #8]
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7fe f83c 	bl	80096d8 <nm_spi_rw>
 800b660:	4603      	mov	r3, r0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
	...

0800b66c <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static inline uint8 crc7_byte(uint8 crc, uint8 data)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	4603      	mov	r3, r0
 800b674:	460a      	mov	r2, r1
 800b676:	71fb      	strb	r3, [r7, #7]
 800b678:	4613      	mov	r3, r2
 800b67a:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
 800b67c:	79fb      	ldrb	r3, [r7, #7]
 800b67e:	005a      	lsls	r2, r3, #1
 800b680:	79bb      	ldrb	r3, [r7, #6]
 800b682:	4053      	eors	r3, r2
 800b684:	4a03      	ldr	r2, [pc, #12]	@ (800b694 <crc7_byte+0x28>)
 800b686:	5cd3      	ldrb	r3, [r2, r3]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr
 800b694:	0800d4c4 	.word	0x0800d4c4

0800b698 <crc7>:

static inline uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	4603      	mov	r3, r0
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800b6a6:	e00a      	b.n	800b6be <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	1c5a      	adds	r2, r3, #1
 800b6ac:	60ba      	str	r2, [r7, #8]
 800b6ae:	781a      	ldrb	r2, [r3, #0]
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7ff ffd9 	bl	800b66c <crc7_byte>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	1e5a      	subs	r2, r3, #1
 800b6c2:	607a      	str	r2, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1ef      	bne.n	800b6a8 <crc7+0x10>
	return crc;
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
	...

0800b6d4 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b088      	sub	sp, #32
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60b9      	str	r1, [r7, #8]
 800b6dc:	607a      	str	r2, [r7, #4]
 800b6de:	603b      	str	r3, [r7, #0]
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
 800b6e4:	2305      	movs	r3, #5
 800b6e6:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
 800b6ee:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
 800b6f2:	3bc1      	subs	r3, #193	@ 0xc1
 800b6f4:	2b0e      	cmp	r3, #14
 800b6f6:	f200 80cc 	bhi.w	800b892 <spi_cmd+0x1be>
 800b6fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b700 <spi_cmd+0x2c>)
 800b6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b700:	0800b7b9 	.word	0x0800b7b9
 800b704:	0800b7b9 	.word	0x0800b7b9
 800b708:	0800b815 	.word	0x0800b815
 800b70c:	0800b759 	.word	0x0800b759
 800b710:	0800b783 	.word	0x0800b783
 800b714:	0800b795 	.word	0x0800b795
 800b718:	0800b7e3 	.word	0x0800b7e3
 800b71c:	0800b7e3 	.word	0x0800b7e3
 800b720:	0800b859 	.word	0x0800b859
 800b724:	0800b73d 	.word	0x0800b73d
 800b728:	0800b893 	.word	0x0800b893
 800b72c:	0800b893 	.word	0x0800b893
 800b730:	0800b893 	.word	0x0800b893
 800b734:	0800b893 	.word	0x0800b893
 800b738:	0800b7a7 	.word	0x0800b7a7
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	0c1b      	lsrs	r3, r3, #16
 800b740:	b2db      	uxtb	r3, r3
 800b742:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	0a1b      	lsrs	r3, r3, #8
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b752:	2305      	movs	r3, #5
 800b754:	77fb      	strb	r3, [r7, #31]
		break;
 800b756:	e09f      	b.n	800b898 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	0a1b      	lsrs	r3, r3, #8
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800b760:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b764:	2b00      	cmp	r3, #0
 800b766:	d004      	beq.n	800b772 <spi_cmd+0x9e>
 800b768:	7d7b      	ldrb	r3, [r7, #21]
 800b76a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	b2db      	uxtb	r3, r3
 800b776:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800b778:	2300      	movs	r3, #0
 800b77a:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b77c:	2305      	movs	r3, #5
 800b77e:	77fb      	strb	r3, [r7, #31]
		break;
 800b780:	e08a      	b.n	800b898 <spi_cmd+0x1c4>
#if defined(CMD_TERMINATE)
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
 800b782:	2300      	movs	r3, #0
 800b784:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800b786:	2300      	movs	r3, #0
 800b788:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800b78a:	2300      	movs	r3, #0
 800b78c:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b78e:	2305      	movs	r3, #5
 800b790:	77fb      	strb	r3, [r7, #31]
		break;
 800b792:	e081      	b.n	800b898 <spi_cmd+0x1c4>
#endif
#if defined(CMD_REPEAT)
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
 800b794:	2300      	movs	r3, #0
 800b796:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800b798:	2300      	movs	r3, #0
 800b79a:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800b79c:	2300      	movs	r3, #0
 800b79e:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b7a0:	2305      	movs	r3, #5
 800b7a2:	77fb      	strb	r3, [r7, #31]
		break;
 800b7a4:	e078      	b.n	800b898 <spi_cmd+0x1c4>
#endif
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
 800b7a6:	23ff      	movs	r3, #255	@ 0xff
 800b7a8:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
 800b7aa:	23ff      	movs	r3, #255	@ 0xff
 800b7ac:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
 800b7ae:	23ff      	movs	r3, #255	@ 0xff
 800b7b0:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800b7b2:	2305      	movs	r3, #5
 800b7b4:	77fb      	strb	r3, [r7, #31]
		break;
 800b7b6:	e06f      	b.n	800b898 <spi_cmd+0x1c4>
#if defined(CMD_DMA_WRITE) || defined(CMD_DMA_READ)
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	0c1b      	lsrs	r3, r3, #16
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	0a1b      	lsrs	r3, r3, #8
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	0a1b      	lsrs	r3, r3, #8
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	767b      	strb	r3, [r7, #25]
		len = 7;
 800b7dc:	2307      	movs	r3, #7
 800b7de:	77fb      	strb	r3, [r7, #31]
		break;
 800b7e0:	e05a      	b.n	800b898 <spi_cmd+0x1c4>
#endif
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	0c1b      	lsrs	r3, r3, #16
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	0a1b      	lsrs	r3, r3, #8
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	0c1b      	lsrs	r3, r3, #16
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	0a1b      	lsrs	r3, r3, #8
 800b804:	b2db      	uxtb	r3, r3
 800b806:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800b80e:	2308      	movs	r3, #8
 800b810:	77fb      	strb	r3, [r7, #31]
		break;
 800b812:	e041      	b.n	800b898 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	0a1b      	lsrs	r3, r3, #8
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800b81c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b820:	2b00      	cmp	r3, #0
 800b822:	d004      	beq.n	800b82e <spi_cmd+0x15a>
 800b824:	7d7b      	ldrb	r3, [r7, #21]
 800b826:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	b2db      	uxtb	r3, r3
 800b832:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	0e1b      	lsrs	r3, r3, #24
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	0c1b      	lsrs	r3, r3, #16
 800b840:	b2db      	uxtb	r3, r3
 800b842:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	0a1b      	lsrs	r3, r3, #8
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800b852:	2308      	movs	r3, #8
 800b854:	77fb      	strb	r3, [r7, #31]
		break;
 800b856:	e01f      	b.n	800b898 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	0c1b      	lsrs	r3, r3, #16
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	0a1b      	lsrs	r3, r3, #8
 800b864:	b2db      	uxtb	r3, r3
 800b866:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	0e1b      	lsrs	r3, r3, #24
 800b872:	b2db      	uxtb	r3, r3
 800b874:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	0c1b      	lsrs	r3, r3, #16
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	0a1b      	lsrs	r3, r3, #8
 800b882:	b2db      	uxtb	r3, r3
 800b884:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	76fb      	strb	r3, [r7, #27]
		len = 9;
 800b88c:	2309      	movs	r3, #9
 800b88e:	77fb      	strb	r3, [r7, #31]
		break;
 800b890:	e002      	b.n	800b898 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
 800b892:	23ff      	movs	r3, #255	@ 0xff
 800b894:	77bb      	strb	r3, [r7, #30]
		break;
 800b896:	bf00      	nop
	}

    if(result == N_OK) {
 800b898:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d127      	bne.n	800b8f0 <spi_cmd+0x21c>
		if (!gu8Crc_off)
 800b8a0:	4b16      	ldr	r3, [pc, #88]	@ (800b8fc <spi_cmd+0x228>)
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d113      	bne.n	800b8d0 <spi_cmd+0x1fc>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 800b8a8:	7ffb      	ldrb	r3, [r7, #31]
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	f107 0314 	add.w	r3, r7, #20
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	207f      	movs	r0, #127	@ 0x7f
 800b8b6:	f7ff feef 	bl	800b698 <crc7>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	461a      	mov	r2, r3
 800b8be:	7ffb      	ldrb	r3, [r7, #31]
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	0052      	lsls	r2, r2, #1
 800b8c4:	b2d2      	uxtb	r2, r2
 800b8c6:	3320      	adds	r3, #32
 800b8c8:	443b      	add	r3, r7
 800b8ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800b8ce:	e002      	b.n	800b8d6 <spi_cmd+0x202>
		else
			len-=1;
 800b8d0:	7ffb      	ldrb	r3, [r7, #31]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 800b8d6:	7ffb      	ldrb	r3, [r7, #31]
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	f107 0314 	add.w	r3, r7, #20
 800b8de:	4611      	mov	r1, r2
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7ff fe9f 	bl	800b624 <nmi_spi_write>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d001      	beq.n	800b8f0 <spi_cmd+0x21c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
 800b8ec:	23ff      	movs	r3, #255	@ 0xff
 800b8ee:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
 800b8f0:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3720      	adds	r7, #32
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	200030c0 	.word	0x200030c0

0800b900 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	4603      	mov	r3, r0
 800b908:	71fb      	strb	r3, [r7, #7]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
 800b90a:	2300      	movs	r3, #0
 800b90c:	73bb      	strb	r3, [r7, #14]

    if (!gu8Crc_off)
 800b90e:	4b18      	ldr	r3, [pc, #96]	@ (800b970 <spi_data_rsp+0x70>)
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d102      	bne.n	800b91c <spi_data_rsp+0x1c>
		len = 2;
 800b916:	2302      	movs	r3, #2
 800b918:	73fb      	strb	r3, [r7, #15]
 800b91a:	e001      	b.n	800b920 <spi_data_rsp+0x20>
	else
		len = 3;
 800b91c:	2303      	movs	r3, #3
 800b91e:	73fb      	strb	r3, [r7, #15]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 800b920:	7bfb      	ldrb	r3, [r7, #15]
 800b922:	b29a      	uxth	r2, r3
 800b924:	f107 0308 	add.w	r3, r7, #8
 800b928:	4611      	mov	r1, r2
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7ff fe69 	bl	800b602 <nmi_spi_read>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d002      	beq.n	800b93c <spi_data_rsp+0x3c>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
 800b936:	23ff      	movs	r3, #255	@ 0xff
 800b938:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800b93a:	e013      	b.n	800b964 <spi_data_rsp+0x64>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
 800b93e:	3b01      	subs	r3, #1
 800b940:	3310      	adds	r3, #16
 800b942:	443b      	add	r3, r7
 800b944:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d107      	bne.n	800b95c <spi_data_rsp+0x5c>
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
 800b94e:	3b02      	subs	r3, #2
 800b950:	3310      	adds	r3, #16
 800b952:	443b      	add	r3, r7
 800b954:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800b958:	2bc3      	cmp	r3, #195	@ 0xc3
 800b95a:	d002      	beq.n	800b962 <spi_data_rsp+0x62>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
 800b95c:	23ff      	movs	r3, #255	@ 0xff
 800b95e:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800b960:	e000      	b.n	800b964 <spi_data_rsp+0x64>
	}
_fail_:
 800b962:	bf00      	nop

	return result;
 800b964:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	200030c0 	.word	0x200030c0

0800b974 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	4603      	mov	r3, r0
 800b97c:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
 800b97e:	2300      	movs	r3, #0
 800b980:	73fb      	strb	r3, [r7, #15]

	/**
		Command/Control response
	**/
#if defined(CMD_TERMINATE)
    if(cmd == CMD_TERMINATE) {
 800b982:	79fb      	ldrb	r3, [r7, #7]
 800b984:	2bc5      	cmp	r3, #197	@ 0xc5
 800b986:	d10b      	bne.n	800b9a0 <spi_cmd_rsp+0x2c>
        if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800b988:	f107 030d 	add.w	r3, r7, #13
 800b98c:	2101      	movs	r1, #1
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff fe37 	bl	800b602 <nmi_spi_read>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d002      	beq.n	800b9a0 <spi_cmd_rsp+0x2c>
            result = N_FAIL;
 800b99a:	23ff      	movs	r3, #255	@ 0xff
 800b99c:	73fb      	strb	r3, [r7, #15]
            goto _fail_;
 800b99e:	e042      	b.n	800ba26 <spi_cmd_rsp+0xb2>
        }
    }
#endif
#if defined(CMD_REPEAT)
    if(cmd == CMD_REPEAT) {
 800b9a0:	79fb      	ldrb	r3, [r7, #7]
 800b9a2:	2bc6      	cmp	r3, #198	@ 0xc6
 800b9a4:	d10b      	bne.n	800b9be <spi_cmd_rsp+0x4a>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800b9a6:	f107 030d 	add.w	r3, r7, #13
 800b9aa:	2101      	movs	r1, #1
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7ff fe28 	bl	800b602 <nmi_spi_read>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <spi_cmd_rsp+0x4a>
			result = N_FAIL;
 800b9b8:	23ff      	movs	r3, #255	@ 0xff
 800b9ba:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800b9bc:	e033      	b.n	800ba26 <spi_cmd_rsp+0xb2>
		}
	}
#endif

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800b9be:	230a      	movs	r3, #10
 800b9c0:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800b9c2:	f107 030d 	add.w	r3, r7, #13
 800b9c6:	2101      	movs	r1, #1
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7ff fe1a 	bl	800b602 <nmi_spi_read>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <spi_cmd_rsp+0x66>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 800b9d4:	23ff      	movs	r3, #255	@ 0xff
 800b9d6:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800b9d8:	e025      	b.n	800ba26 <spi_cmd_rsp+0xb2>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 800b9da:	7b7b      	ldrb	r3, [r7, #13]
 800b9dc:	79fa      	ldrb	r2, [r7, #7]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d007      	beq.n	800b9f2 <spi_cmd_rsp+0x7e>
 800b9e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	3a01      	subs	r2, #1
 800b9ea:	b2d2      	uxtb	r2, r2
 800b9ec:	73ba      	strb	r2, [r7, #14]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	dce7      	bgt.n	800b9c2 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800b9f2:	230a      	movs	r3, #10
 800b9f4:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800b9f6:	f107 030d 	add.w	r3, r7, #13
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7ff fe00 	bl	800b602 <nmi_spi_read>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d002      	beq.n	800ba0e <spi_cmd_rsp+0x9a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 800ba08:	23ff      	movs	r3, #255	@ 0xff
 800ba0a:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800ba0c:	e00b      	b.n	800ba26 <spi_cmd_rsp+0xb2>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 800ba0e:	7b7b      	ldrb	r3, [r7, #13]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d007      	beq.n	800ba24 <spi_cmd_rsp+0xb0>
 800ba14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	3a01      	subs	r2, #1
 800ba1c:	b2d2      	uxtb	r2, r2
 800ba1e:	73ba      	strb	r2, [r7, #14]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	dce8      	bgt.n	800b9f6 <spi_cmd_rsp+0x82>

_fail_:
 800ba24:	bf00      	nop

	return result;
 800ba26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b086      	sub	sp, #24
 800ba36:	af02      	add	r7, sp, #8
	//M2M_INFO("Reset Spi\n");
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800ba38:	2300      	movs	r3, #0
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	2200      	movs	r2, #0
 800ba40:	2100      	movs	r1, #0
 800ba42:	20cf      	movs	r0, #207	@ 0xcf
 800ba44:	f7ff fe46 	bl	800b6d4 <spi_cmd>

	if(spi_cmd_rsp(CMD_RESET) != N_OK) {
 800ba48:	20cf      	movs	r0, #207	@ 0xcf
 800ba4a:	f7ff ff93 	bl	800b974 <spi_cmd_rsp>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d010      	beq.n	800ba76 <nm_spi_reset+0x44>
		// Reset command failed, need to send repeated 1's until reset occurs
		uint8 w_buf[8] = {0xFF};
 800ba54:	23ff      	movs	r3, #255	@ 0xff
 800ba56:	60bb      	str	r3, [r7, #8]
 800ba58:	2300      	movs	r3, #0
 800ba5a:	60fb      	str	r3, [r7, #12]
		uint8 r_buf[8];
		M2M_ERR("[nmi spi]: Failed rst cmd response\n");
		nmi_spi_writeread(w_buf, r_buf, 8);
 800ba5c:	4639      	mov	r1, r7
 800ba5e:	f107 0308 	add.w	r3, r7, #8
 800ba62:	2208      	movs	r2, #8
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff fdee 	bl	800b646 <nmi_spi_writeread>
		if(r_buf[7] != 0xFF)
 800ba6a:	79fb      	ldrb	r3, [r7, #7]
 800ba6c:	2bff      	cmp	r3, #255	@ 0xff
 800ba6e:	d002      	beq.n	800ba76 <nm_spi_reset+0x44>
		{
			M2M_ERR("[nmi spi]: Failed repeated reset\n");
			return N_FAIL;
 800ba70:	f04f 33ff 	mov.w	r3, #4294967295
 800ba74:	e000      	b.n	800ba78 <nm_spi_reset+0x46>
		}
	}
	return N_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	807b      	strh	r3, [r7, #2]
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
 800ba90:	2300      	movs	r3, #0
 800ba92:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800ba94:	2300      	movs	r3, #0
 800ba96:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
 800ba98:	887b      	ldrh	r3, [r7, #2]
 800ba9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba9e:	d802      	bhi.n	800baa6 <spi_data_read+0x26>
			nbytes = sz;
 800baa0:	887b      	ldrh	r3, [r7, #2]
 800baa2:	827b      	strh	r3, [r7, #18]
 800baa4:	e002      	b.n	800baac <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800baa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800baaa:	827b      	strh	r3, [r7, #18]

		/**
			Data Response header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 800baac:	230a      	movs	r3, #10
 800baae:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800bab0:	f107 030b 	add.w	r3, r7, #11
 800bab4:	2101      	movs	r1, #1
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7ff fda3 	bl	800b602 <nmi_spi_read>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d002      	beq.n	800bac8 <spi_data_read+0x48>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
 800bac2:	23ff      	movs	r3, #255	@ 0xff
 800bac4:	747b      	strb	r3, [r7, #17]
				break;
 800bac6:	e00e      	b.n	800bae6 <spi_data_read+0x66>
			}
            if((rsp & 0xf0) == 0xf0)
 800bac8:	7afb      	ldrb	r3, [r7, #11]
 800baca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bace:	2bf0      	cmp	r3, #240	@ 0xf0
 800bad0:	d008      	beq.n	800bae4 <spi_data_read+0x64>
				break;
		} while (retry--);
 800bad2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	3a01      	subs	r2, #1
 800bada:	b292      	uxth	r2, r2
 800badc:	82fa      	strh	r2, [r7, #22]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1e6      	bne.n	800bab0 <spi_data_read+0x30>
 800bae2:	e000      	b.n	800bae6 <spi_data_read+0x66>
				break;
 800bae4:	bf00      	nop

		if (result == N_FAIL)
 800bae6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800baea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baee:	d035      	beq.n	800bb5c <spi_data_read+0xdc>
			break;

		if (retry <= 0) {
 800baf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	dc02      	bgt.n	800bafe <spi_data_read+0x7e>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
 800baf8:	23ff      	movs	r3, #255	@ 0xff
 800bafa:	747b      	strb	r3, [r7, #17]
			break;
 800bafc:	e02f      	b.n	800bb5e <spi_data_read+0xde>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 800bafe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	4413      	add	r3, r2
 800bb06:	8a7a      	ldrh	r2, [r7, #18]
 800bb08:	4611      	mov	r1, r2
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7ff fd79 	bl	800b602 <nmi_spi_read>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d002      	beq.n	800bb1c <spi_data_read+0x9c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
 800bb16:	23ff      	movs	r3, #255	@ 0xff
 800bb18:	747b      	strb	r3, [r7, #17]
			break;
 800bb1a:	e020      	b.n	800bb5e <spi_data_read+0xde>
		}
		if(!clockless)
 800bb1c:	787b      	ldrb	r3, [r7, #1]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10f      	bne.n	800bb42 <spi_data_read+0xc2>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
 800bb22:	4b12      	ldr	r3, [pc, #72]	@ (800bb6c <spi_data_read+0xec>)
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d10b      	bne.n	800bb42 <spi_data_read+0xc2>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 800bb2a:	f107 030c 	add.w	r3, r7, #12
 800bb2e:	2102      	movs	r1, #2
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7ff fd66 	bl	800b602 <nmi_spi_read>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <spi_data_read+0xc2>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
 800bb3c:	23ff      	movs	r3, #255	@ 0xff
 800bb3e:	747b      	strb	r3, [r7, #17]
					break;
 800bb40:	e00d      	b.n	800bb5e <spi_data_read+0xde>
				}
			}
		}
		ix += nbytes;
 800bb42:	8aba      	ldrh	r2, [r7, #20]
 800bb44:	8a7b      	ldrh	r3, [r7, #18]
 800bb46:	4413      	add	r3, r2
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
 800bb4c:	8a7b      	ldrh	r3, [r7, #18]
 800bb4e:	887a      	ldrh	r2, [r7, #2]
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	807b      	strh	r3, [r7, #2]

	} while (sz);
 800bb54:	887b      	ldrh	r3, [r7, #2]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d19e      	bne.n	800ba98 <spi_data_read+0x18>
 800bb5a:	e000      	b.n	800bb5e <spi_data_read+0xde>
			break;
 800bb5c:	bf00      	nop

	return result;
 800bb5e:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3718      	adds	r7, #24
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	200030c0 	.word	0x200030c0

0800bb70 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	460b      	mov	r3, r1
 800bb7a:	807b      	strh	r3, [r7, #2]
    sint16 ix = 0;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	82fb      	strh	r3, [r7, #22]
	uint16 nbytes;
    sint8 result = N_OK;
 800bb80:	2300      	movs	r3, #0
 800bb82:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
 800bb84:	2300      	movs	r3, #0
 800bb86:	81bb      	strh	r3, [r7, #12]

	/**
		Data
	**/
	do {
		if (sz <= DATA_PKT_SZ)
 800bb88:	887b      	ldrh	r3, [r7, #2]
 800bb8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb8e:	d802      	bhi.n	800bb96 <spi_data_write+0x26>
			nbytes = sz;
 800bb90:	887b      	ldrh	r3, [r7, #2]
 800bb92:	82bb      	strh	r3, [r7, #20]
 800bb94:	e002      	b.n	800bb9c <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800bb96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bb9a:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
 800bb9c:	23f0      	movs	r3, #240	@ 0xf0
 800bb9e:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
 800bba0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d109      	bne.n	800bbbc <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
 800bba8:	887b      	ldrh	r3, [r7, #2]
 800bbaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbae:	d802      	bhi.n	800bbb6 <spi_data_write+0x46>
				order = 0x3;
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	74bb      	strb	r3, [r7, #18]
 800bbb4:	e00b      	b.n	800bbce <spi_data_write+0x5e>
			else
				order = 0x1;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	74bb      	strb	r3, [r7, #18]
 800bbba:	e008      	b.n	800bbce <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
 800bbbc:	887b      	ldrh	r3, [r7, #2]
 800bbbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbc2:	d802      	bhi.n	800bbca <spi_data_write+0x5a>
				order = 0x3;
 800bbc4:	2303      	movs	r3, #3
 800bbc6:	74bb      	strb	r3, [r7, #18]
 800bbc8:	e001      	b.n	800bbce <spi_data_write+0x5e>
			else
				order = 0x2;
 800bbca:	2302      	movs	r3, #2
 800bbcc:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
 800bbce:	7c7a      	ldrb	r2, [r7, #17]
 800bbd0:	7cbb      	ldrb	r3, [r7, #18]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 800bbd8:	f107 0311 	add.w	r3, r7, #17
 800bbdc:	2101      	movs	r1, #1
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff fd20 	bl	800b624 <nmi_spi_write>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d002      	beq.n	800bbf0 <spi_data_write+0x80>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
			result = N_FAIL;
 800bbea:	23ff      	movs	r3, #255	@ 0xff
 800bbec:	74fb      	strb	r3, [r7, #19]
			break;
 800bbee:	e02a      	b.n	800bc46 <spi_data_write+0xd6>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 800bbf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	8aba      	ldrh	r2, [r7, #20]
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7ff fd11 	bl	800b624 <nmi_spi_write>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d002      	beq.n	800bc0e <spi_data_write+0x9e>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
			result = N_FAIL;
 800bc08:	23ff      	movs	r3, #255	@ 0xff
 800bc0a:	74fb      	strb	r3, [r7, #19]
			break;
 800bc0c:	e01b      	b.n	800bc46 <spi_data_write+0xd6>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
 800bc0e:	4b11      	ldr	r3, [pc, #68]	@ (800bc54 <spi_data_write+0xe4>)
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10b      	bne.n	800bc2e <spi_data_write+0xbe>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 800bc16:	f107 030c 	add.w	r3, r7, #12
 800bc1a:	2102      	movs	r1, #2
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff fd01 	bl	800b624 <nmi_spi_write>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d002      	beq.n	800bc2e <spi_data_write+0xbe>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
				result = N_FAIL;
 800bc28:	23ff      	movs	r3, #255	@ 0xff
 800bc2a:	74fb      	strb	r3, [r7, #19]
				break;
 800bc2c:	e00b      	b.n	800bc46 <spi_data_write+0xd6>
			}
		}

		ix += nbytes;
 800bc2e:	8afa      	ldrh	r2, [r7, #22]
 800bc30:	8abb      	ldrh	r3, [r7, #20]
 800bc32:	4413      	add	r3, r2
 800bc34:	b29b      	uxth	r3, r3
 800bc36:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
 800bc38:	887a      	ldrh	r2, [r7, #2]
 800bc3a:	8abb      	ldrh	r3, [r7, #20]
 800bc3c:	1ad3      	subs	r3, r2, r3
 800bc3e:	807b      	strh	r3, [r7, #2]
	} while (sz);
 800bc40:	887b      	ldrh	r3, [r7, #2]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1a0      	bne.n	800bb88 <spi_data_write+0x18>


	return result;
 800bc46:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3718      	adds	r7, #24
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	200030c0 	.word	0x200030c0

0800bc58 <nm_spi_write_reg>:
 *  @param[in]  u32Val
 *                  Value to be written to the register
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_write_reg(uint32 addr, uint32 u32data)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b086      	sub	sp, #24
 800bc5c:	af02      	add	r7, sp, #8
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800bc62:	230a      	movs	r3, #10
 800bc64:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800bc66:	2300      	movs	r3, #0
 800bc68:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_WRITE;
 800bc6a:	23c9      	movs	r3, #201	@ 0xc9
 800bc6c:	737b      	strb	r3, [r7, #13]
	uint8 clockless = 0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	733b      	strb	r3, [r7, #12]
	
_RETRY_:	
	if (addr <= 0x30)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2b30      	cmp	r3, #48	@ 0x30
 800bc76:	d803      	bhi.n	800bc80 <nm_spi_write_reg+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
 800bc78:	23c3      	movs	r3, #195	@ 0xc3
 800bc7a:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	733b      	strb	r3, [r7, #12]
	}

	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 800bc80:	7b78      	ldrb	r0, [r7, #13]
 800bc82:	7b3b      	ldrb	r3, [r7, #12]
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	2304      	movs	r3, #4
 800bc88:	683a      	ldr	r2, [r7, #0]
 800bc8a:	6879      	ldr	r1, [r7, #4]
 800bc8c:	f7ff fd22 	bl	800b6d4 <spi_cmd>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800bc94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d109      	bne.n	800bcb0 <nm_spi_write_reg+0x58>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800bc9c:	7b7b      	ldrb	r3, [r7, #13]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7ff fe68 	bl	800b974 <spi_cmd_rsp>
 800bca4:	4603      	mov	r3, r0
 800bca6:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800bca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcac:	2b00      	cmp	r3, #0
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
_FAIL_:
 800bcae:	e000      	b.n	800bcb2 <nm_spi_write_reg+0x5a>
		goto _FAIL_;
 800bcb0:	bf00      	nop
	if(result != N_OK)
 800bcb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d017      	beq.n	800bcea <nm_spi_write_reg+0x92>
	{
		nm_bsp_sleep(1);
 800bcba:	2001      	movs	r0, #1
 800bcbc:	f7fd fc50 	bl	8009560 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	2100      	movs	r1, #0
 800bcca:	20cf      	movs	r0, #207	@ 0xcf
 800bccc:	f7ff fd02 	bl	800b6d4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800bcd0:	20cf      	movs	r0, #207	@ 0xcf
 800bcd2:	f7ff fe4f 	bl	800b974 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %x\n",retry,addr,u32data);
		nm_bsp_sleep(1);
 800bcd6:	2001      	movs	r0, #1
 800bcd8:	f7fd fc42 	bl	8009560 <nm_bsp_sleep>
		retry--;
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
 800bcde:	3b01      	subs	r3, #1
 800bce0:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800bce2:	7bfb      	ldrb	r3, [r7, #15]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d000      	beq.n	800bcea <nm_spi_write_reg+0x92>
 800bce8:	e7c3      	b.n	800bc72 <nm_spi_write_reg+0x1a>
	}

	return result;
 800bcea:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b088      	sub	sp, #32
 800bcfa:	af02      	add	r7, sp, #8
 800bcfc:	60f8      	str	r0, [r7, #12]
 800bcfe:	60b9      	str	r1, [r7, #8]
 800bd00:	4613      	mov	r3, r2
 800bd02:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800bd04:	230a      	movs	r3, #10
 800bd06:	75bb      	strb	r3, [r7, #22]
	uint8 cmd = CMD_DMA_EXT_WRITE;
 800bd08:	23c7      	movs	r3, #199	@ 0xc7
 800bd0a:	757b      	strb	r3, [r7, #21]
_RETRY_:
	/**
		Command
	**/
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
 800bd0c:	88fb      	ldrh	r3, [r7, #6]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d101      	bne.n	800bd16 <nm_spi_write+0x20>
		size = 2;
 800bd12:	2302      	movs	r3, #2
 800bd14:	80fb      	strh	r3, [r7, #6]

	result = spi_cmd(cmd, addr, 0, size,0);
 800bd16:	88fb      	ldrh	r3, [r7, #6]
 800bd18:	7d78      	ldrb	r0, [r7, #21]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	9200      	str	r2, [sp, #0]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	68f9      	ldr	r1, [r7, #12]
 800bd22:	f7ff fcd7 	bl	800b6d4 <spi_cmd>
 800bd26:	4603      	mov	r3, r0
 800bd28:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800bd2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d11e      	bne.n	800bd70 <nm_spi_write+0x7a>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800bd32:	7d7b      	ldrb	r3, [r7, #21]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7ff fe1d 	bl	800b974 <spi_cmd_rsp>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800bd3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d116      	bne.n	800bd74 <nm_spi_write+0x7e>
	}

	/**
		Data
	**/
	result = spi_data_write(buf, size);
 800bd46:	88fb      	ldrh	r3, [r7, #6]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	68b8      	ldr	r0, [r7, #8]
 800bd4c:	f7ff ff10 	bl	800bb70 <spi_data_write>
 800bd50:	4603      	mov	r3, r0
 800bd52:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800bd54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10d      	bne.n	800bd78 <nm_spi_write+0x82>
		goto _FAIL_;
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
 800bd5c:	7d7b      	ldrb	r3, [r7, #21]
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7ff fdce 	bl	800b900 <spi_data_rsp>
 800bd64:	4603      	mov	r3, r0
 800bd66:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800bd68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd6c:	2b00      	cmp	r3, #0
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
	}
	
_FAIL_:
 800bd6e:	e004      	b.n	800bd7a <nm_spi_write+0x84>
		goto _FAIL_;
 800bd70:	bf00      	nop
 800bd72:	e002      	b.n	800bd7a <nm_spi_write+0x84>
		goto _FAIL_;
 800bd74:	bf00      	nop
 800bd76:	e000      	b.n	800bd7a <nm_spi_write+0x84>
		goto _FAIL_;
 800bd78:	bf00      	nop
	if(result != N_OK)
 800bd7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d017      	beq.n	800bdb2 <nm_spi_write+0xbc>
	{
		nm_bsp_sleep(1);
 800bd82:	2001      	movs	r0, #1
 800bd84:	f7fd fbec 	bl	8009560 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800bd88:	2300      	movs	r3, #0
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	2200      	movs	r2, #0
 800bd90:	2100      	movs	r1, #0
 800bd92:	20cf      	movs	r0, #207	@ 0xcf
 800bd94:	f7ff fc9e 	bl	800b6d4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800bd98:	20cf      	movs	r0, #207	@ 0xcf
 800bd9a:	f7ff fdeb 	bl	800b974 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %x %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 800bd9e:	2001      	movs	r0, #1
 800bda0:	f7fd fbde 	bl	8009560 <nm_bsp_sleep>
		retry--;
 800bda4:	7dbb      	ldrb	r3, [r7, #22]
 800bda6:	3b01      	subs	r3, #1
 800bda8:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800bdaa:	7dbb      	ldrb	r3, [r7, #22]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d000      	beq.n	800bdb2 <nm_spi_write+0xbc>
 800bdb0:	e7ac      	b.n	800bd0c <nm_spi_write+0x16>
	}


	return result;
 800bdb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3718      	adds	r7, #24
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <nm_spi_read_reg_with_ret>:
 *  @param[out] pu32RetVal
 *                  Pointer to u32 variable used to return the read value
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_read_reg_with_ret(uint32 addr, uint32 *u32data)
{
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b086      	sub	sp, #24
 800bdc2:	af02      	add	r7, sp, #8
 800bdc4:	6078      	str	r0, [r7, #4]
 800bdc6:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800bdc8:	230a      	movs	r3, #10
 800bdca:	73fb      	strb	r3, [r7, #15]
	volatile sint8 result = N_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	733b      	strb	r3, [r7, #12]
	uint8 cmd = CMD_SINGLE_READ;
 800bdd0:	23ca      	movs	r3, #202	@ 0xca
 800bdd2:	73bb      	strb	r3, [r7, #14]
	uint8 tmp[4];
	uint8 clockless = 0;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	737b      	strb	r3, [r7, #13]

_RETRY_:

	if (addr <= 0xff)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2bff      	cmp	r3, #255	@ 0xff
 800bddc:	d803      	bhi.n	800bde6 <nm_spi_read_reg_with_ret+0x28>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
 800bdde:	23c4      	movs	r3, #196	@ 0xc4
 800bde0:	73bb      	strb	r3, [r7, #14]
		clockless = 1;
 800bde2:	2301      	movs	r3, #1
 800bde4:	737b      	strb	r3, [r7, #13]
	}

	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800bde6:	7bb8      	ldrb	r0, [r7, #14]
 800bde8:	7b7b      	ldrb	r3, [r7, #13]
 800bdea:	9300      	str	r3, [sp, #0]
 800bdec:	2304      	movs	r3, #4
 800bdee:	2200      	movs	r2, #0
 800bdf0:	6879      	ldr	r1, [r7, #4]
 800bdf2:	f7ff fc6f 	bl	800b6d4 <spi_cmd>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800bdfa:	7b3b      	ldrb	r3, [r7, #12]
 800bdfc:	b25b      	sxtb	r3, r3
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d124      	bne.n	800be4c <nm_spi_read_reg_with_ret+0x8e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800be02:	7bbb      	ldrb	r3, [r7, #14]
 800be04:	4618      	mov	r0, r3
 800be06:	f7ff fdb5 	bl	800b974 <spi_cmd_rsp>
 800be0a:	4603      	mov	r3, r0
 800be0c:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800be0e:	7b3b      	ldrb	r3, [r7, #12]
 800be10:	b25b      	sxtb	r3, r3
 800be12:	2b00      	cmp	r3, #0
 800be14:	d11c      	bne.n	800be50 <nm_spi_read_reg_with_ret+0x92>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianness issues */
	result = spi_data_read(&tmp[0], 4, clockless);
 800be16:	7b7a      	ldrb	r2, [r7, #13]
 800be18:	f107 0308 	add.w	r3, r7, #8
 800be1c:	2104      	movs	r1, #4
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff fe2e 	bl	800ba80 <spi_data_read>
 800be24:	4603      	mov	r3, r0
 800be26:	733b      	strb	r3, [r7, #12]
	if (result != N_OK) {
 800be28:	7b3b      	ldrb	r3, [r7, #12]
 800be2a:	b25b      	sxtb	r3, r3
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d111      	bne.n	800be54 <nm_spi_read_reg_with_ret+0x96>
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}

	*u32data = tmp[0] |
 800be30:	7a3b      	ldrb	r3, [r7, #8]
 800be32:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
 800be34:	7a7b      	ldrb	r3, [r7, #9]
 800be36:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
 800be38:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
 800be3a:	7abb      	ldrb	r3, [r7, #10]
 800be3c:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
 800be3e:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
 800be40:	7afb      	ldrb	r3, [r7, #11]
 800be42:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
 800be44:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	601a      	str	r2, [r3, #0]
 800be4a:	e004      	b.n	800be56 <nm_spi_read_reg_with_ret+0x98>
		goto _FAIL_;
 800be4c:	bf00      	nop
 800be4e:	e002      	b.n	800be56 <nm_spi_read_reg_with_ret+0x98>
		goto _FAIL_;
 800be50:	bf00      	nop
 800be52:	e000      	b.n	800be56 <nm_spi_read_reg_with_ret+0x98>
		goto _FAIL_;
 800be54:	bf00      	nop
		
_FAIL_:
	if(result != N_OK)
 800be56:	7b3b      	ldrb	r3, [r7, #12]
 800be58:	b25b      	sxtb	r3, r3
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d017      	beq.n	800be8e <nm_spi_read_reg_with_ret+0xd0>
	{
		nm_bsp_sleep(1);
 800be5e:	2001      	movs	r0, #1
 800be60:	f7fd fb7e 	bl	8009560 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800be64:	2300      	movs	r3, #0
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	2300      	movs	r3, #0
 800be6a:	2200      	movs	r2, #0
 800be6c:	2100      	movs	r1, #0
 800be6e:	20cf      	movs	r0, #207	@ 0xcf
 800be70:	f7ff fc30 	bl	800b6d4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800be74:	20cf      	movs	r0, #207	@ 0xcf
 800be76:	f7ff fd7d 	bl	800b974 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
 800be7a:	2001      	movs	r0, #1
 800be7c:	f7fd fb70 	bl	8009560 <nm_bsp_sleep>
		retry--;
 800be80:	7bfb      	ldrb	r3, [r7, #15]
 800be82:	3b01      	subs	r3, #1
 800be84:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800be86:	7bfb      	ldrb	r3, [r7, #15]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d000      	beq.n	800be8e <nm_spi_read_reg_with_ret+0xd0>
 800be8c:	e7a4      	b.n	800bdd8 <nm_spi_read_reg_with_ret+0x1a>
	}
		
	return result;
 800be8e:	7b3b      	ldrb	r3, [r7, #12]
 800be90:	b25b      	sxtb	r3, r3
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b088      	sub	sp, #32
 800be9e:	af02      	add	r7, sp, #8
 800bea0:	60f8      	str	r0, [r7, #12]
 800bea2:	60b9      	str	r1, [r7, #8]
 800bea4:	4613      	mov	r3, r2
 800bea6:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
 800bea8:	23c8      	movs	r3, #200	@ 0xc8
 800beaa:	753b      	strb	r3, [r7, #20]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800beac:	230a      	movs	r3, #10
 800beae:	75bb      	strb	r3, [r7, #22]
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	757b      	strb	r3, [r7, #21]
_RETRY_:

	/**
		Command
	**/
	if (size == 1)
 800beb4:	88fb      	ldrh	r3, [r7, #6]
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d103      	bne.n	800bec2 <nm_spi_read+0x28>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
 800beba:	2302      	movs	r3, #2
 800bebc:	80fb      	strh	r3, [r7, #6]
		single_byte_workaround = 1;
 800bebe:	2301      	movs	r3, #1
 800bec0:	757b      	strb	r3, [r7, #21]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 800bec2:	88fb      	ldrh	r3, [r7, #6]
 800bec4:	7d38      	ldrb	r0, [r7, #20]
 800bec6:	2200      	movs	r2, #0
 800bec8:	9200      	str	r2, [sp, #0]
 800beca:	2200      	movs	r2, #0
 800becc:	68f9      	ldr	r1, [r7, #12]
 800bece:	f7ff fc01 	bl	800b6d4 <spi_cmd>
 800bed2:	4603      	mov	r3, r0
 800bed4:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800bed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d125      	bne.n	800bf2a <nm_spi_read+0x90>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800bede:	7d3b      	ldrb	r3, [r7, #20]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7ff fd47 	bl	800b974 <spi_cmd_rsp>
 800bee6:	4603      	mov	r3, r0
 800bee8:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800beea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d11d      	bne.n	800bf2e <nm_spi_read+0x94>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
 800bef2:	7d7b      	ldrb	r3, [r7, #21]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00c      	beq.n	800bf12 <nm_spi_read+0x78>
	{
		result = spi_data_read(tmp, size,0);
 800bef8:	88f9      	ldrh	r1, [r7, #6]
 800befa:	f107 0310 	add.w	r3, r7, #16
 800befe:	2200      	movs	r2, #0
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7ff fdbd 	bl	800ba80 <spi_data_read>
 800bf06:	4603      	mov	r3, r0
 800bf08:	75fb      	strb	r3, [r7, #23]
		buf[0] = tmp[0];
 800bf0a:	7c3a      	ldrb	r2, [r7, #16]
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	701a      	strb	r2, [r3, #0]
 800bf10:	e007      	b.n	800bf22 <nm_spi_read+0x88>
	}
	else
		result = spi_data_read(buf, size,0);
 800bf12:	88fb      	ldrh	r3, [r7, #6]
 800bf14:	2200      	movs	r2, #0
 800bf16:	4619      	mov	r1, r3
 800bf18:	68b8      	ldr	r0, [r7, #8]
 800bf1a:	f7ff fdb1 	bl	800ba80 <spi_data_read>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	75fb      	strb	r3, [r7, #23]

	if (result != N_OK) {
 800bf22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf26:	2b00      	cmp	r3, #0
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}

_FAIL_:
 800bf28:	e002      	b.n	800bf30 <nm_spi_read+0x96>
		goto _FAIL_;
 800bf2a:	bf00      	nop
 800bf2c:	e000      	b.n	800bf30 <nm_spi_read+0x96>
		goto _FAIL_;
 800bf2e:	bf00      	nop
	if(result != N_OK)
 800bf30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d017      	beq.n	800bf68 <nm_spi_read+0xce>
	{
		nm_bsp_sleep(1);
 800bf38:	2001      	movs	r0, #1
 800bf3a:	f7fd fb11 	bl	8009560 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800bf3e:	2300      	movs	r3, #0
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	2300      	movs	r3, #0
 800bf44:	2200      	movs	r2, #0
 800bf46:	2100      	movs	r1, #0
 800bf48:	20cf      	movs	r0, #207	@ 0xcf
 800bf4a:	f7ff fbc3 	bl	800b6d4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800bf4e:	20cf      	movs	r0, #207	@ 0xcf
 800bf50:	f7ff fd10 	bl	800b974 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 800bf54:	2001      	movs	r0, #1
 800bf56:	f7fd fb03 	bl	8009560 <nm_bsp_sleep>
		retry--;
 800bf5a:	7dbb      	ldrb	r3, [r7, #22]
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800bf60:	7dbb      	ldrb	r3, [r7, #22]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d000      	beq.n	800bf68 <nm_spi_read+0xce>
 800bf66:	e7a5      	b.n	800beb4 <nm_spi_read+0x1a>
	}

	return result;
 800bf68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
 800bf7a:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800bf7e:	f000 f875 	bl	800c06c <nm_spi_read_reg>
 800bf82:	6078      	str	r0, [r7, #4]
	val32 &= ~(0x7 << 4);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf8a:	607b      	str	r3, [r7, #4]
            break;
        case 4096:
            val32 |= (4 << 4);
            break;
        case 8192:
            val32 |= (5 << 4);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800bf92:	607b      	str	r3, [r7, #4]
            break;
 800bf94:	bf00      	nop
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
 800bf96:	6879      	ldr	r1, [r7, #4]
 800bf98:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800bf9c:	f7ff fe5c 	bl	800bc58 <nm_spi_write_reg>
}
 800bfa0:	bf00      	nop
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <nm_spi_init>:
*	@fn		nm_spi_init
*	@brief	Initialize the SPI
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_spi_init(void)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
 800bfb2:	4b26      	ldr	r3, [pc, #152]	@ (800c04c <nm_spi_init+0xa4>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	701a      	strb	r2, [r3, #0]

    if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 800bfb8:	463b      	mov	r3, r7
 800bfba:	4619      	mov	r1, r3
 800bfbc:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800bfc0:	f7ff fefd 	bl	800bdbe <nm_spi_read_reg_with_ret>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00e      	beq.n	800bfe8 <nm_spi_init+0x40>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
 800bfca:	4b20      	ldr	r3, [pc, #128]	@ (800c04c <nm_spi_init+0xa4>)
 800bfcc:	2201      	movs	r2, #1
 800bfce:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retrying with CRC off...\n");
        if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 800bfd0:	463b      	mov	r3, r7
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800bfd8:	f7ff fef1 	bl	800bdbe <nm_spi_read_reg_with_ret>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d002      	beq.n	800bfe8 <nm_spi_init+0x40>
			// Read failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
            return M2M_ERR_BUS_FAIL;
 800bfe2:	f06f 0305 	mvn.w	r3, #5
 800bfe6:	e02d      	b.n	800c044 <nm_spi_init+0x9c>
		}
	}
	if(gu8Crc_off == 0)
 800bfe8:	4b18      	ldr	r3, [pc, #96]	@ (800c04c <nm_spi_init+0xa4>)
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d11a      	bne.n	800c026 <nm_spi_init+0x7e>
	{
		reg &= ~0xc;	/* disable crc checking */
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	f023 030c 	bic.w	r3, r3, #12
 800bff6:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bffe:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800c006:	603b      	str	r3, [r7, #0]
        if(nm_spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg) != M2M_SUCCESS) {
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	4619      	mov	r1, r3
 800c00c:	f64e 0024 	movw	r0, #59428	@ 0xe824
 800c010:	f7ff fe22 	bl	800bc58 <nm_spi_write_reg>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d002      	beq.n	800c020 <nm_spi_init+0x78>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
            return M2M_ERR_BUS_FAIL;
 800c01a:	f06f 0305 	mvn.w	r3, #5
 800c01e:	e011      	b.n	800c044 <nm_spi_init+0x9c>
		}
		gu8Crc_off = 1;
 800c020:	4b0a      	ldr	r3, [pc, #40]	@ (800c04c <nm_spi_init+0xa4>)
 800c022:	2201      	movs	r2, #1
 800c024:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
    if(nm_spi_read_reg_with_ret(0x1000, &chipid) != M2M_SUCCESS) {
 800c026:	1d3b      	adds	r3, r7, #4
 800c028:	4619      	mov	r1, r3
 800c02a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c02e:	f7ff fec6 	bl	800bdbe <nm_spi_read_reg_with_ret>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <nm_spi_init+0x96>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
 800c038:	f06f 0305 	mvn.w	r3, #5
 800c03c:	e002      	b.n	800c044 <nm_spi_init+0x9c>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
 800c03e:	f7ff ff99 	bl	800bf74 <spi_init_pkt_sz>


	return M2M_SUCCESS;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	200030c0 	.word	0x200030c0

0800c050 <nm_spi_deinit>:
*	@fn		nm_spi_init
*	@brief	DeInitialize the SPI 
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
*/ 
sint8 nm_spi_deinit(void)
{
 800c050:	b480      	push	{r7}
 800c052:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
 800c054:	4b04      	ldr	r3, [pc, #16]	@ (800c068 <nm_spi_deinit+0x18>)
 800c056:	2200      	movs	r2, #0
 800c058:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop
 800c068:	200030c0 	.word	0x200030c0

0800c06c <nm_spi_read_reg>:
*	@param [in]	u32Addr
*				Register address
*	@return	Register value
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

    nm_spi_read_reg_with_ret(u32Addr, &u32Val);
 800c074:	f107 030c 	add.w	r3, r7, #12
 800c078:	4619      	mov	r1, r3
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7ff fe9f 	bl	800bdbe <nm_spi_read_reg_with_ret>

	return u32Val;
 800c080:	68fb      	ldr	r3, [r7, #12]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b086      	sub	sp, #24
 800c08e:	af00      	add	r7, sp, #0
 800c090:	60f8      	str	r0, [r7, #12]
 800c092:	60b9      	str	r1, [r7, #8]
 800c094:	4613      	mov	r3, r2
 800c096:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 800c098:	88fb      	ldrh	r3, [r7, #6]
 800c09a:	461a      	mov	r2, r3
 800c09c:	68b9      	ldr	r1, [r7, #8]
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f7ff fefb 	bl	800be9a <nm_spi_read>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800c0a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d102      	bne.n	800c0b6 <nm_spi_read_block+0x2c>
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	75fb      	strb	r3, [r7, #23]
 800c0b4:	e001      	b.n	800c0ba <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800c0b6:	23fa      	movs	r3, #250	@ 0xfa
 800c0b8:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800c0ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3718      	adds	r7, #24
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b086      	sub	sp, #24
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	60f8      	str	r0, [r7, #12]
 800c0ce:	60b9      	str	r1, [r7, #8]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 800c0d4:	88fb      	ldrh	r3, [r7, #6]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	68b9      	ldr	r1, [r7, #8]
 800c0da:	68f8      	ldr	r0, [r7, #12]
 800c0dc:	f7ff fe0b 	bl	800bcf6 <nm_spi_write>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800c0e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d102      	bne.n	800c0f2 <nm_spi_write_block+0x2c>
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	75fb      	strb	r3, [r7, #23]
 800c0f0:	e001      	b.n	800c0f6 <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800c0f2:	23fa      	movs	r3, #250	@ 0xfa
 800c0f4:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800c0f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3718      	adds	r7, #24
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800c10a:	463b      	mov	r3, r7
 800c10c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	22b9      	movs	r2, #185	@ 0xb9
 800c112:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800c114:	2100      	movs	r1, #0
 800c116:	4810      	ldr	r0, [pc, #64]	@ (800c158 <spi_flash_enter_low_power_mode+0x54>)
 800c118:	f7ff f878 	bl	800b20c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	4619      	mov	r1, r3
 800c122:	480e      	ldr	r0, [pc, #56]	@ (800c15c <spi_flash_enter_low_power_mode+0x58>)
 800c124:	f7ff f872 	bl	800b20c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800c128:	2101      	movs	r1, #1
 800c12a:	480d      	ldr	r0, [pc, #52]	@ (800c160 <spi_flash_enter_low_power_mode+0x5c>)
 800c12c:	f7ff f86e 	bl	800b20c <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800c130:	2100      	movs	r1, #0
 800c132:	480c      	ldr	r0, [pc, #48]	@ (800c164 <spi_flash_enter_low_power_mode+0x60>)
 800c134:	f7ff f86a 	bl	800b20c <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
 800c138:	2181      	movs	r1, #129	@ 0x81
 800c13a:	480b      	ldr	r0, [pc, #44]	@ (800c168 <spi_flash_enter_low_power_mode+0x64>)
 800c13c:	f7ff f866 	bl	800b20c <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800c140:	bf00      	nop
 800c142:	480a      	ldr	r0, [pc, #40]	@ (800c16c <spi_flash_enter_low_power_mode+0x68>)
 800c144:	f7ff f848 	bl	800b1d8 <nm_read_reg>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d1f9      	bne.n	800c142 <spi_flash_enter_low_power_mode+0x3e>
}
 800c14e:	bf00      	nop
 800c150:	bf00      	nop
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	00010208 	.word	0x00010208
 800c15c:	0001020c 	.word	0x0001020c
 800c160:	00010214 	.word	0x00010214
 800c164:	0001021c 	.word	0x0001021c
 800c168:	00010204 	.word	0x00010204
 800c16c:	00010218 	.word	0x00010218

0800c170 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800c176:	463b      	mov	r3, r7
 800c178:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	22ab      	movs	r2, #171	@ 0xab
 800c17e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800c180:	2100      	movs	r1, #0
 800c182:	4810      	ldr	r0, [pc, #64]	@ (800c1c4 <spi_flash_leave_low_power_mode+0x54>)
 800c184:	f7ff f842 	bl	800b20c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	4619      	mov	r1, r3
 800c18e:	480e      	ldr	r0, [pc, #56]	@ (800c1c8 <spi_flash_leave_low_power_mode+0x58>)
 800c190:	f7ff f83c 	bl	800b20c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800c194:	2101      	movs	r1, #1
 800c196:	480d      	ldr	r0, [pc, #52]	@ (800c1cc <spi_flash_leave_low_power_mode+0x5c>)
 800c198:	f7ff f838 	bl	800b20c <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800c19c:	2100      	movs	r1, #0
 800c19e:	480c      	ldr	r0, [pc, #48]	@ (800c1d0 <spi_flash_leave_low_power_mode+0x60>)
 800c1a0:	f7ff f834 	bl	800b20c <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
 800c1a4:	2181      	movs	r1, #129	@ 0x81
 800c1a6:	480b      	ldr	r0, [pc, #44]	@ (800c1d4 <spi_flash_leave_low_power_mode+0x64>)
 800c1a8:	f7ff f830 	bl	800b20c <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800c1ac:	bf00      	nop
 800c1ae:	480a      	ldr	r0, [pc, #40]	@ (800c1d8 <spi_flash_leave_low_power_mode+0x68>)
 800c1b0:	f7ff f812 	bl	800b1d8 <nm_read_reg>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d1f9      	bne.n	800c1ae <spi_flash_leave_low_power_mode+0x3e>
}
 800c1ba:	bf00      	nop
 800c1bc:	bf00      	nop
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	00010208 	.word	0x00010208
 800c1c8:	0001020c 	.word	0x0001020c
 800c1cc:	00010214 	.word	0x00010214
 800c1d0:	0001021c 	.word	0x0001021c
 800c1d4:	00010204 	.word	0x00010204
 800c1d8:	00010218 	.word	0x00010218

0800c1dc <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = M2M_SUCCESS;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	73fb      	strb	r3, [r7, #15]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
 800c1ea:	f7fe fd73 	bl	800acd4 <nmi_get_chipid>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c1f4:	f5b3 7f68 	cmp.w	r3, #928	@ 0x3a0
 800c1f8:	d331      	bcc.n	800c25e <spi_flash_enable+0x82>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
 800c1fa:	f107 0308 	add.w	r3, r7, #8
 800c1fe:	4619      	mov	r1, r3
 800c200:	f241 4010 	movw	r0, #5136	@ 0x1410
 800c204:	f7fe fff4 	bl	800b1f0 <nm_read_reg_with_ret>
 800c208:	4603      	mov	r3, r0
 800c20a:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != M2M_SUCCESS) {
 800c20c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d126      	bne.n	800c262 <spi_flash_enable+0x86>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	f023 63ee 	bic.w	r3, r3, #124780544	@ 0x7700000
 800c21a:	f423 23ee 	bic.w	r3, r3, #487424	@ 0x77000
 800c21e:	60bb      	str	r3, [r7, #8]
		if(enable) {
 800c220:	79fb      	ldrb	r3, [r7, #7]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00e      	beq.n	800c244 <spi_flash_enable+0x68>
			u32Val |= ((0x1111ul) << 12);
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	f043 7388 	orr.w	r3, r3, #17825792	@ 0x1100000
 800c22c:	f443 3388 	orr.w	r3, r3, #69632	@ 0x11000
 800c230:	60bb      	str	r3, [r7, #8]
			nm_write_reg(0x1410, u32Val);
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	4619      	mov	r1, r3
 800c236:	f241 4010 	movw	r0, #5136	@ 0x1410
 800c23a:	f7fe ffe7 	bl	800b20c <nm_write_reg>
			spi_flash_leave_low_power_mode();
 800c23e:	f7ff ff97 	bl	800c170 <spi_flash_leave_low_power_mode>
 800c242:	e00f      	b.n	800c264 <spi_flash_enable+0x88>
		} else {
			spi_flash_enter_low_power_mode();
 800c244:	f7ff ff5e 	bl	800c104 <spi_flash_enter_low_power_mode>
			/* Disable pinmux to SPI flash to minimize leakage. */
			u32Val |= ((0x0010ul) << 12);
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c24e:	60bb      	str	r3, [r7, #8]
			nm_write_reg(0x1410, u32Val);
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	4619      	mov	r1, r3
 800c254:	f241 4010 	movw	r0, #5136	@ 0x1410
 800c258:	f7fe ffd8 	bl	800b20c <nm_write_reg>
 800c25c:	e002      	b.n	800c264 <spi_flash_enable+0x88>
		}
	}
ERR1:
 800c25e:	bf00      	nop
 800c260:	e000      	b.n	800c264 <spi_flash_enable+0x88>
			goto ERR1;
 800c262:	bf00      	nop
	return s8Ret;
 800c264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <malloc>:
 800c270:	4b02      	ldr	r3, [pc, #8]	@ (800c27c <malloc+0xc>)
 800c272:	4601      	mov	r1, r0
 800c274:	6818      	ldr	r0, [r3, #0]
 800c276:	f000 b82d 	b.w	800c2d4 <_malloc_r>
 800c27a:	bf00      	nop
 800c27c:	20000038 	.word	0x20000038

0800c280 <free>:
 800c280:	4b02      	ldr	r3, [pc, #8]	@ (800c28c <free+0xc>)
 800c282:	4601      	mov	r1, r0
 800c284:	6818      	ldr	r0, [r3, #0]
 800c286:	f000 bb53 	b.w	800c930 <_free_r>
 800c28a:	bf00      	nop
 800c28c:	20000038 	.word	0x20000038

0800c290 <sbrk_aligned>:
 800c290:	b570      	push	{r4, r5, r6, lr}
 800c292:	4e0f      	ldr	r6, [pc, #60]	@ (800c2d0 <sbrk_aligned+0x40>)
 800c294:	460c      	mov	r4, r1
 800c296:	4605      	mov	r5, r0
 800c298:	6831      	ldr	r1, [r6, #0]
 800c29a:	b911      	cbnz	r1, 800c2a2 <sbrk_aligned+0x12>
 800c29c:	f000 faec 	bl	800c878 <_sbrk_r>
 800c2a0:	6030      	str	r0, [r6, #0]
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	f000 fae7 	bl	800c878 <_sbrk_r>
 800c2aa:	1c43      	adds	r3, r0, #1
 800c2ac:	d103      	bne.n	800c2b6 <sbrk_aligned+0x26>
 800c2ae:	f04f 34ff 	mov.w	r4, #4294967295
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	bd70      	pop	{r4, r5, r6, pc}
 800c2b6:	1cc4      	adds	r4, r0, #3
 800c2b8:	f024 0403 	bic.w	r4, r4, #3
 800c2bc:	42a0      	cmp	r0, r4
 800c2be:	d0f8      	beq.n	800c2b2 <sbrk_aligned+0x22>
 800c2c0:	1a21      	subs	r1, r4, r0
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	f000 fad8 	bl	800c878 <_sbrk_r>
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	d1f2      	bne.n	800c2b2 <sbrk_aligned+0x22>
 800c2cc:	e7ef      	b.n	800c2ae <sbrk_aligned+0x1e>
 800c2ce:	bf00      	nop
 800c2d0:	200030c4 	.word	0x200030c4

0800c2d4 <_malloc_r>:
 800c2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2d8:	1ccd      	adds	r5, r1, #3
 800c2da:	4606      	mov	r6, r0
 800c2dc:	f025 0503 	bic.w	r5, r5, #3
 800c2e0:	3508      	adds	r5, #8
 800c2e2:	2d0c      	cmp	r5, #12
 800c2e4:	bf38      	it	cc
 800c2e6:	250c      	movcc	r5, #12
 800c2e8:	2d00      	cmp	r5, #0
 800c2ea:	db01      	blt.n	800c2f0 <_malloc_r+0x1c>
 800c2ec:	42a9      	cmp	r1, r5
 800c2ee:	d904      	bls.n	800c2fa <_malloc_r+0x26>
 800c2f0:	230c      	movs	r3, #12
 800c2f2:	6033      	str	r3, [r6, #0]
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3d0 <_malloc_r+0xfc>
 800c2fe:	f000 f869 	bl	800c3d4 <__malloc_lock>
 800c302:	f8d8 3000 	ldr.w	r3, [r8]
 800c306:	461c      	mov	r4, r3
 800c308:	bb44      	cbnz	r4, 800c35c <_malloc_r+0x88>
 800c30a:	4629      	mov	r1, r5
 800c30c:	4630      	mov	r0, r6
 800c30e:	f7ff ffbf 	bl	800c290 <sbrk_aligned>
 800c312:	1c43      	adds	r3, r0, #1
 800c314:	4604      	mov	r4, r0
 800c316:	d158      	bne.n	800c3ca <_malloc_r+0xf6>
 800c318:	f8d8 4000 	ldr.w	r4, [r8]
 800c31c:	4627      	mov	r7, r4
 800c31e:	2f00      	cmp	r7, #0
 800c320:	d143      	bne.n	800c3aa <_malloc_r+0xd6>
 800c322:	2c00      	cmp	r4, #0
 800c324:	d04b      	beq.n	800c3be <_malloc_r+0xea>
 800c326:	6823      	ldr	r3, [r4, #0]
 800c328:	4639      	mov	r1, r7
 800c32a:	4630      	mov	r0, r6
 800c32c:	eb04 0903 	add.w	r9, r4, r3
 800c330:	f000 faa2 	bl	800c878 <_sbrk_r>
 800c334:	4581      	cmp	r9, r0
 800c336:	d142      	bne.n	800c3be <_malloc_r+0xea>
 800c338:	6821      	ldr	r1, [r4, #0]
 800c33a:	4630      	mov	r0, r6
 800c33c:	1a6d      	subs	r5, r5, r1
 800c33e:	4629      	mov	r1, r5
 800c340:	f7ff ffa6 	bl	800c290 <sbrk_aligned>
 800c344:	3001      	adds	r0, #1
 800c346:	d03a      	beq.n	800c3be <_malloc_r+0xea>
 800c348:	6823      	ldr	r3, [r4, #0]
 800c34a:	442b      	add	r3, r5
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	f8d8 3000 	ldr.w	r3, [r8]
 800c352:	685a      	ldr	r2, [r3, #4]
 800c354:	bb62      	cbnz	r2, 800c3b0 <_malloc_r+0xdc>
 800c356:	f8c8 7000 	str.w	r7, [r8]
 800c35a:	e00f      	b.n	800c37c <_malloc_r+0xa8>
 800c35c:	6822      	ldr	r2, [r4, #0]
 800c35e:	1b52      	subs	r2, r2, r5
 800c360:	d420      	bmi.n	800c3a4 <_malloc_r+0xd0>
 800c362:	2a0b      	cmp	r2, #11
 800c364:	d917      	bls.n	800c396 <_malloc_r+0xc2>
 800c366:	1961      	adds	r1, r4, r5
 800c368:	42a3      	cmp	r3, r4
 800c36a:	6025      	str	r5, [r4, #0]
 800c36c:	bf18      	it	ne
 800c36e:	6059      	strne	r1, [r3, #4]
 800c370:	6863      	ldr	r3, [r4, #4]
 800c372:	bf08      	it	eq
 800c374:	f8c8 1000 	streq.w	r1, [r8]
 800c378:	5162      	str	r2, [r4, r5]
 800c37a:	604b      	str	r3, [r1, #4]
 800c37c:	4630      	mov	r0, r6
 800c37e:	f000 f82f 	bl	800c3e0 <__malloc_unlock>
 800c382:	f104 000b 	add.w	r0, r4, #11
 800c386:	1d23      	adds	r3, r4, #4
 800c388:	f020 0007 	bic.w	r0, r0, #7
 800c38c:	1ac2      	subs	r2, r0, r3
 800c38e:	bf1c      	itt	ne
 800c390:	1a1b      	subne	r3, r3, r0
 800c392:	50a3      	strne	r3, [r4, r2]
 800c394:	e7af      	b.n	800c2f6 <_malloc_r+0x22>
 800c396:	6862      	ldr	r2, [r4, #4]
 800c398:	42a3      	cmp	r3, r4
 800c39a:	bf0c      	ite	eq
 800c39c:	f8c8 2000 	streq.w	r2, [r8]
 800c3a0:	605a      	strne	r2, [r3, #4]
 800c3a2:	e7eb      	b.n	800c37c <_malloc_r+0xa8>
 800c3a4:	4623      	mov	r3, r4
 800c3a6:	6864      	ldr	r4, [r4, #4]
 800c3a8:	e7ae      	b.n	800c308 <_malloc_r+0x34>
 800c3aa:	463c      	mov	r4, r7
 800c3ac:	687f      	ldr	r7, [r7, #4]
 800c3ae:	e7b6      	b.n	800c31e <_malloc_r+0x4a>
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	42a3      	cmp	r3, r4
 800c3b6:	d1fb      	bne.n	800c3b0 <_malloc_r+0xdc>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	6053      	str	r3, [r2, #4]
 800c3bc:	e7de      	b.n	800c37c <_malloc_r+0xa8>
 800c3be:	230c      	movs	r3, #12
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	6033      	str	r3, [r6, #0]
 800c3c4:	f000 f80c 	bl	800c3e0 <__malloc_unlock>
 800c3c8:	e794      	b.n	800c2f4 <_malloc_r+0x20>
 800c3ca:	6005      	str	r5, [r0, #0]
 800c3cc:	e7d6      	b.n	800c37c <_malloc_r+0xa8>
 800c3ce:	bf00      	nop
 800c3d0:	200030c8 	.word	0x200030c8

0800c3d4 <__malloc_lock>:
 800c3d4:	4801      	ldr	r0, [pc, #4]	@ (800c3dc <__malloc_lock+0x8>)
 800c3d6:	f000 ba9c 	b.w	800c912 <__retarget_lock_acquire_recursive>
 800c3da:	bf00      	nop
 800c3dc:	2000320c 	.word	0x2000320c

0800c3e0 <__malloc_unlock>:
 800c3e0:	4801      	ldr	r0, [pc, #4]	@ (800c3e8 <__malloc_unlock+0x8>)
 800c3e2:	f000 ba97 	b.w	800c914 <__retarget_lock_release_recursive>
 800c3e6:	bf00      	nop
 800c3e8:	2000320c 	.word	0x2000320c

0800c3ec <std>:
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	b510      	push	{r4, lr}
 800c3f0:	4604      	mov	r4, r0
 800c3f2:	6083      	str	r3, [r0, #8]
 800c3f4:	8181      	strh	r1, [r0, #12]
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	6643      	str	r3, [r0, #100]	@ 0x64
 800c3fa:	81c2      	strh	r2, [r0, #14]
 800c3fc:	2208      	movs	r2, #8
 800c3fe:	6183      	str	r3, [r0, #24]
 800c400:	e9c0 3300 	strd	r3, r3, [r0]
 800c404:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c408:	305c      	adds	r0, #92	@ 0x5c
 800c40a:	f000 f9f9 	bl	800c800 <memset>
 800c40e:	4b0d      	ldr	r3, [pc, #52]	@ (800c444 <std+0x58>)
 800c410:	6224      	str	r4, [r4, #32]
 800c412:	6263      	str	r3, [r4, #36]	@ 0x24
 800c414:	4b0c      	ldr	r3, [pc, #48]	@ (800c448 <std+0x5c>)
 800c416:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c418:	4b0c      	ldr	r3, [pc, #48]	@ (800c44c <std+0x60>)
 800c41a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c41c:	4b0c      	ldr	r3, [pc, #48]	@ (800c450 <std+0x64>)
 800c41e:	6323      	str	r3, [r4, #48]	@ 0x30
 800c420:	4b0c      	ldr	r3, [pc, #48]	@ (800c454 <std+0x68>)
 800c422:	429c      	cmp	r4, r3
 800c424:	d006      	beq.n	800c434 <std+0x48>
 800c426:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c42a:	4294      	cmp	r4, r2
 800c42c:	d002      	beq.n	800c434 <std+0x48>
 800c42e:	33d0      	adds	r3, #208	@ 0xd0
 800c430:	429c      	cmp	r4, r3
 800c432:	d105      	bne.n	800c440 <std+0x54>
 800c434:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c43c:	f000 ba68 	b.w	800c910 <__retarget_lock_init_recursive>
 800c440:	bd10      	pop	{r4, pc}
 800c442:	bf00      	nop
 800c444:	0800c651 	.word	0x0800c651
 800c448:	0800c673 	.word	0x0800c673
 800c44c:	0800c6ab 	.word	0x0800c6ab
 800c450:	0800c6cf 	.word	0x0800c6cf
 800c454:	200030cc 	.word	0x200030cc

0800c458 <stdio_exit_handler>:
 800c458:	4a02      	ldr	r2, [pc, #8]	@ (800c464 <stdio_exit_handler+0xc>)
 800c45a:	4903      	ldr	r1, [pc, #12]	@ (800c468 <stdio_exit_handler+0x10>)
 800c45c:	4803      	ldr	r0, [pc, #12]	@ (800c46c <stdio_exit_handler+0x14>)
 800c45e:	f000 b869 	b.w	800c534 <_fwalk_sglue>
 800c462:	bf00      	nop
 800c464:	2000002c 	.word	0x2000002c
 800c468:	0800d071 	.word	0x0800d071
 800c46c:	2000003c 	.word	0x2000003c

0800c470 <cleanup_stdio>:
 800c470:	6841      	ldr	r1, [r0, #4]
 800c472:	4b0c      	ldr	r3, [pc, #48]	@ (800c4a4 <cleanup_stdio+0x34>)
 800c474:	4299      	cmp	r1, r3
 800c476:	b510      	push	{r4, lr}
 800c478:	4604      	mov	r4, r0
 800c47a:	d001      	beq.n	800c480 <cleanup_stdio+0x10>
 800c47c:	f000 fdf8 	bl	800d070 <_fflush_r>
 800c480:	68a1      	ldr	r1, [r4, #8]
 800c482:	4b09      	ldr	r3, [pc, #36]	@ (800c4a8 <cleanup_stdio+0x38>)
 800c484:	4299      	cmp	r1, r3
 800c486:	d002      	beq.n	800c48e <cleanup_stdio+0x1e>
 800c488:	4620      	mov	r0, r4
 800c48a:	f000 fdf1 	bl	800d070 <_fflush_r>
 800c48e:	68e1      	ldr	r1, [r4, #12]
 800c490:	4b06      	ldr	r3, [pc, #24]	@ (800c4ac <cleanup_stdio+0x3c>)
 800c492:	4299      	cmp	r1, r3
 800c494:	d004      	beq.n	800c4a0 <cleanup_stdio+0x30>
 800c496:	4620      	mov	r0, r4
 800c498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c49c:	f000 bde8 	b.w	800d070 <_fflush_r>
 800c4a0:	bd10      	pop	{r4, pc}
 800c4a2:	bf00      	nop
 800c4a4:	200030cc 	.word	0x200030cc
 800c4a8:	20003134 	.word	0x20003134
 800c4ac:	2000319c 	.word	0x2000319c

0800c4b0 <global_stdio_init.part.0>:
 800c4b0:	b510      	push	{r4, lr}
 800c4b2:	4b0b      	ldr	r3, [pc, #44]	@ (800c4e0 <global_stdio_init.part.0+0x30>)
 800c4b4:	2104      	movs	r1, #4
 800c4b6:	4c0b      	ldr	r4, [pc, #44]	@ (800c4e4 <global_stdio_init.part.0+0x34>)
 800c4b8:	4a0b      	ldr	r2, [pc, #44]	@ (800c4e8 <global_stdio_init.part.0+0x38>)
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	601a      	str	r2, [r3, #0]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f7ff ff94 	bl	800c3ec <std>
 800c4c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	2109      	movs	r1, #9
 800c4cc:	f7ff ff8e 	bl	800c3ec <std>
 800c4d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c4d4:	2202      	movs	r2, #2
 800c4d6:	2112      	movs	r1, #18
 800c4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4dc:	f7ff bf86 	b.w	800c3ec <std>
 800c4e0:	20003204 	.word	0x20003204
 800c4e4:	200030cc 	.word	0x200030cc
 800c4e8:	0800c459 	.word	0x0800c459

0800c4ec <__sfp_lock_acquire>:
 800c4ec:	4801      	ldr	r0, [pc, #4]	@ (800c4f4 <__sfp_lock_acquire+0x8>)
 800c4ee:	f000 ba10 	b.w	800c912 <__retarget_lock_acquire_recursive>
 800c4f2:	bf00      	nop
 800c4f4:	2000320d 	.word	0x2000320d

0800c4f8 <__sfp_lock_release>:
 800c4f8:	4801      	ldr	r0, [pc, #4]	@ (800c500 <__sfp_lock_release+0x8>)
 800c4fa:	f000 ba0b 	b.w	800c914 <__retarget_lock_release_recursive>
 800c4fe:	bf00      	nop
 800c500:	2000320d 	.word	0x2000320d

0800c504 <__sinit>:
 800c504:	b510      	push	{r4, lr}
 800c506:	4604      	mov	r4, r0
 800c508:	f7ff fff0 	bl	800c4ec <__sfp_lock_acquire>
 800c50c:	6a23      	ldr	r3, [r4, #32]
 800c50e:	b11b      	cbz	r3, 800c518 <__sinit+0x14>
 800c510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c514:	f7ff bff0 	b.w	800c4f8 <__sfp_lock_release>
 800c518:	4b04      	ldr	r3, [pc, #16]	@ (800c52c <__sinit+0x28>)
 800c51a:	6223      	str	r3, [r4, #32]
 800c51c:	4b04      	ldr	r3, [pc, #16]	@ (800c530 <__sinit+0x2c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1f5      	bne.n	800c510 <__sinit+0xc>
 800c524:	f7ff ffc4 	bl	800c4b0 <global_stdio_init.part.0>
 800c528:	e7f2      	b.n	800c510 <__sinit+0xc>
 800c52a:	bf00      	nop
 800c52c:	0800c471 	.word	0x0800c471
 800c530:	20003204 	.word	0x20003204

0800c534 <_fwalk_sglue>:
 800c534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c538:	4607      	mov	r7, r0
 800c53a:	4688      	mov	r8, r1
 800c53c:	4614      	mov	r4, r2
 800c53e:	2600      	movs	r6, #0
 800c540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c544:	f1b9 0901 	subs.w	r9, r9, #1
 800c548:	d505      	bpl.n	800c556 <_fwalk_sglue+0x22>
 800c54a:	6824      	ldr	r4, [r4, #0]
 800c54c:	2c00      	cmp	r4, #0
 800c54e:	d1f7      	bne.n	800c540 <_fwalk_sglue+0xc>
 800c550:	4630      	mov	r0, r6
 800c552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c556:	89ab      	ldrh	r3, [r5, #12]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d907      	bls.n	800c56c <_fwalk_sglue+0x38>
 800c55c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c560:	3301      	adds	r3, #1
 800c562:	d003      	beq.n	800c56c <_fwalk_sglue+0x38>
 800c564:	4629      	mov	r1, r5
 800c566:	4638      	mov	r0, r7
 800c568:	47c0      	blx	r8
 800c56a:	4306      	orrs	r6, r0
 800c56c:	3568      	adds	r5, #104	@ 0x68
 800c56e:	e7e9      	b.n	800c544 <_fwalk_sglue+0x10>

0800c570 <iprintf>:
 800c570:	b40f      	push	{r0, r1, r2, r3}
 800c572:	b507      	push	{r0, r1, r2, lr}
 800c574:	4906      	ldr	r1, [pc, #24]	@ (800c590 <iprintf+0x20>)
 800c576:	ab04      	add	r3, sp, #16
 800c578:	6808      	ldr	r0, [r1, #0]
 800c57a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c57e:	6881      	ldr	r1, [r0, #8]
 800c580:	9301      	str	r3, [sp, #4]
 800c582:	f000 fa49 	bl	800ca18 <_vfiprintf_r>
 800c586:	b003      	add	sp, #12
 800c588:	f85d eb04 	ldr.w	lr, [sp], #4
 800c58c:	b004      	add	sp, #16
 800c58e:	4770      	bx	lr
 800c590:	20000038 	.word	0x20000038

0800c594 <_puts_r>:
 800c594:	6a03      	ldr	r3, [r0, #32]
 800c596:	b570      	push	{r4, r5, r6, lr}
 800c598:	4605      	mov	r5, r0
 800c59a:	460e      	mov	r6, r1
 800c59c:	6884      	ldr	r4, [r0, #8]
 800c59e:	b90b      	cbnz	r3, 800c5a4 <_puts_r+0x10>
 800c5a0:	f7ff ffb0 	bl	800c504 <__sinit>
 800c5a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5a6:	07db      	lsls	r3, r3, #31
 800c5a8:	d405      	bmi.n	800c5b6 <_puts_r+0x22>
 800c5aa:	89a3      	ldrh	r3, [r4, #12]
 800c5ac:	0598      	lsls	r0, r3, #22
 800c5ae:	d402      	bmi.n	800c5b6 <_puts_r+0x22>
 800c5b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5b2:	f000 f9ae 	bl	800c912 <__retarget_lock_acquire_recursive>
 800c5b6:	89a3      	ldrh	r3, [r4, #12]
 800c5b8:	0719      	lsls	r1, r3, #28
 800c5ba:	d502      	bpl.n	800c5c2 <_puts_r+0x2e>
 800c5bc:	6923      	ldr	r3, [r4, #16]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d135      	bne.n	800c62e <_puts_r+0x9a>
 800c5c2:	4621      	mov	r1, r4
 800c5c4:	4628      	mov	r0, r5
 800c5c6:	f000 f8c5 	bl	800c754 <__swsetup_r>
 800c5ca:	b380      	cbz	r0, 800c62e <_puts_r+0x9a>
 800c5cc:	f04f 35ff 	mov.w	r5, #4294967295
 800c5d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5d2:	07da      	lsls	r2, r3, #31
 800c5d4:	d405      	bmi.n	800c5e2 <_puts_r+0x4e>
 800c5d6:	89a3      	ldrh	r3, [r4, #12]
 800c5d8:	059b      	lsls	r3, r3, #22
 800c5da:	d402      	bmi.n	800c5e2 <_puts_r+0x4e>
 800c5dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5de:	f000 f999 	bl	800c914 <__retarget_lock_release_recursive>
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	bd70      	pop	{r4, r5, r6, pc}
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	da04      	bge.n	800c5f4 <_puts_r+0x60>
 800c5ea:	69a2      	ldr	r2, [r4, #24]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	dc17      	bgt.n	800c620 <_puts_r+0x8c>
 800c5f0:	290a      	cmp	r1, #10
 800c5f2:	d015      	beq.n	800c620 <_puts_r+0x8c>
 800c5f4:	6823      	ldr	r3, [r4, #0]
 800c5f6:	1c5a      	adds	r2, r3, #1
 800c5f8:	6022      	str	r2, [r4, #0]
 800c5fa:	7019      	strb	r1, [r3, #0]
 800c5fc:	68a3      	ldr	r3, [r4, #8]
 800c5fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c602:	3b01      	subs	r3, #1
 800c604:	60a3      	str	r3, [r4, #8]
 800c606:	2900      	cmp	r1, #0
 800c608:	d1ed      	bne.n	800c5e6 <_puts_r+0x52>
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	da11      	bge.n	800c632 <_puts_r+0x9e>
 800c60e:	4622      	mov	r2, r4
 800c610:	210a      	movs	r1, #10
 800c612:	4628      	mov	r0, r5
 800c614:	f000 f85f 	bl	800c6d6 <__swbuf_r>
 800c618:	3001      	adds	r0, #1
 800c61a:	d0d7      	beq.n	800c5cc <_puts_r+0x38>
 800c61c:	250a      	movs	r5, #10
 800c61e:	e7d7      	b.n	800c5d0 <_puts_r+0x3c>
 800c620:	4622      	mov	r2, r4
 800c622:	4628      	mov	r0, r5
 800c624:	f000 f857 	bl	800c6d6 <__swbuf_r>
 800c628:	3001      	adds	r0, #1
 800c62a:	d1e7      	bne.n	800c5fc <_puts_r+0x68>
 800c62c:	e7ce      	b.n	800c5cc <_puts_r+0x38>
 800c62e:	3e01      	subs	r6, #1
 800c630:	e7e4      	b.n	800c5fc <_puts_r+0x68>
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	1c5a      	adds	r2, r3, #1
 800c636:	6022      	str	r2, [r4, #0]
 800c638:	220a      	movs	r2, #10
 800c63a:	701a      	strb	r2, [r3, #0]
 800c63c:	e7ee      	b.n	800c61c <_puts_r+0x88>
	...

0800c640 <puts>:
 800c640:	4b02      	ldr	r3, [pc, #8]	@ (800c64c <puts+0xc>)
 800c642:	4601      	mov	r1, r0
 800c644:	6818      	ldr	r0, [r3, #0]
 800c646:	f7ff bfa5 	b.w	800c594 <_puts_r>
 800c64a:	bf00      	nop
 800c64c:	20000038 	.word	0x20000038

0800c650 <__sread>:
 800c650:	b510      	push	{r4, lr}
 800c652:	460c      	mov	r4, r1
 800c654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c658:	f000 f8fc 	bl	800c854 <_read_r>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	bfab      	itete	ge
 800c660:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c662:	89a3      	ldrhlt	r3, [r4, #12]
 800c664:	181b      	addge	r3, r3, r0
 800c666:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c66a:	bfac      	ite	ge
 800c66c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c66e:	81a3      	strhlt	r3, [r4, #12]
 800c670:	bd10      	pop	{r4, pc}

0800c672 <__swrite>:
 800c672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c676:	461f      	mov	r7, r3
 800c678:	898b      	ldrh	r3, [r1, #12]
 800c67a:	4605      	mov	r5, r0
 800c67c:	460c      	mov	r4, r1
 800c67e:	05db      	lsls	r3, r3, #23
 800c680:	4616      	mov	r6, r2
 800c682:	d505      	bpl.n	800c690 <__swrite+0x1e>
 800c684:	2302      	movs	r3, #2
 800c686:	2200      	movs	r2, #0
 800c688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c68c:	f000 f8d0 	bl	800c830 <_lseek_r>
 800c690:	89a3      	ldrh	r3, [r4, #12]
 800c692:	4632      	mov	r2, r6
 800c694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c698:	4628      	mov	r0, r5
 800c69a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c69e:	81a3      	strh	r3, [r4, #12]
 800c6a0:	463b      	mov	r3, r7
 800c6a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a6:	f000 b8f7 	b.w	800c898 <_write_r>

0800c6aa <__sseek>:
 800c6aa:	b510      	push	{r4, lr}
 800c6ac:	460c      	mov	r4, r1
 800c6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6b2:	f000 f8bd 	bl	800c830 <_lseek_r>
 800c6b6:	1c43      	adds	r3, r0, #1
 800c6b8:	89a3      	ldrh	r3, [r4, #12]
 800c6ba:	bf15      	itete	ne
 800c6bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c6be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c6c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c6c6:	81a3      	strheq	r3, [r4, #12]
 800c6c8:	bf18      	it	ne
 800c6ca:	81a3      	strhne	r3, [r4, #12]
 800c6cc:	bd10      	pop	{r4, pc}

0800c6ce <__sclose>:
 800c6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d2:	f000 b89d 	b.w	800c810 <_close_r>

0800c6d6 <__swbuf_r>:
 800c6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6d8:	460e      	mov	r6, r1
 800c6da:	4614      	mov	r4, r2
 800c6dc:	4605      	mov	r5, r0
 800c6de:	b118      	cbz	r0, 800c6e8 <__swbuf_r+0x12>
 800c6e0:	6a03      	ldr	r3, [r0, #32]
 800c6e2:	b90b      	cbnz	r3, 800c6e8 <__swbuf_r+0x12>
 800c6e4:	f7ff ff0e 	bl	800c504 <__sinit>
 800c6e8:	69a3      	ldr	r3, [r4, #24]
 800c6ea:	60a3      	str	r3, [r4, #8]
 800c6ec:	89a3      	ldrh	r3, [r4, #12]
 800c6ee:	071a      	lsls	r2, r3, #28
 800c6f0:	d501      	bpl.n	800c6f6 <__swbuf_r+0x20>
 800c6f2:	6923      	ldr	r3, [r4, #16]
 800c6f4:	b943      	cbnz	r3, 800c708 <__swbuf_r+0x32>
 800c6f6:	4621      	mov	r1, r4
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	f000 f82b 	bl	800c754 <__swsetup_r>
 800c6fe:	b118      	cbz	r0, 800c708 <__swbuf_r+0x32>
 800c700:	f04f 37ff 	mov.w	r7, #4294967295
 800c704:	4638      	mov	r0, r7
 800c706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c708:	6823      	ldr	r3, [r4, #0]
 800c70a:	b2f6      	uxtb	r6, r6
 800c70c:	6922      	ldr	r2, [r4, #16]
 800c70e:	4637      	mov	r7, r6
 800c710:	1a98      	subs	r0, r3, r2
 800c712:	6963      	ldr	r3, [r4, #20]
 800c714:	4283      	cmp	r3, r0
 800c716:	dc05      	bgt.n	800c724 <__swbuf_r+0x4e>
 800c718:	4621      	mov	r1, r4
 800c71a:	4628      	mov	r0, r5
 800c71c:	f000 fca8 	bl	800d070 <_fflush_r>
 800c720:	2800      	cmp	r0, #0
 800c722:	d1ed      	bne.n	800c700 <__swbuf_r+0x2a>
 800c724:	68a3      	ldr	r3, [r4, #8]
 800c726:	3b01      	subs	r3, #1
 800c728:	60a3      	str	r3, [r4, #8]
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	1c5a      	adds	r2, r3, #1
 800c72e:	6022      	str	r2, [r4, #0]
 800c730:	701e      	strb	r6, [r3, #0]
 800c732:	1c43      	adds	r3, r0, #1
 800c734:	6962      	ldr	r2, [r4, #20]
 800c736:	429a      	cmp	r2, r3
 800c738:	d004      	beq.n	800c744 <__swbuf_r+0x6e>
 800c73a:	89a3      	ldrh	r3, [r4, #12]
 800c73c:	07db      	lsls	r3, r3, #31
 800c73e:	d5e1      	bpl.n	800c704 <__swbuf_r+0x2e>
 800c740:	2e0a      	cmp	r6, #10
 800c742:	d1df      	bne.n	800c704 <__swbuf_r+0x2e>
 800c744:	4621      	mov	r1, r4
 800c746:	4628      	mov	r0, r5
 800c748:	f000 fc92 	bl	800d070 <_fflush_r>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d0d9      	beq.n	800c704 <__swbuf_r+0x2e>
 800c750:	e7d6      	b.n	800c700 <__swbuf_r+0x2a>
	...

0800c754 <__swsetup_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	4b29      	ldr	r3, [pc, #164]	@ (800c7fc <__swsetup_r+0xa8>)
 800c758:	4605      	mov	r5, r0
 800c75a:	460c      	mov	r4, r1
 800c75c:	6818      	ldr	r0, [r3, #0]
 800c75e:	b118      	cbz	r0, 800c768 <__swsetup_r+0x14>
 800c760:	6a03      	ldr	r3, [r0, #32]
 800c762:	b90b      	cbnz	r3, 800c768 <__swsetup_r+0x14>
 800c764:	f7ff fece 	bl	800c504 <__sinit>
 800c768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c76c:	0719      	lsls	r1, r3, #28
 800c76e:	d422      	bmi.n	800c7b6 <__swsetup_r+0x62>
 800c770:	06da      	lsls	r2, r3, #27
 800c772:	d407      	bmi.n	800c784 <__swsetup_r+0x30>
 800c774:	2209      	movs	r2, #9
 800c776:	602a      	str	r2, [r5, #0]
 800c778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c77c:	f04f 30ff 	mov.w	r0, #4294967295
 800c780:	81a3      	strh	r3, [r4, #12]
 800c782:	e033      	b.n	800c7ec <__swsetup_r+0x98>
 800c784:	0758      	lsls	r0, r3, #29
 800c786:	d512      	bpl.n	800c7ae <__swsetup_r+0x5a>
 800c788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c78a:	b141      	cbz	r1, 800c79e <__swsetup_r+0x4a>
 800c78c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c790:	4299      	cmp	r1, r3
 800c792:	d002      	beq.n	800c79a <__swsetup_r+0x46>
 800c794:	4628      	mov	r0, r5
 800c796:	f000 f8cb 	bl	800c930 <_free_r>
 800c79a:	2300      	movs	r3, #0
 800c79c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c79e:	89a3      	ldrh	r3, [r4, #12]
 800c7a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c7a4:	81a3      	strh	r3, [r4, #12]
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	6063      	str	r3, [r4, #4]
 800c7aa:	6923      	ldr	r3, [r4, #16]
 800c7ac:	6023      	str	r3, [r4, #0]
 800c7ae:	89a3      	ldrh	r3, [r4, #12]
 800c7b0:	f043 0308 	orr.w	r3, r3, #8
 800c7b4:	81a3      	strh	r3, [r4, #12]
 800c7b6:	6923      	ldr	r3, [r4, #16]
 800c7b8:	b94b      	cbnz	r3, 800c7ce <__swsetup_r+0x7a>
 800c7ba:	89a3      	ldrh	r3, [r4, #12]
 800c7bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c7c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7c4:	d003      	beq.n	800c7ce <__swsetup_r+0x7a>
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	f000 fc9e 	bl	800d10a <__smakebuf_r>
 800c7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7d2:	f013 0201 	ands.w	r2, r3, #1
 800c7d6:	d00a      	beq.n	800c7ee <__swsetup_r+0x9a>
 800c7d8:	2200      	movs	r2, #0
 800c7da:	60a2      	str	r2, [r4, #8]
 800c7dc:	6962      	ldr	r2, [r4, #20]
 800c7de:	4252      	negs	r2, r2
 800c7e0:	61a2      	str	r2, [r4, #24]
 800c7e2:	6922      	ldr	r2, [r4, #16]
 800c7e4:	b942      	cbnz	r2, 800c7f8 <__swsetup_r+0xa4>
 800c7e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c7ea:	d1c5      	bne.n	800c778 <__swsetup_r+0x24>
 800c7ec:	bd38      	pop	{r3, r4, r5, pc}
 800c7ee:	0799      	lsls	r1, r3, #30
 800c7f0:	bf58      	it	pl
 800c7f2:	6962      	ldrpl	r2, [r4, #20]
 800c7f4:	60a2      	str	r2, [r4, #8]
 800c7f6:	e7f4      	b.n	800c7e2 <__swsetup_r+0x8e>
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	e7f7      	b.n	800c7ec <__swsetup_r+0x98>
 800c7fc:	20000038 	.word	0x20000038

0800c800 <memset>:
 800c800:	4402      	add	r2, r0
 800c802:	4603      	mov	r3, r0
 800c804:	4293      	cmp	r3, r2
 800c806:	d100      	bne.n	800c80a <memset+0xa>
 800c808:	4770      	bx	lr
 800c80a:	f803 1b01 	strb.w	r1, [r3], #1
 800c80e:	e7f9      	b.n	800c804 <memset+0x4>

0800c810 <_close_r>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	2300      	movs	r3, #0
 800c814:	4d05      	ldr	r5, [pc, #20]	@ (800c82c <_close_r+0x1c>)
 800c816:	4604      	mov	r4, r0
 800c818:	4608      	mov	r0, r1
 800c81a:	602b      	str	r3, [r5, #0]
 800c81c:	f7f4 fdad 	bl	800137a <_close>
 800c820:	1c43      	adds	r3, r0, #1
 800c822:	d102      	bne.n	800c82a <_close_r+0x1a>
 800c824:	682b      	ldr	r3, [r5, #0]
 800c826:	b103      	cbz	r3, 800c82a <_close_r+0x1a>
 800c828:	6023      	str	r3, [r4, #0]
 800c82a:	bd38      	pop	{r3, r4, r5, pc}
 800c82c:	20003208 	.word	0x20003208

0800c830 <_lseek_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4604      	mov	r4, r0
 800c834:	4d06      	ldr	r5, [pc, #24]	@ (800c850 <_lseek_r+0x20>)
 800c836:	4608      	mov	r0, r1
 800c838:	4611      	mov	r1, r2
 800c83a:	2200      	movs	r2, #0
 800c83c:	602a      	str	r2, [r5, #0]
 800c83e:	461a      	mov	r2, r3
 800c840:	f7f4 fdc2 	bl	80013c8 <_lseek>
 800c844:	1c43      	adds	r3, r0, #1
 800c846:	d102      	bne.n	800c84e <_lseek_r+0x1e>
 800c848:	682b      	ldr	r3, [r5, #0]
 800c84a:	b103      	cbz	r3, 800c84e <_lseek_r+0x1e>
 800c84c:	6023      	str	r3, [r4, #0]
 800c84e:	bd38      	pop	{r3, r4, r5, pc}
 800c850:	20003208 	.word	0x20003208

0800c854 <_read_r>:
 800c854:	b538      	push	{r3, r4, r5, lr}
 800c856:	4604      	mov	r4, r0
 800c858:	4d06      	ldr	r5, [pc, #24]	@ (800c874 <_read_r+0x20>)
 800c85a:	4608      	mov	r0, r1
 800c85c:	4611      	mov	r1, r2
 800c85e:	2200      	movs	r2, #0
 800c860:	602a      	str	r2, [r5, #0]
 800c862:	461a      	mov	r2, r3
 800c864:	f7f4 fd50 	bl	8001308 <_read>
 800c868:	1c43      	adds	r3, r0, #1
 800c86a:	d102      	bne.n	800c872 <_read_r+0x1e>
 800c86c:	682b      	ldr	r3, [r5, #0]
 800c86e:	b103      	cbz	r3, 800c872 <_read_r+0x1e>
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	bd38      	pop	{r3, r4, r5, pc}
 800c874:	20003208 	.word	0x20003208

0800c878 <_sbrk_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	2300      	movs	r3, #0
 800c87c:	4d05      	ldr	r5, [pc, #20]	@ (800c894 <_sbrk_r+0x1c>)
 800c87e:	4604      	mov	r4, r0
 800c880:	4608      	mov	r0, r1
 800c882:	602b      	str	r3, [r5, #0]
 800c884:	f7f4 fdae 	bl	80013e4 <_sbrk>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d102      	bne.n	800c892 <_sbrk_r+0x1a>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	b103      	cbz	r3, 800c892 <_sbrk_r+0x1a>
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	20003208 	.word	0x20003208

0800c898 <_write_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4604      	mov	r4, r0
 800c89c:	4d06      	ldr	r5, [pc, #24]	@ (800c8b8 <_write_r+0x20>)
 800c89e:	4608      	mov	r0, r1
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	602a      	str	r2, [r5, #0]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	f7f4 fd4b 	bl	8001342 <_write>
 800c8ac:	1c43      	adds	r3, r0, #1
 800c8ae:	d102      	bne.n	800c8b6 <_write_r+0x1e>
 800c8b0:	682b      	ldr	r3, [r5, #0]
 800c8b2:	b103      	cbz	r3, 800c8b6 <_write_r+0x1e>
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	bd38      	pop	{r3, r4, r5, pc}
 800c8b8:	20003208 	.word	0x20003208

0800c8bc <__errno>:
 800c8bc:	4b01      	ldr	r3, [pc, #4]	@ (800c8c4 <__errno+0x8>)
 800c8be:	6818      	ldr	r0, [r3, #0]
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	20000038 	.word	0x20000038

0800c8c8 <__libc_init_array>:
 800c8c8:	b570      	push	{r4, r5, r6, lr}
 800c8ca:	4d0d      	ldr	r5, [pc, #52]	@ (800c900 <__libc_init_array+0x38>)
 800c8cc:	2600      	movs	r6, #0
 800c8ce:	4c0d      	ldr	r4, [pc, #52]	@ (800c904 <__libc_init_array+0x3c>)
 800c8d0:	1b64      	subs	r4, r4, r5
 800c8d2:	10a4      	asrs	r4, r4, #2
 800c8d4:	42a6      	cmp	r6, r4
 800c8d6:	d109      	bne.n	800c8ec <__libc_init_array+0x24>
 800c8d8:	4d0b      	ldr	r5, [pc, #44]	@ (800c908 <__libc_init_array+0x40>)
 800c8da:	2600      	movs	r6, #0
 800c8dc:	4c0b      	ldr	r4, [pc, #44]	@ (800c90c <__libc_init_array+0x44>)
 800c8de:	f000 fc81 	bl	800d1e4 <_init>
 800c8e2:	1b64      	subs	r4, r4, r5
 800c8e4:	10a4      	asrs	r4, r4, #2
 800c8e6:	42a6      	cmp	r6, r4
 800c8e8:	d105      	bne.n	800c8f6 <__libc_init_array+0x2e>
 800c8ea:	bd70      	pop	{r4, r5, r6, pc}
 800c8ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8f0:	3601      	adds	r6, #1
 800c8f2:	4798      	blx	r3
 800c8f4:	e7ee      	b.n	800c8d4 <__libc_init_array+0xc>
 800c8f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8fa:	3601      	adds	r6, #1
 800c8fc:	4798      	blx	r3
 800c8fe:	e7f2      	b.n	800c8e6 <__libc_init_array+0x1e>
 800c900:	0800d600 	.word	0x0800d600
 800c904:	0800d600 	.word	0x0800d600
 800c908:	0800d600 	.word	0x0800d600
 800c90c:	0800d604 	.word	0x0800d604

0800c910 <__retarget_lock_init_recursive>:
 800c910:	4770      	bx	lr

0800c912 <__retarget_lock_acquire_recursive>:
 800c912:	4770      	bx	lr

0800c914 <__retarget_lock_release_recursive>:
 800c914:	4770      	bx	lr

0800c916 <memcpy>:
 800c916:	440a      	add	r2, r1
 800c918:	1e43      	subs	r3, r0, #1
 800c91a:	4291      	cmp	r1, r2
 800c91c:	d100      	bne.n	800c920 <memcpy+0xa>
 800c91e:	4770      	bx	lr
 800c920:	b510      	push	{r4, lr}
 800c922:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c926:	4291      	cmp	r1, r2
 800c928:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c92c:	d1f9      	bne.n	800c922 <memcpy+0xc>
 800c92e:	bd10      	pop	{r4, pc}

0800c930 <_free_r>:
 800c930:	b538      	push	{r3, r4, r5, lr}
 800c932:	4605      	mov	r5, r0
 800c934:	2900      	cmp	r1, #0
 800c936:	d041      	beq.n	800c9bc <_free_r+0x8c>
 800c938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c93c:	1f0c      	subs	r4, r1, #4
 800c93e:	2b00      	cmp	r3, #0
 800c940:	bfb8      	it	lt
 800c942:	18e4      	addlt	r4, r4, r3
 800c944:	f7ff fd46 	bl	800c3d4 <__malloc_lock>
 800c948:	4a1d      	ldr	r2, [pc, #116]	@ (800c9c0 <_free_r+0x90>)
 800c94a:	6813      	ldr	r3, [r2, #0]
 800c94c:	b933      	cbnz	r3, 800c95c <_free_r+0x2c>
 800c94e:	6063      	str	r3, [r4, #4]
 800c950:	6014      	str	r4, [r2, #0]
 800c952:	4628      	mov	r0, r5
 800c954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c958:	f7ff bd42 	b.w	800c3e0 <__malloc_unlock>
 800c95c:	42a3      	cmp	r3, r4
 800c95e:	d908      	bls.n	800c972 <_free_r+0x42>
 800c960:	6820      	ldr	r0, [r4, #0]
 800c962:	1821      	adds	r1, r4, r0
 800c964:	428b      	cmp	r3, r1
 800c966:	bf01      	itttt	eq
 800c968:	6819      	ldreq	r1, [r3, #0]
 800c96a:	685b      	ldreq	r3, [r3, #4]
 800c96c:	1809      	addeq	r1, r1, r0
 800c96e:	6021      	streq	r1, [r4, #0]
 800c970:	e7ed      	b.n	800c94e <_free_r+0x1e>
 800c972:	461a      	mov	r2, r3
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	b10b      	cbz	r3, 800c97c <_free_r+0x4c>
 800c978:	42a3      	cmp	r3, r4
 800c97a:	d9fa      	bls.n	800c972 <_free_r+0x42>
 800c97c:	6811      	ldr	r1, [r2, #0]
 800c97e:	1850      	adds	r0, r2, r1
 800c980:	42a0      	cmp	r0, r4
 800c982:	d10b      	bne.n	800c99c <_free_r+0x6c>
 800c984:	6820      	ldr	r0, [r4, #0]
 800c986:	4401      	add	r1, r0
 800c988:	1850      	adds	r0, r2, r1
 800c98a:	6011      	str	r1, [r2, #0]
 800c98c:	4283      	cmp	r3, r0
 800c98e:	d1e0      	bne.n	800c952 <_free_r+0x22>
 800c990:	6818      	ldr	r0, [r3, #0]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	4408      	add	r0, r1
 800c996:	6053      	str	r3, [r2, #4]
 800c998:	6010      	str	r0, [r2, #0]
 800c99a:	e7da      	b.n	800c952 <_free_r+0x22>
 800c99c:	d902      	bls.n	800c9a4 <_free_r+0x74>
 800c99e:	230c      	movs	r3, #12
 800c9a0:	602b      	str	r3, [r5, #0]
 800c9a2:	e7d6      	b.n	800c952 <_free_r+0x22>
 800c9a4:	6820      	ldr	r0, [r4, #0]
 800c9a6:	1821      	adds	r1, r4, r0
 800c9a8:	428b      	cmp	r3, r1
 800c9aa:	bf02      	ittt	eq
 800c9ac:	6819      	ldreq	r1, [r3, #0]
 800c9ae:	685b      	ldreq	r3, [r3, #4]
 800c9b0:	1809      	addeq	r1, r1, r0
 800c9b2:	6063      	str	r3, [r4, #4]
 800c9b4:	bf08      	it	eq
 800c9b6:	6021      	streq	r1, [r4, #0]
 800c9b8:	6054      	str	r4, [r2, #4]
 800c9ba:	e7ca      	b.n	800c952 <_free_r+0x22>
 800c9bc:	bd38      	pop	{r3, r4, r5, pc}
 800c9be:	bf00      	nop
 800c9c0:	200030c8 	.word	0x200030c8

0800c9c4 <__sfputc_r>:
 800c9c4:	6893      	ldr	r3, [r2, #8]
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	b410      	push	{r4}
 800c9cc:	6093      	str	r3, [r2, #8]
 800c9ce:	da08      	bge.n	800c9e2 <__sfputc_r+0x1e>
 800c9d0:	6994      	ldr	r4, [r2, #24]
 800c9d2:	42a3      	cmp	r3, r4
 800c9d4:	db01      	blt.n	800c9da <__sfputc_r+0x16>
 800c9d6:	290a      	cmp	r1, #10
 800c9d8:	d103      	bne.n	800c9e2 <__sfputc_r+0x1e>
 800c9da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9de:	f7ff be7a 	b.w	800c6d6 <__swbuf_r>
 800c9e2:	6813      	ldr	r3, [r2, #0]
 800c9e4:	1c58      	adds	r0, r3, #1
 800c9e6:	6010      	str	r0, [r2, #0]
 800c9e8:	4608      	mov	r0, r1
 800c9ea:	7019      	strb	r1, [r3, #0]
 800c9ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9f0:	4770      	bx	lr

0800c9f2 <__sfputs_r>:
 800c9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f4:	4606      	mov	r6, r0
 800c9f6:	460f      	mov	r7, r1
 800c9f8:	4614      	mov	r4, r2
 800c9fa:	18d5      	adds	r5, r2, r3
 800c9fc:	42ac      	cmp	r4, r5
 800c9fe:	d101      	bne.n	800ca04 <__sfputs_r+0x12>
 800ca00:	2000      	movs	r0, #0
 800ca02:	e007      	b.n	800ca14 <__sfputs_r+0x22>
 800ca04:	463a      	mov	r2, r7
 800ca06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	f7ff ffda 	bl	800c9c4 <__sfputc_r>
 800ca10:	1c43      	adds	r3, r0, #1
 800ca12:	d1f3      	bne.n	800c9fc <__sfputs_r+0xa>
 800ca14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca18 <_vfiprintf_r>:
 800ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1c:	460d      	mov	r5, r1
 800ca1e:	b09d      	sub	sp, #116	@ 0x74
 800ca20:	4614      	mov	r4, r2
 800ca22:	4698      	mov	r8, r3
 800ca24:	4606      	mov	r6, r0
 800ca26:	b118      	cbz	r0, 800ca30 <_vfiprintf_r+0x18>
 800ca28:	6a03      	ldr	r3, [r0, #32]
 800ca2a:	b90b      	cbnz	r3, 800ca30 <_vfiprintf_r+0x18>
 800ca2c:	f7ff fd6a 	bl	800c504 <__sinit>
 800ca30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca32:	07d9      	lsls	r1, r3, #31
 800ca34:	d405      	bmi.n	800ca42 <_vfiprintf_r+0x2a>
 800ca36:	89ab      	ldrh	r3, [r5, #12]
 800ca38:	059a      	lsls	r2, r3, #22
 800ca3a:	d402      	bmi.n	800ca42 <_vfiprintf_r+0x2a>
 800ca3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca3e:	f7ff ff68 	bl	800c912 <__retarget_lock_acquire_recursive>
 800ca42:	89ab      	ldrh	r3, [r5, #12]
 800ca44:	071b      	lsls	r3, r3, #28
 800ca46:	d501      	bpl.n	800ca4c <_vfiprintf_r+0x34>
 800ca48:	692b      	ldr	r3, [r5, #16]
 800ca4a:	b99b      	cbnz	r3, 800ca74 <_vfiprintf_r+0x5c>
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	4630      	mov	r0, r6
 800ca50:	f7ff fe80 	bl	800c754 <__swsetup_r>
 800ca54:	b170      	cbz	r0, 800ca74 <_vfiprintf_r+0x5c>
 800ca56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca58:	07dc      	lsls	r4, r3, #31
 800ca5a:	d504      	bpl.n	800ca66 <_vfiprintf_r+0x4e>
 800ca5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca60:	b01d      	add	sp, #116	@ 0x74
 800ca62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca66:	89ab      	ldrh	r3, [r5, #12]
 800ca68:	0598      	lsls	r0, r3, #22
 800ca6a:	d4f7      	bmi.n	800ca5c <_vfiprintf_r+0x44>
 800ca6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca6e:	f7ff ff51 	bl	800c914 <__retarget_lock_release_recursive>
 800ca72:	e7f3      	b.n	800ca5c <_vfiprintf_r+0x44>
 800ca74:	2300      	movs	r3, #0
 800ca76:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca7a:	f04f 0901 	mov.w	r9, #1
 800ca7e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800cc34 <_vfiprintf_r+0x21c>
 800ca82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca84:	2320      	movs	r3, #32
 800ca86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca8a:	2330      	movs	r3, #48	@ 0x30
 800ca8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca90:	4623      	mov	r3, r4
 800ca92:	469a      	mov	sl, r3
 800ca94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca98:	b10a      	cbz	r2, 800ca9e <_vfiprintf_r+0x86>
 800ca9a:	2a25      	cmp	r2, #37	@ 0x25
 800ca9c:	d1f9      	bne.n	800ca92 <_vfiprintf_r+0x7a>
 800ca9e:	ebba 0b04 	subs.w	fp, sl, r4
 800caa2:	d00b      	beq.n	800cabc <_vfiprintf_r+0xa4>
 800caa4:	465b      	mov	r3, fp
 800caa6:	4622      	mov	r2, r4
 800caa8:	4629      	mov	r1, r5
 800caaa:	4630      	mov	r0, r6
 800caac:	f7ff ffa1 	bl	800c9f2 <__sfputs_r>
 800cab0:	3001      	adds	r0, #1
 800cab2:	f000 80a7 	beq.w	800cc04 <_vfiprintf_r+0x1ec>
 800cab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cab8:	445a      	add	r2, fp
 800caba:	9209      	str	r2, [sp, #36]	@ 0x24
 800cabc:	f89a 3000 	ldrb.w	r3, [sl]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f000 809f 	beq.w	800cc04 <_vfiprintf_r+0x1ec>
 800cac6:	2300      	movs	r3, #0
 800cac8:	f04f 32ff 	mov.w	r2, #4294967295
 800cacc:	f10a 0a01 	add.w	sl, sl, #1
 800cad0:	9304      	str	r3, [sp, #16]
 800cad2:	9307      	str	r3, [sp, #28]
 800cad4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cad8:	931a      	str	r3, [sp, #104]	@ 0x68
 800cada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cade:	4654      	mov	r4, sl
 800cae0:	2205      	movs	r2, #5
 800cae2:	4854      	ldr	r0, [pc, #336]	@ (800cc34 <_vfiprintf_r+0x21c>)
 800cae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cae8:	f000 fb6e 	bl	800d1c8 <memchr>
 800caec:	9a04      	ldr	r2, [sp, #16]
 800caee:	b9d8      	cbnz	r0, 800cb28 <_vfiprintf_r+0x110>
 800caf0:	06d1      	lsls	r1, r2, #27
 800caf2:	bf44      	itt	mi
 800caf4:	2320      	movmi	r3, #32
 800caf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cafa:	0713      	lsls	r3, r2, #28
 800cafc:	bf44      	itt	mi
 800cafe:	232b      	movmi	r3, #43	@ 0x2b
 800cb00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb04:	f89a 3000 	ldrb.w	r3, [sl]
 800cb08:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb0a:	d015      	beq.n	800cb38 <_vfiprintf_r+0x120>
 800cb0c:	9a07      	ldr	r2, [sp, #28]
 800cb0e:	4654      	mov	r4, sl
 800cb10:	2000      	movs	r0, #0
 800cb12:	f04f 0c0a 	mov.w	ip, #10
 800cb16:	4621      	mov	r1, r4
 800cb18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb1c:	3b30      	subs	r3, #48	@ 0x30
 800cb1e:	2b09      	cmp	r3, #9
 800cb20:	d94b      	bls.n	800cbba <_vfiprintf_r+0x1a2>
 800cb22:	b1b0      	cbz	r0, 800cb52 <_vfiprintf_r+0x13a>
 800cb24:	9207      	str	r2, [sp, #28]
 800cb26:	e014      	b.n	800cb52 <_vfiprintf_r+0x13a>
 800cb28:	eba0 0308 	sub.w	r3, r0, r8
 800cb2c:	46a2      	mov	sl, r4
 800cb2e:	fa09 f303 	lsl.w	r3, r9, r3
 800cb32:	4313      	orrs	r3, r2
 800cb34:	9304      	str	r3, [sp, #16]
 800cb36:	e7d2      	b.n	800cade <_vfiprintf_r+0xc6>
 800cb38:	9b03      	ldr	r3, [sp, #12]
 800cb3a:	1d19      	adds	r1, r3, #4
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	9103      	str	r1, [sp, #12]
 800cb42:	bfbb      	ittet	lt
 800cb44:	425b      	neglt	r3, r3
 800cb46:	f042 0202 	orrlt.w	r2, r2, #2
 800cb4a:	9307      	strge	r3, [sp, #28]
 800cb4c:	9307      	strlt	r3, [sp, #28]
 800cb4e:	bfb8      	it	lt
 800cb50:	9204      	strlt	r2, [sp, #16]
 800cb52:	7823      	ldrb	r3, [r4, #0]
 800cb54:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb56:	d10a      	bne.n	800cb6e <_vfiprintf_r+0x156>
 800cb58:	7863      	ldrb	r3, [r4, #1]
 800cb5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb5c:	d132      	bne.n	800cbc4 <_vfiprintf_r+0x1ac>
 800cb5e:	9b03      	ldr	r3, [sp, #12]
 800cb60:	3402      	adds	r4, #2
 800cb62:	1d1a      	adds	r2, r3, #4
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb6a:	9203      	str	r2, [sp, #12]
 800cb6c:	9305      	str	r3, [sp, #20]
 800cb6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc44 <_vfiprintf_r+0x22c>
 800cb72:	2203      	movs	r2, #3
 800cb74:	7821      	ldrb	r1, [r4, #0]
 800cb76:	4650      	mov	r0, sl
 800cb78:	f000 fb26 	bl	800d1c8 <memchr>
 800cb7c:	b138      	cbz	r0, 800cb8e <_vfiprintf_r+0x176>
 800cb7e:	eba0 000a 	sub.w	r0, r0, sl
 800cb82:	2240      	movs	r2, #64	@ 0x40
 800cb84:	9b04      	ldr	r3, [sp, #16]
 800cb86:	3401      	adds	r4, #1
 800cb88:	4082      	lsls	r2, r0
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	9304      	str	r3, [sp, #16]
 800cb8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb92:	2206      	movs	r2, #6
 800cb94:	4828      	ldr	r0, [pc, #160]	@ (800cc38 <_vfiprintf_r+0x220>)
 800cb96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb9a:	f000 fb15 	bl	800d1c8 <memchr>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d03f      	beq.n	800cc22 <_vfiprintf_r+0x20a>
 800cba2:	4b26      	ldr	r3, [pc, #152]	@ (800cc3c <_vfiprintf_r+0x224>)
 800cba4:	bb1b      	cbnz	r3, 800cbee <_vfiprintf_r+0x1d6>
 800cba6:	9b03      	ldr	r3, [sp, #12]
 800cba8:	3307      	adds	r3, #7
 800cbaa:	f023 0307 	bic.w	r3, r3, #7
 800cbae:	3308      	adds	r3, #8
 800cbb0:	9303      	str	r3, [sp, #12]
 800cbb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb4:	443b      	add	r3, r7
 800cbb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbb8:	e76a      	b.n	800ca90 <_vfiprintf_r+0x78>
 800cbba:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	e7a8      	b.n	800cb16 <_vfiprintf_r+0xfe>
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	3401      	adds	r4, #1
 800cbc8:	f04f 0c0a 	mov.w	ip, #10
 800cbcc:	4619      	mov	r1, r3
 800cbce:	9305      	str	r3, [sp, #20]
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbd6:	3a30      	subs	r2, #48	@ 0x30
 800cbd8:	2a09      	cmp	r2, #9
 800cbda:	d903      	bls.n	800cbe4 <_vfiprintf_r+0x1cc>
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d0c6      	beq.n	800cb6e <_vfiprintf_r+0x156>
 800cbe0:	9105      	str	r1, [sp, #20]
 800cbe2:	e7c4      	b.n	800cb6e <_vfiprintf_r+0x156>
 800cbe4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbe8:	4604      	mov	r4, r0
 800cbea:	2301      	movs	r3, #1
 800cbec:	e7f0      	b.n	800cbd0 <_vfiprintf_r+0x1b8>
 800cbee:	ab03      	add	r3, sp, #12
 800cbf0:	462a      	mov	r2, r5
 800cbf2:	a904      	add	r1, sp, #16
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	4b11      	ldr	r3, [pc, #68]	@ (800cc40 <_vfiprintf_r+0x228>)
 800cbfa:	f3af 8000 	nop.w
 800cbfe:	4607      	mov	r7, r0
 800cc00:	1c78      	adds	r0, r7, #1
 800cc02:	d1d6      	bne.n	800cbb2 <_vfiprintf_r+0x19a>
 800cc04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc06:	07d9      	lsls	r1, r3, #31
 800cc08:	d405      	bmi.n	800cc16 <_vfiprintf_r+0x1fe>
 800cc0a:	89ab      	ldrh	r3, [r5, #12]
 800cc0c:	059a      	lsls	r2, r3, #22
 800cc0e:	d402      	bmi.n	800cc16 <_vfiprintf_r+0x1fe>
 800cc10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc12:	f7ff fe7f 	bl	800c914 <__retarget_lock_release_recursive>
 800cc16:	89ab      	ldrh	r3, [r5, #12]
 800cc18:	065b      	lsls	r3, r3, #25
 800cc1a:	f53f af1f 	bmi.w	800ca5c <_vfiprintf_r+0x44>
 800cc1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc20:	e71e      	b.n	800ca60 <_vfiprintf_r+0x48>
 800cc22:	ab03      	add	r3, sp, #12
 800cc24:	462a      	mov	r2, r5
 800cc26:	a904      	add	r1, sp, #16
 800cc28:	4630      	mov	r0, r6
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	4b04      	ldr	r3, [pc, #16]	@ (800cc40 <_vfiprintf_r+0x228>)
 800cc2e:	f000 f87d 	bl	800cd2c <_printf_i>
 800cc32:	e7e4      	b.n	800cbfe <_vfiprintf_r+0x1e6>
 800cc34:	0800d5c4 	.word	0x0800d5c4
 800cc38:	0800d5ce 	.word	0x0800d5ce
 800cc3c:	00000000 	.word	0x00000000
 800cc40:	0800c9f3 	.word	0x0800c9f3
 800cc44:	0800d5ca 	.word	0x0800d5ca

0800cc48 <_printf_common>:
 800cc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc4c:	4616      	mov	r6, r2
 800cc4e:	4698      	mov	r8, r3
 800cc50:	688a      	ldr	r2, [r1, #8]
 800cc52:	4607      	mov	r7, r0
 800cc54:	690b      	ldr	r3, [r1, #16]
 800cc56:	460c      	mov	r4, r1
 800cc58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	bfb8      	it	lt
 800cc60:	4613      	movlt	r3, r2
 800cc62:	6033      	str	r3, [r6, #0]
 800cc64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cc68:	b10a      	cbz	r2, 800cc6e <_printf_common+0x26>
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	6033      	str	r3, [r6, #0]
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	0699      	lsls	r1, r3, #26
 800cc72:	bf42      	ittt	mi
 800cc74:	6833      	ldrmi	r3, [r6, #0]
 800cc76:	3302      	addmi	r3, #2
 800cc78:	6033      	strmi	r3, [r6, #0]
 800cc7a:	6825      	ldr	r5, [r4, #0]
 800cc7c:	f015 0506 	ands.w	r5, r5, #6
 800cc80:	d106      	bne.n	800cc90 <_printf_common+0x48>
 800cc82:	f104 0a19 	add.w	sl, r4, #25
 800cc86:	68e3      	ldr	r3, [r4, #12]
 800cc88:	6832      	ldr	r2, [r6, #0]
 800cc8a:	1a9b      	subs	r3, r3, r2
 800cc8c:	42ab      	cmp	r3, r5
 800cc8e:	dc2b      	bgt.n	800cce8 <_printf_common+0xa0>
 800cc90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cc94:	6822      	ldr	r2, [r4, #0]
 800cc96:	3b00      	subs	r3, #0
 800cc98:	bf18      	it	ne
 800cc9a:	2301      	movne	r3, #1
 800cc9c:	0692      	lsls	r2, r2, #26
 800cc9e:	d430      	bmi.n	800cd02 <_printf_common+0xba>
 800cca0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cca4:	4641      	mov	r1, r8
 800cca6:	4638      	mov	r0, r7
 800cca8:	47c8      	blx	r9
 800ccaa:	3001      	adds	r0, #1
 800ccac:	d023      	beq.n	800ccf6 <_printf_common+0xae>
 800ccae:	6823      	ldr	r3, [r4, #0]
 800ccb0:	341a      	adds	r4, #26
 800ccb2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ccb6:	f003 0306 	and.w	r3, r3, #6
 800ccba:	2b04      	cmp	r3, #4
 800ccbc:	bf0a      	itet	eq
 800ccbe:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800ccc2:	2500      	movne	r5, #0
 800ccc4:	6833      	ldreq	r3, [r6, #0]
 800ccc6:	f04f 0600 	mov.w	r6, #0
 800ccca:	bf08      	it	eq
 800cccc:	1aed      	subeq	r5, r5, r3
 800ccce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ccd2:	bf08      	it	eq
 800ccd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	bfc4      	itt	gt
 800ccdc:	1a9b      	subgt	r3, r3, r2
 800ccde:	18ed      	addgt	r5, r5, r3
 800cce0:	42b5      	cmp	r5, r6
 800cce2:	d11a      	bne.n	800cd1a <_printf_common+0xd2>
 800cce4:	2000      	movs	r0, #0
 800cce6:	e008      	b.n	800ccfa <_printf_common+0xb2>
 800cce8:	2301      	movs	r3, #1
 800ccea:	4652      	mov	r2, sl
 800ccec:	4641      	mov	r1, r8
 800ccee:	4638      	mov	r0, r7
 800ccf0:	47c8      	blx	r9
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	d103      	bne.n	800ccfe <_printf_common+0xb6>
 800ccf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccfe:	3501      	adds	r5, #1
 800cd00:	e7c1      	b.n	800cc86 <_printf_common+0x3e>
 800cd02:	18e1      	adds	r1, r4, r3
 800cd04:	1c5a      	adds	r2, r3, #1
 800cd06:	2030      	movs	r0, #48	@ 0x30
 800cd08:	3302      	adds	r3, #2
 800cd0a:	4422      	add	r2, r4
 800cd0c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cd14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cd18:	e7c2      	b.n	800cca0 <_printf_common+0x58>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	4622      	mov	r2, r4
 800cd1e:	4641      	mov	r1, r8
 800cd20:	4638      	mov	r0, r7
 800cd22:	47c8      	blx	r9
 800cd24:	3001      	adds	r0, #1
 800cd26:	d0e6      	beq.n	800ccf6 <_printf_common+0xae>
 800cd28:	3601      	adds	r6, #1
 800cd2a:	e7d9      	b.n	800cce0 <_printf_common+0x98>

0800cd2c <_printf_i>:
 800cd2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd30:	7e0f      	ldrb	r7, [r1, #24]
 800cd32:	4691      	mov	r9, r2
 800cd34:	4680      	mov	r8, r0
 800cd36:	460c      	mov	r4, r1
 800cd38:	2f78      	cmp	r7, #120	@ 0x78
 800cd3a:	469a      	mov	sl, r3
 800cd3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cd3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cd42:	d807      	bhi.n	800cd54 <_printf_i+0x28>
 800cd44:	2f62      	cmp	r7, #98	@ 0x62
 800cd46:	d80a      	bhi.n	800cd5e <_printf_i+0x32>
 800cd48:	2f00      	cmp	r7, #0
 800cd4a:	f000 80d1 	beq.w	800cef0 <_printf_i+0x1c4>
 800cd4e:	2f58      	cmp	r7, #88	@ 0x58
 800cd50:	f000 80b8 	beq.w	800cec4 <_printf_i+0x198>
 800cd54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cd58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cd5c:	e03a      	b.n	800cdd4 <_printf_i+0xa8>
 800cd5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cd62:	2b15      	cmp	r3, #21
 800cd64:	d8f6      	bhi.n	800cd54 <_printf_i+0x28>
 800cd66:	a101      	add	r1, pc, #4	@ (adr r1, 800cd6c <_printf_i+0x40>)
 800cd68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd6c:	0800cdc5 	.word	0x0800cdc5
 800cd70:	0800cdd9 	.word	0x0800cdd9
 800cd74:	0800cd55 	.word	0x0800cd55
 800cd78:	0800cd55 	.word	0x0800cd55
 800cd7c:	0800cd55 	.word	0x0800cd55
 800cd80:	0800cd55 	.word	0x0800cd55
 800cd84:	0800cdd9 	.word	0x0800cdd9
 800cd88:	0800cd55 	.word	0x0800cd55
 800cd8c:	0800cd55 	.word	0x0800cd55
 800cd90:	0800cd55 	.word	0x0800cd55
 800cd94:	0800cd55 	.word	0x0800cd55
 800cd98:	0800ced7 	.word	0x0800ced7
 800cd9c:	0800ce03 	.word	0x0800ce03
 800cda0:	0800ce91 	.word	0x0800ce91
 800cda4:	0800cd55 	.word	0x0800cd55
 800cda8:	0800cd55 	.word	0x0800cd55
 800cdac:	0800cef9 	.word	0x0800cef9
 800cdb0:	0800cd55 	.word	0x0800cd55
 800cdb4:	0800ce03 	.word	0x0800ce03
 800cdb8:	0800cd55 	.word	0x0800cd55
 800cdbc:	0800cd55 	.word	0x0800cd55
 800cdc0:	0800ce99 	.word	0x0800ce99
 800cdc4:	6833      	ldr	r3, [r6, #0]
 800cdc6:	1d1a      	adds	r2, r3, #4
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	6032      	str	r2, [r6, #0]
 800cdcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cdd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	e09c      	b.n	800cf12 <_printf_i+0x1e6>
 800cdd8:	6833      	ldr	r3, [r6, #0]
 800cdda:	6820      	ldr	r0, [r4, #0]
 800cddc:	1d19      	adds	r1, r3, #4
 800cdde:	6031      	str	r1, [r6, #0]
 800cde0:	0606      	lsls	r6, r0, #24
 800cde2:	d501      	bpl.n	800cde8 <_printf_i+0xbc>
 800cde4:	681d      	ldr	r5, [r3, #0]
 800cde6:	e003      	b.n	800cdf0 <_printf_i+0xc4>
 800cde8:	0645      	lsls	r5, r0, #25
 800cdea:	d5fb      	bpl.n	800cde4 <_printf_i+0xb8>
 800cdec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cdf0:	2d00      	cmp	r5, #0
 800cdf2:	da03      	bge.n	800cdfc <_printf_i+0xd0>
 800cdf4:	232d      	movs	r3, #45	@ 0x2d
 800cdf6:	426d      	negs	r5, r5
 800cdf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdfc:	4858      	ldr	r0, [pc, #352]	@ (800cf60 <_printf_i+0x234>)
 800cdfe:	230a      	movs	r3, #10
 800ce00:	e011      	b.n	800ce26 <_printf_i+0xfa>
 800ce02:	6821      	ldr	r1, [r4, #0]
 800ce04:	6833      	ldr	r3, [r6, #0]
 800ce06:	0608      	lsls	r0, r1, #24
 800ce08:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce0c:	d402      	bmi.n	800ce14 <_printf_i+0xe8>
 800ce0e:	0649      	lsls	r1, r1, #25
 800ce10:	bf48      	it	mi
 800ce12:	b2ad      	uxthmi	r5, r5
 800ce14:	2f6f      	cmp	r7, #111	@ 0x6f
 800ce16:	6033      	str	r3, [r6, #0]
 800ce18:	4851      	ldr	r0, [pc, #324]	@ (800cf60 <_printf_i+0x234>)
 800ce1a:	bf14      	ite	ne
 800ce1c:	230a      	movne	r3, #10
 800ce1e:	2308      	moveq	r3, #8
 800ce20:	2100      	movs	r1, #0
 800ce22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ce26:	6866      	ldr	r6, [r4, #4]
 800ce28:	2e00      	cmp	r6, #0
 800ce2a:	60a6      	str	r6, [r4, #8]
 800ce2c:	db05      	blt.n	800ce3a <_printf_i+0x10e>
 800ce2e:	6821      	ldr	r1, [r4, #0]
 800ce30:	432e      	orrs	r6, r5
 800ce32:	f021 0104 	bic.w	r1, r1, #4
 800ce36:	6021      	str	r1, [r4, #0]
 800ce38:	d04b      	beq.n	800ced2 <_printf_i+0x1a6>
 800ce3a:	4616      	mov	r6, r2
 800ce3c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ce40:	fb03 5711 	mls	r7, r3, r1, r5
 800ce44:	5dc7      	ldrb	r7, [r0, r7]
 800ce46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ce4a:	462f      	mov	r7, r5
 800ce4c:	460d      	mov	r5, r1
 800ce4e:	42bb      	cmp	r3, r7
 800ce50:	d9f4      	bls.n	800ce3c <_printf_i+0x110>
 800ce52:	2b08      	cmp	r3, #8
 800ce54:	d10b      	bne.n	800ce6e <_printf_i+0x142>
 800ce56:	6823      	ldr	r3, [r4, #0]
 800ce58:	07df      	lsls	r7, r3, #31
 800ce5a:	d508      	bpl.n	800ce6e <_printf_i+0x142>
 800ce5c:	6923      	ldr	r3, [r4, #16]
 800ce5e:	6861      	ldr	r1, [r4, #4]
 800ce60:	4299      	cmp	r1, r3
 800ce62:	bfde      	ittt	le
 800ce64:	2330      	movle	r3, #48	@ 0x30
 800ce66:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ce6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ce6e:	1b92      	subs	r2, r2, r6
 800ce70:	6122      	str	r2, [r4, #16]
 800ce72:	464b      	mov	r3, r9
 800ce74:	aa03      	add	r2, sp, #12
 800ce76:	4621      	mov	r1, r4
 800ce78:	4640      	mov	r0, r8
 800ce7a:	f8cd a000 	str.w	sl, [sp]
 800ce7e:	f7ff fee3 	bl	800cc48 <_printf_common>
 800ce82:	3001      	adds	r0, #1
 800ce84:	d14a      	bne.n	800cf1c <_printf_i+0x1f0>
 800ce86:	f04f 30ff 	mov.w	r0, #4294967295
 800ce8a:	b004      	add	sp, #16
 800ce8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce90:	6823      	ldr	r3, [r4, #0]
 800ce92:	f043 0320 	orr.w	r3, r3, #32
 800ce96:	6023      	str	r3, [r4, #0]
 800ce98:	2778      	movs	r7, #120	@ 0x78
 800ce9a:	4832      	ldr	r0, [pc, #200]	@ (800cf64 <_printf_i+0x238>)
 800ce9c:	6823      	ldr	r3, [r4, #0]
 800ce9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cea2:	061f      	lsls	r7, r3, #24
 800cea4:	6831      	ldr	r1, [r6, #0]
 800cea6:	f851 5b04 	ldr.w	r5, [r1], #4
 800ceaa:	d402      	bmi.n	800ceb2 <_printf_i+0x186>
 800ceac:	065f      	lsls	r7, r3, #25
 800ceae:	bf48      	it	mi
 800ceb0:	b2ad      	uxthmi	r5, r5
 800ceb2:	6031      	str	r1, [r6, #0]
 800ceb4:	07d9      	lsls	r1, r3, #31
 800ceb6:	bf44      	itt	mi
 800ceb8:	f043 0320 	orrmi.w	r3, r3, #32
 800cebc:	6023      	strmi	r3, [r4, #0]
 800cebe:	b11d      	cbz	r5, 800cec8 <_printf_i+0x19c>
 800cec0:	2310      	movs	r3, #16
 800cec2:	e7ad      	b.n	800ce20 <_printf_i+0xf4>
 800cec4:	4826      	ldr	r0, [pc, #152]	@ (800cf60 <_printf_i+0x234>)
 800cec6:	e7e9      	b.n	800ce9c <_printf_i+0x170>
 800cec8:	6823      	ldr	r3, [r4, #0]
 800ceca:	f023 0320 	bic.w	r3, r3, #32
 800cece:	6023      	str	r3, [r4, #0]
 800ced0:	e7f6      	b.n	800cec0 <_printf_i+0x194>
 800ced2:	4616      	mov	r6, r2
 800ced4:	e7bd      	b.n	800ce52 <_printf_i+0x126>
 800ced6:	6833      	ldr	r3, [r6, #0]
 800ced8:	6825      	ldr	r5, [r4, #0]
 800ceda:	1d18      	adds	r0, r3, #4
 800cedc:	6961      	ldr	r1, [r4, #20]
 800cede:	6030      	str	r0, [r6, #0]
 800cee0:	062e      	lsls	r6, r5, #24
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	d501      	bpl.n	800ceea <_printf_i+0x1be>
 800cee6:	6019      	str	r1, [r3, #0]
 800cee8:	e002      	b.n	800cef0 <_printf_i+0x1c4>
 800ceea:	0668      	lsls	r0, r5, #25
 800ceec:	d5fb      	bpl.n	800cee6 <_printf_i+0x1ba>
 800ceee:	8019      	strh	r1, [r3, #0]
 800cef0:	2300      	movs	r3, #0
 800cef2:	4616      	mov	r6, r2
 800cef4:	6123      	str	r3, [r4, #16]
 800cef6:	e7bc      	b.n	800ce72 <_printf_i+0x146>
 800cef8:	6833      	ldr	r3, [r6, #0]
 800cefa:	2100      	movs	r1, #0
 800cefc:	1d1a      	adds	r2, r3, #4
 800cefe:	6032      	str	r2, [r6, #0]
 800cf00:	681e      	ldr	r6, [r3, #0]
 800cf02:	6862      	ldr	r2, [r4, #4]
 800cf04:	4630      	mov	r0, r6
 800cf06:	f000 f95f 	bl	800d1c8 <memchr>
 800cf0a:	b108      	cbz	r0, 800cf10 <_printf_i+0x1e4>
 800cf0c:	1b80      	subs	r0, r0, r6
 800cf0e:	6060      	str	r0, [r4, #4]
 800cf10:	6863      	ldr	r3, [r4, #4]
 800cf12:	6123      	str	r3, [r4, #16]
 800cf14:	2300      	movs	r3, #0
 800cf16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf1a:	e7aa      	b.n	800ce72 <_printf_i+0x146>
 800cf1c:	6923      	ldr	r3, [r4, #16]
 800cf1e:	4632      	mov	r2, r6
 800cf20:	4649      	mov	r1, r9
 800cf22:	4640      	mov	r0, r8
 800cf24:	47d0      	blx	sl
 800cf26:	3001      	adds	r0, #1
 800cf28:	d0ad      	beq.n	800ce86 <_printf_i+0x15a>
 800cf2a:	6823      	ldr	r3, [r4, #0]
 800cf2c:	079b      	lsls	r3, r3, #30
 800cf2e:	d413      	bmi.n	800cf58 <_printf_i+0x22c>
 800cf30:	68e0      	ldr	r0, [r4, #12]
 800cf32:	9b03      	ldr	r3, [sp, #12]
 800cf34:	4298      	cmp	r0, r3
 800cf36:	bfb8      	it	lt
 800cf38:	4618      	movlt	r0, r3
 800cf3a:	e7a6      	b.n	800ce8a <_printf_i+0x15e>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	4632      	mov	r2, r6
 800cf40:	4649      	mov	r1, r9
 800cf42:	4640      	mov	r0, r8
 800cf44:	47d0      	blx	sl
 800cf46:	3001      	adds	r0, #1
 800cf48:	d09d      	beq.n	800ce86 <_printf_i+0x15a>
 800cf4a:	3501      	adds	r5, #1
 800cf4c:	68e3      	ldr	r3, [r4, #12]
 800cf4e:	9903      	ldr	r1, [sp, #12]
 800cf50:	1a5b      	subs	r3, r3, r1
 800cf52:	42ab      	cmp	r3, r5
 800cf54:	dcf2      	bgt.n	800cf3c <_printf_i+0x210>
 800cf56:	e7eb      	b.n	800cf30 <_printf_i+0x204>
 800cf58:	2500      	movs	r5, #0
 800cf5a:	f104 0619 	add.w	r6, r4, #25
 800cf5e:	e7f5      	b.n	800cf4c <_printf_i+0x220>
 800cf60:	0800d5d5 	.word	0x0800d5d5
 800cf64:	0800d5e6 	.word	0x0800d5e6

0800cf68 <__sflush_r>:
 800cf68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf70:	0716      	lsls	r6, r2, #28
 800cf72:	4605      	mov	r5, r0
 800cf74:	460c      	mov	r4, r1
 800cf76:	d454      	bmi.n	800d022 <__sflush_r+0xba>
 800cf78:	684b      	ldr	r3, [r1, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	dc02      	bgt.n	800cf84 <__sflush_r+0x1c>
 800cf7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	dd48      	ble.n	800d016 <__sflush_r+0xae>
 800cf84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf86:	2e00      	cmp	r6, #0
 800cf88:	d045      	beq.n	800d016 <__sflush_r+0xae>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf90:	682f      	ldr	r7, [r5, #0]
 800cf92:	6a21      	ldr	r1, [r4, #32]
 800cf94:	602b      	str	r3, [r5, #0]
 800cf96:	d030      	beq.n	800cffa <__sflush_r+0x92>
 800cf98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf9a:	89a3      	ldrh	r3, [r4, #12]
 800cf9c:	0759      	lsls	r1, r3, #29
 800cf9e:	d505      	bpl.n	800cfac <__sflush_r+0x44>
 800cfa0:	6863      	ldr	r3, [r4, #4]
 800cfa2:	1ad2      	subs	r2, r2, r3
 800cfa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cfa6:	b10b      	cbz	r3, 800cfac <__sflush_r+0x44>
 800cfa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cfaa:	1ad2      	subs	r2, r2, r3
 800cfac:	2300      	movs	r3, #0
 800cfae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfb0:	6a21      	ldr	r1, [r4, #32]
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	47b0      	blx	r6
 800cfb6:	1c43      	adds	r3, r0, #1
 800cfb8:	89a3      	ldrh	r3, [r4, #12]
 800cfba:	d106      	bne.n	800cfca <__sflush_r+0x62>
 800cfbc:	6829      	ldr	r1, [r5, #0]
 800cfbe:	291d      	cmp	r1, #29
 800cfc0:	d82b      	bhi.n	800d01a <__sflush_r+0xb2>
 800cfc2:	4a2a      	ldr	r2, [pc, #168]	@ (800d06c <__sflush_r+0x104>)
 800cfc4:	40ca      	lsrs	r2, r1
 800cfc6:	07d6      	lsls	r6, r2, #31
 800cfc8:	d527      	bpl.n	800d01a <__sflush_r+0xb2>
 800cfca:	2200      	movs	r2, #0
 800cfcc:	04d9      	lsls	r1, r3, #19
 800cfce:	6062      	str	r2, [r4, #4]
 800cfd0:	6922      	ldr	r2, [r4, #16]
 800cfd2:	6022      	str	r2, [r4, #0]
 800cfd4:	d504      	bpl.n	800cfe0 <__sflush_r+0x78>
 800cfd6:	1c42      	adds	r2, r0, #1
 800cfd8:	d101      	bne.n	800cfde <__sflush_r+0x76>
 800cfda:	682b      	ldr	r3, [r5, #0]
 800cfdc:	b903      	cbnz	r3, 800cfe0 <__sflush_r+0x78>
 800cfde:	6560      	str	r0, [r4, #84]	@ 0x54
 800cfe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfe2:	602f      	str	r7, [r5, #0]
 800cfe4:	b1b9      	cbz	r1, 800d016 <__sflush_r+0xae>
 800cfe6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfea:	4299      	cmp	r1, r3
 800cfec:	d002      	beq.n	800cff4 <__sflush_r+0x8c>
 800cfee:	4628      	mov	r0, r5
 800cff0:	f7ff fc9e 	bl	800c930 <_free_r>
 800cff4:	2300      	movs	r3, #0
 800cff6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cff8:	e00d      	b.n	800d016 <__sflush_r+0xae>
 800cffa:	2301      	movs	r3, #1
 800cffc:	4628      	mov	r0, r5
 800cffe:	47b0      	blx	r6
 800d000:	4602      	mov	r2, r0
 800d002:	1c50      	adds	r0, r2, #1
 800d004:	d1c9      	bne.n	800cf9a <__sflush_r+0x32>
 800d006:	682b      	ldr	r3, [r5, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d0c6      	beq.n	800cf9a <__sflush_r+0x32>
 800d00c:	2b1d      	cmp	r3, #29
 800d00e:	d001      	beq.n	800d014 <__sflush_r+0xac>
 800d010:	2b16      	cmp	r3, #22
 800d012:	d11d      	bne.n	800d050 <__sflush_r+0xe8>
 800d014:	602f      	str	r7, [r5, #0]
 800d016:	2000      	movs	r0, #0
 800d018:	e021      	b.n	800d05e <__sflush_r+0xf6>
 800d01a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d01e:	b21b      	sxth	r3, r3
 800d020:	e01a      	b.n	800d058 <__sflush_r+0xf0>
 800d022:	690f      	ldr	r7, [r1, #16]
 800d024:	2f00      	cmp	r7, #0
 800d026:	d0f6      	beq.n	800d016 <__sflush_r+0xae>
 800d028:	0793      	lsls	r3, r2, #30
 800d02a:	680e      	ldr	r6, [r1, #0]
 800d02c:	600f      	str	r7, [r1, #0]
 800d02e:	bf0c      	ite	eq
 800d030:	694b      	ldreq	r3, [r1, #20]
 800d032:	2300      	movne	r3, #0
 800d034:	eba6 0807 	sub.w	r8, r6, r7
 800d038:	608b      	str	r3, [r1, #8]
 800d03a:	f1b8 0f00 	cmp.w	r8, #0
 800d03e:	ddea      	ble.n	800d016 <__sflush_r+0xae>
 800d040:	4643      	mov	r3, r8
 800d042:	463a      	mov	r2, r7
 800d044:	6a21      	ldr	r1, [r4, #32]
 800d046:	4628      	mov	r0, r5
 800d048:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d04a:	47b0      	blx	r6
 800d04c:	2800      	cmp	r0, #0
 800d04e:	dc08      	bgt.n	800d062 <__sflush_r+0xfa>
 800d050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d058:	f04f 30ff 	mov.w	r0, #4294967295
 800d05c:	81a3      	strh	r3, [r4, #12]
 800d05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d062:	4407      	add	r7, r0
 800d064:	eba8 0800 	sub.w	r8, r8, r0
 800d068:	e7e7      	b.n	800d03a <__sflush_r+0xd2>
 800d06a:	bf00      	nop
 800d06c:	20400001 	.word	0x20400001

0800d070 <_fflush_r>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	690b      	ldr	r3, [r1, #16]
 800d074:	4605      	mov	r5, r0
 800d076:	460c      	mov	r4, r1
 800d078:	b913      	cbnz	r3, 800d080 <_fflush_r+0x10>
 800d07a:	2500      	movs	r5, #0
 800d07c:	4628      	mov	r0, r5
 800d07e:	bd38      	pop	{r3, r4, r5, pc}
 800d080:	b118      	cbz	r0, 800d08a <_fflush_r+0x1a>
 800d082:	6a03      	ldr	r3, [r0, #32]
 800d084:	b90b      	cbnz	r3, 800d08a <_fflush_r+0x1a>
 800d086:	f7ff fa3d 	bl	800c504 <__sinit>
 800d08a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d0f3      	beq.n	800d07a <_fflush_r+0xa>
 800d092:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d094:	07d0      	lsls	r0, r2, #31
 800d096:	d404      	bmi.n	800d0a2 <_fflush_r+0x32>
 800d098:	0599      	lsls	r1, r3, #22
 800d09a:	d402      	bmi.n	800d0a2 <_fflush_r+0x32>
 800d09c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d09e:	f7ff fc38 	bl	800c912 <__retarget_lock_acquire_recursive>
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	4621      	mov	r1, r4
 800d0a6:	f7ff ff5f 	bl	800cf68 <__sflush_r>
 800d0aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0ac:	4605      	mov	r5, r0
 800d0ae:	07da      	lsls	r2, r3, #31
 800d0b0:	d4e4      	bmi.n	800d07c <_fflush_r+0xc>
 800d0b2:	89a3      	ldrh	r3, [r4, #12]
 800d0b4:	059b      	lsls	r3, r3, #22
 800d0b6:	d4e1      	bmi.n	800d07c <_fflush_r+0xc>
 800d0b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0ba:	f7ff fc2b 	bl	800c914 <__retarget_lock_release_recursive>
 800d0be:	e7dd      	b.n	800d07c <_fflush_r+0xc>

0800d0c0 <__swhatbuf_r>:
 800d0c0:	b570      	push	{r4, r5, r6, lr}
 800d0c2:	460c      	mov	r4, r1
 800d0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0c8:	b096      	sub	sp, #88	@ 0x58
 800d0ca:	4615      	mov	r5, r2
 800d0cc:	2900      	cmp	r1, #0
 800d0ce:	461e      	mov	r6, r3
 800d0d0:	da0c      	bge.n	800d0ec <__swhatbuf_r+0x2c>
 800d0d2:	89a3      	ldrh	r3, [r4, #12]
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d0da:	bf14      	ite	ne
 800d0dc:	2340      	movne	r3, #64	@ 0x40
 800d0de:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d0e2:	2000      	movs	r0, #0
 800d0e4:	6031      	str	r1, [r6, #0]
 800d0e6:	602b      	str	r3, [r5, #0]
 800d0e8:	b016      	add	sp, #88	@ 0x58
 800d0ea:	bd70      	pop	{r4, r5, r6, pc}
 800d0ec:	466a      	mov	r2, sp
 800d0ee:	f000 f849 	bl	800d184 <_fstat_r>
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	dbed      	blt.n	800d0d2 <__swhatbuf_r+0x12>
 800d0f6:	9901      	ldr	r1, [sp, #4]
 800d0f8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d0fc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d100:	4259      	negs	r1, r3
 800d102:	4159      	adcs	r1, r3
 800d104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d108:	e7eb      	b.n	800d0e2 <__swhatbuf_r+0x22>

0800d10a <__smakebuf_r>:
 800d10a:	898b      	ldrh	r3, [r1, #12]
 800d10c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d10e:	079d      	lsls	r5, r3, #30
 800d110:	4606      	mov	r6, r0
 800d112:	460c      	mov	r4, r1
 800d114:	d507      	bpl.n	800d126 <__smakebuf_r+0x1c>
 800d116:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d11a:	6023      	str	r3, [r4, #0]
 800d11c:	6123      	str	r3, [r4, #16]
 800d11e:	2301      	movs	r3, #1
 800d120:	6163      	str	r3, [r4, #20]
 800d122:	b003      	add	sp, #12
 800d124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d126:	ab01      	add	r3, sp, #4
 800d128:	466a      	mov	r2, sp
 800d12a:	f7ff ffc9 	bl	800d0c0 <__swhatbuf_r>
 800d12e:	9f00      	ldr	r7, [sp, #0]
 800d130:	4605      	mov	r5, r0
 800d132:	4630      	mov	r0, r6
 800d134:	4639      	mov	r1, r7
 800d136:	f7ff f8cd 	bl	800c2d4 <_malloc_r>
 800d13a:	b948      	cbnz	r0, 800d150 <__smakebuf_r+0x46>
 800d13c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d140:	059a      	lsls	r2, r3, #22
 800d142:	d4ee      	bmi.n	800d122 <__smakebuf_r+0x18>
 800d144:	f023 0303 	bic.w	r3, r3, #3
 800d148:	f043 0302 	orr.w	r3, r3, #2
 800d14c:	81a3      	strh	r3, [r4, #12]
 800d14e:	e7e2      	b.n	800d116 <__smakebuf_r+0xc>
 800d150:	89a3      	ldrh	r3, [r4, #12]
 800d152:	6020      	str	r0, [r4, #0]
 800d154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d158:	81a3      	strh	r3, [r4, #12]
 800d15a:	9b01      	ldr	r3, [sp, #4]
 800d15c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d160:	b15b      	cbz	r3, 800d17a <__smakebuf_r+0x70>
 800d162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d166:	4630      	mov	r0, r6
 800d168:	f000 f81e 	bl	800d1a8 <_isatty_r>
 800d16c:	b128      	cbz	r0, 800d17a <__smakebuf_r+0x70>
 800d16e:	89a3      	ldrh	r3, [r4, #12]
 800d170:	f023 0303 	bic.w	r3, r3, #3
 800d174:	f043 0301 	orr.w	r3, r3, #1
 800d178:	81a3      	strh	r3, [r4, #12]
 800d17a:	89a3      	ldrh	r3, [r4, #12]
 800d17c:	431d      	orrs	r5, r3
 800d17e:	81a5      	strh	r5, [r4, #12]
 800d180:	e7cf      	b.n	800d122 <__smakebuf_r+0x18>
	...

0800d184 <_fstat_r>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	2300      	movs	r3, #0
 800d188:	4d06      	ldr	r5, [pc, #24]	@ (800d1a4 <_fstat_r+0x20>)
 800d18a:	4604      	mov	r4, r0
 800d18c:	4608      	mov	r0, r1
 800d18e:	4611      	mov	r1, r2
 800d190:	602b      	str	r3, [r5, #0]
 800d192:	f7f4 f8fe 	bl	8001392 <_fstat>
 800d196:	1c43      	adds	r3, r0, #1
 800d198:	d102      	bne.n	800d1a0 <_fstat_r+0x1c>
 800d19a:	682b      	ldr	r3, [r5, #0]
 800d19c:	b103      	cbz	r3, 800d1a0 <_fstat_r+0x1c>
 800d19e:	6023      	str	r3, [r4, #0]
 800d1a0:	bd38      	pop	{r3, r4, r5, pc}
 800d1a2:	bf00      	nop
 800d1a4:	20003208 	.word	0x20003208

0800d1a8 <_isatty_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	4d05      	ldr	r5, [pc, #20]	@ (800d1c4 <_isatty_r+0x1c>)
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	4608      	mov	r0, r1
 800d1b2:	602b      	str	r3, [r5, #0]
 800d1b4:	f7f4 f8fd 	bl	80013b2 <_isatty>
 800d1b8:	1c43      	adds	r3, r0, #1
 800d1ba:	d102      	bne.n	800d1c2 <_isatty_r+0x1a>
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	b103      	cbz	r3, 800d1c2 <_isatty_r+0x1a>
 800d1c0:	6023      	str	r3, [r4, #0]
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}
 800d1c4:	20003208 	.word	0x20003208

0800d1c8 <memchr>:
 800d1c8:	b2c9      	uxtb	r1, r1
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	4402      	add	r2, r0
 800d1ce:	b510      	push	{r4, lr}
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	d101      	bne.n	800d1da <memchr+0x12>
 800d1d6:	2000      	movs	r0, #0
 800d1d8:	e003      	b.n	800d1e2 <memchr+0x1a>
 800d1da:	7804      	ldrb	r4, [r0, #0]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	428c      	cmp	r4, r1
 800d1e0:	d1f6      	bne.n	800d1d0 <memchr+0x8>
 800d1e2:	bd10      	pop	{r4, pc}

0800d1e4 <_init>:
 800d1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1e6:	bf00      	nop
 800d1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ea:	bc08      	pop	{r3}
 800d1ec:	469e      	mov	lr, r3
 800d1ee:	4770      	bx	lr

0800d1f0 <_fini>:
 800d1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f2:	bf00      	nop
 800d1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1f6:	bc08      	pop	{r3}
 800d1f8:	469e      	mov	lr, r3
 800d1fa:	4770      	bx	lr
