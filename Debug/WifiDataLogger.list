
WifiDataLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ed0  08000260  08000260  00001260  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08009130  08009130  0000a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009210  08009210  0000b080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009210  08009210  0000a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009218  08009218  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009218  08009218  0000a218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800921c  0800921c  0000a21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009220  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f2c  20000080  080092a0  0000b080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002fac  080092a0  0000bfac  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7be  00000000  00000000  0000b0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a57  00000000  00000000  00026874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0002a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010af  00000000  00000000  0002b898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024584  00000000  00000000  0002c947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0bc  00000000  00000000  00050ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8f0b  00000000  00000000  0006bf87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144e92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006100  00000000  00000000  00144ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  0014afd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000260 <__do_global_dtors_aux>:
 8000260:	b510      	push	{r4, lr}
 8000262:	4c05      	ldr	r4, [pc, #20]	@ (8000278 <__do_global_dtors_aux+0x18>)
 8000264:	7823      	ldrb	r3, [r4, #0]
 8000266:	b933      	cbnz	r3, 8000276 <__do_global_dtors_aux+0x16>
 8000268:	4b04      	ldr	r3, [pc, #16]	@ (800027c <__do_global_dtors_aux+0x1c>)
 800026a:	b113      	cbz	r3, 8000272 <__do_global_dtors_aux+0x12>
 800026c:	4804      	ldr	r0, [pc, #16]	@ (8000280 <__do_global_dtors_aux+0x20>)
 800026e:	f3af 8000 	nop.w
 8000272:	2301      	movs	r3, #1
 8000274:	7023      	strb	r3, [r4, #0]
 8000276:	bd10      	pop	{r4, pc}
 8000278:	20000080 	.word	0x20000080
 800027c:	00000000 	.word	0x00000000
 8000280:	08009118 	.word	0x08009118

08000284 <frame_dummy>:
 8000284:	b508      	push	{r3, lr}
 8000286:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <frame_dummy+0x10>)
 8000288:	b11b      	cbz	r3, 8000292 <frame_dummy+0xe>
 800028a:	4903      	ldr	r1, [pc, #12]	@ (8000298 <frame_dummy+0x14>)
 800028c:	4803      	ldr	r0, [pc, #12]	@ (800029c <frame_dummy+0x18>)
 800028e:	f3af 8000 	nop.w
 8000292:	bd08      	pop	{r3, pc}
 8000294:	00000000 	.word	0x00000000
 8000298:	20000084 	.word	0x20000084
 800029c:	08009118 	.word	0x08009118

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b9b0 	b.w	8000618 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d6:	4688      	mov	r8, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	468e      	mov	lr, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d95f      	bls.n	80003a6 <__udivmoddi4+0xd6>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 fe06 	lsl.w	lr, r1, r6
 80002f4:	40b7      	lsls	r7, r6
 80002f6:	40b4      	lsls	r4, r6
 80002f8:	fa20 f303 	lsr.w	r3, r0, r3
 80002fc:	ea43 0e0e 	orr.w	lr, r3, lr
 8000300:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	0c23      	lsrs	r3, r4, #16
 800030a:	fbbe f1f8 	udiv	r1, lr, r8
 800030e:	fb08 ee11 	mls	lr, r8, r1, lr
 8000312:	fb01 f20c 	mul.w	r2, r1, ip
 8000316:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x5e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x5c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 8154 	bhi.w	80005d4 <__udivmoddi4+0x304>
 800032c:	4601      	mov	r1, r0
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	b2a2      	uxth	r2, r4
 8000332:	fbb3 f0f8 	udiv	r0, r3, r8
 8000336:	fb08 3310 	mls	r3, r8, r0, r3
 800033a:	fb00 fc0c 	mul.w	ip, r0, ip
 800033e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000342:	4594      	cmp	ip, r2
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x8e>
 8000346:	18ba      	adds	r2, r7, r2
 8000348:	f100 33ff 	add.w	r3, r0, #4294967295
 800034c:	bf2c      	ite	cs
 800034e:	2401      	movcs	r4, #1
 8000350:	2400      	movcc	r4, #0
 8000352:	4594      	cmp	ip, r2
 8000354:	d902      	bls.n	800035c <__udivmoddi4+0x8c>
 8000356:	2c00      	cmp	r4, #0
 8000358:	f000 813f 	beq.w	80005da <__udivmoddi4+0x30a>
 800035c:	4618      	mov	r0, r3
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba2 020c 	sub.w	r2, r2, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f2      	lsrs	r2, r6
 800036c:	2300      	movs	r3, #0
 800036e:	e9c5 2300 	strd	r2, r3, [r5]
 8000372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d14e      	bne.n	800042c <__udivmoddi4+0x15c>
 800038e:	4543      	cmp	r3, r8
 8000390:	f0c0 8112 	bcc.w	80005b8 <__udivmoddi4+0x2e8>
 8000394:	4282      	cmp	r2, r0
 8000396:	f240 810f 	bls.w	80005b8 <__udivmoddi4+0x2e8>
 800039a:	4608      	mov	r0, r1
 800039c:	2d00      	cmp	r5, #0
 800039e:	d0e8      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a0:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a4:	e7e5      	b.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	f000 80ac 	beq.w	8000504 <__udivmoddi4+0x234>
 80003ac:	fab2 f682 	clz	r6, r2
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	f040 80bb 	bne.w	800052c <__udivmoddi4+0x25c>
 80003b6:	1a8b      	subs	r3, r1, r2
 80003b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003bc:	b2bc      	uxth	r4, r7
 80003be:	2101      	movs	r1, #1
 80003c0:	0c02      	lsrs	r2, r0, #16
 80003c2:	b280      	uxth	r0, r0
 80003c4:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80003cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003d0:	fb04 f20c 	mul.w	r2, r4, ip
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d90e      	bls.n	80003f6 <__udivmoddi4+0x126>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003de:	bf2c      	ite	cs
 80003e0:	f04f 0901 	movcs.w	r9, #1
 80003e4:	f04f 0900 	movcc.w	r9, #0
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d903      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003ec:	f1b9 0f00 	cmp.w	r9, #0
 80003f0:	f000 80ec 	beq.w	80005cc <__udivmoddi4+0x2fc>
 80003f4:	46c4      	mov	ip, r8
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	fbb3 f8fe 	udiv	r8, r3, lr
 80003fc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000400:	fb04 f408 	mul.w	r4, r4, r8
 8000404:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000408:	4294      	cmp	r4, r2
 800040a:	d90b      	bls.n	8000424 <__udivmoddi4+0x154>
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	f108 33ff 	add.w	r3, r8, #4294967295
 8000412:	bf2c      	ite	cs
 8000414:	2001      	movcs	r0, #1
 8000416:	2000      	movcc	r0, #0
 8000418:	4294      	cmp	r4, r2
 800041a:	d902      	bls.n	8000422 <__udivmoddi4+0x152>
 800041c:	2800      	cmp	r0, #0
 800041e:	f000 80d1 	beq.w	80005c4 <__udivmoddi4+0x2f4>
 8000422:	4698      	mov	r8, r3
 8000424:	1b12      	subs	r2, r2, r4
 8000426:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800042a:	e79d      	b.n	8000368 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa08 f401 	lsl.w	r4, r8, r1
 8000436:	fa00 f901 	lsl.w	r9, r0, r1
 800043a:	fa22 f706 	lsr.w	r7, r2, r6
 800043e:	fa28 f806 	lsr.w	r8, r8, r6
 8000442:	408a      	lsls	r2, r1
 8000444:	431f      	orrs	r7, r3
 8000446:	fa20 f306 	lsr.w	r3, r0, r6
 800044a:	0c38      	lsrs	r0, r7, #16
 800044c:	4323      	orrs	r3, r4
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	fbb8 fef0 	udiv	lr, r8, r0
 8000458:	fb00 881e 	mls	r8, r0, lr, r8
 800045c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000460:	fb0e f80c 	mul.w	r8, lr, ip
 8000464:	45a0      	cmp	r8, r4
 8000466:	d90e      	bls.n	8000486 <__udivmoddi4+0x1b6>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b4>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 80b8 	beq.w	80005f4 <__udivmoddi4+0x324>
 8000484:	46d6      	mov	lr, sl
 8000486:	eba4 0408 	sub.w	r4, r4, r8
 800048a:	fa1f f883 	uxth.w	r8, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	fb03 fc0c 	mul.w	ip, r3, ip
 800049a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d90e      	bls.n	80004c0 <__udivmoddi4+0x1f0>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	bf2c      	ite	cs
 80004aa:	f04f 0801 	movcs.w	r8, #1
 80004ae:	f04f 0800 	movcc.w	r8, #0
 80004b2:	45a4      	cmp	ip, r4
 80004b4:	d903      	bls.n	80004be <__udivmoddi4+0x1ee>
 80004b6:	f1b8 0f00 	cmp.w	r8, #0
 80004ba:	f000 809f 	beq.w	80005fc <__udivmoddi4+0x32c>
 80004be:	4603      	mov	r3, r0
 80004c0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c4:	eba4 040c 	sub.w	r4, r4, ip
 80004c8:	fba0 ec02 	umull	lr, ip, r0, r2
 80004cc:	4564      	cmp	r4, ip
 80004ce:	4673      	mov	r3, lr
 80004d0:	46e0      	mov	r8, ip
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x20a>
 80004d4:	d107      	bne.n	80004e6 <__udivmoddi4+0x216>
 80004d6:	45f1      	cmp	r9, lr
 80004d8:	d205      	bcs.n	80004e6 <__udivmoddi4+0x216>
 80004da:	ebbe 0302 	subs.w	r3, lr, r2
 80004de:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	46e0      	mov	r8, ip
 80004e6:	b15d      	cbz	r5, 8000500 <__udivmoddi4+0x230>
 80004e8:	ebb9 0203 	subs.w	r2, r9, r3
 80004ec:	eb64 0408 	sbc.w	r4, r4, r8
 80004f0:	fa04 f606 	lsl.w	r6, r4, r6
 80004f4:	fa22 f301 	lsr.w	r3, r2, r1
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	431e      	orrs	r6, r3
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e736      	b.n	8000372 <__udivmoddi4+0xa2>
 8000504:	fbb1 fcf2 	udiv	ip, r1, r2
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	4614      	mov	r4, r2
 800050c:	b280      	uxth	r0, r0
 800050e:	4696      	mov	lr, r2
 8000510:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000514:	2620      	movs	r6, #32
 8000516:	4690      	mov	r8, r2
 8000518:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 800051c:	4610      	mov	r0, r2
 800051e:	fbb1 f1f2 	udiv	r1, r1, r2
 8000522:	eba3 0308 	sub.w	r3, r3, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e74b      	b.n	80003c4 <__udivmoddi4+0xf4>
 800052c:	40b7      	lsls	r7, r6
 800052e:	f1c6 0320 	rsb	r3, r6, #32
 8000532:	fa01 f206 	lsl.w	r2, r1, r6
 8000536:	fa21 f803 	lsr.w	r8, r1, r3
 800053a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800053e:	fa20 f303 	lsr.w	r3, r0, r3
 8000542:	b2bc      	uxth	r4, r7
 8000544:	40b0      	lsls	r0, r6
 8000546:	4313      	orrs	r3, r2
 8000548:	0c02      	lsrs	r2, r0, #16
 800054a:	0c19      	lsrs	r1, r3, #16
 800054c:	b280      	uxth	r0, r0
 800054e:	fbb8 f9fe 	udiv	r9, r8, lr
 8000552:	fb0e 8819 	mls	r8, lr, r9, r8
 8000556:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	4588      	cmp	r8, r1
 8000560:	d951      	bls.n	8000606 <__udivmoddi4+0x336>
 8000562:	1879      	adds	r1, r7, r1
 8000564:	f109 3cff 	add.w	ip, r9, #4294967295
 8000568:	bf2c      	ite	cs
 800056a:	f04f 0a01 	movcs.w	sl, #1
 800056e:	f04f 0a00 	movcc.w	sl, #0
 8000572:	4588      	cmp	r8, r1
 8000574:	d902      	bls.n	800057c <__udivmoddi4+0x2ac>
 8000576:	f1ba 0f00 	cmp.w	sl, #0
 800057a:	d031      	beq.n	80005e0 <__udivmoddi4+0x310>
 800057c:	eba1 0108 	sub.w	r1, r1, r8
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	fb0e 1119 	mls	r1, lr, r9, r1
 800058c:	b29b      	uxth	r3, r3
 800058e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000592:	4543      	cmp	r3, r8
 8000594:	d235      	bcs.n	8000602 <__udivmoddi4+0x332>
 8000596:	18fb      	adds	r3, r7, r3
 8000598:	f109 31ff 	add.w	r1, r9, #4294967295
 800059c:	bf2c      	ite	cs
 800059e:	f04f 0a01 	movcs.w	sl, #1
 80005a2:	f04f 0a00 	movcc.w	sl, #0
 80005a6:	4543      	cmp	r3, r8
 80005a8:	d2bb      	bcs.n	8000522 <__udivmoddi4+0x252>
 80005aa:	f1ba 0f00 	cmp.w	sl, #0
 80005ae:	d1b8      	bne.n	8000522 <__udivmoddi4+0x252>
 80005b0:	f1a9 0102 	sub.w	r1, r9, #2
 80005b4:	443b      	add	r3, r7
 80005b6:	e7b4      	b.n	8000522 <__udivmoddi4+0x252>
 80005b8:	1a84      	subs	r4, r0, r2
 80005ba:	eb68 0203 	sbc.w	r2, r8, r3
 80005be:	2001      	movs	r0, #1
 80005c0:	4696      	mov	lr, r2
 80005c2:	e6eb      	b.n	800039c <__udivmoddi4+0xcc>
 80005c4:	443a      	add	r2, r7
 80005c6:	f1a8 0802 	sub.w	r8, r8, #2
 80005ca:	e72b      	b.n	8000424 <__udivmoddi4+0x154>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e710      	b.n	80003f6 <__udivmoddi4+0x126>
 80005d4:	3902      	subs	r1, #2
 80005d6:	443b      	add	r3, r7
 80005d8:	e6a9      	b.n	800032e <__udivmoddi4+0x5e>
 80005da:	443a      	add	r2, r7
 80005dc:	3802      	subs	r0, #2
 80005de:	e6be      	b.n	800035e <__udivmoddi4+0x8e>
 80005e0:	eba7 0808 	sub.w	r8, r7, r8
 80005e4:	f1a9 0c02 	sub.w	ip, r9, #2
 80005e8:	4441      	add	r1, r8
 80005ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ee:	fb09 f804 	mul.w	r8, r9, r4
 80005f2:	e7c9      	b.n	8000588 <__udivmoddi4+0x2b8>
 80005f4:	f1ae 0e02 	sub.w	lr, lr, #2
 80005f8:	443c      	add	r4, r7
 80005fa:	e744      	b.n	8000486 <__udivmoddi4+0x1b6>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e75e      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000602:	4649      	mov	r1, r9
 8000604:	e78d      	b.n	8000522 <__udivmoddi4+0x252>
 8000606:	eba1 0108 	sub.w	r1, r1, r8
 800060a:	46cc      	mov	ip, r9
 800060c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000610:	fb09 f804 	mul.w	r8, r9, r4
 8000614:	e7b8      	b.n	8000588 <__udivmoddi4+0x2b8>
 8000616:	bf00      	nop

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <EXTI4_IRQHandler>:

/**
 * @brief EXTI line 4 interrupt handler for WINC IRQ.
 */
void EXTI4_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    /* Clear and handle interrupt */
    if (__HAL_GPIO_EXTI_GET_IT(WINC_INT_PIN) != RESET) {
 8000620:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <EXTI4_IRQHandler+0x3c>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	f003 0310 	and.w	r3, r3, #16
 8000628:	2b00      	cmp	r3, #0
 800062a:	d105      	bne.n	8000638 <EXTI4_IRQHandler+0x1c>
 800062c:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <EXTI4_IRQHandler+0x3c>)
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	f003 0310 	and.w	r3, r3, #16
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <EXTI4_IRQHandler+0x20>
 8000638:	2301      	movs	r3, #1
 800063a:	e000      	b.n	800063e <EXTI4_IRQHandler+0x22>
 800063c:	2300      	movs	r3, #0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d008      	beq.n	8000654 <EXTI4_IRQHandler+0x38>
        __HAL_GPIO_EXTI_CLEAR_IT(WINC_INT_PIN);
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <EXTI4_IRQHandler+0x3c>)
 8000644:	2210      	movs	r2, #16
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	4b03      	ldr	r3, [pc, #12]	@ (8000658 <EXTI4_IRQHandler+0x3c>)
 800064a:	2210      	movs	r2, #16
 800064c:	611a      	str	r2, [r3, #16]
        HAL_GPIO_EXTI_IRQHandler(WINC_INT_PIN);
 800064e:	2010      	movs	r0, #16
 8000650:	f001 fbd8 	bl	8001e04 <HAL_GPIO_EXTI_IRQHandler>
    }
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	44022000 	.word	0x44022000

0800065c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000660:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <MX_FREERTOS_Init+0x18>)
 8000662:	2100      	movs	r1, #0
 8000664:	4804      	ldr	r0, [pc, #16]	@ (8000678 <MX_FREERTOS_Init+0x1c>)
 8000666:	f005 fbb9 	bl	8005ddc <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a03      	ldr	r2, [pc, #12]	@ (800067c <MX_FREERTOS_Init+0x20>)
 800066e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	08009170 	.word	0x08009170
 8000678:	08000681 	.word	0x08000681
 800067c:	2000009c 	.word	0x2000009c

08000680 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f005 fc38 	bl	8005efe <osDelay>
 800068e:	e7fb      	b.n	8000688 <StartDefaultTask+0x8>

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 ff64 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f846 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f9b0 	bl	8000a00 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006a0:	f000 f8b6 	bl	8000810 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006a4:	f000 f90a 	bl	80008bc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80006a8:	f000 f95e 	bl	8000968 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006ac:	f005 fb46 	bl	8005d3c <osKernelInitialize>
  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 80006b0:	f7ff ffd4 	bl	800065c <MX_FREERTOS_Init>

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f000 fd67 	bl	8001188 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006ba:	2101      	movs	r1, #1
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 fde3 	bl	8001288 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80006c2:	4b16      	ldr	r3, [pc, #88]	@ (800071c <main+0x8c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <main+0x8c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <main+0x8c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <main+0x8c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <main+0x8c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80006e2:	490e      	ldr	r1, [pc, #56]	@ (800071c <main+0x8c>)
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 fe5d 	bl	80013a4 <BSP_COM_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <main+0x64>
  {
    Error_Handler();
 80006f0:	f000 fa1c 	bl	8000b2c <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80006f4:	480a      	ldr	r0, [pc, #40]	@ (8000720 <main+0x90>)
 80006f6:	f007 fe85 	bl	8008404 <iprintf>
  /* -- Sample board code to switch on led ---- */
  BSP_LED_On(LED_GREEN);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 fd88 	bl	8001210 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Start scheduler */
  osKernelStart();
 8000700:	f005 fb42 	bl	8005d88 <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <main+0x94>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d1fb      	bne.n	8000704 <main+0x74>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 800070c:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <main+0x94>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle led ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000712:	2000      	movs	r0, #0
 8000714:	f000 fd9a 	bl	800124c <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED)
 8000718:	e7f4      	b.n	8000704 <main+0x74>
 800071a:	bf00      	nop
 800071c:	200000a0 	.word	0x200000a0
 8000720:	0800913c 	.word	0x0800913c
 8000724:	200000b0 	.word	0x200000b0

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b09c      	sub	sp, #112	@ 0x70
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	2250      	movs	r2, #80	@ 0x50
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f007 ff4e 	bl	80085d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
 800074c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800074e:	4b2e      	ldr	r3, [pc, #184]	@ (8000808 <SystemClock_Config+0xe0>)
 8000750:	691b      	ldr	r3, [r3, #16]
 8000752:	4a2d      	ldr	r2, [pc, #180]	@ (8000808 <SystemClock_Config+0xe0>)
 8000754:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000758:	6113      	str	r3, [r2, #16]
 800075a:	4b2b      	ldr	r3, [pc, #172]	@ (8000808 <SystemClock_Config+0xe0>)
 800075c:	691b      	ldr	r3, [r3, #16]
 800075e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000766:	bf00      	nop
 8000768:	4b27      	ldr	r3, [pc, #156]	@ (8000808 <SystemClock_Config+0xe0>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	f003 0308 	and.w	r3, r3, #8
 8000770:	2b08      	cmp	r3, #8
 8000772:	d1f9      	bne.n	8000768 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2340      	movs	r3, #64	@ 0x40
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 8000788:	2301      	movs	r3, #1
 800078a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8000790:	231f      	movs	r3, #31
 8000792:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80007a0:	230c      	movs	r3, #12
 80007a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fb63 	bl	8001e7c <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007bc:	f000 f9b6 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	231f      	movs	r3, #31
 80007c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2303      	movs	r3, #3
 80007c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	2105      	movs	r1, #5
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 ff84 	bl	80026ec <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ea:	f000 f99f 	bl	8000b2c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80007ee:	4b07      	ldr	r3, [pc, #28]	@ (800080c <SystemClock_Config+0xe4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80007f6:	4a05      	ldr	r2, [pc, #20]	@ (800080c <SystemClock_Config+0xe4>)
 80007f8:	f043 0320 	orr.w	r3, r3, #32
 80007fc:	6013      	str	r3, [r2, #0]
}
 80007fe:	bf00      	nop
 8000800:	3770      	adds	r7, #112	@ 0x70
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	44020800 	.word	0x44020800
 800080c:	40022000 	.word	0x40022000

08000810 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000814:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 8000816:	4a28      	ldr	r2, [pc, #160]	@ (80008b8 <MX_SPI1_Init+0xa8>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 800081c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000820:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000828:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 800082a:	2203      	movs	r2, #3
 800082c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000834:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800083a:	4b1e      	ldr	r3, [pc, #120]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 800083c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000840:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000854:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 800085c:	2207      	movs	r2, #7
 800085e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 8000862:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000866:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 800086a:	2200      	movs	r2, #0
 800086c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 8000870:	2200      	movs	r2, #0
 8000872:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 8000876:	2200      	movs	r2, #0
 8000878:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 800087c:	2200      	movs	r2, #0
 800087e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 8000882:	2200      	movs	r2, #0
 8000884:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 8000894:	2200      	movs	r2, #0
 8000896:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 800089a:	2200      	movs	r2, #0
 800089c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_SPI1_Init+0xa4>)
 80008a0:	f004 fb38 	bl	8004f14 <HAL_SPI_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80008aa:	f000 f93f 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000b4 	.word	0x200000b4
 80008b8:	40013000 	.word	0x40013000

080008bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008c0:	4b27      	ldr	r3, [pc, #156]	@ (8000960 <MX_SPI2_Init+0xa4>)
 80008c2:	4a28      	ldr	r2, [pc, #160]	@ (8000964 <MX_SPI2_Init+0xa8>)
 80008c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008c6:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <MX_SPI2_Init+0xa4>)
 80008c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80008cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ce:	4b24      	ldr	r3, [pc, #144]	@ (8000960 <MX_SPI2_Init+0xa4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80008d4:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <MX_SPI2_Init+0xa4>)
 80008d6:	2203      	movs	r2, #3
 80008d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <MX_SPI2_Init+0xa4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <MX_SPI2_Init+0xa4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <MX_SPI2_Init+0xa4>)
 80008e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80008ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_SPI2_Init+0xa4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_SPI2_Init+0xa4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_SPI2_Init+0xa4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_SPI2_Init+0xa4>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_SPI2_Init+0xa4>)
 8000908:	2207      	movs	r2, #7
 800090a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_SPI2_Init+0xa4>)
 800090e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000912:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_SPI2_Init+0xa4>)
 8000916:	2200      	movs	r2, #0
 8000918:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_SPI2_Init+0xa4>)
 800091c:	2200      	movs	r2, #0
 800091e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_SPI2_Init+0xa4>)
 8000922:	2200      	movs	r2, #0
 8000924:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_SPI2_Init+0xa4>)
 8000928:	2200      	movs	r2, #0
 800092a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_SPI2_Init+0xa4>)
 800092e:	2200      	movs	r2, #0
 8000930:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <MX_SPI2_Init+0xa4>)
 8000934:	2200      	movs	r2, #0
 8000936:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000938:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_SPI2_Init+0xa4>)
 800093a:	2200      	movs	r2, #0
 800093c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <MX_SPI2_Init+0xa4>)
 8000940:	2200      	movs	r2, #0
 8000942:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_SPI2_Init+0xa4>)
 8000946:	2200      	movs	r2, #0
 8000948:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_SPI2_Init+0xa4>)
 800094c:	f004 fae2 	bl	8004f14 <HAL_SPI_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000956:	f000 f8e9 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000144 	.word	0x20000144
 8000964:	40003800 	.word	0x40003800

08000968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b22      	ldr	r3, [pc, #136]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 800096e:	4a23      	ldr	r2, [pc, #140]	@ (80009fc <MX_USART2_UART_Init+0x94>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000972:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 8000974:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000986:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009aa:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b0:	4811      	ldr	r0, [pc, #68]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 80009b2:	f004 fbca 	bl	800514a <HAL_UART_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009bc:	f000 f8b6 	bl	8000b2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	480d      	ldr	r0, [pc, #52]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 80009c4:	f005 f886 	bl	8005ad4 <HAL_UARTEx_SetTxFifoThreshold>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ce:	f000 f8ad 	bl	8000b2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d2:	2100      	movs	r1, #0
 80009d4:	4808      	ldr	r0, [pc, #32]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 80009d6:	f005 f8bb 	bl	8005b50 <HAL_UARTEx_SetRxFifoThreshold>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009e0:	f000 f8a4 	bl	8000b2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	@ (80009f8 <MX_USART2_UART_Init+0x90>)
 80009e6:	f005 f83c 	bl	8005a62 <HAL_UARTEx_DisableFifoMode>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009f0:	f000 f89c 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200001d4 	.word	0x200001d4
 80009fc:	40004400 	.word	0x40004400

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b38      	ldr	r3, [pc, #224]	@ (8000af8 <MX_GPIO_Init+0xf8>)
 8000a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a1c:	4a36      	ldr	r2, [pc, #216]	@ (8000af8 <MX_GPIO_Init+0xf8>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a26:	4b34      	ldr	r3, [pc, #208]	@ (8000af8 <MX_GPIO_Init+0xf8>)
 8000a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b30      	ldr	r3, [pc, #192]	@ (8000af8 <MX_GPIO_Init+0xf8>)
 8000a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000af8 <MX_GPIO_Init+0xf8>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a44:	4b2c      	ldr	r3, [pc, #176]	@ (8000af8 <MX_GPIO_Init+0xf8>)
 8000a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b29      	ldr	r3, [pc, #164]	@ (8000af8 <MX_GPIO_Init+0xf8>)
 8000a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a58:	4a27      	ldr	r2, [pc, #156]	@ (8000af8 <MX_GPIO_Init+0xf8>)
 8000a5a:	f043 0302 	orr.w	r3, r3, #2
 8000a5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a62:	4b25      	ldr	r3, [pc, #148]	@ (8000af8 <MX_GPIO_Init+0xf8>)
 8000a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a68:	f003 0302 	and.w	r3, r3, #2
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_WINC_GPIO_Port, CS_WINC_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2120      	movs	r1, #32
 8000a74:	4821      	ldr	r0, [pc, #132]	@ (8000afc <MX_GPIO_Init+0xfc>)
 8000a76:	f001 f993 	bl	8001da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_WINC_Pin|CHIP_EN_WINC_Pin|SDCARD_CS_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f240 1103 	movw	r1, #259	@ 0x103
 8000a80:	481f      	ldr	r0, [pc, #124]	@ (8000b00 <MX_GPIO_Init+0x100>)
 8000a82:	f001 f98d 	bl	8001da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IRQ_WINC_PIN_Pin */
  GPIO_InitStruct.Pin = IRQ_WINC_PIN_Pin;
 8000a86:	2310      	movs	r3, #16
 8000a88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_WINC_PIN_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4619      	mov	r1, r3
 8000a98:	4818      	ldr	r0, [pc, #96]	@ (8000afc <MX_GPIO_Init+0xfc>)
 8000a9a:	f001 f823 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_WINC_Pin */
  GPIO_InitStruct.Pin = CS_WINC_Pin;
 8000a9e:	2320      	movs	r3, #32
 8000aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_WINC_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4811      	ldr	r0, [pc, #68]	@ (8000afc <MX_GPIO_Init+0xfc>)
 8000ab6:	f001 f815 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_WINC_Pin CHIP_EN_WINC_Pin SDCARD_CS_Pin */
  GPIO_InitStruct.Pin = RESET_WINC_Pin|CHIP_EN_WINC_Pin|SDCARD_CS_Pin;
 8000aba:	f240 1303 	movw	r3, #259	@ 0x103
 8000abe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <MX_GPIO_Init+0x100>)
 8000ad4:	f001 f806 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ad8:	2310      	movs	r3, #16
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_GPIO_Init+0x100>)
 8000aec:	f000 fffa 	bl	8001ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	44020c00 	.word	0x44020c00
 8000afc:	42020800 	.word	0x42020800
 8000b00:	42020400 	.word	0x42020400

08000b04 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000b14:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <BSP_PB_Callback+0x24>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200000b0 	.word	0x200000b0

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <Error_Handler+0x8>

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	210f      	movs	r1, #15
 8000b40:	f06f 0001 	mvn.w	r0, #1
 8000b44:	f000 fe6e 	bl	8001824 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0b0      	sub	sp, #192	@ 0xc0
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b64:	f107 0320 	add.w	r3, r7, #32
 8000b68:	2288      	movs	r2, #136	@ 0x88
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f007 fd33 	bl	80085d8 <memset>
  if(hspi->Instance==SPI1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a86      	ldr	r2, [pc, #536]	@ (8000d90 <HAL_SPI_MspInit+0x244>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d17f      	bne.n	8000c7c <HAL_SPI_MspInit+0x130>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000b7c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b8e:	f107 0320 	add.w	r3, r7, #32
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 f8ec 	bl	8002d70 <HAL_RCCEx_PeriphCLKConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000b9e:	f7ff ffc5 	bl	8000b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba2:	4b7c      	ldr	r3, [pc, #496]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000ba4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ba8:	4a7a      	ldr	r2, [pc, #488]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000baa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bae:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000bb2:	4b78      	ldr	r3, [pc, #480]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000bb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000bb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bbc:	61fb      	str	r3, [r7, #28]
 8000bbe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b74      	ldr	r3, [pc, #464]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc6:	4a73      	ldr	r2, [pc, #460]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bd0:	4b70      	ldr	r3, [pc, #448]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b6d      	ldr	r3, [pc, #436]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000be4:	4a6b      	ldr	r2, [pc, #428]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bee:	4b69      	ldr	r3, [pc, #420]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bfc:	2340      	movs	r3, #64	@ 0x40
 8000bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c14:	2305      	movs	r3, #5
 8000c16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c1e:	4619      	mov	r1, r3
 8000c20:	485d      	ldr	r0, [pc, #372]	@ (8000d98 <HAL_SPI_MspInit+0x24c>)
 8000c22:	f000 ff5f 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c26:	2380      	movs	r3, #128	@ 0x80
 8000c28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4853      	ldr	r0, [pc, #332]	@ (8000d98 <HAL_SPI_MspInit+0x24c>)
 8000c4c:	f000 ff4a 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c50:	2308      	movs	r3, #8
 8000c52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c68:	2305      	movs	r3, #5
 8000c6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c72:	4619      	mov	r1, r3
 8000c74:	4849      	ldr	r0, [pc, #292]	@ (8000d9c <HAL_SPI_MspInit+0x250>)
 8000c76:	f000 ff35 	bl	8001ae4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c7a:	e084      	b.n	8000d86 <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI2)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a47      	ldr	r2, [pc, #284]	@ (8000da0 <HAL_SPI_MspInit+0x254>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d17f      	bne.n	8000d86 <HAL_SPI_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000c86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c8a:	f04f 0300 	mov.w	r3, #0
 8000c8e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c98:	f107 0320 	add.w	r3, r7, #32
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 f867 	bl	8002d70 <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_SPI_MspInit+0x160>
      Error_Handler();
 8000ca8:	f7ff ff40 	bl	8000b2c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cac:	4b39      	ldr	r3, [pc, #228]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cb2:	4a38      	ldr	r2, [pc, #224]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000cbc:	4b35      	ldr	r3, [pc, #212]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	4b32      	ldr	r3, [pc, #200]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cd0:	4a30      	ldr	r2, [pc, #192]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cda:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cee:	4a29      	ldr	r2, [pc, #164]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cf8:	4b26      	ldr	r3, [pc, #152]	@ (8000d94 <HAL_SPI_MspInit+0x248>)
 8000cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SDCARD_MOSI_Pin;
 8000d06:	2302      	movs	r3, #2
 8000d08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(SDCARD_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d28:	4619      	mov	r1, r3
 8000d2a:	481e      	ldr	r0, [pc, #120]	@ (8000da4 <HAL_SPI_MspInit+0x258>)
 8000d2c:	f000 feda 	bl	8001ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDCARD_MISO_Pin;
 8000d30:	2304      	movs	r3, #4
 8000d32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d48:	2305      	movs	r3, #5
 8000d4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(SDCARD_MISO_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d52:	4619      	mov	r1, r3
 8000d54:	4813      	ldr	r0, [pc, #76]	@ (8000da4 <HAL_SPI_MspInit+0x258>)
 8000d56:	f000 fec5 	bl	8001ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDCARD_SCK_Pin;
 8000d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d74:	2305      	movs	r3, #5
 8000d76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(SDCARD_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4806      	ldr	r0, [pc, #24]	@ (8000d9c <HAL_SPI_MspInit+0x250>)
 8000d82:	f000 feaf 	bl	8001ae4 <HAL_GPIO_Init>
}
 8000d86:	bf00      	nop
 8000d88:	37c0      	adds	r7, #192	@ 0xc0
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40013000 	.word	0x40013000
 8000d94:	44020c00 	.word	0x44020c00
 8000d98:	42020000 	.word	0x42020000
 8000d9c:	42020400 	.word	0x42020400
 8000da0:	40003800 	.word	0x40003800
 8000da4:	42020800 	.word	0x42020800

08000da8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0ae      	sub	sp, #184	@ 0xb8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	2288      	movs	r2, #136	@ 0x88
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f007 fc05 	bl	80085d8 <memset>
  if(huart->Instance==USART2)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a38      	ldr	r2, [pc, #224]	@ (8000eb4 <HAL_UART_MspInit+0x10c>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d169      	bne.n	8000eac <HAL_UART_MspInit+0x104>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dd8:	f04f 0202 	mov.w	r2, #2
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de8:	f107 0318 	add.w	r3, r7, #24
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 ffbf 	bl	8002d70 <HAL_RCCEx_PeriphCLKConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000df8:	f7ff fe98 	bl	8000b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb8 <HAL_UART_MspInit+0x110>)
 8000dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e02:	4a2d      	ldr	r2, [pc, #180]	@ (8000eb8 <HAL_UART_MspInit+0x110>)
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e08:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <HAL_UART_MspInit+0x110>)
 8000e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <HAL_UART_MspInit+0x110>)
 8000e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e20:	4a25      	ldr	r2, [pc, #148]	@ (8000eb8 <HAL_UART_MspInit+0x110>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e2a:	4b23      	ldr	r3, [pc, #140]	@ (8000eb8 <HAL_UART_MspInit+0x110>)
 8000e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <HAL_UART_MspInit+0x110>)
 8000e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb8 <HAL_UART_MspInit+0x110>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e48:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <HAL_UART_MspInit+0x110>)
 8000e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PC7     ------> USART2_RX
    PA8     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = DISPLAY_RX_Pin;
 8000e56:	2380      	movs	r3, #128	@ 0x80
 8000e58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF13_USART2;
 8000e6e:	230d      	movs	r3, #13
 8000e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DISPLAY_RX_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4810      	ldr	r0, [pc, #64]	@ (8000ebc <HAL_UART_MspInit+0x114>)
 8000e7c:	f000 fe32 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPLAY_TX_Pin;
 8000e80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DISPLAY_TX_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4806      	ldr	r0, [pc, #24]	@ (8000ec0 <HAL_UART_MspInit+0x118>)
 8000ea8:	f000 fe1c 	bl	8001ae4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000eac:	bf00      	nop
 8000eae:	37b8      	adds	r7, #184	@ 0xb8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40004400 	.word	0x40004400
 8000eb8:	44020c00 	.word	0x44020c00
 8000ebc:	42020800 	.word	0x42020800
 8000ec0:	42020000 	.word	0x42020000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <NMI_Handler+0x4>

08000ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <MemManage_Handler+0x4>

08000edc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 fa3a 	bl	8001378 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e00a      	b.n	8000f30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f1a:	f3af 8000 	nop.w
 8000f1e:	4601      	mov	r1, r0
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbf0      	blt.n	8000f1a <_read+0x12>
  }

  return len;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e009      	b.n	8000f68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60ba      	str	r2, [r7, #8]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fa85 	bl	800146c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbf1      	blt.n	8000f54 <_write+0x12>
  }
  return len;
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_close>:

int _close(int file)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fa2:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_isatty>:

int _isatty(int file)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f007 fb2e 	bl	8008674 <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20008000 	.word	0x20008000
 8001044:	00000400 	.word	0x00000400
 8001048:	20000268 	.word	0x20000268
 800104c:	20002fb0 	.word	0x20002fb0

08001050 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001056:	4b30      	ldr	r3, [pc, #192]	@ (8001118 <SystemInit+0xc8>)
 8001058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105c:	4a2e      	ldr	r2, [pc, #184]	@ (8001118 <SystemInit+0xc8>)
 800105e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001062:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001066:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <SystemInit+0xcc>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800106c:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <SystemInit+0xcc>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001072:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <SystemInit+0xcc>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001078:	4b28      	ldr	r3, [pc, #160]	@ (800111c <SystemInit+0xcc>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4927      	ldr	r1, [pc, #156]	@ (800111c <SystemInit+0xcc>)
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <SystemInit+0xd0>)
 8001080:	4013      	ands	r3, r2
 8001082:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001084:	4b25      	ldr	r3, [pc, #148]	@ (800111c <SystemInit+0xcc>)
 8001086:	2200      	movs	r2, #0
 8001088:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800108a:	4b24      	ldr	r3, [pc, #144]	@ (800111c <SystemInit+0xcc>)
 800108c:	2200      	movs	r2, #0
 800108e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001090:	4b22      	ldr	r3, [pc, #136]	@ (800111c <SystemInit+0xcc>)
 8001092:	4a24      	ldr	r2, [pc, #144]	@ (8001124 <SystemInit+0xd4>)
 8001094:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001096:	4b21      	ldr	r3, [pc, #132]	@ (800111c <SystemInit+0xcc>)
 8001098:	2200      	movs	r2, #0
 800109a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800109c:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <SystemInit+0xcc>)
 800109e:	4a21      	ldr	r2, [pc, #132]	@ (8001124 <SystemInit+0xd4>)
 80010a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <SystemInit+0xcc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80010a8:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <SystemInit+0xcc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1b      	ldr	r2, [pc, #108]	@ (800111c <SystemInit+0xcc>)
 80010ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <SystemInit+0xcc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <SystemInit+0xc8>)
 80010bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010c0:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80010c2:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <SystemInit+0xd8>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80010ca:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80010d2:	d003      	beq.n	80010dc <SystemInit+0x8c>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80010da:	d117      	bne.n	800110c <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <SystemInit+0xd8>)
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <SystemInit+0xd8>)
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <SystemInit+0xdc>)
 80010ec:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <SystemInit+0xd8>)
 80010f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <SystemInit+0xe0>)
 80010f2:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <SystemInit+0xd8>)
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001128 <SystemInit+0xd8>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001100:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <SystemInit+0xd8>)
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	4a08      	ldr	r2, [pc, #32]	@ (8001128 <SystemInit+0xd8>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	61d3      	str	r3, [r2, #28]
  }
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00
 800111c:	44020c00 	.word	0x44020c00
 8001120:	fae2eae3 	.word	0xfae2eae3
 8001124:	01010280 	.word	0x01010280
 8001128:	40022000 	.word	0x40022000
 800112c:	08192a3b 	.word	0x08192a3b
 8001130:	4c5d6e7f 	.word	0x4c5d6e7f

08001134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800116c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001138:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800113a:	e003      	b.n	8001144 <LoopCopyDataInit>

0800113c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800113e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001140:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001142:	3104      	adds	r1, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001144:	480b      	ldr	r0, [pc, #44]	@ (8001174 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001146:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001148:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800114a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800114c:	d3f6      	bcc.n	800113c <CopyDataInit>
	ldr	r2, =_sbss
 800114e:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001150:	e002      	b.n	8001158 <LoopFillZerobss>

08001152 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001152:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001154:	f842 3b04 	str.w	r3, [r2], #4

08001158 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <LoopForever+0x16>)
	cmp	r2, r3
 800115a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800115c:	d3f9      	bcc.n	8001152 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800115e:	f7ff ff77 	bl	8001050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001162:	f007 fa8d 	bl	8008680 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001166:	f7ff fa93 	bl	8000690 <main>

0800116a <LoopForever>:

LoopForever:
    b LoopForever
 800116a:	e7fe      	b.n	800116a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800116c:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001170:	08009220 	.word	0x08009220
	ldr	r0, =_sdata
 8001174:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001178:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 800117c:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8001180:	20002fac 	.word	0x20002fac

08001184 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_IRQHandler>
	...

08001188 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800119c:	f06f 0301 	mvn.w	r3, #1
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011a2:	e02c      	b.n	80011fe <BSP_LED_Init+0x76>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10e      	bne.n	80011c8 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 80011aa:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <BSP_LED_Init+0x80>)
 80011ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b0:	4a15      	ldr	r2, [pc, #84]	@ (8001208 <BSP_LED_Init+0x80>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <BSP_LED_Init+0x80>)
 80011bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80011c8:	2320      	movs	r3, #32
 80011ca:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4a0c      	ldr	r2, [pc, #48]	@ (800120c <BSP_LED_Init+0x84>)
 80011dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e0:	f107 0210 	add.w	r2, r7, #16
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fc7c 	bl	8001ae4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4a07      	ldr	r2, [pc, #28]	@ (800120c <BSP_LED_Init+0x84>)
 80011f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f4:	2120      	movs	r1, #32
 80011f6:	2200      	movs	r2, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fdd1 	bl	8001da0 <HAL_GPIO_WritePin>
  }

  return ret;
 80011fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001200:	4618      	mov	r0, r3
 8001202:	3728      	adds	r7, #40	@ 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	44020c00 	.word	0x44020c00
 800120c:	20000008 	.word	0x20000008

08001210 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <BSP_LED_On+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001224:	f06f 0301 	mvn.w	r3, #1
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	e008      	b.n	800123e <BSP_LED_On+0x2e>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4a06      	ldr	r2, [pc, #24]	@ (8001248 <BSP_LED_On+0x38>)
 8001230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001234:	2120      	movs	r1, #32
 8001236:	2201      	movs	r2, #1
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fdb1 	bl	8001da0 <HAL_GPIO_WritePin>
  }

  return ret;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000008 	.word	0x20000008

0800124c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <BSP_LED_Toggle+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001260:	f06f 0301 	mvn.w	r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	e008      	b.n	800127a <BSP_LED_Toggle+0x2e>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <BSP_LED_Toggle+0x38>)
 800126c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001270:	2220      	movs	r2, #32
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f000 fdab 	bl	8001dd0 <HAL_GPIO_TogglePin>
  }

  return ret;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000008 	.word	0x20000008

08001288 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	460a      	mov	r2, r1
 8001292:	71fb      	strb	r3, [r7, #7]
 8001294:	4613      	mov	r3, r2
 8001296:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001298:	4b30      	ldr	r3, [pc, #192]	@ (800135c <BSP_PB_Init+0xd4>)
 800129a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800129e:	4a2f      	ldr	r2, [pc, #188]	@ (800135c <BSP_PB_Init+0xd4>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012a8:	4b2c      	ldr	r3, [pc, #176]	@ (800135c <BSP_PB_Init+0xd4>)
 80012aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80012b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ba:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80012bc:	2302      	movs	r3, #2
 80012be:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80012c4:	79bb      	ldrb	r3, [r7, #6]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10c      	bne.n	80012e4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	4a23      	ldr	r2, [pc, #140]	@ (8001360 <BSP_PB_Init+0xd8>)
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	f107 020c 	add.w	r2, r7, #12
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fc01 	bl	8001ae4 <HAL_GPIO_Init>
 80012e2:	e036      	b.n	8001352 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80012e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <BSP_PB_Init+0xdc>)
 80012e6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001360 <BSP_PB_Init+0xd8>)
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f0:	f107 020c 	add.w	r2, r7, #12
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fbf4 	bl	8001ae4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80012fc:	79fa      	ldrb	r2, [r7, #7]
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4a18      	ldr	r2, [pc, #96]	@ (8001368 <BSP_PB_Init+0xe0>)
 8001308:	441a      	add	r2, r3
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	4917      	ldr	r1, [pc, #92]	@ (800136c <BSP_PB_Init+0xe4>)
 800130e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001312:	4619      	mov	r1, r3
 8001314:	4610      	mov	r0, r2
 8001316:	f000 fb89 	bl	8001a2c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4a10      	ldr	r2, [pc, #64]	@ (8001368 <BSP_PB_Init+0xe0>)
 8001326:	1898      	adds	r0, r3, r2
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	4a11      	ldr	r2, [pc, #68]	@ (8001370 <BSP_PB_Init+0xe8>)
 800132c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001330:	461a      	mov	r2, r3
 8001332:	2100      	movs	r1, #0
 8001334:	f000 fb4e 	bl	80019d4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001338:	2018      	movs	r0, #24
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <BSP_PB_Init+0xec>)
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	f000 fa6d 	bl	8001824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800134a:	2318      	movs	r3, #24
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fa83 	bl	8001858 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	44020c00 	.word	0x44020c00
 8001360:	2000000c 	.word	0x2000000c
 8001364:	10110000 	.word	0x10110000
 8001368:	2000026c 	.word	0x2000026c
 800136c:	080091ac 	.word	0x080091ac
 8001370:	20000010 	.word	0x20000010
 8001374:	20000014 	.word	0x20000014

08001378 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001382:	79fa      	ldrb	r2, [r7, #7]
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4a04      	ldr	r2, [pc, #16]	@ (80013a0 <BSP_PB_IRQHandler+0x28>)
 800138e:	4413      	add	r3, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fb5f 	bl	8001a54 <HAL_EXTI_IRQHandler>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000026c 	.word	0x2000026c

080013a4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013ba:	f06f 0301 	mvn.w	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e018      	b.n	80013f4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2294      	movs	r2, #148	@ 0x94
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001400 <BSP_COM_Init+0x5c>)
 80013cc:	4413      	add	r3, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f870 	bl	80014b4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2294      	movs	r2, #148	@ 0x94
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	4a08      	ldr	r2, [pc, #32]	@ (8001400 <BSP_COM_Init+0x5c>)
 80013de:	4413      	add	r3, r2
 80013e0:	6839      	ldr	r1, [r7, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f80e 	bl	8001404 <MX_USART_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80013ee:	f06f 0303 	mvn.w	r3, #3
 80013f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80013f4:	68fb      	ldr	r3, [r7, #12]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000278 	.word	0x20000278

08001404 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800140e:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <MX_USART_Init+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	220c      	movs	r2, #12
 8001422:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	895b      	ldrh	r3, [r3, #10]
 8001428:	461a      	mov	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	891b      	ldrh	r3, [r3, #8]
 800143a:	461a      	mov	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	899b      	ldrh	r3, [r3, #12]
 8001444:	461a      	mov	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001450:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f003 fe76 	bl	800514a <HAL_UART_Init>
 800145e:	4603      	mov	r3, r0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000004 	.word	0x20000004

0800146c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <__io_putchar+0x30>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	2394      	movs	r3, #148	@ 0x94
 800147c:	fb02 f303 	mul.w	r3, r2, r3
 8001480:	4a07      	ldr	r2, [pc, #28]	@ (80014a0 <__io_putchar+0x34>)
 8001482:	1898      	adds	r0, r3, r2
 8001484:	1d39      	adds	r1, r7, #4
 8001486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800148a:	2201      	movs	r2, #1
 800148c:	f003 fead 	bl	80051ea <HAL_UART_Transmit>
  return ch;
 8001490:	687b      	ldr	r3, [r7, #4]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000030c 	.word	0x2000030c
 80014a0:	20000278 	.word	0x20000278

080014a4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff fb2b 	bl	8000b04 <BSP_PB_Callback>
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80014bc:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <COM1_MspInit+0xa4>)
 80014be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c2:	4a25      	ldr	r2, [pc, #148]	@ (8001558 <COM1_MspInit+0xa4>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014cc:	4b22      	ldr	r3, [pc, #136]	@ (8001558 <COM1_MspInit+0xa4>)
 80014ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80014da:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <COM1_MspInit+0xa4>)
 80014dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001558 <COM1_MspInit+0xa4>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <COM1_MspInit+0xa4>)
 80014ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80014f8:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <COM1_MspInit+0xa4>)
 80014fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014fe:	4a16      	ldr	r2, [pc, #88]	@ (8001558 <COM1_MspInit+0xa4>)
 8001500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001504:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <COM1_MspInit+0xa4>)
 800150a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800150e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001516:	2310      	movs	r3, #16
 8001518:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800151e:	2302      	movs	r3, #2
 8001520:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001522:	2301      	movs	r3, #1
 8001524:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001526:	230d      	movs	r3, #13
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	480a      	ldr	r0, [pc, #40]	@ (800155c <COM1_MspInit+0xa8>)
 8001532:	f000 fad7 	bl	8001ae4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001536:	2308      	movs	r3, #8
 8001538:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800153e:	230d      	movs	r3, #13
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4804      	ldr	r0, [pc, #16]	@ (800155c <COM1_MspInit+0xa8>)
 800154a:	f000 facb 	bl	8001ae4 <HAL_GPIO_Init>
}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	@ 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	44020c00 	.word	0x44020c00
 800155c:	42020000 	.word	0x42020000

08001560 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f952 	bl	800180e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800156a:	f001 fa77 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 800156e:	4602      	mov	r2, r0
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <HAL_Init+0x44>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	490b      	ldr	r1, [pc, #44]	@ (80015a8 <HAL_Init+0x48>)
 800157a:	5ccb      	ldrb	r3, [r1, r3]
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
 8001580:	4a0a      	ldr	r2, [pc, #40]	@ (80015ac <HAL_Init+0x4c>)
 8001582:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001584:	2004      	movs	r0, #4
 8001586:	f000 f997 	bl	80018b8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158a:	200f      	movs	r0, #15
 800158c:	f000 f810 	bl	80015b0 <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e002      	b.n	80015a0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800159a:	f7ff facd 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	44020c00 	.word	0x44020c00
 80015a8:	08009194 	.word	0x08009194
 80015ac:	20000000 	.word	0x20000000

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80015bc:	4b33      	ldr	r3, [pc, #204]	@ (800168c <HAL_InitTick+0xdc>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e05c      	b.n	8001682 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80015c8:	4b31      	ldr	r3, [pc, #196]	@ (8001690 <HAL_InitTick+0xe0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d10c      	bne.n	80015ee <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80015d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001694 <HAL_InitTick+0xe4>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b2c      	ldr	r3, [pc, #176]	@ (800168c <HAL_InitTick+0xdc>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	e037      	b.n	800165e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80015ee:	f000 f9bb 	bl	8001968 <HAL_SYSTICK_GetCLKSourceConfig>
 80015f2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d023      	beq.n	8001642 <HAL_InitTick+0x92>
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d82d      	bhi.n	800165c <HAL_InitTick+0xac>
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_InitTick+0x5e>
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d00d      	beq.n	8001628 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800160c:	e026      	b.n	800165c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800160e:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <HAL_InitTick+0xe4>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <HAL_InitTick+0xdc>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800161c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001620:	fbb2 f3f3 	udiv	r3, r2, r3
 8001624:	60fb      	str	r3, [r7, #12]
        break;
 8001626:	e01a      	b.n	800165e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001628:	4b18      	ldr	r3, [pc, #96]	@ (800168c <HAL_InitTick+0xdc>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001632:	fbb3 f3f2 	udiv	r3, r3, r2
 8001636:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	60fb      	str	r3, [r7, #12]
        break;
 8001640:	e00d      	b.n	800165e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001642:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_InitTick+0xdc>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800164c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001650:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001654:	fbb2 f3f3 	udiv	r3, r2, r3
 8001658:	60fb      	str	r3, [r7, #12]
        break;
 800165a:	e000      	b.n	800165e <HAL_InitTick+0xae>
        break;
 800165c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 f908 	bl	8001874 <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e009      	b.n	8001682 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166e:	2200      	movs	r2, #0
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	f04f 30ff 	mov.w	r0, #4294967295
 8001676:	f000 f8d5 	bl	8001824 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800167a:	4a07      	ldr	r2, [pc, #28]	@ (8001698 <HAL_InitTick+0xe8>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2000001c 	.word	0x2000001c
 8001690:	e000e010 	.word	0xe000e010
 8001694:	20000000 	.word	0x20000000
 8001698:	20000018 	.word	0x20000018

0800169c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b03      	ldr	r3, [pc, #12]	@ (80016b0 <HAL_GetTick+0x14>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000310 	.word	0x20000310

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4907      	ldr	r1, [pc, #28]	@ (8001750 <__NVIC_EnableIRQ+0x38>)
 8001732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	@ (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	@ (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	@ 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	@ 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ff4c 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001832:	f7ff ff63 	bl	80016fc <__NVIC_GetPriorityGrouping>
 8001836:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	68b9      	ldr	r1, [r7, #8]
 800183c:	6978      	ldr	r0, [r7, #20]
 800183e:	f7ff ffb3 	bl	80017a8 <NVIC_EncodePriority>
 8001842:	4602      	mov	r2, r0
 8001844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001848:	4611      	mov	r1, r2
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff82 	bl	8001754 <__NVIC_SetPriority>
}
 8001850:	bf00      	nop
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff56 	bl	8001718 <__NVIC_EnableIRQ>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001884:	d301      	bcc.n	800188a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001886:	2301      	movs	r3, #1
 8001888:	e00d      	b.n	80018a6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800188a:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <HAL_SYSTICK_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <HAL_SYSTICK_Config+0x40>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_SYSTICK_Config+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <HAL_SYSTICK_Config+0x40>)
 800189e:	f043 0303 	orr.w	r3, r3, #3
 80018a2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d844      	bhi.n	8001950 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80018c6:	a201      	add	r2, pc, #4	@ (adr r2, 80018cc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	080018ef 	.word	0x080018ef
 80018d0:	0800190d 	.word	0x0800190d
 80018d4:	0800192f 	.word	0x0800192f
 80018d8:	08001951 	.word	0x08001951
 80018dc:	080018e1 	.word	0x080018e1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80018e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001960 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6013      	str	r3, [r2, #0]
      break;
 80018ec:	e031      	b.n	8001952 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80018ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001960 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018f4:	f023 0304 	bic.w	r3, r3, #4
 80018f8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80018fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001964 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001900:	4a18      	ldr	r2, [pc, #96]	@ (8001964 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001902:	f023 030c 	bic.w	r3, r3, #12
 8001906:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800190a:	e022      	b.n	8001952 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a13      	ldr	r2, [pc, #76]	@ (8001960 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001912:	f023 0304 	bic.w	r3, r3, #4
 8001916:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001918:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800191a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800191e:	f023 030c 	bic.w	r3, r3, #12
 8001922:	4a10      	ldr	r2, [pc, #64]	@ (8001964 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800192c:	e011      	b.n	8001952 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001934:	f023 0304 	bic.w	r3, r3, #4
 8001938:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800193c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001940:	f023 030c 	bic.w	r3, r3, #12
 8001944:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001946:	f043 0308 	orr.w	r3, r3, #8
 800194a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800194e:	e000      	b.n	8001952 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001950:	bf00      	nop
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010
 8001964:	44020c00 	.word	0x44020c00

08001968 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800196e:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800197a:	2304      	movs	r3, #4
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	e01e      	b.n	80019be <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001982:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2b08      	cmp	r3, #8
 8001990:	d00f      	beq.n	80019b2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2b08      	cmp	r3, #8
 8001996:	d80f      	bhi.n	80019b8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d003      	beq.n	80019ac <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80019a4:	e008      	b.n	80019b8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
        break;
 80019aa:	e008      	b.n	80019be <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80019ac:	2301      	movs	r3, #1
 80019ae:	607b      	str	r3, [r7, #4]
        break;
 80019b0:	e005      	b.n	80019be <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80019b2:	2302      	movs	r3, #2
 80019b4:	607b      	str	r3, [r7, #4]
        break;
 80019b6:	e002      	b.n	80019be <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
        break;
 80019bc:	bf00      	nop
    }
  }
  return systick_source;
 80019be:	687b      	ldr	r3, [r7, #4]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e010 	.word	0xe000e010
 80019d0:	44020c00 	.word	0x44020c00

080019d4 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	460b      	mov	r3, r1
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80019e6:	7afb      	ldrb	r3, [r7, #11]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d011      	beq.n	8001a10 <HAL_EXTI_RegisterCallback+0x3c>
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	dc13      	bgt.n	8001a18 <HAL_EXTI_RegisterCallback+0x44>
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_EXTI_RegisterCallback+0x26>
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d007      	beq.n	8001a08 <HAL_EXTI_RegisterCallback+0x34>
 80019f8:	e00e      	b.n	8001a18 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	609a      	str	r2, [r3, #8]
      break;
 8001a06:	e00a      	b.n	8001a1e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	605a      	str	r2, [r3, #4]
      break;
 8001a0e:	e006      	b.n	8001a1e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	609a      	str	r2, [r3, #8]
      break;
 8001a16:	e002      	b.n	8001a1e <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8001a1c:	bf00      	nop
  }

  return status;
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e003      	b.n	8001a48 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001a46:	2300      	movs	r3, #0
  }
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0c1b      	lsrs	r3, r3, #16
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	2201      	movs	r2, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	015a      	lsls	r2, r3, #5
 8001a7c:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <HAL_EXTI_IRQHandler+0x88>)
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	015a      	lsls	r2, r3, #5
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <HAL_EXTI_IRQHandler+0x8c>)
 8001aac:	4413      	add	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d009      	beq.n	8001ad4 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	4798      	blx	r3
    }
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	4402200c 	.word	0x4402200c
 8001ae0:	44022010 	.word	0x44022010

08001ae4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001af2:	e142      	b.n	8001d7a <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8134 	beq.w	8001d74 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x38>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b12      	cmp	r3, #18
 8001b1a:	d125      	bne.n	8001b68 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	08da      	lsrs	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3208      	adds	r2, #8
 8001b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b28:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	f003 020f 	and.w	r2, r3, #15
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	6979      	ldr	r1, [r7, #20]
 8001b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d00b      	beq.n	8001bbc <HAL_GPIO_Init+0xd8>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d007      	beq.n	8001bbc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb0:	2b11      	cmp	r3, #17
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b12      	cmp	r3, #18
 8001bba:	d130      	bne.n	8001c1e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f003 0201 	and.w	r2, r3, #1
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d109      	bne.n	8001c3e <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d11b      	bne.n	8001c6e <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d017      	beq.n	8001c6e <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	4013      	ands	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d07c      	beq.n	8001d74 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001c7a:	4a47      	ldr	r2, [pc, #284]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3318      	adds	r3, #24
 8001c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c86:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0a9a      	lsrs	r2, r3, #10
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8001d9c <HAL_GPIO_Init+0x2b8>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	f002 0203 	and.w	r2, r2, #3
 8001cac:	00d2      	lsls	r2, r2, #3
 8001cae:	4093      	lsls	r3, r2
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001cb6:	4938      	ldr	r1, [pc, #224]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3318      	adds	r3, #24
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001cc4:	4b34      	ldr	r3, [pc, #208]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001cee:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001d12:	4a21      	ldr	r2, [pc, #132]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001d18:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d1e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4013      	ands	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001d3e:	4a16      	ldr	r2, [pc, #88]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001d46:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d4c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4013      	ands	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	3301      	adds	r3, #1
 8001d78:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f47f aeb5 	bne.w	8001af4 <HAL_GPIO_Init+0x10>
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	bf00      	nop
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	44022000 	.word	0x44022000
 8001d9c:	002f7f7f 	.word	0x002f7f7f

08001da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
 8001dac:	4613      	mov	r3, r2
 8001dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001db0:	787b      	ldrb	r3, [r7, #1]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4013      	ands	r3, r2
 8001de8:	041a      	lsls	r2, r3, #16
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43d9      	mvns	r1, r3
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	400b      	ands	r3, r1
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	619a      	str	r2, [r3, #24]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d006      	beq.n	8001e28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e4c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f814 	bl	8001e50 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001e34:	4a05      	ldr	r2, [pc, #20]	@ (8001e4c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 f812 	bl	8001e66 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	44022000 	.word	0x44022000

08001e50 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f000 bc28 	b.w	80026e0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e90:	4b94      	ldr	r3, [pc, #592]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	f003 0318 	and.w	r3, r3, #24
 8001e98:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001e9a:	4b92      	ldr	r3, [pc, #584]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d05b      	beq.n	8001f68 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d005      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x46>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	2b18      	cmp	r3, #24
 8001eba:	d114      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d111      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f000 bc08 	b.w	80026e0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001ed0:	4b84      	ldr	r3, [pc, #528]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	041b      	lsls	r3, r3, #16
 8001ede:	4981      	ldr	r1, [pc, #516]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001ee4:	e040      	b.n	8001f68 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d023      	beq.n	8001f36 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001eee:	4b7d      	ldr	r3, [pc, #500]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a7c      	ldr	r2, [pc, #496]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7ff fbcf 	bl	800169c <HAL_GetTick>
 8001efe:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001f02:	f7ff fbcb 	bl	800169c <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e3e5      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001f14:	4b73      	ldr	r3, [pc, #460]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001f20:	4b70      	ldr	r3, [pc, #448]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	041b      	lsls	r3, r3, #16
 8001f2e:	496d      	ldr	r1, [pc, #436]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	618b      	str	r3, [r1, #24]
 8001f34:	e018      	b.n	8001f68 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f36:	4b6b      	ldr	r3, [pc, #428]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a6a      	ldr	r2, [pc, #424]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff fbab 	bl	800169c <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001f4a:	f7ff fba7 	bl	800169c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e3c1      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001f5c:	4b61      	ldr	r3, [pc, #388]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80a0 	beq.w	80020b6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	2b10      	cmp	r3, #16
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_OscConfig+0x10c>
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	2b18      	cmp	r3, #24
 8001f80:	d109      	bne.n	8001f96 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f040 8092 	bne.w	80020b6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e3a4      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x132>
 8001fa0:	4b50      	ldr	r3, [pc, #320]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a4f      	ldr	r2, [pc, #316]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	e058      	b.n	8002060 <HAL_RCC_OscConfig+0x1e4>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d112      	bne.n	8001fdc <HAL_RCC_OscConfig+0x160>
 8001fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a4a      	ldr	r2, [pc, #296]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001fbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b48      	ldr	r3, [pc, #288]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a47      	ldr	r2, [pc, #284]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001fc8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b45      	ldr	r3, [pc, #276]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a44      	ldr	r2, [pc, #272]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001fd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e041      	b.n	8002060 <HAL_RCC_OscConfig+0x1e4>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fe4:	d112      	bne.n	800200c <HAL_RCC_OscConfig+0x190>
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a3e      	ldr	r2, [pc, #248]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a3b      	ldr	r2, [pc, #236]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8001ff8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b39      	ldr	r3, [pc, #228]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a38      	ldr	r2, [pc, #224]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e029      	b.n	8002060 <HAL_RCC_OscConfig+0x1e4>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002014:	d112      	bne.n	800203c <HAL_RCC_OscConfig+0x1c0>
 8002016:	4b33      	ldr	r3, [pc, #204]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a32      	ldr	r2, [pc, #200]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b30      	ldr	r3, [pc, #192]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2f      	ldr	r2, [pc, #188]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8002028:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	4b2d      	ldr	r3, [pc, #180]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a2c      	ldr	r2, [pc, #176]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e011      	b.n	8002060 <HAL_RCC_OscConfig+0x1e4>
 800203c:	4b29      	ldr	r3, [pc, #164]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a28      	ldr	r2, [pc, #160]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8002042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b26      	ldr	r3, [pc, #152]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a25      	ldr	r2, [pc, #148]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 800204e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b23      	ldr	r3, [pc, #140]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a22      	ldr	r2, [pc, #136]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 800205a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800205e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d013      	beq.n	8002090 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7ff fb18 	bl	800169c <HAL_GetTick>
 800206c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002070:	f7ff fb14 	bl	800169c <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	@ 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e32e      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002082:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x1f4>
 800208e:	e012      	b.n	80020b6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7ff fb04 	bl	800169c <HAL_GetTick>
 8002094:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002098:	f7ff fb00 	bl	800169c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	@ 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e31a      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020aa:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <HAL_RCC_OscConfig+0x268>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 809a 	beq.w	80021f8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_RCC_OscConfig+0x25a>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	2b18      	cmp	r3, #24
 80020ce:	d149      	bne.n	8002164 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d146      	bne.n	8002164 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e2fe      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
 80020e2:	bf00      	nop
 80020e4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d11c      	bne.n	8002128 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80020ee:	4b9a      	ldr	r3, [pc, #616]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0218 	and.w	r2, r3, #24
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d014      	beq.n	8002128 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80020fe:	4b96      	ldr	r3, [pc, #600]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 0218 	bic.w	r2, r3, #24
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	4993      	ldr	r1, [pc, #588]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002110:	f000 fdd0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002114:	4b91      	ldr	r3, [pc, #580]	@ (800235c <HAL_RCC_OscConfig+0x4e0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fa49 	bl	80015b0 <HAL_InitTick>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e2db      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff fab8 	bl	800169c <HAL_GetTick>
 800212c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002130:	f7ff fab4 	bl	800169c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e2ce      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002142:	4b85      	ldr	r3, [pc, #532]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800214e:	4b82      	ldr	r3, [pc, #520]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	041b      	lsls	r3, r3, #16
 800215c:	497e      	ldr	r1, [pc, #504]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002162:	e049      	b.n	80021f8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d02c      	beq.n	80021c6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800216c:	4b7a      	ldr	r3, [pc, #488]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 0218 	bic.w	r2, r3, #24
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	4977      	ldr	r1, [pc, #476]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800217e:	4b76      	ldr	r3, [pc, #472]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a75      	ldr	r2, [pc, #468]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7ff fa87 	bl	800169c <HAL_GetTick>
 800218e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002192:	f7ff fa83 	bl	800169c <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e29d      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80021b0:	4b69      	ldr	r3, [pc, #420]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	041b      	lsls	r3, r3, #16
 80021be:	4966      	ldr	r1, [pc, #408]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	610b      	str	r3, [r1, #16]
 80021c4:	e018      	b.n	80021f8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c6:	4b64      	ldr	r3, [pc, #400]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a63      	ldr	r2, [pc, #396]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7ff fa63 	bl	800169c <HAL_GetTick>
 80021d6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80021da:	f7ff fa5f 	bl	800169c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e279      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ec:	4b5a      	ldr	r3, [pc, #360]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d03c      	beq.n	800227e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01c      	beq.n	8002246 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220c:	4b52      	ldr	r3, [pc, #328]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 800220e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002212:	4a51      	ldr	r2, [pc, #324]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002214:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002218:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221c:	f7ff fa3e 	bl	800169c <HAL_GetTick>
 8002220:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002224:	f7ff fa3a 	bl	800169c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e254      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002236:	4b48      	ldr	r3, [pc, #288]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800223c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ef      	beq.n	8002224 <HAL_RCC_OscConfig+0x3a8>
 8002244:	e01b      	b.n	800227e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002246:	4b44      	ldr	r3, [pc, #272]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800224c:	4a42      	ldr	r2, [pc, #264]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 800224e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002252:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002256:	f7ff fa21 	bl	800169c <HAL_GetTick>
 800225a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800225e:	f7ff fa1d 	bl	800169c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e237      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002270:	4b39      	ldr	r3, [pc, #228]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002276:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1ef      	bne.n	800225e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 80d2 	beq.w	8002430 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800228c:	4b34      	ldr	r3, [pc, #208]	@ (8002360 <HAL_RCC_OscConfig+0x4e4>)
 800228e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d118      	bne.n	80022ca <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002298:	4b31      	ldr	r3, [pc, #196]	@ (8002360 <HAL_RCC_OscConfig+0x4e4>)
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	4a30      	ldr	r2, [pc, #192]	@ (8002360 <HAL_RCC_OscConfig+0x4e4>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a4:	f7ff f9fa 	bl	800169c <HAL_GetTick>
 80022a8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ac:	f7ff f9f6 	bl	800169c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e210      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80022be:	4b28      	ldr	r3, [pc, #160]	@ (8002360 <HAL_RCC_OscConfig+0x4e4>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <HAL_RCC_OscConfig+0x468>
 80022d2:	4b21      	ldr	r3, [pc, #132]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 80022d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022e2:	e074      	b.n	80023ce <HAL_RCC_OscConfig+0x552>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d118      	bne.n	800231e <HAL_RCC_OscConfig+0x4a2>
 80022ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 80022ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022f2:	4a19      	ldr	r2, [pc, #100]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022fc:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 80022fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002302:	4a15      	ldr	r2, [pc, #84]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002304:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002308:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800230c:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 800230e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002312:	4a11      	ldr	r2, [pc, #68]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800231c:	e057      	b.n	80023ce <HAL_RCC_OscConfig+0x552>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b05      	cmp	r3, #5
 8002324:	d11e      	bne.n	8002364 <HAL_RCC_OscConfig+0x4e8>
 8002326:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800232c:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002336:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800233c:	4a06      	ldr	r2, [pc, #24]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 800233e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002342:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002346:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800234c:	4a02      	ldr	r2, [pc, #8]	@ (8002358 <HAL_RCC_OscConfig+0x4dc>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002356:	e03a      	b.n	80023ce <HAL_RCC_OscConfig+0x552>
 8002358:	44020c00 	.word	0x44020c00
 800235c:	20000018 	.word	0x20000018
 8002360:	44020800 	.word	0x44020800
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b85      	cmp	r3, #133	@ 0x85
 800236a:	d118      	bne.n	800239e <HAL_RCC_OscConfig+0x522>
 800236c:	4ba2      	ldr	r3, [pc, #648]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 800236e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002372:	4aa1      	ldr	r2, [pc, #644]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800237c:	4b9e      	ldr	r3, [pc, #632]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 800237e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002382:	4a9d      	ldr	r2, [pc, #628]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 8002384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002388:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800238c:	4b9a      	ldr	r3, [pc, #616]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 800238e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002392:	4a99      	ldr	r2, [pc, #612]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800239c:	e017      	b.n	80023ce <HAL_RCC_OscConfig+0x552>
 800239e:	4b96      	ldr	r3, [pc, #600]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80023a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023a4:	4a94      	ldr	r2, [pc, #592]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023ae:	4b92      	ldr	r3, [pc, #584]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80023b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023b4:	4a90      	ldr	r2, [pc, #576]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80023b6:	f023 0304 	bic.w	r3, r3, #4
 80023ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023be:	4b8e      	ldr	r3, [pc, #568]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80023c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023c4:	4a8c      	ldr	r2, [pc, #560]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80023c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d016      	beq.n	8002404 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7ff f961 	bl	800169c <HAL_GetTick>
 80023da:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7ff f95d 	bl	800169c <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e175      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f4:	4b80      	ldr	r3, [pc, #512]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80023f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0ed      	beq.n	80023de <HAL_RCC_OscConfig+0x562>
 8002402:	e015      	b.n	8002430 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7ff f94a 	bl	800169c <HAL_GetTick>
 8002408:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800240a:	e00a      	b.n	8002422 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7ff f946 	bl	800169c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e15e      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002422:	4b75      	ldr	r3, [pc, #468]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 8002424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ed      	bne.n	800240c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b00      	cmp	r3, #0
 800243a:	d036      	beq.n	80024aa <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	2b00      	cmp	r3, #0
 8002442:	d019      	beq.n	8002478 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002444:	4b6c      	ldr	r3, [pc, #432]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a6b      	ldr	r2, [pc, #428]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 800244a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800244e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7ff f924 	bl	800169c <HAL_GetTick>
 8002454:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002458:	f7ff f920 	bl	800169c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e13a      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800246a:	4b63      	ldr	r3, [pc, #396]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x5dc>
 8002476:	e018      	b.n	80024aa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002478:	4b5f      	ldr	r3, [pc, #380]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a5e      	ldr	r2, [pc, #376]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 800247e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002482:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7ff f90a 	bl	800169c <HAL_GetTick>
 8002488:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800248c:	f7ff f906 	bl	800169c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e120      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800249e:	4b56      	ldr	r3, [pc, #344]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8115 	beq.w	80026de <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b18      	cmp	r3, #24
 80024b8:	f000 80af 	beq.w	800261a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	f040 8086 	bne.w	80025d2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80024c6:	4b4c      	ldr	r3, [pc, #304]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a4b      	ldr	r2, [pc, #300]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80024cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7ff f8e3 	bl	800169c <HAL_GetTick>
 80024d6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80024da:	f7ff f8df 	bl	800169c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e0f9      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80024ec:	4b42      	ldr	r3, [pc, #264]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80024f8:	4b3f      	ldr	r3, [pc, #252]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002500:	f023 0303 	bic.w	r3, r3, #3
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800250c:	0212      	lsls	r2, r2, #8
 800250e:	430a      	orrs	r2, r1
 8002510:	4939      	ldr	r1, [pc, #228]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 8002512:	4313      	orrs	r3, r2
 8002514:	628b      	str	r3, [r1, #40]	@ 0x28
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251a:	3b01      	subs	r3, #1
 800251c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002524:	3b01      	subs	r3, #1
 8002526:	025b      	lsls	r3, r3, #9
 8002528:	b29b      	uxth	r3, r3
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002530:	3b01      	subs	r3, #1
 8002532:	041b      	lsls	r3, r3, #16
 8002534:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	3b01      	subs	r3, #1
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002546:	492c      	ldr	r1, [pc, #176]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 8002548:	4313      	orrs	r3, r2
 800254a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800254c:	4b2a      	ldr	r3, [pc, #168]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 800254e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002550:	4a29      	ldr	r2, [pc, #164]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 8002552:	f023 0310 	bic.w	r3, r3, #16
 8002556:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255c:	4a26      	ldr	r2, [pc, #152]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002562:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 8002564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002566:	4a24      	ldr	r2, [pc, #144]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 8002568:	f043 0310 	orr.w	r3, r3, #16
 800256c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800256e:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 8002570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002572:	f023 020c 	bic.w	r2, r3, #12
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	491f      	ldr	r1, [pc, #124]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 800257c:	4313      	orrs	r3, r2
 800257e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002580:	4b1d      	ldr	r3, [pc, #116]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	f023 0220 	bic.w	r2, r3, #32
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258c:	491a      	ldr	r1, [pc, #104]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 800258e:	4313      	orrs	r3, r2
 8002590:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002592:	4b19      	ldr	r3, [pc, #100]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 8002594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002596:	4a18      	ldr	r2, [pc, #96]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800259e:	4b16      	ldr	r3, [pc, #88]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a15      	ldr	r2, [pc, #84]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80025a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7ff f877 	bl	800169c <HAL_GetTick>
 80025ae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80025b2:	f7ff f873 	bl	800169c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e08d      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80025c4:	4b0c      	ldr	r3, [pc, #48]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x736>
 80025d0:	e085      	b.n	80026de <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80025d2:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a08      	ldr	r2, [pc, #32]	@ (80025f8 <HAL_RCC_OscConfig+0x77c>)
 80025d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7ff f85d 	bl	800169c <HAL_GetTick>
 80025e2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80025e6:	f7ff f859 	bl	800169c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d903      	bls.n	80025fc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e073      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
 80025f8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80025fc:	4b3a      	ldr	r3, [pc, #232]	@ (80026e8 <HAL_RCC_OscConfig+0x86c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1ee      	bne.n	80025e6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002608:	4b37      	ldr	r3, [pc, #220]	@ (80026e8 <HAL_RCC_OscConfig+0x86c>)
 800260a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260c:	4a36      	ldr	r2, [pc, #216]	@ (80026e8 <HAL_RCC_OscConfig+0x86c>)
 800260e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002612:	f023 0303 	bic.w	r3, r3, #3
 8002616:	6293      	str	r3, [r2, #40]	@ 0x28
 8002618:	e061      	b.n	80026de <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800261a:	4b33      	ldr	r3, [pc, #204]	@ (80026e8 <HAL_RCC_OscConfig+0x86c>)
 800261c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002620:	4b31      	ldr	r3, [pc, #196]	@ (80026e8 <HAL_RCC_OscConfig+0x86c>)
 8002622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002624:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262a:	2b01      	cmp	r3, #1
 800262c:	d031      	beq.n	8002692 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f003 0203 	and.w	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d12a      	bne.n	8002692 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d122      	bne.n	8002692 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002656:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d11a      	bne.n	8002692 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	0a5b      	lsrs	r3, r3, #9
 8002660:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002668:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d111      	bne.n	8002692 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	0c1b      	lsrs	r3, r3, #16
 8002672:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d108      	bne.n	8002692 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	0e1b      	lsrs	r3, r3, #24
 8002684:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d001      	beq.n	8002696 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e024      	b.n	80026e0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002696:	4b14      	ldr	r3, [pc, #80]	@ (80026e8 <HAL_RCC_OscConfig+0x86c>)
 8002698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269a:	08db      	lsrs	r3, r3, #3
 800269c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d01a      	beq.n	80026de <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80026a8:	4b0f      	ldr	r3, [pc, #60]	@ (80026e8 <HAL_RCC_OscConfig+0x86c>)
 80026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ac:	4a0e      	ldr	r2, [pc, #56]	@ (80026e8 <HAL_RCC_OscConfig+0x86c>)
 80026ae:	f023 0310 	bic.w	r3, r3, #16
 80026b2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fff2 	bl	800169c <HAL_GetTick>
 80026b8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80026ba:	bf00      	nop
 80026bc:	f7fe ffee 	bl	800169c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d0f9      	beq.n	80026bc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026cc:	4a06      	ldr	r2, [pc, #24]	@ (80026e8 <HAL_RCC_OscConfig+0x86c>)
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80026d2:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <HAL_RCC_OscConfig+0x86c>)
 80026d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d6:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <HAL_RCC_OscConfig+0x86c>)
 80026d8:	f043 0310 	orr.w	r3, r3, #16
 80026dc:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3720      	adds	r7, #32
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	44020c00 	.word	0x44020c00

080026ec <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e19e      	b.n	8002a3e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002700:	4b83      	ldr	r3, [pc, #524]	@ (8002910 <HAL_RCC_ClockConfig+0x224>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d910      	bls.n	8002730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b80      	ldr	r3, [pc, #512]	@ (8002910 <HAL_RCC_ClockConfig+0x224>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 020f 	bic.w	r2, r3, #15
 8002716:	497e      	ldr	r1, [pc, #504]	@ (8002910 <HAL_RCC_ClockConfig+0x224>)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b7c      	ldr	r3, [pc, #496]	@ (8002910 <HAL_RCC_ClockConfig+0x224>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e186      	b.n	8002a3e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d012      	beq.n	8002762 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	4b74      	ldr	r3, [pc, #464]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800274a:	429a      	cmp	r2, r3
 800274c:	d909      	bls.n	8002762 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800274e:	4b71      	ldr	r3, [pc, #452]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	496d      	ldr	r1, [pc, #436]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 800275e:	4313      	orrs	r3, r2
 8002760:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d012      	beq.n	8002794 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	4b68      	ldr	r3, [pc, #416]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800277c:	429a      	cmp	r2, r3
 800277e:	d909      	bls.n	8002794 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002780:	4b64      	ldr	r3, [pc, #400]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	4961      	ldr	r1, [pc, #388]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 8002790:	4313      	orrs	r3, r2
 8002792:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d010      	beq.n	80027c2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	4b5b      	ldr	r3, [pc, #364]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d908      	bls.n	80027c2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80027b0:	4b58      	ldr	r3, [pc, #352]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4955      	ldr	r1, [pc, #340]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d010      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	4b50      	ldr	r3, [pc, #320]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	429a      	cmp	r2, r3
 80027dc:	d908      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80027de:	4b4d      	ldr	r3, [pc, #308]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f023 020f 	bic.w	r2, r3, #15
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	494a      	ldr	r1, [pc, #296]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8093 	beq.w	8002924 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002806:	4b43      	ldr	r3, [pc, #268]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d121      	bne.n	8002856 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e113      	b.n	8002a3e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281e:	4b3d      	ldr	r3, [pc, #244]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d115      	bne.n	8002856 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e107      	b.n	8002a3e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002836:	4b37      	ldr	r3, [pc, #220]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e0fb      	b.n	8002a3e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002846:	4b33      	ldr	r3, [pc, #204]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e0f3      	b.n	8002a3e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002856:	4b2f      	ldr	r3, [pc, #188]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f023 0203 	bic.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	492c      	ldr	r1, [pc, #176]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 8002864:	4313      	orrs	r3, r2
 8002866:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002868:	f7fe ff18 	bl	800169c <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b03      	cmp	r3, #3
 8002874:	d112      	bne.n	800289c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002876:	e00a      	b.n	800288e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002878:	f7fe ff10 	bl	800169c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e0d7      	b.n	8002a3e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800288e:	4b21      	ldr	r3, [pc, #132]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f003 0318 	and.w	r3, r3, #24
 8002896:	2b18      	cmp	r3, #24
 8002898:	d1ee      	bne.n	8002878 <HAL_RCC_ClockConfig+0x18c>
 800289a:	e043      	b.n	8002924 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d112      	bne.n	80028ca <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a4:	e00a      	b.n	80028bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80028a6:	f7fe fef9 	bl	800169c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e0c0      	b.n	8002a3e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028bc:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f003 0318 	and.w	r3, r3, #24
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d1ee      	bne.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
 80028c8:	e02c      	b.n	8002924 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d122      	bne.n	8002918 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7fe fee2 	bl	800169c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e0a9      	b.n	8002a3e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80028ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <HAL_RCC_ClockConfig+0x228>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 0318 	and.w	r3, r3, #24
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d1ee      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x1e8>
 80028f6:	e015      	b.n	8002924 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7fe fed0 	bl	800169c <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d906      	bls.n	8002918 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e097      	b.n	8002a3e <HAL_RCC_ClockConfig+0x352>
 800290e:	bf00      	nop
 8002910:	40022000 	.word	0x40022000
 8002914:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002918:	4b4b      	ldr	r3, [pc, #300]	@ (8002a48 <HAL_RCC_ClockConfig+0x35c>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f003 0318 	and.w	r3, r3, #24
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e9      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d010      	beq.n	8002952 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	4b44      	ldr	r3, [pc, #272]	@ (8002a48 <HAL_RCC_ClockConfig+0x35c>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	429a      	cmp	r2, r3
 800293e:	d208      	bcs.n	8002952 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002940:	4b41      	ldr	r3, [pc, #260]	@ (8002a48 <HAL_RCC_ClockConfig+0x35c>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f023 020f 	bic.w	r2, r3, #15
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	493e      	ldr	r1, [pc, #248]	@ (8002a48 <HAL_RCC_ClockConfig+0x35c>)
 800294e:	4313      	orrs	r3, r2
 8002950:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002952:	4b3e      	ldr	r3, [pc, #248]	@ (8002a4c <HAL_RCC_ClockConfig+0x360>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d210      	bcs.n	8002982 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002960:	4b3a      	ldr	r3, [pc, #232]	@ (8002a4c <HAL_RCC_ClockConfig+0x360>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 020f 	bic.w	r2, r3, #15
 8002968:	4938      	ldr	r1, [pc, #224]	@ (8002a4c <HAL_RCC_ClockConfig+0x360>)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002970:	4b36      	ldr	r3, [pc, #216]	@ (8002a4c <HAL_RCC_ClockConfig+0x360>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e05d      	b.n	8002a3e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b00      	cmp	r3, #0
 800298c:	d010      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	4b2d      	ldr	r3, [pc, #180]	@ (8002a48 <HAL_RCC_ClockConfig+0x35c>)
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800299a:	429a      	cmp	r2, r3
 800299c:	d208      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800299e:	4b2a      	ldr	r3, [pc, #168]	@ (8002a48 <HAL_RCC_ClockConfig+0x35c>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	4927      	ldr	r1, [pc, #156]	@ (8002a48 <HAL_RCC_ClockConfig+0x35c>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d012      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	4b21      	ldr	r3, [pc, #132]	@ (8002a48 <HAL_RCC_ClockConfig+0x35c>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d209      	bcs.n	80029e2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80029ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <HAL_RCC_ClockConfig+0x35c>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	491a      	ldr	r1, [pc, #104]	@ (8002a48 <HAL_RCC_ClockConfig+0x35c>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d012      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <HAL_RCC_ClockConfig+0x35c>)
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d209      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <HAL_RCC_ClockConfig+0x35c>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	490e      	ldr	r1, [pc, #56]	@ (8002a48 <HAL_RCC_ClockConfig+0x35c>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002a14:	f000 f822 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <HAL_RCC_ClockConfig+0x35c>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	490b      	ldr	r1, [pc, #44]	@ (8002a50 <HAL_RCC_ClockConfig+0x364>)
 8002a24:	5ccb      	ldrb	r3, [r1, r3]
 8002a26:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <HAL_RCC_ClockConfig+0x368>)
 8002a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a58 <HAL_RCC_ClockConfig+0x36c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe fdbc 	bl	80015b0 <HAL_InitTick>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002a3c:	7afb      	ldrb	r3, [r7, #11]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	44020c00 	.word	0x44020c00
 8002a4c:	40022000 	.word	0x40022000
 8002a50:	08009194 	.word	0x08009194
 8002a54:	20000000 	.word	0x20000000
 8002a58:	20000018 	.word	0x20000018

08002a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	@ 0x24
 8002a60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002a62:	4b8c      	ldr	r3, [pc, #560]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 0318 	and.w	r3, r3, #24
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d102      	bne.n	8002a74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002a6e:	4b8a      	ldr	r3, [pc, #552]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e107      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a74:	4b87      	ldr	r3, [pc, #540]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f003 0318 	and.w	r3, r3, #24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d112      	bne.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002a80:	4b84      	ldr	r3, [pc, #528]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d009      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002a8c:	4b81      	ldr	r3, [pc, #516]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	4a81      	ldr	r2, [pc, #516]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x240>)
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e0f1      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002aa0:	4b7e      	ldr	r3, [pc, #504]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x240>)
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	e0ee      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa6:	4b7b      	ldr	r3, [pc, #492]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f003 0318 	and.w	r3, r3, #24
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d102      	bne.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x244>)
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	e0e5      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab8:	4b76      	ldr	r3, [pc, #472]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f003 0318 	and.w	r3, r3, #24
 8002ac0:	2b18      	cmp	r3, #24
 8002ac2:	f040 80dd 	bne.w	8002c80 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002ac6:	4b73      	ldr	r3, [pc, #460]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002ad0:	4b70      	ldr	r3, [pc, #448]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ada:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002adc:	4b6d      	ldr	r3, [pc, #436]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002ae8:	4b6a      	ldr	r3, [pc, #424]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002aec:	08db      	lsrs	r3, r3, #3
 8002aee:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	fb02 f303 	mul.w	r3, r2, r3
 8002af8:	ee07 3a90 	vmov	s15, r3
 8002afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b00:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80b7 	beq.w	8002c7a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d003      	beq.n	8002b1a <HAL_RCC_GetSysClockFreq+0xbe>
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d056      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x16a>
 8002b18:	e077      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002b1a:	4b5e      	ldr	r3, [pc, #376]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0320 	and.w	r3, r3, #32
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d02d      	beq.n	8002b82 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002b26:	4b5b      	ldr	r3, [pc, #364]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	08db      	lsrs	r3, r3, #3
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	4a5a      	ldr	r2, [pc, #360]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x240>)
 8002b32:	fa22 f303 	lsr.w	r3, r2, r3
 8002b36:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	ee07 3a90 	vmov	s15, r3
 8002b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b50:	4b50      	ldr	r3, [pc, #320]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b58:	ee07 3a90 	vmov	s15, r3
 8002b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b60:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b64:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002ca4 <HAL_RCC_GetSysClockFreq+0x248>
 8002b68:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b74:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002b80:	e065      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	ee07 3a90 	vmov	s15, r3
 8002b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b8c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002ca8 <HAL_RCC_GetSysClockFreq+0x24c>
 8002b90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b94:	4b3f      	ldr	r3, [pc, #252]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b9c:	ee07 3a90 	vmov	s15, r3
 8002ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ba4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ba8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002ca4 <HAL_RCC_GetSysClockFreq+0x248>
 8002bac:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002bc4:	e043      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002cac <HAL_RCC_GetSysClockFreq+0x250>
 8002bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002be8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bec:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002ca4 <HAL_RCC_GetSysClockFreq+0x248>
 8002bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c04:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002c08:	e021      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	ee07 3a90 	vmov	s15, r3
 8002c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c14:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002cb0 <HAL_RCC_GetSysClockFreq+0x254>
 8002c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c24:	ee07 3a90 	vmov	s15, r3
 8002c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c30:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002ca4 <HAL_RCC_GetSysClockFreq+0x248>
 8002c34:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c48:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002c4c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002c4e:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c52:	0a5b      	lsrs	r3, r3, #9
 8002c54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c58:	3301      	adds	r3, #1
 8002c5a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c66:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c72:	ee17 3a90 	vmov	r3, s15
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	e004      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	e001      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002c80:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x240>)
 8002c82:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002c84:	69fb      	ldr	r3, [r7, #28]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3724      	adds	r7, #36	@ 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	44020c00 	.word	0x44020c00
 8002c98:	003d0900 	.word	0x003d0900
 8002c9c:	03d09000 	.word	0x03d09000
 8002ca0:	016e3600 	.word	0x016e3600
 8002ca4:	46000000 	.word	0x46000000
 8002ca8:	4c742400 	.word	0x4c742400
 8002cac:	4bb71b00 	.word	0x4bb71b00
 8002cb0:	4a742400 	.word	0x4a742400

08002cb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002cb8:	f7ff fed0 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002cc2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002cc6:	4907      	ldr	r1, [pc, #28]	@ (8002ce4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002cc8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002cca:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002cce:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd2:	4a05      	ldr	r2, [pc, #20]	@ (8002ce8 <HAL_RCC_GetHCLKFreq+0x34>)
 8002cd4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002cd6:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <HAL_RCC_GetHCLKFreq+0x34>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	44020c00 	.word	0x44020c00
 8002ce4:	08009194 	.word	0x08009194
 8002ce8:	20000000 	.word	0x20000000

08002cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002cf0:	f7ff ffe0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	4904      	ldr	r1, [pc, #16]	@ (8002d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d02:	5ccb      	ldrb	r3, [r1, r3]
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	44020c00 	.word	0x44020c00
 8002d14:	080091a4 	.word	0x080091a4

08002d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002d1c:	f7ff ffca 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4904      	ldr	r1, [pc, #16]	@ (8002d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	44020c00 	.word	0x44020c00
 8002d40:	080091a4 	.word	0x080091a4

08002d44 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002d48:	f7ff ffb4 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	0b1b      	lsrs	r3, r3, #12
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	4904      	ldr	r1, [pc, #16]	@ (8002d6c <HAL_RCC_GetPCLK3Freq+0x28>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	44020c00 	.word	0x44020c00
 8002d6c:	080091a4 	.word	0x080091a4

08002d70 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d74:	b0aa      	sub	sp, #168	@ 0xa8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d82:	2300      	movs	r3, #0
 8002d84:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002d88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002d94:	2500      	movs	r5, #0
 8002d96:	ea54 0305 	orrs.w	r3, r4, r5
 8002d9a:	d00b      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002d9c:	4bb8      	ldr	r3, [pc, #736]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002da2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002da6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	4ab4      	ldr	r2, [pc, #720]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dae:	430b      	orrs	r3, r1
 8002db0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002db4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f002 0801 	and.w	r8, r2, #1
 8002dc0:	f04f 0900 	mov.w	r9, #0
 8002dc4:	ea58 0309 	orrs.w	r3, r8, r9
 8002dc8:	d038      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002dca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d819      	bhi.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002ddc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dda:	bf00      	nop
 8002ddc:	08002e11 	.word	0x08002e11
 8002de0:	08002df5 	.word	0x08002df5
 8002de4:	08002e09 	.word	0x08002e09
 8002de8:	08002e11 	.word	0x08002e11
 8002dec:	08002e11 	.word	0x08002e11
 8002df0:	08002e11 	.word	0x08002e11
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002df4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002df8:	3308      	adds	r3, #8
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f001 fff2 	bl	8004de4 <RCCEx_PLL2_Config>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002e06:	e004      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002e0e:	e000      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8002e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e12:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002e1a:	4b99      	ldr	r3, [pc, #612]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e20:	f023 0107 	bic.w	r1, r3, #7
 8002e24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2a:	4a95      	ldr	r2, [pc, #596]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002e32:	e003      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e34:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002e38:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	f002 0a02 	and.w	sl, r2, #2
 8002e48:	f04f 0b00 	mov.w	fp, #0
 8002e4c:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e50:	d03c      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002e52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e58:	2b28      	cmp	r3, #40	@ 0x28
 8002e5a:	d01b      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8002e5c:	2b28      	cmp	r3, #40	@ 0x28
 8002e5e:	d815      	bhi.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d019      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d811      	bhi.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002e68:	2b18      	cmp	r3, #24
 8002e6a:	d017      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002e6c:	2b18      	cmp	r3, #24
 8002e6e:	d80d      	bhi.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d015      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d109      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 ffb0 	bl	8004de4 <RCCEx_PLL2_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002e92:	e006      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002e94:	bf00      	nop
 8002e96:	e004      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002e98:	bf00      	nop
 8002e9a:	e002      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002e9c:	bf00      	nop
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ea2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002eaa:	4b75      	ldr	r3, [pc, #468]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002eac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002eb0:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002eb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eba:	4a71      	ldr	r2, [pc, #452]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002ec2:	e003      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ec8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ecc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f002 0304 	and.w	r3, r2, #4
 8002ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ee2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	d040      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002eec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002ef6:	d01e      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8002ef8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002efc:	d817      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f02:	d01a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8002f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f08:	d811      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002f0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f0c:	d017      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002f0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f10:	d80d      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d015      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8002f16:	2b40      	cmp	r3, #64	@ 0x40
 8002f18:	d109      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f1e:	3308      	adds	r3, #8
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 ff5f 	bl	8004de4 <RCCEx_PLL2_Config>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002f34:	e006      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002f36:	bf00      	nop
 8002f38:	e004      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002f3a:	bf00      	nop
 8002f3c:	e002      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002f3e:	bf00      	nop
 8002f40:	e000      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f44:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10c      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002f4c:	4b4c      	ldr	r3, [pc, #304]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f52:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002f56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5c:	4a48      	ldr	r2, [pc, #288]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002f64:	e003      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f66:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f6a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002f7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f84:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	d043      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002f8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002f98:	d021      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002f9a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002f9e:	d81a      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002fa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fa4:	d01d      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002fa6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002faa:	d814      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002fac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fb0:	d019      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8002fb2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fb6:	d80e      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d016      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8002fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fc0:	d109      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fc6:	3308      	adds	r3, #8
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 ff0b 	bl	8004de4 <RCCEx_PLL2_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002fd4:	e00a      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002fdc:	e006      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002fde:	bf00      	nop
 8002fe0:	e004      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002fe2:	bf00      	nop
 8002fe4:	e002      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002fe6:	bf00      	nop
 8002fe8:	e000      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10c      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002ff4:	4b22      	ldr	r3, [pc, #136]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ffa:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002ffe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003004:	4a1e      	ldr	r2, [pc, #120]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003006:	430b      	orrs	r3, r1
 8003008:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800300c:	e003      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003012:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003016:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003022:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003024:	2300      	movs	r3, #0
 8003026:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003028:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800302c:	460b      	mov	r3, r1
 800302e:	4313      	orrs	r3, r2
 8003030:	d03e      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003032:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003038:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800303c:	d01b      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800303e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003042:	d814      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003048:	d017      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800304a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800304e:	d80e      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003050:	2b00      	cmp	r3, #0
 8003052:	d017      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003058:	d109      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800305a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800305e:	3308      	adds	r3, #8
 8003060:	4618      	mov	r0, r3
 8003062:	f001 febf 	bl	8004de4 <RCCEx_PLL2_Config>
 8003066:	4603      	mov	r3, r0
 8003068:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800306c:	e00b      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003074:	e007      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8003076:	bf00      	nop
 8003078:	e005      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800307a:	bf00      	nop
 800307c:	e003      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x316>
 800307e:	bf00      	nop
 8003080:	44020c00 	.word	0x44020c00
        break;
 8003084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003086:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10c      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800308e:	4ba5      	ldr	r3, [pc, #660]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003090:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003094:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003098:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	4aa1      	ldr	r2, [pc, #644]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80030a6:	e003      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80030ac:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80030bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80030be:	2300      	movs	r3, #0
 80030c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80030c2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80030c6:	460b      	mov	r3, r1
 80030c8:	4313      	orrs	r3, r2
 80030ca:	d03b      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80030cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030d6:	d01b      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80030d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030dc:	d814      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80030de:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030e2:	d017      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80030e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030e8:	d80e      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d014      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80030ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030f2:	d109      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030f8:	3308      	adds	r3, #8
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 fe72 	bl	8004de4 <RCCEx_PLL2_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003106:	e008      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800310e:	e004      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003110:	bf00      	nop
 8003112:	e002      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003114:	bf00      	nop
 8003116:	e000      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10c      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003122:	4b80      	ldr	r3, [pc, #512]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003124:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003128:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800312c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003132:	4a7c      	ldr	r2, [pc, #496]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003134:	430b      	orrs	r3, r1
 8003136:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800313a:	e003      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003140:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003144:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003150:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003152:	2300      	movs	r3, #0
 8003154:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003156:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800315a:	460b      	mov	r3, r1
 800315c:	4313      	orrs	r3, r2
 800315e:	d033      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003160:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003166:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800316a:	d015      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800316c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003170:	d80e      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d012      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003176:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800317a:	d109      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800317c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003180:	3308      	adds	r3, #8
 8003182:	4618      	mov	r0, r3
 8003184:	f001 fe2e 	bl	8004de4 <RCCEx_PLL2_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800318e:	e006      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003196:	e002      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003198:	bf00      	nop
 800319a:	e000      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800319c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800319e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80031a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80031a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80031ac:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80031b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80031b8:	430b      	orrs	r3, r1
 80031ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80031be:	e003      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031c4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80031c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d0:	2100      	movs	r1, #0
 80031d2:	6639      	str	r1, [r7, #96]	@ 0x60
 80031d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80031da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80031de:	460b      	mov	r3, r1
 80031e0:	4313      	orrs	r3, r2
 80031e2:	d033      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80031e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031ee:	d015      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80031f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031f4:	d80e      	bhi.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d012      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80031fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031fe:	d109      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003200:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003204:	3308      	adds	r3, #8
 8003206:	4618      	mov	r0, r3
 8003208:	f001 fdec 	bl	8004de4 <RCCEx_PLL2_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003212:	e006      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800321a:	e002      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800321c:	bf00      	nop
 800321e:	e000      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003220:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003222:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800322a:	4b3e      	ldr	r3, [pc, #248]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800322c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003230:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003234:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800323a:	4a3a      	ldr	r2, [pc, #232]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800323c:	430b      	orrs	r3, r1
 800323e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003242:	e003      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003244:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003248:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800324c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	2100      	movs	r1, #0
 8003256:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800325c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800325e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003262:	460b      	mov	r3, r1
 8003264:	4313      	orrs	r3, r2
 8003266:	d00e      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003268:	4b2e      	ldr	r3, [pc, #184]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	4a2d      	ldr	r2, [pc, #180]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800326e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003272:	61d3      	str	r3, [r2, #28]
 8003274:	4b2b      	ldr	r3, [pc, #172]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003276:	69d9      	ldr	r1, [r3, #28]
 8003278:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800327c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003280:	4a28      	ldr	r2, [pc, #160]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003282:	430b      	orrs	r3, r1
 8003284:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003286:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003292:	653b      	str	r3, [r7, #80]	@ 0x50
 8003294:	2300      	movs	r3, #0
 8003296:	657b      	str	r3, [r7, #84]	@ 0x54
 8003298:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800329c:	460b      	mov	r3, r1
 800329e:	4313      	orrs	r3, r2
 80032a0:	d046      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80032a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80032ac:	d021      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80032ae:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80032b2:	d81a      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80032b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b8:	d01d      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032be:	d814      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80032c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032c4:	d019      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80032c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032ca:	d80e      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d016      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80032d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032d4:	d109      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032da:	3308      	adds	r3, #8
 80032dc:	4618      	mov	r0, r3
 80032de:	f001 fd81 	bl	8004de4 <RCCEx_PLL2_Config>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80032e8:	e00a      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80032f0:	e006      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80032f2:	bf00      	nop
 80032f4:	e004      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80032f6:	bf00      	nop
 80032f8:	e002      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80032fa:	bf00      	nop
 80032fc:	e000      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80032fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003300:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10f      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003308:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800330a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800330e:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003312:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003318:	4a02      	ldr	r2, [pc, #8]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800331a:	430b      	orrs	r3, r1
 800331c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003320:	e006      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003322:	bf00      	nop
 8003324:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800332c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003330:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800333c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800333e:	2300      	movs	r3, #0
 8003340:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003342:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003346:	460b      	mov	r3, r1
 8003348:	4313      	orrs	r3, r2
 800334a:	d043      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800334c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003356:	d021      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003358:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800335c:	d81a      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800335e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003362:	d01d      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003368:	d814      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800336a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800336e:	d019      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003370:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003374:	d80e      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d016      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x638>
 800337a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800337e:	d109      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003380:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003384:	3308      	adds	r3, #8
 8003386:	4618      	mov	r0, r3
 8003388:	f001 fd2c 	bl	8004de4 <RCCEx_PLL2_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003392:	e00a      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800339a:	e006      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800339c:	bf00      	nop
 800339e:	e004      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80033a0:	bf00      	nop
 80033a2:	e002      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80033a4:	bf00      	nop
 80033a6:	e000      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80033a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10c      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80033b2:	4bb6      	ldr	r3, [pc, #728]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80033b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80033b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80033bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	4ab2      	ldr	r2, [pc, #712]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80033c4:	430b      	orrs	r3, r1
 80033c6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80033ca:	e003      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033cc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033d0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80033d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80033e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80033e2:	2300      	movs	r3, #0
 80033e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80033ea:	460b      	mov	r3, r1
 80033ec:	4313      	orrs	r3, r2
 80033ee:	d030      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80033f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033f6:	2b05      	cmp	r3, #5
 80033f8:	d80f      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d211      	bcs.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d911      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003402:	2b02      	cmp	r3, #2
 8003404:	d109      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003406:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800340a:	3308      	adds	r3, #8
 800340c:	4618      	mov	r0, r3
 800340e:	f001 fce9 	bl	8004de4 <RCCEx_PLL2_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003418:	e006      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003420:	e002      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003428:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10c      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003430:	4b96      	ldr	r3, [pc, #600]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003436:	f023 0107 	bic.w	r1, r3, #7
 800343a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800343e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003440:	4a92      	ldr	r2, [pc, #584]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003442:	430b      	orrs	r3, r1
 8003444:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003448:	e003      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800344e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003452:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	2100      	movs	r1, #0
 800345c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800345e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003462:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003464:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003468:	460b      	mov	r3, r1
 800346a:	4313      	orrs	r3, r2
 800346c:	d022      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800346e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8003478:	2b08      	cmp	r3, #8
 800347a:	d005      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003482:	e002      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003484:	bf00      	nop
 8003486:	e000      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800348a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10c      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003492:	4b7e      	ldr	r3, [pc, #504]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003498:	f023 0108 	bic.w	r1, r3, #8
 800349c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034a2:	4a7a      	ldr	r2, [pc, #488]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80034a4:	430b      	orrs	r3, r1
 80034a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80034aa:	e003      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034b0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80034c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80034c2:	2300      	movs	r3, #0
 80034c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80034c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80034ca:	460b      	mov	r3, r1
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f000 80b0 	beq.w	8003632 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80034d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034de:	f7fe f8dd 	bl	800169c <HAL_GetTick>
 80034e2:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80034e6:	e00b      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e8:	f7fe f8d8 	bl	800169c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d903      	bls.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80034fe:	e005      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003500:	4b63      	ldr	r3, [pc, #396]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0ed      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 800350c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003510:	2b00      	cmp	r3, #0
 8003512:	f040 808a 	bne.w	800362a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003516:	4b5d      	ldr	r3, [pc, #372]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800351c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003520:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003524:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d022      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x802>
 800352c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003530:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003532:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003536:	429a      	cmp	r2, r3
 8003538:	d01b      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800353a:	4b54      	ldr	r3, [pc, #336]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800353c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003540:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003544:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003548:	4b50      	ldr	r3, [pc, #320]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800354a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800354e:	4a4f      	ldr	r2, [pc, #316]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003554:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003558:	4b4c      	ldr	r3, [pc, #304]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800355a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800355e:	4a4b      	ldr	r2, [pc, #300]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003564:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003568:	4a48      	ldr	r2, [pc, #288]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800356a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800356e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003572:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d019      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357e:	f7fe f88d 	bl	800169c <HAL_GetTick>
 8003582:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003586:	e00d      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003588:	f7fe f888 	bl	800169c <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d903      	bls.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 80035a2:	e006      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a4:	4b39      	ldr	r3, [pc, #228]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0ea      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 80035b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d132      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80035ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035c8:	d10f      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80035ca:	4b30      	ldr	r3, [pc, #192]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80035d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80035de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80035e2:	4a2a      	ldr	r2, [pc, #168]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035e4:	430b      	orrs	r3, r1
 80035e6:	61d3      	str	r3, [r2, #28]
 80035e8:	e005      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x886>
 80035ea:	4b28      	ldr	r3, [pc, #160]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	4a27      	ldr	r2, [pc, #156]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80035f4:	61d3      	str	r3, [r2, #28]
 80035f6:	4b25      	ldr	r3, [pc, #148]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035fc:	4a23      	ldr	r2, [pc, #140]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003602:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003606:	4b21      	ldr	r3, [pc, #132]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003608:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800360c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003616:	4a1d      	ldr	r2, [pc, #116]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003618:	430b      	orrs	r3, r1
 800361a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800361e:	e008      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003620:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003624:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003628:	e003      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800362e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003632:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800363e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003640:	2300      	movs	r3, #0
 8003642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003644:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003648:	460b      	mov	r3, r1
 800364a:	4313      	orrs	r3, r2
 800364c:	d038      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800364e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003654:	2b30      	cmp	r3, #48	@ 0x30
 8003656:	d014      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003658:	2b30      	cmp	r3, #48	@ 0x30
 800365a:	d80e      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800365c:	2b20      	cmp	r3, #32
 800365e:	d012      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003660:	2b20      	cmp	r3, #32
 8003662:	d80a      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d015      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003668:	2b10      	cmp	r3, #16
 800366a:	d106      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800366c:	4b07      	ldr	r3, [pc, #28]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	4a06      	ldr	r2, [pc, #24]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003676:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003678:	e00d      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003680:	e009      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003682:	bf00      	nop
 8003684:	e007      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003686:	bf00      	nop
 8003688:	e005      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800368a:	bf00      	nop
 800368c:	44020c00 	.word	0x44020c00
 8003690:	44020800 	.word	0x44020800
        break;
 8003694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003696:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10c      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800369e:	4bb5      	ldr	r3, [pc, #724]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80036a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ae:	49b1      	ldr	r1, [pc, #708]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80036b6:	e003      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036bc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80036c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80036cc:	623b      	str	r3, [r7, #32]
 80036ce:	2300      	movs	r3, #0
 80036d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80036d6:	460b      	mov	r3, r1
 80036d8:	4313      	orrs	r3, r2
 80036da:	d03c      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80036dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d81d      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80036e6:	a201      	add	r2, pc, #4	@ (adr r2, 80036ec <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80036e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ec:	08003701 	.word	0x08003701
 80036f0:	0800370f 	.word	0x0800370f
 80036f4:	08003723 	.word	0x08003723
 80036f8:	0800372b 	.word	0x0800372b
 80036fc:	0800372b 	.word	0x0800372b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003700:	4b9c      	ldr	r3, [pc, #624]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003704:	4a9b      	ldr	r2, [pc, #620]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800370a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800370c:	e00e      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800370e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003712:	3308      	adds	r3, #8
 8003714:	4618      	mov	r0, r3
 8003716:	f001 fb65 	bl	8004de4 <RCCEx_PLL2_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003720:	e004      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003728:	e000      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 800372a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10c      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003734:	4b8f      	ldr	r3, [pc, #572]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003744:	498b      	ldr	r1, [pc, #556]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800374c:	e003      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003752:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003756:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800376c:	460b      	mov	r3, r1
 800376e:	4313      	orrs	r3, r2
 8003770:	d03c      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003772:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003778:	2b20      	cmp	r3, #32
 800377a:	d01f      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800377c:	2b20      	cmp	r3, #32
 800377e:	d819      	bhi.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003780:	2b18      	cmp	r3, #24
 8003782:	d01d      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003784:	2b18      	cmp	r3, #24
 8003786:	d815      	bhi.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 800378c:	2b08      	cmp	r3, #8
 800378e:	d007      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003790:	e010      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003792:	4b78      	ldr	r3, [pc, #480]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003796:	4a77      	ldr	r2, [pc, #476]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800379c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800379e:	e010      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037a4:	3308      	adds	r3, #8
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fb1c 	bl	8004de4 <RCCEx_PLL2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80037b2:	e006      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80037ba:	e002      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80037bc:	bf00      	nop
 80037be:	e000      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80037c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80037ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80037cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037d0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80037d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	4966      	ldr	r1, [pc, #408]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80037e2:	e003      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037e8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80037ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003802:	460b      	mov	r3, r1
 8003804:	4313      	orrs	r3, r2
 8003806:	d03e      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003808:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800380c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800380e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003812:	d020      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003818:	d819      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xade>
 800381a:	2bc0      	cmp	r3, #192	@ 0xc0
 800381c:	d01d      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800381e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003820:	d815      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003826:	2b40      	cmp	r3, #64	@ 0x40
 8003828:	d007      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800382a:	e010      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800382c:	4b51      	ldr	r3, [pc, #324]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800382e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003830:	4a50      	ldr	r2, [pc, #320]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003836:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003838:	e010      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800383a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800383e:	3308      	adds	r3, #8
 8003840:	4618      	mov	r0, r3
 8003842:	f001 facf 	bl	8004de4 <RCCEx_PLL2_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800385a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10c      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003864:	4b43      	ldr	r3, [pc, #268]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800386a:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800386e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003874:	493f      	ldr	r1, [pc, #252]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800387c:	e003      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003882:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003886:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	2100      	movs	r1, #0
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d038      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80038a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038ac:	d00e      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80038ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b2:	d815      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d017      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80038b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038bc:	d110      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038be:	4b2d      	ldr	r3, [pc, #180]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038c8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80038ca:	e00e      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038d0:	3308      	adds	r3, #8
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 fa86 	bl	8004de4 <RCCEx_PLL2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80038de:	e004      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80038e6:	e000      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 80038e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ea:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10c      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80038f2:	4b20      	ldr	r3, [pc, #128]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003902:	491c      	ldr	r1, [pc, #112]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800390a:	e003      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003910:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003914:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391c:	2100      	movs	r1, #0
 800391e:	6039      	str	r1, [r7, #0]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	e9d7 1200 	ldrd	r1, r2, [r7]
 800392a:	460b      	mov	r3, r1
 800392c:	4313      	orrs	r3, r2
 800392e:	d039      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003930:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003934:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003936:	2b30      	cmp	r3, #48	@ 0x30
 8003938:	d01e      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800393a:	2b30      	cmp	r3, #48	@ 0x30
 800393c:	d815      	bhi.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800393e:	2b10      	cmp	r3, #16
 8003940:	d002      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003942:	2b20      	cmp	r3, #32
 8003944:	d007      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003946:	e010      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003948:	4b0a      	ldr	r3, [pc, #40]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	4a09      	ldr	r2, [pc, #36]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800394e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003952:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003954:	e011      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003956:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800395a:	3308      	adds	r3, #8
 800395c:	4618      	mov	r0, r3
 800395e:	f001 fa41 	bl	8004de4 <RCCEx_PLL2_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003968:	e007      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003970:	e003      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003972:	bf00      	nop
 8003974:	44020c00 	.word	0x44020c00
        break;
 8003978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10c      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003982:	4b0c      	ldr	r3, [pc, #48]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003984:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003988:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800398c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003990:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003992:	4908      	ldr	r1, [pc, #32]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800399a:	e003      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039a0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 80039a4:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	37a8      	adds	r7, #168	@ 0xa8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039b2:	bf00      	nop
 80039b4:	44020c00 	.word	0x44020c00

080039b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b08b      	sub	sp, #44	@ 0x2c
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80039c0:	4bae      	ldr	r3, [pc, #696]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80039c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80039ca:	4bac      	ldr	r3, [pc, #688]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80039cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80039d4:	4ba9      	ldr	r3, [pc, #676]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80039d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d8:	0a1b      	lsrs	r3, r3, #8
 80039da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039de:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80039e0:	4ba6      	ldr	r3, [pc, #664]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80039e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80039ec:	4ba3      	ldr	r3, [pc, #652]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80039ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f0:	08db      	lsrs	r3, r3, #3
 80039f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a04:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8126 	beq.w	8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d053      	beq.n	8003abe <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d86f      	bhi.n	8003afc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d003      	beq.n	8003a2a <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d02b      	beq.n	8003a80 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003a28:	e068      	b.n	8003afc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a2a:	4b94      	ldr	r3, [pc, #592]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	08db      	lsrs	r3, r3, #3
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	4a92      	ldr	r2, [pc, #584]	@ (8003c80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003a36:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5e:	ed97 6a04 	vldr	s12, [r7, #16]
 8003a62:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003a7e:	e068      	b.n	8003b52 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003c88 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	ee07 3a90 	vmov	s15, r3
 8003a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003aa0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003aa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003abc:	e049      	b.n	8003b52 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	ee07 3a90 	vmov	s15, r3
 8003ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8003acc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ada:	ed97 6a04 	vldr	s12, [r7, #16]
 8003ade:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003afa:	e02a      	b.n	8003b52 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003afc:	4b5f      	ldr	r3, [pc, #380]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	08db      	lsrs	r3, r3, #3
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	4a5e      	ldr	r2, [pc, #376]	@ (8003c80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	ee07 3a90 	vmov	s15, r3
 8003b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	ee07 3a90 	vmov	s15, r3
 8003b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b30:	ed97 6a04 	vldr	s12, [r7, #16]
 8003b34:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003b38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003b50:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003b52:	4b4a      	ldr	r3, [pc, #296]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b5e:	d121      	bne.n	8003ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003b60:	4b46      	ldr	r3, [pc, #280]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d017      	beq.n	8003b9c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b6c:	4b43      	ldr	r3, [pc, #268]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b70:	0a5b      	lsrs	r3, r3, #9
 8003b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003b7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b82:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003b86:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b92:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	e006      	b.n	8003baa <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	e002      	b.n	8003baa <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003baa:	4b34      	ldr	r3, [pc, #208]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bb6:	d121      	bne.n	8003bfc <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003bb8:	4b30      	ldr	r3, [pc, #192]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d017      	beq.n	8003bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc8:	0c1b      	lsrs	r3, r3, #16
 8003bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003bd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bda:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003bde:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bea:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	e006      	b.n	8003c02 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	e002      	b.n	8003c02 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003c02:	4b1e      	ldr	r3, [pc, #120]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c0e:	d121      	bne.n	8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003c10:	4b1a      	ldr	r3, [pc, #104]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d017      	beq.n	8003c4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c1c:	4b17      	ldr	r3, [pc, #92]	@ (8003c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c20:	0e1b      	lsrs	r3, r3, #24
 8003c22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003c2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c32:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003c36:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c42:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003c4a:	e010      	b.n	8003c6e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
}
 8003c52:	e00c      	b.n	8003c6e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
}
 8003c5a:	e008      	b.n	8003c6e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
}
 8003c6e:	bf00      	nop
 8003c70:	372c      	adds	r7, #44	@ 0x2c
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	44020c00 	.word	0x44020c00
 8003c80:	03d09000 	.word	0x03d09000
 8003c84:	46000000 	.word	0x46000000
 8003c88:	4a742400 	.word	0x4a742400
 8003c8c:	4bb71b00 	.word	0x4bb71b00

08003c90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b08b      	sub	sp, #44	@ 0x2c
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003c98:	4bae      	ldr	r3, [pc, #696]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003ca2:	4bac      	ldr	r3, [pc, #688]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003cac:	4ba9      	ldr	r3, [pc, #676]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cb6:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003cb8:	4ba6      	ldr	r3, [pc, #664]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003cc4:	4ba3      	ldr	r3, [pc, #652]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	08db      	lsrs	r3, r3, #3
 8003cca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	fb02 f303 	mul.w	r3, r2, r3
 8003cd4:	ee07 3a90 	vmov	s15, r3
 8003cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cdc:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8126 	beq.w	8003f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d053      	beq.n	8003d96 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d86f      	bhi.n	8003dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d003      	beq.n	8003d02 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d02b      	beq.n	8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003d00:	e068      	b.n	8003dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d02:	4b94      	ldr	r3, [pc, #592]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	08db      	lsrs	r3, r3, #3
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	4a92      	ldr	r2, [pc, #584]	@ (8003f58 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d12:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	ee07 3a90 	vmov	s15, r3
 8003d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d36:	ed97 6a04 	vldr	s12, [r7, #16]
 8003d3a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d52:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003d56:	e068      	b.n	8003e2a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d62:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	ee07 3a90 	vmov	s15, r3
 8003d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d74:	ed97 6a04 	vldr	s12, [r7, #16]
 8003d78:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d90:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003d94:	e049      	b.n	8003e2a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8003da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db2:	ed97 6a04 	vldr	s12, [r7, #16]
 8003db6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003dd2:	e02a      	b.n	8003e2a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003dd4:	4b5f      	ldr	r3, [pc, #380]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	08db      	lsrs	r3, r3, #3
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	4a5e      	ldr	r2, [pc, #376]	@ (8003f58 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
 8003de4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	ee07 3a90 	vmov	s15, r3
 8003dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	ee07 3a90 	vmov	s15, r3
 8003e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e08:	ed97 6a04 	vldr	s12, [r7, #16]
 8003e0c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e24:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003e28:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e36:	d121      	bne.n	8003e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003e38:	4b46      	ldr	r3, [pc, #280]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d017      	beq.n	8003e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e44:	4b43      	ldr	r3, [pc, #268]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e48:	0a5b      	lsrs	r3, r3, #9
 8003e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8003e56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003e5e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e6a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e006      	b.n	8003e82 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e002      	b.n	8003e82 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e82:	4b34      	ldr	r3, [pc, #208]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e8e:	d121      	bne.n	8003ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003e90:	4b30      	ldr	r3, [pc, #192]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d017      	beq.n	8003ecc <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003eae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003eb6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	e006      	b.n	8003eda <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	605a      	str	r2, [r3, #4]
 8003ed2:	e002      	b.n	8003eda <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003eda:	4b1e      	ldr	r3, [pc, #120]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ee2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ee6:	d121      	bne.n	8003f2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d017      	beq.n	8003f24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ef4:	4b17      	ldr	r3, [pc, #92]	@ (8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef8:	0e1b      	lsrs	r3, r3, #24
 8003efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8003f06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003f0e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f1a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f22:	e010      	b.n	8003f46 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	609a      	str	r2, [r3, #8]
}
 8003f2a:	e00c      	b.n	8003f46 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	609a      	str	r2, [r3, #8]
}
 8003f32:	e008      	b.n	8003f46 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	609a      	str	r2, [r3, #8]
}
 8003f46:	bf00      	nop
 8003f48:	372c      	adds	r7, #44	@ 0x2c
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	44020c00 	.word	0x44020c00
 8003f58:	03d09000 	.word	0x03d09000
 8003f5c:	46000000 	.word	0x46000000
 8003f60:	4a742400 	.word	0x4a742400
 8003f64:	4bb71b00 	.word	0x4bb71b00

08003f68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08c      	sub	sp, #48	@ 0x30
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f76:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	d14b      	bne.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003f7e:	4bc4      	ldr	r3, [pc, #784]	@ (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f88:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003f8a:	4bc1      	ldr	r3, [pc, #772]	@ (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d108      	bne.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f9e:	d104      	bne.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003fa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fa6:	f000 bf14 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003faa:	4bb9      	ldr	r3, [pc, #740]	@ (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fb8:	d108      	bne.n	8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fc0:	d104      	bne.n	8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8003fc2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc8:	f000 bf03 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8003fcc:	4bb0      	ldr	r3, [pc, #704]	@ (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fd8:	d119      	bne.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8003fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fe0:	d115      	bne.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003fe2:	4bab      	ldr	r3, [pc, #684]	@ (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8003fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fee:	d30a      	bcc.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8003ff0:	4ba7      	ldr	r3, [pc, #668]	@ (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	0a1b      	lsrs	r3, r3, #8
 8003ff6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ffa:	4aa6      	ldr	r2, [pc, #664]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004002:	f000 bee6 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800400a:	f000 bee2 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004012:	f000 bede 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800401a:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 800401e:	ea52 0301 	orrs.w	r3, r2, r1
 8004022:	f000 838e 	beq.w	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8004026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800402a:	2a01      	cmp	r2, #1
 800402c:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8004030:	f080 86cc 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004038:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 800403c:	ea52 0301 	orrs.w	r3, r2, r1
 8004040:	f000 82aa 	beq.w	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004048:	2a01      	cmp	r2, #1
 800404a:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 800404e:	f080 86bd 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004056:	f1a3 0110 	sub.w	r1, r3, #16
 800405a:	ea52 0301 	orrs.w	r3, r2, r1
 800405e:	f000 8681 	beq.w	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8004062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004066:	2a01      	cmp	r2, #1
 8004068:	f173 0310 	sbcs.w	r3, r3, #16
 800406c:	f080 86ae 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004074:	1f19      	subs	r1, r3, #4
 8004076:	ea52 0301 	orrs.w	r3, r2, r1
 800407a:	f000 84b1 	beq.w	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800407e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004082:	2a01      	cmp	r2, #1
 8004084:	f173 0304 	sbcs.w	r3, r3, #4
 8004088:	f080 86a0 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800408c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004090:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8004094:	430b      	orrs	r3, r1
 8004096:	f000 85aa 	beq.w	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 800409a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800409e:	497e      	ldr	r1, [pc, #504]	@ (8004298 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80040a0:	428a      	cmp	r2, r1
 80040a2:	f173 0300 	sbcs.w	r3, r3, #0
 80040a6:	f080 8691 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80040aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ae:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80040b2:	430b      	orrs	r3, r1
 80040b4:	f000 8532 	beq.w	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80040b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040bc:	4977      	ldr	r1, [pc, #476]	@ (800429c <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80040be:	428a      	cmp	r2, r1
 80040c0:	f173 0300 	sbcs.w	r3, r3, #0
 80040c4:	f080 8682 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80040c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040cc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80040d0:	430b      	orrs	r3, r1
 80040d2:	f000 84bc 	beq.w	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 80040d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040da:	4971      	ldr	r1, [pc, #452]	@ (80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80040dc:	428a      	cmp	r2, r1
 80040de:	f173 0300 	sbcs.w	r3, r3, #0
 80040e2:	f080 8673 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80040e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ea:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80040ee:	430b      	orrs	r3, r1
 80040f0:	f000 85f2 	beq.w	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 80040f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040f8:	496a      	ldr	r1, [pc, #424]	@ (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80040fa:	428a      	cmp	r2, r1
 80040fc:	f173 0300 	sbcs.w	r3, r3, #0
 8004100:	f080 8664 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004108:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800410c:	430b      	orrs	r3, r1
 800410e:	f000 81e5 	beq.w	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8004112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004116:	4964      	ldr	r1, [pc, #400]	@ (80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8004118:	428a      	cmp	r2, r1
 800411a:	f173 0300 	sbcs.w	r3, r3, #0
 800411e:	f080 8655 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004126:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800412a:	430b      	orrs	r3, r1
 800412c:	f000 83cc 	beq.w	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8004130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004134:	495d      	ldr	r1, [pc, #372]	@ (80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8004136:	428a      	cmp	r2, r1
 8004138:	f173 0300 	sbcs.w	r3, r3, #0
 800413c:	f080 8646 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004144:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004148:	430b      	orrs	r3, r1
 800414a:	f000 8331 	beq.w	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 800414e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004152:	4957      	ldr	r1, [pc, #348]	@ (80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8004154:	428a      	cmp	r2, r1
 8004156:	f173 0300 	sbcs.w	r3, r3, #0
 800415a:	f080 8637 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800415e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004162:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004166:	430b      	orrs	r3, r1
 8004168:	f000 82bb 	beq.w	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 800416c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004170:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8004174:	f173 0300 	sbcs.w	r3, r3, #0
 8004178:	f080 8628 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800417c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004180:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004184:	430b      	orrs	r3, r1
 8004186:	f000 826d 	beq.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 800418a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800418e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8004192:	428a      	cmp	r2, r1
 8004194:	f173 0300 	sbcs.w	r3, r3, #0
 8004198:	f080 8618 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800419c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041a0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80041a4:	430b      	orrs	r3, r1
 80041a6:	f000 821e 	beq.w	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80041aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ae:	f242 0101 	movw	r1, #8193	@ 0x2001
 80041b2:	428a      	cmp	r2, r1
 80041b4:	f173 0300 	sbcs.w	r3, r3, #0
 80041b8:	f080 8608 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80041bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041c0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80041c4:	430b      	orrs	r3, r1
 80041c6:	f000 8137 	beq.w	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80041ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ce:	f241 0101 	movw	r1, #4097	@ 0x1001
 80041d2:	428a      	cmp	r2, r1
 80041d4:	f173 0300 	sbcs.w	r3, r3, #0
 80041d8:	f080 85f8 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80041dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041e0:	1f11      	subs	r1, r2, #4
 80041e2:	430b      	orrs	r3, r1
 80041e4:	f000 80d2 	beq.w	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80041e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ec:	2a05      	cmp	r2, #5
 80041ee:	f173 0300 	sbcs.w	r3, r3, #0
 80041f2:	f080 85eb 	bcs.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80041f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041fa:	1e51      	subs	r1, r2, #1
 80041fc:	430b      	orrs	r3, r1
 80041fe:	d006      	beq.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004204:	1e91      	subs	r1, r2, #2
 8004206:	430b      	orrs	r3, r1
 8004208:	d06c      	beq.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800420a:	f000 bddf 	b.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800420e:	4b20      	ldr	r3, [pc, #128]	@ (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004210:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800421a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421c:	2b00      	cmp	r3, #0
 800421e:	d104      	bne.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004220:	f7fe fd7a 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 8004224:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004226:	f000 bdd4 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800422a:	4b19      	ldr	r3, [pc, #100]	@ (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004232:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004236:	d10a      	bne.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8004238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423a:	2b01      	cmp	r3, #1
 800423c:	d107      	bne.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800423e:	f107 030c 	add.w	r3, r7, #12
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fd24 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800424c:	e048      	b.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800424e:	4b10      	ldr	r3, [pc, #64]	@ (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b02      	cmp	r3, #2
 8004258:	d10c      	bne.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800425a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425c:	2b03      	cmp	r3, #3
 800425e:	d109      	bne.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004260:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	08db      	lsrs	r3, r3, #3
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	4a12      	ldr	r2, [pc, #72]	@ (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
 8004270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004272:	e035      	b.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004274:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800427c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004280:	d11c      	bne.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004284:	2b04      	cmp	r3, #4
 8004286:	d119      	bne.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8004288:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800428a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800428c:	e028      	b.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800428e:	bf00      	nop
 8004290:	44020c00 	.word	0x44020c00
 8004294:	016e3600 	.word	0x016e3600
 8004298:	20000001 	.word	0x20000001
 800429c:	10000001 	.word	0x10000001
 80042a0:	08000001 	.word	0x08000001
 80042a4:	04000001 	.word	0x04000001
 80042a8:	00200001 	.word	0x00200001
 80042ac:	00040001 	.word	0x00040001
 80042b0:	00020001 	.word	0x00020001
 80042b4:	03d09000 	.word	0x03d09000
 80042b8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80042bc:	4b9f      	ldr	r3, [pc, #636]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80042be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d106      	bne.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80042ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042cc:	2b05      	cmp	r3, #5
 80042ce:	d103      	bne.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80042d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042d6:	e003      	b.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042dc:	f000 bd79 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80042e0:	f000 bd77 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80042e4:	4b95      	ldr	r3, [pc, #596]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80042e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80042ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042ee:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80042f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d104      	bne.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80042f6:	f7fe fcf9 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 80042fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80042fc:	f000 bd69 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004300:	4b8e      	ldr	r3, [pc, #568]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004308:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800430c:	d10a      	bne.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800430e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004310:	2b08      	cmp	r3, #8
 8004312:	d107      	bne.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004314:	f107 030c 	add.w	r3, r7, #12
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fcb9 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004322:	e031      	b.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004324:	4b85      	ldr	r3, [pc, #532]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b02      	cmp	r3, #2
 800432e:	d10c      	bne.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004332:	2b18      	cmp	r3, #24
 8004334:	d109      	bne.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004336:	4b81      	ldr	r3, [pc, #516]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	08db      	lsrs	r3, r3, #3
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	4a7f      	ldr	r2, [pc, #508]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004342:	fa22 f303 	lsr.w	r3, r2, r3
 8004346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004348:	e01e      	b.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800434a:	4b7c      	ldr	r3, [pc, #496]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004356:	d105      	bne.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8004358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435a:	2b20      	cmp	r3, #32
 800435c:	d102      	bne.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 800435e:	4b79      	ldr	r3, [pc, #484]	@ (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004362:	e011      	b.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004364:	4b75      	ldr	r3, [pc, #468]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b02      	cmp	r3, #2
 8004370:	d106      	bne.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004374:	2b28      	cmp	r3, #40	@ 0x28
 8004376:	d103      	bne.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8004378:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800437c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800437e:	e003      	b.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004384:	f000 bd25 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004388:	f000 bd23 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800438c:	4b6b      	ldr	r3, [pc, #428]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800438e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004392:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004396:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439a:	2b00      	cmp	r3, #0
 800439c:	d104      	bne.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800439e:	f7fe fca5 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 80043a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80043a4:	f000 bd15 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80043a8:	4b64      	ldr	r3, [pc, #400]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043b4:	d10a      	bne.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 80043b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b8:	2b40      	cmp	r3, #64	@ 0x40
 80043ba:	d107      	bne.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043bc:	f107 030c 	add.w	r3, r7, #12
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fc65 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ca:	e033      	b.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80043cc:	4b5b      	ldr	r3, [pc, #364]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d10c      	bne.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80043d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043da:	2bc0      	cmp	r3, #192	@ 0xc0
 80043dc:	d109      	bne.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80043de:	4b57      	ldr	r3, [pc, #348]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	08db      	lsrs	r3, r3, #3
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	4a55      	ldr	r2, [pc, #340]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80043ea:	fa22 f303 	lsr.w	r3, r2, r3
 80043ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043f0:	e020      	b.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80043f2:	4b52      	ldr	r3, [pc, #328]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043fe:	d106      	bne.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004406:	d102      	bne.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8004408:	4b4e      	ldr	r3, [pc, #312]	@ (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800440a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800440c:	e012      	b.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800440e:	4b4b      	ldr	r3, [pc, #300]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b02      	cmp	r3, #2
 800441a:	d107      	bne.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004422:	d103      	bne.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8004424:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800442a:	e003      	b.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004430:	f000 bccf 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004434:	f000 bccd 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004438:	4b40      	ldr	r3, [pc, #256]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800443a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800443e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004442:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004446:	2b00      	cmp	r3, #0
 8004448:	d104      	bne.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800444a:	f7fe fc7b 	bl	8002d44 <HAL_RCC_GetPCLK3Freq>
 800444e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004450:	f000 bcbf 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004456:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800445a:	d108      	bne.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800445c:	f107 030c 	add.w	r3, r7, #12
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff fc15 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800446a:	f000 bcb2 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800446e:	4b33      	ldr	r3, [pc, #204]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b02      	cmp	r3, #2
 8004478:	d10d      	bne.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 800447a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004480:	d109      	bne.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004482:	4b2e      	ldr	r3, [pc, #184]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	08db      	lsrs	r3, r3, #3
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	4a2c      	ldr	r2, [pc, #176]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800448e:	fa22 f303 	lsr.w	r3, r2, r3
 8004492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004494:	e020      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004496:	4b29      	ldr	r3, [pc, #164]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800449e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044a2:	d106      	bne.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80044a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044aa:	d102      	bne.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 80044ac:	4b25      	ldr	r3, [pc, #148]	@ (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80044ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044b0:	e012      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80044b2:	4b22      	ldr	r3, [pc, #136]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d107      	bne.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80044c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80044c6:	d103      	bne.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80044c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ce:	e003      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80044d4:	f000 bc7d 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80044d8:	f000 bc7b 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80044dc:	4b17      	ldr	r3, [pc, #92]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80044e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d104      	bne.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80044ee:	f7fe fbe1 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 80044f2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80044f4:	f000 bc6d 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80044f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d104      	bne.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80044fe:	f7fe faad 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8004502:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8004504:	f000 bc65 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450a:	2b02      	cmp	r3, #2
 800450c:	d108      	bne.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800450e:	f107 030c 	add.w	r3, r7, #12
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fbbc 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800451c:	f000 bc59 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004520:	4b06      	ldr	r3, [pc, #24]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004528:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800452c:	d10e      	bne.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800452e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004530:	2b03      	cmp	r3, #3
 8004532:	d10b      	bne.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8004534:	4b04      	ldr	r3, [pc, #16]	@ (8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004536:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004538:	e02c      	b.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800453a:	bf00      	nop
 800453c:	44020c00 	.word	0x44020c00
 8004540:	03d09000 	.word	0x03d09000
 8004544:	003d0900 	.word	0x003d0900
 8004548:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800454c:	4b95      	ldr	r3, [pc, #596]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b02      	cmp	r3, #2
 8004556:	d10c      	bne.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8004558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455a:	2b04      	cmp	r3, #4
 800455c:	d109      	bne.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800455e:	4b91      	ldr	r3, [pc, #580]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	08db      	lsrs	r3, r3, #3
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	4a8f      	ldr	r2, [pc, #572]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800456a:	fa22 f303 	lsr.w	r3, r2, r3
 800456e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004570:	e010      	b.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004572:	4b8c      	ldr	r3, [pc, #560]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800457a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800457e:	d105      	bne.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004582:	2b05      	cmp	r3, #5
 8004584:	d102      	bne.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8004586:	4b89      	ldr	r3, [pc, #548]	@ (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800458a:	e003      	b.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004590:	f000 bc1f 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004594:	f000 bc1d 	b.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004598:	4b82      	ldr	r3, [pc, #520]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800459a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80045a4:	4b7f      	ldr	r3, [pc, #508]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d106      	bne.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80045b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d103      	bne.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 80045b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045be:	e011      	b.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80045c0:	4b78      	ldr	r3, [pc, #480]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045ce:	d106      	bne.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 80045d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d103      	bne.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 80045d6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80045da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045dc:	e002      	b.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80045e2:	e3f6      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80045e4:	e3f5      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80045e6:	4b6f      	ldr	r3, [pc, #444]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80045ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045f0:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80045f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d103      	bne.n	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80045f8:	f7fe fb78 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 80045fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80045fe:	e3e8      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8004600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004602:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004606:	d107      	bne.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004608:	f107 030c 	add.w	r3, r7, #12
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fb3f 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004616:	e3dc      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004618:	4b62      	ldr	r3, [pc, #392]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b02      	cmp	r3, #2
 8004622:	d10d      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004626:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800462a:	d109      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800462c:	4b5d      	ldr	r3, [pc, #372]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	08db      	lsrs	r3, r3, #3
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	4a5c      	ldr	r2, [pc, #368]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
 800463c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800463e:	e010      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004640:	4b58      	ldr	r3, [pc, #352]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800464c:	d106      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004650:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004654:	d102      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8004656:	4b55      	ldr	r3, [pc, #340]	@ (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800465a:	e002      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004660:	e3b7      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004662:	e3b6      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004664:	4b4f      	ldr	r3, [pc, #316]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004666:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800466a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800466e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004672:	2b00      	cmp	r3, #0
 8004674:	d103      	bne.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004676:	f7fe fb39 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 800467a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800467c:	e3a9      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004684:	d107      	bne.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004686:	f107 030c 	add.w	r3, r7, #12
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fb00 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004694:	e39d      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004696:	4b43      	ldr	r3, [pc, #268]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d10d      	bne.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80046a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046a8:	d109      	bne.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046aa:	4b3e      	ldr	r3, [pc, #248]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	08db      	lsrs	r3, r3, #3
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	4a3c      	ldr	r2, [pc, #240]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80046b6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046bc:	e010      	b.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80046be:	4b39      	ldr	r3, [pc, #228]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ca:	d106      	bne.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80046cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046d2:	d102      	bne.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 80046d4:	4b35      	ldr	r3, [pc, #212]	@ (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80046d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046d8:	e002      	b.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80046de:	e378      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80046e0:	e377      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80046e2:	4b30      	ldr	r3, [pc, #192]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046e8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80046ec:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d103      	bne.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80046f4:	f7fe fafa 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 80046f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80046fa:	e36a      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 80046fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004702:	d107      	bne.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004704:	f107 030c 	add.w	r3, r7, #12
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fac1 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004712:	e35e      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004714:	4b23      	ldr	r3, [pc, #140]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b02      	cmp	r3, #2
 800471e:	d10d      	bne.n	800473c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8004720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004722:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004726:	d109      	bne.n	800473c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004728:	4b1e      	ldr	r3, [pc, #120]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	08db      	lsrs	r3, r3, #3
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	4a1d      	ldr	r2, [pc, #116]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800473a:	e34a      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004740:	e347      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004742:	4b18      	ldr	r3, [pc, #96]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004744:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004748:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800474c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004754:	f7fe faf6 	bl	8002d44 <HAL_RCC_GetPCLK3Freq>
 8004758:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800475a:	e33a      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 800475c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004762:	d107      	bne.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004764:	f107 030c 	add.w	r3, r7, #12
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fa91 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004772:	e32e      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004774:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b02      	cmp	r3, #2
 800477e:	d10d      	bne.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004786:	d109      	bne.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004788:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	08db      	lsrs	r3, r3, #3
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	4a05      	ldr	r2, [pc, #20]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004794:	fa22 f303 	lsr.w	r3, r2, r3
 8004798:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800479a:	e31a      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80047a0:	e317      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80047a2:	bf00      	nop
 80047a4:	44020c00 	.word	0x44020c00
 80047a8:	03d09000 	.word	0x03d09000
 80047ac:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80047b0:	4b9b      	ldr	r3, [pc, #620]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80047b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80047b6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047ba:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 80047bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047be:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80047c2:	d044      	beq.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80047c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80047ca:	d879      	bhi.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80047cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d2:	d02d      	beq.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80047d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047da:	d871      	bhi.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80047dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047e2:	d017      	beq.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80047e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ea:	d869      	bhi.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80047ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047f8:	d004      	beq.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 80047fa:	e061      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80047fc:	f7fe faa2 	bl	8002d44 <HAL_RCC_GetPCLK3Freq>
 8004800:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004802:	e060      	b.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004804:	f107 030c 	add.w	r3, r7, #12
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff fa41 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004812:	e058      	b.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004814:	4b82      	ldr	r3, [pc, #520]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b02      	cmp	r3, #2
 8004820:	d103      	bne.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8004822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004826:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004828:	e04d      	b.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800482e:	e04a      	b.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004830:	4b7b      	ldr	r3, [pc, #492]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004836:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800483a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800483e:	d103      	bne.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8004840:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004844:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004846:	e03e      	b.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800484c:	e03b      	b.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800484e:	4b74      	ldr	r3, [pc, #464]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004850:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004854:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800485a:	4b71      	ldr	r3, [pc, #452]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b02      	cmp	r3, #2
 8004864:	d10c      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800486c:	4b6c      	ldr	r3, [pc, #432]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	08db      	lsrs	r3, r3, #3
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	4a6b      	ldr	r2, [pc, #428]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
 800487c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800487e:	e01e      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004880:	4b67      	ldr	r3, [pc, #412]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800488c:	d106      	bne.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004894:	d102      	bne.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004896:	4b64      	ldr	r3, [pc, #400]	@ (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800489a:	e010      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800489c:	4b60      	ldr	r3, [pc, #384]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048a8:	d106      	bne.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048b0:	d102      	bne.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80048b2:	4b5e      	ldr	r3, [pc, #376]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80048b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048b6:	e002      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80048bc:	e003      	b.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 80048be:	e002      	b.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80048c4:	bf00      	nop
          }
        }
        break;
 80048c6:	e284      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80048c8:	4b55      	ldr	r3, [pc, #340]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80048ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80048ce:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80048d2:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 80048d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80048da:	d044      	beq.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80048dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048de:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80048e2:	d879      	bhi.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80048e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048ea:	d02d      	beq.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80048ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048f2:	d871      	bhi.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80048f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048fa:	d017      	beq.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80048fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004902:	d869      	bhi.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004906:	2b00      	cmp	r3, #0
 8004908:	d004      	beq.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 800490a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004910:	d004      	beq.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004912:	e061      	b.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004914:	f7fe f9ea 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8004918:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 800491a:	e060      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800491c:	f107 030c 	add.w	r3, r7, #12
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff f9b5 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800492a:	e058      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800492c:	4b3c      	ldr	r3, [pc, #240]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800492e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b02      	cmp	r3, #2
 8004938:	d103      	bne.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 800493a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800493e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004940:	e04d      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004946:	e04a      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004948:	4b35      	ldr	r3, [pc, #212]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800494a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800494e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004952:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004956:	d103      	bne.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004958:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800495c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800495e:	e03e      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004964:	e03b      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004966:	4b2e      	ldr	r3, [pc, #184]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800496c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004972:	4b2b      	ldr	r3, [pc, #172]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b02      	cmp	r3, #2
 800497c:	d10c      	bne.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004984:	4b26      	ldr	r3, [pc, #152]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	08db      	lsrs	r3, r3, #3
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	4a25      	ldr	r2, [pc, #148]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
 8004994:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004996:	e01e      	b.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004998:	4b21      	ldr	r3, [pc, #132]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049a4:	d106      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ac:	d102      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80049ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80049b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049b2:	e010      	b.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049c0:	d106      	bne.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049c8:	d102      	bne.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80049ca:	4b18      	ldr	r3, [pc, #96]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80049cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ce:	e002      	b.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80049d0:	2300      	movs	r3, #0
 80049d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80049d4:	e003      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80049d6:	e002      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80049dc:	bf00      	nop
          }
        }
        break;
 80049de:	e1f8      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80049e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ea:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80049ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049f8:	d105      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80049fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8004a00:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004a04:	e1e5      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a0c:	d110      	bne.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a0e:	f107 0318 	add.w	r3, r7, #24
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe ffd0 	bl	80039b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a1c:	e1d9      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004a1e:	bf00      	nop
 8004a20:	44020c00 	.word	0x44020c00
 8004a24:	03d09000 	.word	0x03d09000
 8004a28:	003d0900 	.word	0x003d0900
 8004a2c:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a36:	d107      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a38:	f107 030c 	add.w	r3, r7, #12
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff f927 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a46:	e1c4      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a4c:	e1c1      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004a4e:	4b9d      	ldr	r3, [pc, #628]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d859      	bhi.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004a60:	a201      	add	r2, pc, #4	@ (adr r2, 8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a66:	bf00      	nop
 8004a68:	08004a7d 	.word	0x08004a7d
 8004a6c:	08004a8d 	.word	0x08004a8d
 8004a70:	08004b15 	.word	0x08004b15
 8004a74:	08004a9d 	.word	0x08004a9d
 8004a78:	08004aa3 	.word	0x08004aa3
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a7c:	f107 0318 	add.w	r3, r7, #24
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe ff99 	bl	80039b8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004a8a:	e046      	b.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a8c:	f107 030c 	add.w	r3, r7, #12
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff f8fd 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004a9a:	e03e      	b.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004a9c:	4b8a      	ldr	r3, [pc, #552]	@ (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004aa0:	e03b      	b.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004aa2:	4b88      	ldr	r3, [pc, #544]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004aa8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004aae:	4b85      	ldr	r3, [pc, #532]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ac0:	4b80      	ldr	r3, [pc, #512]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	08db      	lsrs	r3, r3, #3
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	4a80      	ldr	r2, [pc, #512]	@ (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ad2:	e01e      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ad4:	4b7b      	ldr	r3, [pc, #492]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ae0:	d106      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae8:	d102      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004aea:	4b79      	ldr	r3, [pc, #484]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aee:	e010      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004af0:	4b74      	ldr	r3, [pc, #464]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004afc:	d106      	bne.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b04:	d102      	bne.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004b06:	4b73      	ldr	r3, [pc, #460]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b0a:	e002      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004b10:	e003      	b.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8004b12:	e002      	b.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004b18:	bf00      	nop
          }
        }
        break;
 8004b1a:	e15a      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004b1c:	4b69      	ldr	r3, [pc, #420]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b26:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d022      	beq.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8004b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d858      	bhi.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b36:	2b18      	cmp	r3, #24
 8004b38:	d019      	beq.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8004b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3c:	2b18      	cmp	r3, #24
 8004b3e:	d852      	bhi.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d008      	beq.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004b4c:	e04b      	b.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b4e:	f107 0318 	add.w	r3, r7, #24
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fe ff30 	bl	80039b8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004b5c:	e046      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b5e:	f107 030c 	add.w	r3, r7, #12
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff f894 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004b6c:	e03e      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004b6e:	4b56      	ldr	r3, [pc, #344]	@ (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004b72:	e03b      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b74:	4b53      	ldr	r3, [pc, #332]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b7a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004b7e:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b80:	4b50      	ldr	r3, [pc, #320]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d10c      	bne.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b92:	4b4c      	ldr	r3, [pc, #304]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	08db      	lsrs	r3, r3, #3
 8004b98:	f003 0303 	and.w	r3, r3, #3
 8004b9c:	4a4b      	ldr	r2, [pc, #300]	@ (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ba4:	e01e      	b.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ba6:	4b47      	ldr	r3, [pc, #284]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bba:	d102      	bne.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004bbc:	4b44      	ldr	r3, [pc, #272]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bc0:	e010      	b.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004bc2:	4b40      	ldr	r3, [pc, #256]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bce:	d106      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bd6:	d102      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bdc:	e002      	b.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004be2:	e003      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8004be4:	e002      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004bea:	bf00      	nop
          }
        }
        break;
 8004bec:	e0f1      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004bee:	4b35      	ldr	r3, [pc, #212]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bf4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c00:	d023      	beq.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c08:	d858      	bhi.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c0e:	d019      	beq.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8004c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c12:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c14:	d852      	bhi.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8004c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1e:	2b40      	cmp	r3, #64	@ 0x40
 8004c20:	d008      	beq.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8004c22:	e04b      	b.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c24:	f107 0318 	add.w	r3, r7, #24
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fe fec5 	bl	80039b8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c32:	e046      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c34:	f107 030c 	add.w	r3, r7, #12
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff f829 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c42:	e03e      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004c44:	4b20      	ldr	r3, [pc, #128]	@ (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c48:	e03b      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c50:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004c54:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c56:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d109      	bne.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c68:	4b16      	ldr	r3, [pc, #88]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	08db      	lsrs	r3, r3, #3
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	4a16      	ldr	r2, [pc, #88]	@ (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
 8004c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c7a:	e01e      	b.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c7c:	4b11      	ldr	r3, [pc, #68]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c88:	d106      	bne.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c90:	d102      	bne.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004c92:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c96:	e010      	b.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c98:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ca4:	d106      	bne.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cac:	d102      	bne.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004cae:	4b09      	ldr	r3, [pc, #36]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cb2:	e002      	b.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004cb8:	e003      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004cba:	e002      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004cc0:	bf00      	nop
          }
        }
        break;
 8004cc2:	e086      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004cc4:	44020c00 	.word	0x44020c00
 8004cc8:	00bb8000 	.word	0x00bb8000
 8004ccc:	03d09000 	.word	0x03d09000
 8004cd0:	003d0900 	.word	0x003d0900
 8004cd4:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004cd8:	4b40      	ldr	r3, [pc, #256]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004cda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cde:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ce2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf0:	d105      	bne.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8004cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8004cf8:	4b39      	ldr	r3, [pc, #228]	@ (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cfc:	e031      	b.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8004cfe:	4b37      	ldr	r3, [pc, #220]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d0a:	d10a      	bne.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8004d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0e:	2b10      	cmp	r3, #16
 8004d10:	d107      	bne.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d12:	f107 0318 	add.w	r3, r7, #24
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fe fe4e 	bl	80039b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d20:	e01f      	b.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8004d22:	4b2e      	ldr	r3, [pc, #184]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d106      	bne.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8004d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d103      	bne.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8004d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d3c:	e011      	b.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8004d3e:	4b27      	ldr	r3, [pc, #156]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d4c:	d106      	bne.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8004d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d50:	2b30      	cmp	r3, #48	@ 0x30
 8004d52:	d103      	bne.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8004d54:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d5a:	e002      	b.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004d60:	e037      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004d62:	e036      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004d64:	4b1d      	ldr	r3, [pc, #116]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004d66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d6a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d6e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8004d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d72:	2b10      	cmp	r3, #16
 8004d74:	d107      	bne.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d76:	f107 0318 	add.w	r3, r7, #24
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe fe1c 	bl	80039b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8004d84:	e025      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8004d86:	4b15      	ldr	r3, [pc, #84]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d92:	d10a      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d107      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d9a:	f107 030c 	add.w	r3, r7, #12
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe ff76 	bl	8003c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004da8:	e00f      	b.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8004daa:	4b0c      	ldr	r3, [pc, #48]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db6:	d105      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dba:	2b30      	cmp	r3, #48	@ 0x30
 8004dbc:	d102      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8004dbe:	4b08      	ldr	r3, [pc, #32]	@ (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dc2:	e002      	b.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8004dc8:	e003      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004dca:	e002      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004dd0:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8004dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3730      	adds	r7, #48	@ 0x30
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	44020c00 	.word	0x44020c00
 8004de0:	02dc6c00 	.word	0x02dc6c00

08004de4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8004dec:	4b48      	ldr	r3, [pc, #288]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a47      	ldr	r2, [pc, #284]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004df2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004df6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004df8:	f7fc fc50 	bl	800169c <HAL_GetTick>
 8004dfc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004dfe:	e008      	b.n	8004e12 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e00:	f7fc fc4c 	bl	800169c <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e07a      	b.n	8004f08 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e12:	4b3f      	ldr	r3, [pc, #252]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004e1e:	4b3c      	ldr	r3, [pc, #240]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e22:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e26:	f023 0303 	bic.w	r3, r3, #3
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6811      	ldr	r1, [r2, #0]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6852      	ldr	r2, [r2, #4]
 8004e32:	0212      	lsls	r2, r2, #8
 8004e34:	430a      	orrs	r2, r1
 8004e36:	4936      	ldr	r1, [pc, #216]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	025b      	lsls	r3, r3, #9
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	061b      	lsls	r3, r3, #24
 8004e68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e6c:	4928      	ldr	r1, [pc, #160]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004e72:	4b27      	ldr	r3, [pc, #156]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e76:	f023 020c 	bic.w	r2, r3, #12
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	4924      	ldr	r1, [pc, #144]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8004e84:	4b22      	ldr	r3, [pc, #136]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e88:	f023 0220 	bic.w	r2, r3, #32
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	491f      	ldr	r1, [pc, #124]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004e96:	4b1e      	ldr	r3, [pc, #120]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9e:	491c      	ldr	r1, [pc, #112]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8004ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea8:	4a19      	ldr	r2, [pc, #100]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004eaa:	f023 0310 	bic.w	r3, r3, #16
 8004eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004eb0:	4b17      	ldr	r3, [pc, #92]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eb8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6a12      	ldr	r2, [r2, #32]
 8004ec0:	00d2      	lsls	r2, r2, #3
 8004ec2:	4913      	ldr	r1, [pc, #76]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8004ec8:	4b11      	ldr	r3, [pc, #68]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	4a10      	ldr	r2, [pc, #64]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004ece:	f043 0310 	orr.w	r3, r3, #16
 8004ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004eda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ede:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ee0:	f7fc fbdc 	bl	800169c <HAL_GetTick>
 8004ee4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ee6:	e008      	b.n	8004efa <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ee8:	f7fc fbd8 	bl	800169c <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e006      	b.n	8004f08 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004efa:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <RCCEx_PLL2_Config+0x12c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0

}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	44020c00 	.word	0x44020c00

08004f14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e0e9      	b.n	80050fa <HAL_SPI_Init+0x1e6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a74      	ldr	r2, [pc, #464]	@ (8005104 <HAL_SPI_Init+0x1f0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d105      	bne.n	8004f42 <HAL_SPI_Init+0x2e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2b0f      	cmp	r3, #15
 8004f3c:	d901      	bls.n	8004f42 <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e0db      	b.n	80050fa <HAL_SPI_Init+0x1e6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f8e6 	bl	8005114 <SPI_GetPacketSize>
 8004f48:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a6d      	ldr	r2, [pc, #436]	@ (8005104 <HAL_SPI_Init+0x1f0>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d102      	bne.n	8004f5a <HAL_SPI_Init+0x46>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d811      	bhi.n	8004f7e <HAL_SPI_Init+0x6a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f5e:	4a6a      	ldr	r2, [pc, #424]	@ (8005108 <HAL_SPI_Init+0x1f4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d009      	beq.n	8004f78 <HAL_SPI_Init+0x64>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a68      	ldr	r2, [pc, #416]	@ (800510c <HAL_SPI_Init+0x1f8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_SPI_Init+0x64>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a67      	ldr	r2, [pc, #412]	@ (8005110 <HAL_SPI_Init+0x1fc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d104      	bne.n	8004f82 <HAL_SPI_Init+0x6e>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b10      	cmp	r3, #16
 8004f7c:	d901      	bls.n	8004f82 <HAL_SPI_Init+0x6e>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e0bb      	b.n	80050fa <HAL_SPI_Init+0x1e6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <HAL_SPI_Init+0x88>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fb fdd8 	bl	8000b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0201 	bic.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004fbe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fc8:	d119      	bne.n	8004ffe <HAL_SPI_Init+0xea>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fd2:	d103      	bne.n	8004fdc <HAL_SPI_Init+0xc8>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <HAL_SPI_Init+0xda>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10c      	bne.n	8004ffe <HAL_SPI_Init+0xea>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004fe8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fec:	d107      	bne.n	8004ffe <HAL_SPI_Init+0xea>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ffc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00f      	beq.n	800502a <HAL_SPI_Init+0x116>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2b06      	cmp	r3, #6
 8005010:	d90b      	bls.n	800502a <HAL_SPI_Init+0x116>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	e007      	b.n	800503a <HAL_SPI_Init+0x126>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005038:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005042:	431a      	orrs	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504c:	ea42 0103 	orr.w	r1, r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a6:	ea42 0103 	orr.w	r1, r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_SPI_Init+0x1d4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	deaddead 	.word	0xdeaddead
 8005108:	40013000 	.word	0x40013000
 800510c:	40003800 	.word	0x40003800
 8005110:	40003c00 	.word	0x40003c00

08005114 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	3301      	adds	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	3301      	adds	r3, #1
 800512c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	3307      	adds	r3, #7
 8005132:	08db      	lsrs	r3, r3, #3
 8005134:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	fb02 f303 	mul.w	r3, r2, r3
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e042      	b.n	80051e2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fb fe1a 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2224      	movs	r2, #36	@ 0x24
 8005178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fa45 	bl	8005624 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f8c4 	bl	8005328 <UART_SetConfig>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e01b      	b.n	80051e2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fac4 	bl	8005768 <UART_CheckIdleState>
 80051e0:	4603      	mov	r3, r0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b08a      	sub	sp, #40	@ 0x28
 80051ee:	af02      	add	r7, sp, #8
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	4613      	mov	r3, r2
 80051f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005200:	2b20      	cmp	r3, #32
 8005202:	f040 808b 	bne.w	800531c <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <HAL_UART_Transmit+0x28>
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e083      	b.n	800531e <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005220:	2b80      	cmp	r3, #128	@ 0x80
 8005222:	d107      	bne.n	8005234 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005232:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2221      	movs	r2, #33	@ 0x21
 8005240:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005244:	f7fc fa2a 	bl	800169c <HAL_GetTick>
 8005248:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	88fa      	ldrh	r2, [r7, #6]
 800524e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	88fa      	ldrh	r2, [r7, #6]
 8005256:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005262:	d108      	bne.n	8005276 <HAL_UART_Transmit+0x8c>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	61bb      	str	r3, [r7, #24]
 8005274:	e003      	b.n	800527e <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800527e:	e030      	b.n	80052e2 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2200      	movs	r2, #0
 8005288:	2180      	movs	r1, #128	@ 0x80
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 fb16 	bl	80058bc <UART_WaitOnFlagUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e03d      	b.n	800531e <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10b      	bne.n	80052c0 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	3302      	adds	r3, #2
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	e007      	b.n	80052d0 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	781a      	ldrb	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	3301      	adds	r3, #1
 80052ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1c8      	bne.n	8005280 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2200      	movs	r2, #0
 80052f6:	2140      	movs	r1, #64	@ 0x40
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 fadf 	bl	80058bc <UART_WaitOnFlagUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e006      	b.n	800531e <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	e000      	b.n	800531e <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800531c:	2302      	movs	r3, #2
  }
}
 800531e:	4618      	mov	r0, r3
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800532c:	b094      	sub	sp, #80	@ 0x50
 800532e:	af00      	add	r7, sp, #0
 8005330:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	431a      	orrs	r2, r3
 8005342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	431a      	orrs	r2, r3
 8005348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	4313      	orrs	r3, r2
 800534e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	498a      	ldr	r1, [pc, #552]	@ (8005580 <UART_SetConfig+0x258>)
 8005358:	4019      	ands	r1, r3
 800535a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005360:	430b      	orrs	r3, r1
 8005362:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800536e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005370:	68d9      	ldr	r1, [r3, #12]
 8005372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	ea40 0301 	orr.w	r3, r0, r1
 800537a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800537c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b7f      	ldr	r3, [pc, #508]	@ (8005584 <UART_SetConfig+0x25c>)
 8005388:	429a      	cmp	r2, r3
 800538a:	d004      	beq.n	8005396 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800538c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538e:	6a1a      	ldr	r2, [r3, #32]
 8005390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005392:	4313      	orrs	r3, r2
 8005394:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80053a0:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80053a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053aa:	430b      	orrs	r3, r1
 80053ac:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b4:	f023 000f 	bic.w	r0, r3, #15
 80053b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80053bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	ea40 0301 	orr.w	r3, r0, r1
 80053c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4b6f      	ldr	r3, [pc, #444]	@ (8005588 <UART_SetConfig+0x260>)
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d102      	bne.n	80053d6 <UART_SetConfig+0xae>
 80053d0:	2301      	movs	r3, #1
 80053d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053d4:	e01a      	b.n	800540c <UART_SetConfig+0xe4>
 80053d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b6c      	ldr	r3, [pc, #432]	@ (800558c <UART_SetConfig+0x264>)
 80053dc:	429a      	cmp	r2, r3
 80053de:	d102      	bne.n	80053e6 <UART_SetConfig+0xbe>
 80053e0:	2302      	movs	r3, #2
 80053e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053e4:	e012      	b.n	800540c <UART_SetConfig+0xe4>
 80053e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4b69      	ldr	r3, [pc, #420]	@ (8005590 <UART_SetConfig+0x268>)
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d102      	bne.n	80053f6 <UART_SetConfig+0xce>
 80053f0:	2304      	movs	r3, #4
 80053f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053f4:	e00a      	b.n	800540c <UART_SetConfig+0xe4>
 80053f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	4b62      	ldr	r3, [pc, #392]	@ (8005584 <UART_SetConfig+0x25c>)
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d103      	bne.n	8005408 <UART_SetConfig+0xe0>
 8005400:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005404:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005406:	e001      	b.n	800540c <UART_SetConfig+0xe4>
 8005408:	2300      	movs	r3, #0
 800540a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800540c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4b5c      	ldr	r3, [pc, #368]	@ (8005584 <UART_SetConfig+0x25c>)
 8005412:	429a      	cmp	r2, r3
 8005414:	d171      	bne.n	80054fa <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005418:	2200      	movs	r2, #0
 800541a:	623b      	str	r3, [r7, #32]
 800541c:	627a      	str	r2, [r7, #36]	@ 0x24
 800541e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005422:	f7fe fda1 	bl	8003f68 <HAL_RCCEx_GetPeriphCLKFreq>
 8005426:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 80e2 	beq.w	80055f4 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005434:	4a57      	ldr	r2, [pc, #348]	@ (8005594 <UART_SetConfig+0x26c>)
 8005436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800543a:	461a      	mov	r2, r3
 800543c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800543e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005442:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	4413      	add	r3, r2
 800544e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005450:	429a      	cmp	r2, r3
 8005452:	d305      	bcc.n	8005460 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800545a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800545c:	429a      	cmp	r2, r3
 800545e:	d903      	bls.n	8005468 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005466:	e0c5      	b.n	80055f4 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800546a:	2200      	movs	r2, #0
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	61fa      	str	r2, [r7, #28]
 8005470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005474:	4a47      	ldr	r2, [pc, #284]	@ (8005594 <UART_SetConfig+0x26c>)
 8005476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800547a:	b29b      	uxth	r3, r3
 800547c:	2200      	movs	r2, #0
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	617a      	str	r2, [r7, #20]
 8005482:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005486:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800548a:	f7fa ff09 	bl	80002a0 <__aeabi_uldivmod>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4610      	mov	r0, r2
 8005494:	4619      	mov	r1, r3
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	020b      	lsls	r3, r1, #8
 80054a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054a4:	0202      	lsls	r2, r0, #8
 80054a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054a8:	6849      	ldr	r1, [r1, #4]
 80054aa:	0849      	lsrs	r1, r1, #1
 80054ac:	2000      	movs	r0, #0
 80054ae:	460c      	mov	r4, r1
 80054b0:	4605      	mov	r5, r0
 80054b2:	eb12 0804 	adds.w	r8, r2, r4
 80054b6:	eb43 0905 	adc.w	r9, r3, r5
 80054ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	60fa      	str	r2, [r7, #12]
 80054c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054c8:	4640      	mov	r0, r8
 80054ca:	4649      	mov	r1, r9
 80054cc:	f7fa fee8 	bl	80002a0 <__aeabi_uldivmod>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4613      	mov	r3, r2
 80054d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054de:	d308      	bcc.n	80054f2 <UART_SetConfig+0x1ca>
 80054e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054e6:	d204      	bcs.n	80054f2 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 80054e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054ee:	60da      	str	r2, [r3, #12]
 80054f0:	e080      	b.n	80055f4 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80054f8:	e07c      	b.n	80055f4 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005502:	d149      	bne.n	8005598 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005504:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005506:	2200      	movs	r2, #0
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005510:	f7fe fd2a 	bl	8003f68 <HAL_RCCEx_GetPeriphCLKFreq>
 8005514:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	d06b      	beq.n	80055f4 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800551c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	4a1c      	ldr	r2, [pc, #112]	@ (8005594 <UART_SetConfig+0x26c>)
 8005522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005526:	461a      	mov	r2, r3
 8005528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800552a:	fbb3 f3f2 	udiv	r3, r3, r2
 800552e:	005a      	lsls	r2, r3, #1
 8005530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	085b      	lsrs	r3, r3, #1
 8005536:	441a      	add	r2, r3
 8005538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005540:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005544:	2b0f      	cmp	r3, #15
 8005546:	d916      	bls.n	8005576 <UART_SetConfig+0x24e>
 8005548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800554a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800554e:	d212      	bcs.n	8005576 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005552:	b29b      	uxth	r3, r3
 8005554:	f023 030f 	bic.w	r3, r3, #15
 8005558:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800555a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800555c:	085b      	lsrs	r3, r3, #1
 800555e:	b29b      	uxth	r3, r3
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	b29a      	uxth	r2, r3
 8005566:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005568:	4313      	orrs	r3, r2
 800556a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800556c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005572:	60da      	str	r2, [r3, #12]
 8005574:	e03e      	b.n	80055f4 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800557c:	e03a      	b.n	80055f4 <UART_SetConfig+0x2cc>
 800557e:	bf00      	nop
 8005580:	cfff69f3 	.word	0xcfff69f3
 8005584:	44002400 	.word	0x44002400
 8005588:	40013800 	.word	0x40013800
 800558c:	40004400 	.word	0x40004400
 8005590:	40004800 	.word	0x40004800
 8005594:	080091b0 	.word	0x080091b0
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005598:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800559a:	2200      	movs	r2, #0
 800559c:	469a      	mov	sl, r3
 800559e:	4693      	mov	fp, r2
 80055a0:	4650      	mov	r0, sl
 80055a2:	4659      	mov	r1, fp
 80055a4:	f7fe fce0 	bl	8003f68 <HAL_RCCEx_GetPeriphCLKFreq>
 80055a8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80055aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d021      	beq.n	80055f4 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005620 <UART_SetConfig+0x2f8>)
 80055b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ba:	461a      	mov	r2, r3
 80055bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055be:	fbb3 f2f2 	udiv	r2, r3, r2
 80055c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	441a      	add	r2, r3
 80055ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055d6:	2b0f      	cmp	r3, #15
 80055d8:	d909      	bls.n	80055ee <UART_SetConfig+0x2c6>
 80055da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e0:	d205      	bcs.n	80055ee <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60da      	str	r2, [r3, #12]
 80055ec:	e002      	b.n	80055f4 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f6:	2201      	movs	r2, #1
 80055f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80055fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fe:	2201      	movs	r2, #1
 8005600:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005606:	2200      	movs	r2, #0
 8005608:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800560a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800560c:	2200      	movs	r2, #0
 800560e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005610:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005614:	4618      	mov	r0, r3
 8005616:	3750      	adds	r7, #80	@ 0x50
 8005618:	46bd      	mov	sp, r7
 800561a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800561e:	bf00      	nop
 8005620:	080091b0 	.word	0x080091b0

08005624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b8:	f003 0310 	and.w	r3, r3, #16
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005700:	2b00      	cmp	r3, #0
 8005702:	d01a      	beq.n	800573a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005722:	d10a      	bne.n	800573a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	605a      	str	r2, [r3, #4]
  }
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b098      	sub	sp, #96	@ 0x60
 800576c:	af02      	add	r7, sp, #8
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005778:	f7fb ff90 	bl	800169c <HAL_GetTick>
 800577c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b08      	cmp	r3, #8
 800578a:	d12f      	bne.n	80057ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800578c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005794:	2200      	movs	r2, #0
 8005796:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f88e 	bl	80058bc <UART_WaitOnFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d022      	beq.n	80057ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e6      	bne.n	80057a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e063      	b.n	80058b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d149      	bne.n	800588e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005802:	2200      	movs	r2, #0
 8005804:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f857 	bl	80058bc <UART_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d03c      	beq.n	800588e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	623b      	str	r3, [r7, #32]
   return(result);
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005828:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005832:	633b      	str	r3, [r7, #48]	@ 0x30
 8005834:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e6      	bne.n	8005814 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3308      	adds	r3, #8
 800584c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	60fb      	str	r3, [r7, #12]
   return(result);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3308      	adds	r3, #8
 8005864:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005866:	61fa      	str	r2, [r7, #28]
 8005868:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	69b9      	ldr	r1, [r7, #24]
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	617b      	str	r3, [r7, #20]
   return(result);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e5      	bne.n	8005846 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e012      	b.n	80058b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2220      	movs	r2, #32
 8005892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3758      	adds	r7, #88	@ 0x58
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4613      	mov	r3, r2
 80058ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058cc:	e04f      	b.n	800596e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d4:	d04b      	beq.n	800596e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d6:	f7fb fee1 	bl	800169c <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d302      	bcc.n	80058ec <UART_WaitOnFlagUntilTimeout+0x30>
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e04e      	b.n	800598e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d037      	beq.n	800596e <UART_WaitOnFlagUntilTimeout+0xb2>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b80      	cmp	r3, #128	@ 0x80
 8005902:	d034      	beq.n	800596e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b40      	cmp	r3, #64	@ 0x40
 8005908:	d031      	beq.n	800596e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b08      	cmp	r3, #8
 8005916:	d110      	bne.n	800593a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2208      	movs	r2, #8
 800591e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f838 	bl	8005996 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2208      	movs	r2, #8
 800592a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e029      	b.n	800598e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005948:	d111      	bne.n	800596e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f81e 	bl	8005996 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2220      	movs	r2, #32
 800595e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e00f      	b.n	800598e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4013      	ands	r3, r2
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	429a      	cmp	r2, r3
 800597c:	bf0c      	ite	eq
 800597e:	2301      	moveq	r3, #1
 8005980:	2300      	movne	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	461a      	mov	r2, r3
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	429a      	cmp	r2, r3
 800598a:	d0a0      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005996:	b480      	push	{r7}
 8005998:	b095      	sub	sp, #84	@ 0x54
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80059be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059c4:	e841 2300 	strex	r3, r2, [r1]
 80059c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e6      	bne.n	800599e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3308      	adds	r3, #8
 80059d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	61fb      	str	r3, [r7, #28]
   return(result);
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059e6:	f023 0301 	bic.w	r3, r3, #1
 80059ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3308      	adds	r3, #8
 80059f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e3      	bne.n	80059d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d118      	bne.n	8005a42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f023 0310 	bic.w	r3, r3, #16
 8005a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a2e:	61bb      	str	r3, [r7, #24]
 8005a30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	6979      	ldr	r1, [r7, #20]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e6      	bne.n	8005a10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a56:	bf00      	nop
 8005a58:	3754      	adds	r7, #84	@ 0x54
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b085      	sub	sp, #20
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e027      	b.n	8005ac8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2224      	movs	r2, #36	@ 0x24
 8005a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005aa6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e02d      	b.n	8005b48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2224      	movs	r2, #36	@ 0x24
 8005af8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0201 	bic.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f84f 	bl	8005bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e02d      	b.n	8005bc4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2224      	movs	r2, #36	@ 0x24
 8005b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f811 	bl	8005bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d108      	bne.n	8005bee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005bec:	e031      	b.n	8005c52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bee:	2308      	movs	r3, #8
 8005bf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005bf2:	2308      	movs	r3, #8
 8005bf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	0e5b      	lsrs	r3, r3, #25
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	0f5b      	lsrs	r3, r3, #29
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c16:	7bbb      	ldrb	r3, [r7, #14]
 8005c18:	7b3a      	ldrb	r2, [r7, #12]
 8005c1a:	4911      	ldr	r1, [pc, #68]	@ (8005c60 <UARTEx_SetNbDataToProcess+0x94>)
 8005c1c:	5c8a      	ldrb	r2, [r1, r2]
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c22:	7b3a      	ldrb	r2, [r7, #12]
 8005c24:	490f      	ldr	r1, [pc, #60]	@ (8005c64 <UARTEx_SetNbDataToProcess+0x98>)
 8005c26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c28:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	7b7a      	ldrb	r2, [r7, #13]
 8005c38:	4909      	ldr	r1, [pc, #36]	@ (8005c60 <UARTEx_SetNbDataToProcess+0x94>)
 8005c3a:	5c8a      	ldrb	r2, [r1, r2]
 8005c3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c40:	7b7a      	ldrb	r2, [r7, #13]
 8005c42:	4908      	ldr	r1, [pc, #32]	@ (8005c64 <UARTEx_SetNbDataToProcess+0x98>)
 8005c44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c46:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005c52:	bf00      	nop
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	080091c8 	.word	0x080091c8
 8005c64:	080091d0 	.word	0x080091d0

08005c68 <__NVIC_SetPriority>:
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	6039      	str	r1, [r7, #0]
 8005c72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	db0a      	blt.n	8005c92 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	490c      	ldr	r1, [pc, #48]	@ (8005cb4 <__NVIC_SetPriority+0x4c>)
 8005c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c86:	0112      	lsls	r2, r2, #4
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005c90:	e00a      	b.n	8005ca8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	4908      	ldr	r1, [pc, #32]	@ (8005cb8 <__NVIC_SetPriority+0x50>)
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	3b04      	subs	r3, #4
 8005ca0:	0112      	lsls	r2, r2, #4
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	761a      	strb	r2, [r3, #24]
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	e000e100 	.word	0xe000e100
 8005cb8:	e000ed00 	.word	0xe000ed00

08005cbc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8005cc0:	4b05      	ldr	r3, [pc, #20]	@ (8005cd8 <SysTick_Handler+0x1c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005cc4:	f001 fba6 	bl	8007414 <xTaskGetSchedulerState>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d001      	beq.n	8005cd2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005cce:	f001 ff51 	bl	8007b74 <xPortSysTickHandler>
  }
}
 8005cd2:	bf00      	nop
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	e000e010 	.word	0xe000e010

08005cdc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	f06f 0004 	mvn.w	r0, #4
 8005ce6:	f7ff ffbf 	bl	8005c68 <__NVIC_SetPriority>
#endif
}
 8005cea:	bf00      	nop
 8005cec:	bd80      	pop	{r7, pc}

08005cee <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b086      	sub	sp, #24
 8005cf2:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cf8:	f3ef 8305 	mrs	r3, IPSR
 8005cfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cfe:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8005d04:	2301      	movs	r3, #1
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	e013      	b.n	8005d32 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8005d0a:	f001 fb83 	bl	8007414 <xTaskGetSchedulerState>
 8005d0e:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d00d      	beq.n	8005d32 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d16:	f3ef 8310 	mrs	r3, PRIMASK
 8005d1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d105      	bne.n	8005d2e <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d22:	f3ef 8311 	mrs	r3, BASEPRI
 8005d26:	607b      	str	r3, [r7, #4]
  return(result);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8005d32:	697b      	ldr	r3, [r7, #20]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8005d42:	f7ff ffd4 	bl	8005cee <IRQ_Context>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8005d4c:	f06f 0305 	mvn.w	r3, #5
 8005d50:	607b      	str	r3, [r7, #4]
 8005d52:	e012      	b.n	8005d7a <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8005d54:	f001 fb5e 	bl	8007414 <xTaskGetSchedulerState>
 8005d58:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d109      	bne.n	8005d74 <osKernelInitialize+0x38>
 8005d60:	4b08      	ldr	r3, [pc, #32]	@ (8005d84 <osKernelInitialize+0x48>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d68:	4b06      	ldr	r3, [pc, #24]	@ (8005d84 <osKernelInitialize+0x48>)
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	607b      	str	r3, [r7, #4]
 8005d72:	e002      	b.n	8005d7a <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8005d74:	f04f 33ff 	mov.w	r3, #4294967295
 8005d78:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8005d7a:	687b      	ldr	r3, [r7, #4]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20000314 	.word	0x20000314

08005d88 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8005d8e:	f7ff ffae 	bl	8005cee <IRQ_Context>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <osKernelStart+0x18>
    stat = osErrorISR;
 8005d98:	f06f 0305 	mvn.w	r3, #5
 8005d9c:	607b      	str	r3, [r7, #4]
 8005d9e:	e016      	b.n	8005dce <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8005da0:	f001 fb38 	bl	8007414 <xTaskGetSchedulerState>
 8005da4:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d10d      	bne.n	8005dc8 <osKernelStart+0x40>
 8005dac:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <osKernelStart+0x50>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d109      	bne.n	8005dc8 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005db4:	f7ff ff92 	bl	8005cdc <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8005db8:	4b07      	ldr	r3, [pc, #28]	@ (8005dd8 <osKernelStart+0x50>)
 8005dba:	2202      	movs	r2, #2
 8005dbc:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005dbe:	f000 fdf7 	bl	80069b0 <vTaskStartScheduler>
      stat = osOK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	607b      	str	r3, [r7, #4]
 8005dc6:	e002      	b.n	8005dce <osKernelStart+0x46>
    } else {
      stat = osError;
 8005dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dcc:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8005dce:	687b      	ldr	r3, [r7, #4]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	20000314 	.word	0x20000314

08005ddc <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08e      	sub	sp, #56	@ 0x38
 8005de0:	af04      	add	r7, sp, #16
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8005dec:	f7ff ff7f 	bl	8005cee <IRQ_Context>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d17e      	bne.n	8005ef4 <osThreadNew+0x118>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d07b      	beq.n	8005ef4 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8005dfc:	2380      	movs	r3, #128	@ 0x80
 8005dfe:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e00:	2318      	movs	r3, #24
 8005e02:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e04:	2300      	movs	r3, #0
 8005e06:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005e08:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d045      	beq.n	8005ea0 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <osThreadNew+0x46>
        name = attr->name;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <osThreadNew+0x6c>
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	2b38      	cmp	r3, #56	@ 0x38
 8005e3a:	d805      	bhi.n	8005e48 <osThreadNew+0x6c>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e054      	b.n	8005ef6 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	089b      	lsrs	r3, r3, #2
 8005e5a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00e      	beq.n	8005e82 <osThreadNew+0xa6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	2b5b      	cmp	r3, #91	@ 0x5b
 8005e6a:	d90a      	bls.n	8005e82 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d006      	beq.n	8005e82 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e010      	b.n	8005ea4 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10c      	bne.n	8005ea4 <osThreadNew+0xc8>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d108      	bne.n	8005ea4 <osThreadNew+0xc8>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	e001      	b.n	8005ea4 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d110      	bne.n	8005ecc <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005eb2:	9202      	str	r2, [sp, #8]
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	6a3a      	ldr	r2, [r7, #32]
 8005ebe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 fba5 	bl	8006610 <xTaskCreateStatic>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	e013      	b.n	8005ef4 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d110      	bne.n	8005ef4 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	f107 0314 	add.w	r3, r7, #20
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fbe0 	bl	80066aa <xTaskCreate>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d001      	beq.n	8005ef4 <osThreadNew+0x118>
            hTask = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8005ef4:	697b      	ldr	r3, [r7, #20]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3728      	adds	r7, #40	@ 0x28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8005f06:	f7ff fef2 	bl	8005cee <IRQ_Context>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <osDelay+0x1a>
    stat = osErrorISR;
 8005f10:	f06f 0305 	mvn.w	r3, #5
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	e007      	b.n	8005f28 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <osDelay+0x2a>
      vTaskDelay(ticks);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fd1e 	bl	8006964 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8005f28:	68fb      	ldr	r3, [r7, #12]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4a07      	ldr	r2, [pc, #28]	@ (8005f60 <vApplicationGetIdleTaskMemory+0x2c>)
 8005f44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	4a06      	ldr	r2, [pc, #24]	@ (8005f64 <vApplicationGetIdleTaskMemory+0x30>)
 8005f4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2280      	movs	r2, #128	@ 0x80
 8005f50:	601a      	str	r2, [r3, #0]
}
 8005f52:	bf00      	nop
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	20000318 	.word	0x20000318
 8005f64:	20000374 	.word	0x20000374

08005f68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4a07      	ldr	r2, [pc, #28]	@ (8005f94 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4a06      	ldr	r2, [pc, #24]	@ (8005f98 <vApplicationGetTimerTaskMemory+0x30>)
 8005f7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2280      	movs	r2, #128	@ 0x80
 8005f84:	601a      	str	r2, [r3, #0]
}
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	20000574 	.word	0x20000574
 8005f98:	200005d0 	.word	0x200005d0

08005f9c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f103 0208 	add.w	r2, r3, #8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f103 0208 	add.w	r2, r3, #8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f103 0208 	add.w	r2, r3, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b085      	sub	sp, #20
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d103      	bne.n	8006016 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e00c      	b.n	8006030 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3308      	adds	r3, #8
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e002      	b.n	8006024 <vListInsert+0x2e>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	429a      	cmp	r2, r3
 800602e:	d2f6      	bcs.n	800601e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	601a      	str	r2, [r3, #0]
}
 800605c:	bf00      	nop
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6892      	ldr	r2, [r2, #8]
 800607e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6852      	ldr	r2, [r2, #4]
 8006088:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	d103      	bne.n	800609c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	1e5a      	subs	r2, r3, #1
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80060c6:	2301      	movs	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d103      	bne.n	80060dc <xQueueGenericReset+0x20>
 80060d4:	f001 feb8 	bl	8007e48 <ulSetInterruptMask>
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d057      	beq.n	8006192 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d053      	beq.n	8006192 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f2:	2100      	movs	r1, #0
 80060f4:	fba3 2302 	umull	r2, r3, r3, r2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d000      	beq.n	80060fe <xQueueGenericReset+0x42>
 80060fc:	2101      	movs	r1, #1
 80060fe:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8006100:	2b00      	cmp	r3, #0
 8006102:	d146      	bne.n	8006192 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 8006104:	f001 fd0a 	bl	8007b1c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	441a      	add	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2200      	movs	r2, #0
 8006122:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006134:	3b01      	subs	r3, #1
 8006136:	68b9      	ldr	r1, [r7, #8]
 8006138:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800613a:	fb01 f303 	mul.w	r3, r1, r3
 800613e:	441a      	add	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	22ff      	movs	r2, #255	@ 0xff
 8006148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	22ff      	movs	r2, #255	@ 0xff
 8006150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10e      	bne.n	8006178 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d014      	beq.n	800618c <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	3310      	adds	r3, #16
 8006166:	4618      	mov	r0, r3
 8006168:	f000 ff4a 	bl	8007000 <xTaskRemoveFromEventList>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00c      	beq.n	800618c <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006172:	f001 fcc1 	bl	8007af8 <vPortYield>
 8006176:	e009      	b.n	800618c <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	3310      	adds	r3, #16
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff ff0d 	bl	8005f9c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	3324      	adds	r3, #36	@ 0x24
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff ff08 	bl	8005f9c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800618c:	f001 fcd8 	bl	8007b40 <vPortExitCritical>
 8006190:	e001      	b.n	8006196 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d103      	bne.n	80061a4 <xQueueGenericReset+0xe8>
 800619c:	f001 fe54 	bl	8007e48 <ulSetInterruptMask>
 80061a0:	bf00      	nop
 80061a2:	e7fd      	b.n	80061a0 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80061a4:	68fb      	ldr	r3, [r7, #12]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b088      	sub	sp, #32
 80061b2:	af02      	add	r7, sp, #8
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
 80061ba:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d103      	bne.n	80061ce <xQueueGenericCreateStatic+0x20>
 80061c6:	f001 fe3f 	bl	8007e48 <ulSetInterruptMask>
 80061ca:	bf00      	nop
 80061cc:	e7fd      	b.n	80061ca <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d029      	beq.n	8006228 <xQueueGenericCreateStatic+0x7a>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d026      	beq.n	8006228 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d020      	beq.n	8006228 <xQueueGenericCreateStatic+0x7a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d102      	bne.n	80061f2 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d11a      	bne.n	8006228 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80061f2:	2350      	movs	r3, #80	@ 0x50
 80061f4:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b50      	cmp	r3, #80	@ 0x50
 80061fa:	d003      	beq.n	8006204 <xQueueGenericCreateStatic+0x56>
 80061fc:	f001 fe24 	bl	8007e48 <ulSetInterruptMask>
 8006200:	bf00      	nop
 8006202:	e7fd      	b.n	8006200 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8006204:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006212:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	4613      	mov	r3, r2
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f80d 	bl	8006240 <prvInitialiseNewQueue>
 8006226:	e006      	b.n	8006236 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d103      	bne.n	8006236 <xQueueGenericCreateStatic+0x88>
 800622e:	f001 fe0b 	bl	8007e48 <ulSetInterruptMask>
 8006232:	bf00      	nop
 8006234:	e7fd      	b.n	8006232 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006236:	697b      	ldr	r3, [r7, #20]
    }
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d103      	bne.n	800625c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e002      	b.n	8006262 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800626e:	2101      	movs	r1, #1
 8006270:	69b8      	ldr	r0, [r7, #24]
 8006272:	f7ff ff23 	bl	80060bc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	78fa      	ldrb	r2, [r7, #3]
 800627a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b08a      	sub	sp, #40	@ 0x28
 800628a:	af00      	add	r7, sp, #0
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	60b9      	str	r1, [r7, #8]
 8006290:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006292:	2300      	movs	r3, #0
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d103      	bne.n	80062a8 <xQueueReceive+0x22>
 80062a0:	f001 fdd2 	bl	8007e48 <ulSetInterruptMask>
 80062a4:	bf00      	nop
 80062a6:	e7fd      	b.n	80062a4 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d103      	bne.n	80062b6 <xQueueReceive+0x30>
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <xQueueReceive+0x34>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <xQueueReceive+0x36>
 80062ba:	2300      	movs	r3, #0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d103      	bne.n	80062c8 <xQueueReceive+0x42>
 80062c0:	f001 fdc2 	bl	8007e48 <ulSetInterruptMask>
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062c8:	f001 f8a4 	bl	8007414 <xTaskGetSchedulerState>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d102      	bne.n	80062d8 <xQueueReceive+0x52>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <xQueueReceive+0x56>
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <xQueueReceive+0x58>
 80062dc:	2300      	movs	r3, #0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d103      	bne.n	80062ea <xQueueReceive+0x64>
 80062e2:	f001 fdb1 	bl	8007e48 <ulSetInterruptMask>
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80062ea:	f001 fc17 	bl	8007b1c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f2:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d019      	beq.n	800632e <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	6a38      	ldr	r0, [r7, #32]
 80062fe:	f000 f87e 	bl	80063fe <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	1e5a      	subs	r2, r3, #1
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d009      	beq.n	8006326 <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	3310      	adds	r3, #16
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fe72 	bl	8007000 <xTaskRemoveFromEventList>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006322:	f001 fbe9 	bl	8007af8 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006326:	f001 fc0b 	bl	8007b40 <vPortExitCritical>
                return pdPASS;
 800632a:	2301      	movs	r3, #1
 800632c:	e063      	b.n	80063f6 <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d103      	bne.n	800633c <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006334:	f001 fc04 	bl	8007b40 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006338:	2300      	movs	r3, #0
 800633a:	e05c      	b.n	80063f6 <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006342:	f107 0314 	add.w	r3, r7, #20
 8006346:	4618      	mov	r0, r3
 8006348:	f000 ff28 	bl	800719c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800634c:	2301      	movs	r3, #1
 800634e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006350:	f001 fbf6 	bl	8007b40 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006354:	f000 fb88 	bl	8006a68 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006358:	f001 fbe0 	bl	8007b1c <vPortEnterCritical>
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006362:	b25b      	sxtb	r3, r3
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d103      	bne.n	8006372 <xQueueReceive+0xec>
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006378:	b25b      	sxtb	r3, r3
 800637a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637e:	d103      	bne.n	8006388 <xQueueReceive+0x102>
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006388:	f001 fbda 	bl	8007b40 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800638c:	1d3a      	adds	r2, r7, #4
 800638e:	f107 0314 	add.w	r3, r7, #20
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f000 ff17 	bl	80071c8 <xTaskCheckForTimeOut>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d11d      	bne.n	80063dc <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063a0:	6a38      	ldr	r0, [r7, #32]
 80063a2:	f000 f8a4 	bl	80064ee <prvIsQueueEmpty>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d011      	beq.n	80063d0 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	3324      	adds	r3, #36	@ 0x24
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	4611      	mov	r1, r2
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 fdc7 	bl	8006f48 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80063ba:	6a38      	ldr	r0, [r7, #32]
 80063bc:	f000 f845 	bl	800644a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80063c0:	f000 fb60 	bl	8006a84 <xTaskResumeAll>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d18f      	bne.n	80062ea <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 80063ca:	f001 fb95 	bl	8007af8 <vPortYield>
 80063ce:	e78c      	b.n	80062ea <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80063d0:	6a38      	ldr	r0, [r7, #32]
 80063d2:	f000 f83a 	bl	800644a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80063d6:	f000 fb55 	bl	8006a84 <xTaskResumeAll>
 80063da:	e786      	b.n	80062ea <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80063dc:	6a38      	ldr	r0, [r7, #32]
 80063de:	f000 f834 	bl	800644a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80063e2:	f000 fb4f 	bl	8006a84 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063e6:	6a38      	ldr	r0, [r7, #32]
 80063e8:	f000 f881 	bl	80064ee <prvIsQueueEmpty>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f43f af7b 	beq.w	80062ea <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80063f4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3728      	adds	r7, #40	@ 0x28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b082      	sub	sp, #8
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640c:	2b00      	cmp	r3, #0
 800640e:	d018      	beq.n	8006442 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006418:	441a      	add	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	429a      	cmp	r2, r3
 8006428:	d303      	bcc.n	8006432 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68d9      	ldr	r1, [r3, #12]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643a:	461a      	mov	r2, r3
 800643c:	6838      	ldr	r0, [r7, #0]
 800643e:	f002 f946 	bl	80086ce <memcpy>
    }
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006452:	f001 fb63 	bl	8007b1c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800645c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800645e:	e011      	b.n	8006484 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006464:	2b00      	cmp	r3, #0
 8006466:	d012      	beq.n	800648e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3324      	adds	r3, #36	@ 0x24
 800646c:	4618      	mov	r0, r3
 800646e:	f000 fdc7 	bl	8007000 <xTaskRemoveFromEventList>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006478:	f000 fefe 	bl	8007278 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	3b01      	subs	r3, #1
 8006480:	b2db      	uxtb	r3, r3
 8006482:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006488:	2b00      	cmp	r3, #0
 800648a:	dce9      	bgt.n	8006460 <prvUnlockQueue+0x16>
 800648c:	e000      	b.n	8006490 <prvUnlockQueue+0x46>
                    break;
 800648e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	22ff      	movs	r2, #255	@ 0xff
 8006494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8006498:	f001 fb52 	bl	8007b40 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800649c:	f001 fb3e 	bl	8007b1c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064a6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80064a8:	e011      	b.n	80064ce <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d012      	beq.n	80064d8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	3310      	adds	r3, #16
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fda2 	bl	8007000 <xTaskRemoveFromEventList>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80064c2:	f000 fed9 	bl	8007278 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80064c6:	7bbb      	ldrb	r3, [r7, #14]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80064ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	dce9      	bgt.n	80064aa <prvUnlockQueue+0x60>
 80064d6:	e000      	b.n	80064da <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80064d8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	22ff      	movs	r2, #255	@ 0xff
 80064de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80064e2:	f001 fb2d 	bl	8007b40 <vPortExitCritical>
}
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80064f6:	f001 fb11 	bl	8007b1c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006502:	2301      	movs	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	e001      	b.n	800650c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800650c:	f001 fb18 	bl	8007b40 <vPortExitCritical>

    return xReturn;
 8006510:	68fb      	ldr	r3, [r7, #12]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8006526:	2300      	movs	r3, #0
 8006528:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d103      	bne.n	8006538 <vQueueAddToRegistry+0x1c>
 8006530:	f001 fc8a 	bl	8007e48 <ulSetInterruptMask>
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d024      	beq.n	8006588 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	e01e      	b.n	8006582 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8006544:	4a17      	ldr	r2, [pc, #92]	@ (80065a4 <vQueueAddToRegistry+0x88>)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	4413      	add	r3, r2
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	429a      	cmp	r2, r3
 8006552:	d105      	bne.n	8006560 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	4a12      	ldr	r2, [pc, #72]	@ (80065a4 <vQueueAddToRegistry+0x88>)
 800655a:	4413      	add	r3, r2
 800655c:	60bb      	str	r3, [r7, #8]
                    break;
 800655e:	e013      	b.n	8006588 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <vQueueAddToRegistry+0x60>
 8006566:	4a0f      	ldr	r2, [pc, #60]	@ (80065a4 <vQueueAddToRegistry+0x88>)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d104      	bne.n	800657c <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	4a0b      	ldr	r2, [pc, #44]	@ (80065a4 <vQueueAddToRegistry+0x88>)
 8006578:	4413      	add	r3, r2
 800657a:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3301      	adds	r3, #1
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b07      	cmp	r3, #7
 8006586:	d9dd      	bls.n	8006544 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800659a:	bf00      	nop
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	200007d0 	.word	0x200007d0

080065a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80065b8:	f001 fab0 	bl	8007b1c <vPortEnterCritical>
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065c2:	b25b      	sxtb	r3, r3
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c8:	d103      	bne.n	80065d2 <vQueueWaitForMessageRestricted+0x2a>
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065d8:	b25b      	sxtb	r3, r3
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065de:	d103      	bne.n	80065e8 <vQueueWaitForMessageRestricted+0x40>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065e8:	f001 faaa 	bl	8007b40 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d106      	bne.n	8006602 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	3324      	adds	r3, #36	@ 0x24
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fcc1 	bl	8006f84 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006602:	6978      	ldr	r0, [r7, #20]
 8006604:	f7ff ff21 	bl	800644a <prvUnlockQueue>
    }
 8006608:	bf00      	nop
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8006610:	b580      	push	{r7, lr}
 8006612:	b08c      	sub	sp, #48	@ 0x30
 8006614:	af04      	add	r7, sp, #16
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800661e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d103      	bne.n	800662c <xTaskCreateStatic+0x1c>
 8006624:	f001 fc10 	bl	8007e48 <ulSetInterruptMask>
 8006628:	bf00      	nop
 800662a:	e7fd      	b.n	8006628 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	2b00      	cmp	r3, #0
 8006630:	d103      	bne.n	800663a <xTaskCreateStatic+0x2a>
 8006632:	f001 fc09 	bl	8007e48 <ulSetInterruptMask>
 8006636:	bf00      	nop
 8006638:	e7fd      	b.n	8006636 <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800663a:	235c      	movs	r3, #92	@ 0x5c
 800663c:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b5c      	cmp	r3, #92	@ 0x5c
 8006642:	d003      	beq.n	800664c <xTaskCreateStatic+0x3c>
 8006644:	f001 fc00 	bl	8007e48 <ulSetInterruptMask>
 8006648:	bf00      	nop
 800664a:	e7fd      	b.n	8006648 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800664c:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800664e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006650:	2b00      	cmp	r3, #0
 8006652:	d023      	beq.n	800669c <xTaskCreateStatic+0x8c>
 8006654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d020      	beq.n	800669c <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800665a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665c:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800665e:	225c      	movs	r2, #92	@ 0x5c
 8006660:	2100      	movs	r1, #0
 8006662:	69f8      	ldr	r0, [r7, #28]
 8006664:	f001 ffb8 	bl	80085d8 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800666c:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	2202      	movs	r2, #2
 8006672:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006676:	2300      	movs	r3, #0
 8006678:	9303      	str	r3, [sp, #12]
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	9302      	str	r3, [sp, #8]
 800667e:	f107 0318 	add.w	r3, r7, #24
 8006682:	9301      	str	r3, [sp, #4]
 8006684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f855 	bl	800673e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006694:	69f8      	ldr	r0, [r7, #28]
 8006696:	f000 f8d5 	bl	8006844 <prvAddNewTaskToReadyList>
 800669a:	e001      	b.n	80066a0 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800669c:	2300      	movs	r3, #0
 800669e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80066a0:	69bb      	ldr	r3, [r7, #24]
    }
 80066a2:	4618      	mov	r0, r3
 80066a4:	3720      	adds	r7, #32
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b08c      	sub	sp, #48	@ 0x30
 80066ae:	af04      	add	r7, sp, #16
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	603b      	str	r3, [r7, #0]
 80066b6:	4613      	mov	r3, r2
 80066b8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066ba:	88fb      	ldrh	r3, [r7, #6]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 fc22 	bl	8007f08 <pvPortMalloc>
 80066c4:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d013      	beq.n	80066f4 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066cc:	205c      	movs	r0, #92	@ 0x5c
 80066ce:	f001 fc1b 	bl	8007f08 <pvPortMalloc>
 80066d2:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d008      	beq.n	80066ec <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80066da:	225c      	movs	r2, #92	@ 0x5c
 80066dc:	2100      	movs	r1, #0
 80066de:	69f8      	ldr	r0, [r7, #28]
 80066e0:	f001 ff7a 	bl	80085d8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80066ea:	e005      	b.n	80066f8 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80066ec:	6978      	ldr	r0, [r7, #20]
 80066ee:	f001 fcc7 	bl	8008080 <vPortFree>
 80066f2:	e001      	b.n	80066f8 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d017      	beq.n	800672e <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006706:	88fa      	ldrh	r2, [r7, #6]
 8006708:	2300      	movs	r3, #0
 800670a:	9303      	str	r3, [sp, #12]
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	9302      	str	r3, [sp, #8]
 8006710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	68b9      	ldr	r1, [r7, #8]
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 f80e 	bl	800673e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006722:	69f8      	ldr	r0, [r7, #28]
 8006724:	f000 f88e 	bl	8006844 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006728:	2301      	movs	r3, #1
 800672a:	61bb      	str	r3, [r7, #24]
 800672c:	e002      	b.n	8006734 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800672e:	f04f 33ff 	mov.w	r3, #4294967295
 8006732:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006734:	69bb      	ldr	r3, [r7, #24]
    }
 8006736:	4618      	mov	r0, r3
 8006738:	3720      	adds	r7, #32
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b086      	sub	sp, #24
 8006742:	af00      	add	r7, sp, #0
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	607a      	str	r2, [r7, #4]
 800674a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800674c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	461a      	mov	r2, r3
 8006756:	21a5      	movs	r1, #165	@ 0xa5
 8006758:	f001 ff3e 	bl	80085d8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006766:	3b01      	subs	r3, #1
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f023 0307 	bic.w	r3, r3, #7
 8006774:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <prvInitialiseNewTask+0x4a>
 8006780:	f001 fb62 	bl	8007e48 <ulSetInterruptMask>
 8006784:	bf00      	nop
 8006786:	e7fd      	b.n	8006784 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d01e      	beq.n	80067cc <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800678e:	2300      	movs	r3, #0
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	e012      	b.n	80067ba <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	4413      	add	r3, r2
 800679a:	7819      	ldrb	r1, [r3, #0]
 800679c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	4413      	add	r3, r2
 80067a2:	3334      	adds	r3, #52	@ 0x34
 80067a4:	460a      	mov	r2, r1
 80067a6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	4413      	add	r3, r2
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d006      	beq.n	80067c2 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	3301      	adds	r3, #1
 80067b8:	617b      	str	r3, [r7, #20]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b0f      	cmp	r3, #15
 80067be:	d9e9      	bls.n	8006794 <prvInitialiseNewTask+0x56>
 80067c0:	e000      	b.n	80067c4 <prvInitialiseNewTask+0x86>
            {
                break;
 80067c2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	2b37      	cmp	r3, #55	@ 0x37
 80067d0:	d903      	bls.n	80067da <prvInitialiseNewTask+0x9c>
 80067d2:	f001 fb39 	bl	8007e48 <ulSetInterruptMask>
 80067d6:	bf00      	nop
 80067d8:	e7fd      	b.n	80067d6 <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	2b37      	cmp	r3, #55	@ 0x37
 80067de:	d901      	bls.n	80067e4 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067e0:	2337      	movs	r3, #55	@ 0x37
 80067e2:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80067e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e6:	6a3a      	ldr	r2, [r7, #32]
 80067e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80067ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ec:	6a3a      	ldr	r2, [r7, #32]
 80067ee:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f2:	3304      	adds	r3, #4
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff fbf1 	bl	8005fdc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fc:	3318      	adds	r3, #24
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fbec 	bl	8005fdc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006806:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006808:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006812:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006818:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	6938      	ldr	r0, [r7, #16]
 8006824:	f001 f9d8 	bl	8007bd8 <pxPortInitialiseStack>
 8006828:	4602      	mov	r2, r0
 800682a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006838:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800683a:	bf00      	nop
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800684c:	f001 f966 	bl	8007b1c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006850:	4b3e      	ldr	r3, [pc, #248]	@ (800694c <prvAddNewTaskToReadyList+0x108>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	4a3d      	ldr	r2, [pc, #244]	@ (800694c <prvAddNewTaskToReadyList+0x108>)
 8006858:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800685a:	4b3d      	ldr	r3, [pc, #244]	@ (8006950 <prvAddNewTaskToReadyList+0x10c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006862:	4a3b      	ldr	r2, [pc, #236]	@ (8006950 <prvAddNewTaskToReadyList+0x10c>)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006868:	4b38      	ldr	r3, [pc, #224]	@ (800694c <prvAddNewTaskToReadyList+0x108>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d110      	bne.n	8006892 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006870:	f000 fd1e 	bl	80072b0 <prvInitialiseTaskLists>
 8006874:	e00d      	b.n	8006892 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006876:	4b37      	ldr	r3, [pc, #220]	@ (8006954 <prvAddNewTaskToReadyList+0x110>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800687e:	4b34      	ldr	r3, [pc, #208]	@ (8006950 <prvAddNewTaskToReadyList+0x10c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006888:	429a      	cmp	r2, r3
 800688a:	d802      	bhi.n	8006892 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800688c:	4a30      	ldr	r2, [pc, #192]	@ (8006950 <prvAddNewTaskToReadyList+0x10c>)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006892:	4b31      	ldr	r3, [pc, #196]	@ (8006958 <prvAddNewTaskToReadyList+0x114>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3301      	adds	r3, #1
 8006898:	4a2f      	ldr	r2, [pc, #188]	@ (8006958 <prvAddNewTaskToReadyList+0x114>)
 800689a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800689c:	4b2e      	ldr	r3, [pc, #184]	@ (8006958 <prvAddNewTaskToReadyList+0x114>)
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a8:	4b2c      	ldr	r3, [pc, #176]	@ (800695c <prvAddNewTaskToReadyList+0x118>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d903      	bls.n	80068b8 <prvAddNewTaskToReadyList+0x74>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b4:	4a29      	ldr	r2, [pc, #164]	@ (800695c <prvAddNewTaskToReadyList+0x118>)
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068bc:	4928      	ldr	r1, [pc, #160]	@ (8006960 <prvAddNewTaskToReadyList+0x11c>)
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	3304      	adds	r3, #4
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	609a      	str	r2, [r3, #8]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	60da      	str	r2, [r3, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	3204      	adds	r2, #4
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	1d1a      	adds	r2, r3, #4
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	609a      	str	r2, [r3, #8]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4a19      	ldr	r2, [pc, #100]	@ (8006960 <prvAddNewTaskToReadyList+0x11c>)
 80068fc:	441a      	add	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	615a      	str	r2, [r3, #20]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006906:	4916      	ldr	r1, [pc, #88]	@ (8006960 <prvAddNewTaskToReadyList+0x11c>)
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	1c59      	adds	r1, r3, #1
 8006916:	4812      	ldr	r0, [pc, #72]	@ (8006960 <prvAddNewTaskToReadyList+0x11c>)
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4403      	add	r3, r0
 8006922:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006924:	f001 f90c 	bl	8007b40 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006928:	4b0a      	ldr	r3, [pc, #40]	@ (8006954 <prvAddNewTaskToReadyList+0x110>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006930:	4b07      	ldr	r3, [pc, #28]	@ (8006950 <prvAddNewTaskToReadyList+0x10c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693a:	429a      	cmp	r2, r3
 800693c:	d201      	bcs.n	8006942 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800693e:	f001 f8db 	bl	8007af8 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000ce4 	.word	0x20000ce4
 8006950:	20000810 	.word	0x20000810
 8006954:	20000cf0 	.word	0x20000cf0
 8006958:	20000d00 	.word	0x20000d00
 800695c:	20000cec 	.word	0x20000cec
 8006960:	20000814 	.word	0x20000814

08006964 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800696c:	2300      	movs	r3, #0
 800696e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d010      	beq.n	8006998 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8006976:	4b0d      	ldr	r3, [pc, #52]	@ (80069ac <vTaskDelay+0x48>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <vTaskDelay+0x22>
 800697e:	f001 fa63 	bl	8007e48 <ulSetInterruptMask>
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8006986:	f000 f86f 	bl	8006a68 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800698a:	2100      	movs	r1, #0
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fd5f 	bl	8007450 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8006992:	f000 f877 	bl	8006a84 <xTaskResumeAll>
 8006996:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800699e:	f001 f8ab 	bl	8007af8 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	20000d0c 	.word	0x20000d0c

080069b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069be:	463a      	mov	r2, r7
 80069c0:	1d39      	adds	r1, r7, #4
 80069c2:	f107 0308 	add.w	r3, r7, #8
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff fab4 	bl	8005f34 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	9202      	str	r2, [sp, #8]
 80069d4:	9301      	str	r3, [sp, #4]
 80069d6:	2300      	movs	r3, #0
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	2300      	movs	r3, #0
 80069dc:	460a      	mov	r2, r1
 80069de:	491b      	ldr	r1, [pc, #108]	@ (8006a4c <vTaskStartScheduler+0x9c>)
 80069e0:	481b      	ldr	r0, [pc, #108]	@ (8006a50 <vTaskStartScheduler+0xa0>)
 80069e2:	f7ff fe15 	bl	8006610 <xTaskCreateStatic>
 80069e6:	4603      	mov	r3, r0
 80069e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006a54 <vTaskStartScheduler+0xa4>)
 80069ea:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 80069ec:	4b19      	ldr	r3, [pc, #100]	@ (8006a54 <vTaskStartScheduler+0xa4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 80069f4:	2301      	movs	r3, #1
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e001      	b.n	80069fe <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d102      	bne.n	8006a0a <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8006a04:	f000 fd92 	bl	800752c <xTimerCreateTimerTask>
 8006a08:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d10e      	bne.n	8006a2e <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8006a10:	f001 fa1a 	bl	8007e48 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8006a14:	4b10      	ldr	r3, [pc, #64]	@ (8006a58 <vTaskStartScheduler+0xa8>)
 8006a16:	f04f 32ff 	mov.w	r2, #4294967295
 8006a1a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006a5c <vTaskStartScheduler+0xac>)
 8006a1e:	2201      	movs	r2, #1
 8006a20:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a22:	4b0f      	ldr	r3, [pc, #60]	@ (8006a60 <vTaskStartScheduler+0xb0>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8006a28:	f001 f960 	bl	8007cec <xPortStartScheduler>
 8006a2c:	e007      	b.n	8006a3e <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a34:	d103      	bne.n	8006a3e <vTaskStartScheduler+0x8e>
 8006a36:	f001 fa07 	bl	8007e48 <ulSetInterruptMask>
 8006a3a:	bf00      	nop
 8006a3c:	e7fd      	b.n	8006a3a <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006a3e:	4b09      	ldr	r3, [pc, #36]	@ (8006a64 <vTaskStartScheduler+0xb4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
}
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	08009158 	.word	0x08009158
 8006a50:	08007291 	.word	0x08007291
 8006a54:	20000d08 	.word	0x20000d08
 8006a58:	20000d04 	.word	0x20000d04
 8006a5c:	20000cf0 	.word	0x20000cf0
 8006a60:	20000ce8 	.word	0x20000ce8
 8006a64:	080091d8 	.word	0x080091d8

08006a68 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006a6c:	4b04      	ldr	r3, [pc, #16]	@ (8006a80 <vTaskSuspendAll+0x18>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	4a03      	ldr	r2, [pc, #12]	@ (8006a80 <vTaskSuspendAll+0x18>)
 8006a74:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006a76:	bf00      	nop
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	20000d0c 	.word	0x20000d0c

08006a84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8006a92:	4b6b      	ldr	r3, [pc, #428]	@ (8006c40 <xTaskResumeAll+0x1bc>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <xTaskResumeAll+0x1e>
 8006a9a:	f001 f9d5 	bl	8007e48 <ulSetInterruptMask>
 8006a9e:	bf00      	nop
 8006aa0:	e7fd      	b.n	8006a9e <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006aa2:	f001 f83b 	bl	8007b1c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006aa6:	4b66      	ldr	r3, [pc, #408]	@ (8006c40 <xTaskResumeAll+0x1bc>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	4a64      	ldr	r2, [pc, #400]	@ (8006c40 <xTaskResumeAll+0x1bc>)
 8006aae:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006ab0:	4b63      	ldr	r3, [pc, #396]	@ (8006c40 <xTaskResumeAll+0x1bc>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f040 80bb 	bne.w	8006c30 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006aba:	4b62      	ldr	r3, [pc, #392]	@ (8006c44 <xTaskResumeAll+0x1c0>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 80b6 	beq.w	8006c30 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ac4:	e08b      	b.n	8006bde <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac6:	4b60      	ldr	r3, [pc, #384]	@ (8006c48 <xTaskResumeAll+0x1c4>)
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad2:	60bb      	str	r3, [r7, #8]
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	6a12      	ldr	r2, [r2, #32]
 8006adc:	609a      	str	r2, [r3, #8]
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	69d2      	ldr	r2, [r2, #28]
 8006ae6:	605a      	str	r2, [r3, #4]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	3318      	adds	r3, #24
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d103      	bne.n	8006afc <xTaskResumeAll+0x78>
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	6a1a      	ldr	r2, [r3, #32]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	605a      	str	r2, [r3, #4]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2200      	movs	r2, #0
 8006b00:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	1e5a      	subs	r2, r3, #1
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	607b      	str	r3, [r7, #4]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	68d2      	ldr	r2, [r2, #12]
 8006b1a:	609a      	str	r2, [r3, #8]
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	6892      	ldr	r2, [r2, #8]
 8006b24:	605a      	str	r2, [r3, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d103      	bne.n	8006b3a <xTaskResumeAll+0xb6>
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	605a      	str	r2, [r3, #4]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	615a      	str	r2, [r3, #20]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	1e5a      	subs	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8006c4c <xTaskResumeAll+0x1c8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d903      	bls.n	8006b5e <xTaskResumeAll+0xda>
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5a:	4a3c      	ldr	r2, [pc, #240]	@ (8006c4c <xTaskResumeAll+0x1c8>)
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b62:	493b      	ldr	r1, [pc, #236]	@ (8006c50 <xTaskResumeAll+0x1cc>)
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	440b      	add	r3, r1
 8006b6e:	3304      	adds	r3, #4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	609a      	str	r2, [r3, #8]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	60da      	str	r2, [r3, #12]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	3204      	adds	r2, #4
 8006b8a:	605a      	str	r2, [r3, #4]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	1d1a      	adds	r2, r3, #4
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	609a      	str	r2, [r3, #8]
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4a2b      	ldr	r2, [pc, #172]	@ (8006c50 <xTaskResumeAll+0x1cc>)
 8006ba2:	441a      	add	r2, r3
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	615a      	str	r2, [r3, #20]
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bac:	4928      	ldr	r1, [pc, #160]	@ (8006c50 <xTaskResumeAll+0x1cc>)
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	1c59      	adds	r1, r3, #1
 8006bbc:	4824      	ldr	r0, [pc, #144]	@ (8006c50 <xTaskResumeAll+0x1cc>)
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4403      	add	r3, r0
 8006bc8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bce:	4b21      	ldr	r3, [pc, #132]	@ (8006c54 <xTaskResumeAll+0x1d0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d902      	bls.n	8006bde <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8006bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8006c58 <xTaskResumeAll+0x1d4>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bde:	4b1a      	ldr	r3, [pc, #104]	@ (8006c48 <xTaskResumeAll+0x1c4>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f47f af6f 	bne.w	8006ac6 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006bee:	f000 fbf5 	bl	80073dc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8006c5c <xTaskResumeAll+0x1d8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d010      	beq.n	8006c20 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006bfe:	f000 f83f 	bl	8006c80 <xTaskIncrementTick>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 8006c08:	4b13      	ldr	r3, [pc, #76]	@ (8006c58 <xTaskResumeAll+0x1d4>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1f1      	bne.n	8006bfe <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 8006c1a:	4b10      	ldr	r3, [pc, #64]	@ (8006c5c <xTaskResumeAll+0x1d8>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006c20:	4b0d      	ldr	r3, [pc, #52]	@ (8006c58 <xTaskResumeAll+0x1d4>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006c2c:	f000 ff64 	bl	8007af8 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006c30:	f000 ff86 	bl	8007b40 <vPortExitCritical>

    return xAlreadyYielded;
 8006c34:	693b      	ldr	r3, [r7, #16]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000d0c 	.word	0x20000d0c
 8006c44:	20000ce4 	.word	0x20000ce4
 8006c48:	20000ca4 	.word	0x20000ca4
 8006c4c:	20000cec 	.word	0x20000cec
 8006c50:	20000814 	.word	0x20000814
 8006c54:	20000810 	.word	0x20000810
 8006c58:	20000cf8 	.word	0x20000cf8
 8006c5c:	20000cf4 	.word	0x20000cf4

08006c60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006c66:	4b05      	ldr	r3, [pc, #20]	@ (8006c7c <xTaskGetTickCount+0x1c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006c6c:	687b      	ldr	r3, [r7, #4]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	20000ce8 	.word	0x20000ce8

08006c80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8006e74 <xTaskIncrementTick+0x1f4>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f040 80e6 	bne.w	8006e60 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c94:	4b78      	ldr	r3, [pc, #480]	@ (8006e78 <xTaskIncrementTick+0x1f8>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006c9c:	4a76      	ldr	r2, [pc, #472]	@ (8006e78 <xTaskIncrementTick+0x1f8>)
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d119      	bne.n	8006cdc <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 8006ca8:	4b74      	ldr	r3, [pc, #464]	@ (8006e7c <xTaskIncrementTick+0x1fc>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <xTaskIncrementTick+0x3a>
 8006cb2:	f001 f8c9 	bl	8007e48 <ulSetInterruptMask>
 8006cb6:	bf00      	nop
 8006cb8:	e7fd      	b.n	8006cb6 <xTaskIncrementTick+0x36>
 8006cba:	4b70      	ldr	r3, [pc, #448]	@ (8006e7c <xTaskIncrementTick+0x1fc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	617b      	str	r3, [r7, #20]
 8006cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8006e80 <xTaskIncrementTick+0x200>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a6d      	ldr	r2, [pc, #436]	@ (8006e7c <xTaskIncrementTick+0x1fc>)
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	4a6d      	ldr	r2, [pc, #436]	@ (8006e80 <xTaskIncrementTick+0x200>)
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	4b6d      	ldr	r3, [pc, #436]	@ (8006e84 <xTaskIncrementTick+0x204>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	4a6b      	ldr	r2, [pc, #428]	@ (8006e84 <xTaskIncrementTick+0x204>)
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	f000 fb80 	bl	80073dc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006cdc:	4b6a      	ldr	r3, [pc, #424]	@ (8006e88 <xTaskIncrementTick+0x208>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	f0c0 80a7 	bcc.w	8006e36 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ce8:	4b64      	ldr	r3, [pc, #400]	@ (8006e7c <xTaskIncrementTick+0x1fc>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d104      	bne.n	8006cfc <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf2:	4b65      	ldr	r3, [pc, #404]	@ (8006e88 <xTaskIncrementTick+0x208>)
 8006cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf8:	601a      	str	r2, [r3, #0]
                    break;
 8006cfa:	e09c      	b.n	8006e36 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cfc:	4b5f      	ldr	r3, [pc, #380]	@ (8006e7c <xTaskIncrementTick+0x1fc>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d203      	bcs.n	8006d1c <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006d14:	4a5c      	ldr	r2, [pc, #368]	@ (8006e88 <xTaskIncrementTick+0x208>)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8006d1a:	e08c      	b.n	8006e36 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	60bb      	str	r3, [r7, #8]
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	68d2      	ldr	r2, [r2, #12]
 8006d2a:	609a      	str	r2, [r3, #8]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	6892      	ldr	r2, [r2, #8]
 8006d34:	605a      	str	r2, [r3, #4]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d103      	bne.n	8006d4a <xTaskIncrementTick+0xca>
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	615a      	str	r2, [r3, #20]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	1e5a      	subs	r2, r3, #1
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d01e      	beq.n	8006da0 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d66:	607b      	str	r3, [r7, #4]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	6a12      	ldr	r2, [r2, #32]
 8006d70:	609a      	str	r2, [r3, #8]
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	69d2      	ldr	r2, [r2, #28]
 8006d7a:	605a      	str	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	3318      	adds	r3, #24
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d103      	bne.n	8006d90 <xTaskIncrementTick+0x110>
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	6a1a      	ldr	r2, [r3, #32]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	605a      	str	r2, [r3, #4]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	2200      	movs	r2, #0
 8006d94:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	1e5a      	subs	r2, r3, #1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da4:	4b39      	ldr	r3, [pc, #228]	@ (8006e8c <xTaskIncrementTick+0x20c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d903      	bls.n	8006db4 <xTaskIncrementTick+0x134>
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db0:	4a36      	ldr	r2, [pc, #216]	@ (8006e8c <xTaskIncrementTick+0x20c>)
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db8:	4935      	ldr	r1, [pc, #212]	@ (8006e90 <xTaskIncrementTick+0x210>)
 8006dba:	4613      	mov	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	603b      	str	r3, [r7, #0]
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	609a      	str	r2, [r3, #8]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	60da      	str	r2, [r3, #12]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	3204      	adds	r2, #4
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1d1a      	adds	r2, r3, #4
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	609a      	str	r2, [r3, #8]
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dee:	4613      	mov	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4a26      	ldr	r2, [pc, #152]	@ (8006e90 <xTaskIncrementTick+0x210>)
 8006df8:	441a      	add	r2, r3
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	615a      	str	r2, [r3, #20]
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e02:	4923      	ldr	r1, [pc, #140]	@ (8006e90 <xTaskIncrementTick+0x210>)
 8006e04:	4613      	mov	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	1c59      	adds	r1, r3, #1
 8006e12:	481f      	ldr	r0, [pc, #124]	@ (8006e90 <xTaskIncrementTick+0x210>)
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4403      	add	r3, r0
 8006e1e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e24:	4b1b      	ldr	r3, [pc, #108]	@ (8006e94 <xTaskIncrementTick+0x214>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	f67f af5c 	bls.w	8006ce8 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 8006e30:	2301      	movs	r3, #1
 8006e32:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e34:	e758      	b.n	8006ce8 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e36:	4b17      	ldr	r3, [pc, #92]	@ (8006e94 <xTaskIncrementTick+0x214>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e3c:	4914      	ldr	r1, [pc, #80]	@ (8006e90 <xTaskIncrementTick+0x210>)
 8006e3e:	4613      	mov	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	440b      	add	r3, r1
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d901      	bls.n	8006e52 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006e52:	4b11      	ldr	r3, [pc, #68]	@ (8006e98 <xTaskIncrementTick+0x218>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d007      	beq.n	8006e6a <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	61fb      	str	r3, [r7, #28]
 8006e5e:	e004      	b.n	8006e6a <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006e60:	4b0e      	ldr	r3, [pc, #56]	@ (8006e9c <xTaskIncrementTick+0x21c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	4a0d      	ldr	r2, [pc, #52]	@ (8006e9c <xTaskIncrementTick+0x21c>)
 8006e68:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006e6a:	69fb      	ldr	r3, [r7, #28]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3720      	adds	r7, #32
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	20000d0c 	.word	0x20000d0c
 8006e78:	20000ce8 	.word	0x20000ce8
 8006e7c:	20000c9c 	.word	0x20000c9c
 8006e80:	20000ca0 	.word	0x20000ca0
 8006e84:	20000cfc 	.word	0x20000cfc
 8006e88:	20000d04 	.word	0x20000d04
 8006e8c:	20000cec 	.word	0x20000cec
 8006e90:	20000814 	.word	0x20000814
 8006e94:	20000810 	.word	0x20000810
 8006e98:	20000cf8 	.word	0x20000cf8
 8006e9c:	20000cf4 	.word	0x20000cf4

08006ea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8006ea6:	4b23      	ldr	r3, [pc, #140]	@ (8006f34 <vTaskSwitchContext+0x94>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006eae:	4b22      	ldr	r3, [pc, #136]	@ (8006f38 <vTaskSwitchContext+0x98>)
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006eb4:	e039      	b.n	8006f2a <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8006eb6:	4b20      	ldr	r3, [pc, #128]	@ (8006f38 <vTaskSwitchContext+0x98>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8006f3c <vTaskSwitchContext+0x9c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	607b      	str	r3, [r7, #4]
 8006ec2:	e009      	b.n	8006ed8 <vTaskSwitchContext+0x38>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d103      	bne.n	8006ed2 <vTaskSwitchContext+0x32>
 8006eca:	f000 ffbd 	bl	8007e48 <ulSetInterruptMask>
 8006ece:	bf00      	nop
 8006ed0:	e7fd      	b.n	8006ece <vTaskSwitchContext+0x2e>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	607b      	str	r3, [r7, #4]
 8006ed8:	4919      	ldr	r1, [pc, #100]	@ (8006f40 <vTaskSwitchContext+0xa0>)
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	4613      	mov	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	440b      	add	r3, r1
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0eb      	beq.n	8006ec4 <vTaskSwitchContext+0x24>
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4a12      	ldr	r2, [pc, #72]	@ (8006f40 <vTaskSwitchContext+0xa0>)
 8006ef8:	4413      	add	r3, r2
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	605a      	str	r2, [r3, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d103      	bne.n	8006f1a <vTaskSwitchContext+0x7a>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	605a      	str	r2, [r3, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4a08      	ldr	r2, [pc, #32]	@ (8006f44 <vTaskSwitchContext+0xa4>)
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	4a05      	ldr	r2, [pc, #20]	@ (8006f3c <vTaskSwitchContext+0x9c>)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6013      	str	r3, [r2, #0]
}
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	20000d0c 	.word	0x20000d0c
 8006f38:	20000cf8 	.word	0x20000cf8
 8006f3c:	20000cec 	.word	0x20000cec
 8006f40:	20000814 	.word	0x20000814
 8006f44:	20000810 	.word	0x20000810

08006f48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d103      	bne.n	8006f60 <vTaskPlaceOnEventList+0x18>
 8006f58:	f000 ff76 	bl	8007e48 <ulSetInterruptMask>
 8006f5c:	bf00      	nop
 8006f5e:	e7fd      	b.n	8006f5c <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f60:	4b07      	ldr	r3, [pc, #28]	@ (8006f80 <vTaskPlaceOnEventList+0x38>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3318      	adds	r3, #24
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff f844 	bl	8005ff6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f6e:	2101      	movs	r1, #1
 8006f70:	6838      	ldr	r0, [r7, #0]
 8006f72:	f000 fa6d 	bl	8007450 <prvAddCurrentTaskToDelayedList>
}
 8006f76:	bf00      	nop
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000810 	.word	0x20000810

08006f84 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d103      	bne.n	8006f9e <vTaskPlaceOnEventListRestricted+0x1a>
 8006f96:	f000 ff57 	bl	8007e48 <ulSetInterruptMask>
 8006f9a:	bf00      	nop
 8006f9c:	e7fd      	b.n	8006f9a <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	4b15      	ldr	r3, [pc, #84]	@ (8006ffc <vTaskPlaceOnEventListRestricted+0x78>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	61da      	str	r2, [r3, #28]
 8006fac:	4b13      	ldr	r3, [pc, #76]	@ (8006ffc <vTaskPlaceOnEventListRestricted+0x78>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	6892      	ldr	r2, [r2, #8]
 8006fb4:	621a      	str	r2, [r3, #32]
 8006fb6:	4b11      	ldr	r3, [pc, #68]	@ (8006ffc <vTaskPlaceOnEventListRestricted+0x78>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	3218      	adds	r2, #24
 8006fc0:	605a      	str	r2, [r3, #4]
 8006fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8006ffc <vTaskPlaceOnEventListRestricted+0x78>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f103 0218 	add.w	r2, r3, #24
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	609a      	str	r2, [r3, #8]
 8006fce:	4b0b      	ldr	r3, [pc, #44]	@ (8006ffc <vTaskPlaceOnEventListRestricted+0x78>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 8006fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fea:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fec:	6879      	ldr	r1, [r7, #4]
 8006fee:	68b8      	ldr	r0, [r7, #8]
 8006ff0:	f000 fa2e 	bl	8007450 <prvAddCurrentTaskToDelayedList>
    }
 8006ff4:	bf00      	nop
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20000810 	.word	0x20000810

08007000 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d103      	bne.n	800701e <xTaskRemoveFromEventList+0x1e>
 8007016:	f000 ff17 	bl	8007e48 <ulSetInterruptMask>
 800701a:	bf00      	nop
 800701c:	e7fd      	b.n	800701a <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	69db      	ldr	r3, [r3, #28]
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	6a12      	ldr	r2, [r2, #32]
 800702c:	609a      	str	r2, [r3, #8]
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	69d2      	ldr	r2, [r2, #28]
 8007036:	605a      	str	r2, [r3, #4]
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	3318      	adds	r3, #24
 8007040:	429a      	cmp	r2, r3
 8007042:	d103      	bne.n	800704c <xTaskRemoveFromEventList+0x4c>
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	6a1a      	ldr	r2, [r3, #32]
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	605a      	str	r2, [r3, #4]
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	2200      	movs	r2, #0
 8007050:	629a      	str	r2, [r3, #40]	@ 0x28
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	1e5a      	subs	r2, r3, #1
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800705c:	4b49      	ldr	r3, [pc, #292]	@ (8007184 <xTaskRemoveFromEventList+0x184>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d15f      	bne.n	8007124 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	68d2      	ldr	r2, [r2, #12]
 8007072:	609a      	str	r2, [r3, #8]
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	6892      	ldr	r2, [r2, #8]
 800707c:	605a      	str	r2, [r3, #4]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	3304      	adds	r3, #4
 8007086:	429a      	cmp	r2, r3
 8007088:	d103      	bne.n	8007092 <xTaskRemoveFromEventList+0x92>
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	605a      	str	r2, [r3, #4]
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	2200      	movs	r2, #0
 8007096:	615a      	str	r2, [r3, #20]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	1e5a      	subs	r2, r3, #1
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a6:	4b38      	ldr	r3, [pc, #224]	@ (8007188 <xTaskRemoveFromEventList+0x188>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d903      	bls.n	80070b6 <xTaskRemoveFromEventList+0xb6>
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b2:	4a35      	ldr	r2, [pc, #212]	@ (8007188 <xTaskRemoveFromEventList+0x188>)
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ba:	4934      	ldr	r1, [pc, #208]	@ (800718c <xTaskRemoveFromEventList+0x18c>)
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	3304      	adds	r3, #4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60bb      	str	r3, [r7, #8]
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	609a      	str	r2, [r3, #8]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	60da      	str	r2, [r3, #12]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	3204      	adds	r2, #4
 80070e2:	605a      	str	r2, [r3, #4]
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	1d1a      	adds	r2, r3, #4
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	609a      	str	r2, [r3, #8]
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4a24      	ldr	r2, [pc, #144]	@ (800718c <xTaskRemoveFromEventList+0x18c>)
 80070fa:	441a      	add	r2, r3
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	615a      	str	r2, [r3, #20]
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007104:	4921      	ldr	r1, [pc, #132]	@ (800718c <xTaskRemoveFromEventList+0x18c>)
 8007106:	4613      	mov	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	440b      	add	r3, r1
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	1c59      	adds	r1, r3, #1
 8007114:	481d      	ldr	r0, [pc, #116]	@ (800718c <xTaskRemoveFromEventList+0x18c>)
 8007116:	4613      	mov	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4403      	add	r3, r0
 8007120:	6019      	str	r1, [r3, #0]
 8007122:	e01b      	b.n	800715c <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007124:	4b1a      	ldr	r3, [pc, #104]	@ (8007190 <xTaskRemoveFromEventList+0x190>)
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	61da      	str	r2, [r3, #28]
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	621a      	str	r2, [r3, #32]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	3218      	adds	r2, #24
 8007140:	605a      	str	r2, [r3, #4]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	f103 0218 	add.w	r2, r3, #24
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	609a      	str	r2, [r3, #8]
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	4a10      	ldr	r2, [pc, #64]	@ (8007190 <xTaskRemoveFromEventList+0x190>)
 8007150:	629a      	str	r2, [r3, #40]	@ 0x28
 8007152:	4b0f      	ldr	r3, [pc, #60]	@ (8007190 <xTaskRemoveFromEventList+0x190>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3301      	adds	r3, #1
 8007158:	4a0d      	ldr	r2, [pc, #52]	@ (8007190 <xTaskRemoveFromEventList+0x190>)
 800715a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007160:	4b0c      	ldr	r3, [pc, #48]	@ (8007194 <xTaskRemoveFromEventList+0x194>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007166:	429a      	cmp	r2, r3
 8007168:	d905      	bls.n	8007176 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800716a:	2301      	movs	r3, #1
 800716c:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800716e:	4b0a      	ldr	r3, [pc, #40]	@ (8007198 <xTaskRemoveFromEventList+0x198>)
 8007170:	2201      	movs	r2, #1
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e001      	b.n	800717a <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 8007176:	2300      	movs	r3, #0
 8007178:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800717a:	69fb      	ldr	r3, [r7, #28]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3720      	adds	r7, #32
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20000d0c 	.word	0x20000d0c
 8007188:	20000cec 	.word	0x20000cec
 800718c:	20000814 	.word	0x20000814
 8007190:	20000ca4 	.word	0x20000ca4
 8007194:	20000810 	.word	0x20000810
 8007198:	20000cf8 	.word	0x20000cf8

0800719c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071a4:	4b06      	ldr	r3, [pc, #24]	@ (80071c0 <vTaskInternalSetTimeOutState+0x24>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80071ac:	4b05      	ldr	r3, [pc, #20]	@ (80071c4 <vTaskInternalSetTimeOutState+0x28>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	605a      	str	r2, [r3, #4]
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	20000cfc 	.word	0x20000cfc
 80071c4:	20000ce8 	.word	0x20000ce8

080071c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d103      	bne.n	80071e0 <xTaskCheckForTimeOut+0x18>
 80071d8:	f000 fe36 	bl	8007e48 <ulSetInterruptMask>
 80071dc:	bf00      	nop
 80071de:	e7fd      	b.n	80071dc <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d103      	bne.n	80071ee <xTaskCheckForTimeOut+0x26>
 80071e6:	f000 fe2f 	bl	8007e48 <ulSetInterruptMask>
 80071ea:	bf00      	nop
 80071ec:	e7fd      	b.n	80071ea <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 80071ee:	f000 fc95 	bl	8007b1c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80071f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007270 <xTaskCheckForTimeOut+0xa8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720a:	d102      	bne.n	8007212 <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800720c:	2300      	movs	r3, #0
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	e026      	b.n	8007260 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	4b17      	ldr	r3, [pc, #92]	@ (8007274 <xTaskCheckForTimeOut+0xac>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	429a      	cmp	r2, r3
 800721c:	d00a      	beq.n	8007234 <xTaskCheckForTimeOut+0x6c>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	429a      	cmp	r2, r3
 8007226:	d305      	bcc.n	8007234 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007228:	2301      	movs	r3, #1
 800722a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	e015      	b.n	8007260 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	429a      	cmp	r2, r3
 800723c:	d20b      	bcs.n	8007256 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	1ad2      	subs	r2, r2, r3
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff ffa6 	bl	800719c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007250:	2300      	movs	r3, #0
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	e004      	b.n	8007260 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800725c:	2301      	movs	r3, #1
 800725e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8007260:	f000 fc6e 	bl	8007b40 <vPortExitCritical>

    return xReturn;
 8007264:	697b      	ldr	r3, [r7, #20]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20000ce8 	.word	0x20000ce8
 8007274:	20000cfc 	.word	0x20000cfc

08007278 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800727c:	4b03      	ldr	r3, [pc, #12]	@ (800728c <vTaskMissedYield+0x14>)
 800727e:	2201      	movs	r2, #1
 8007280:	601a      	str	r2, [r3, #0]
}
 8007282:	bf00      	nop
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	20000cf8 	.word	0x20000cf8

08007290 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007298:	f000 f84a 	bl	8007330 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800729c:	4b03      	ldr	r3, [pc, #12]	@ (80072ac <prvIdleTask+0x1c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d9f9      	bls.n	8007298 <prvIdleTask+0x8>
            {
                taskYIELD();
 80072a4:	f000 fc28 	bl	8007af8 <vPortYield>
        prvCheckTasksWaitingTermination();
 80072a8:	e7f6      	b.n	8007298 <prvIdleTask+0x8>
 80072aa:	bf00      	nop
 80072ac:	20000814 	.word	0x20000814

080072b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072b6:	2300      	movs	r3, #0
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	e00c      	b.n	80072d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4a12      	ldr	r2, [pc, #72]	@ (8007310 <prvInitialiseTaskLists+0x60>)
 80072c8:	4413      	add	r3, r2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe fe66 	bl	8005f9c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3301      	adds	r3, #1
 80072d4:	607b      	str	r3, [r7, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b37      	cmp	r3, #55	@ 0x37
 80072da:	d9ef      	bls.n	80072bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80072dc:	480d      	ldr	r0, [pc, #52]	@ (8007314 <prvInitialiseTaskLists+0x64>)
 80072de:	f7fe fe5d 	bl	8005f9c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80072e2:	480d      	ldr	r0, [pc, #52]	@ (8007318 <prvInitialiseTaskLists+0x68>)
 80072e4:	f7fe fe5a 	bl	8005f9c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80072e8:	480c      	ldr	r0, [pc, #48]	@ (800731c <prvInitialiseTaskLists+0x6c>)
 80072ea:	f7fe fe57 	bl	8005f9c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80072ee:	480c      	ldr	r0, [pc, #48]	@ (8007320 <prvInitialiseTaskLists+0x70>)
 80072f0:	f7fe fe54 	bl	8005f9c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80072f4:	480b      	ldr	r0, [pc, #44]	@ (8007324 <prvInitialiseTaskLists+0x74>)
 80072f6:	f7fe fe51 	bl	8005f9c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80072fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007328 <prvInitialiseTaskLists+0x78>)
 80072fc:	4a05      	ldr	r2, [pc, #20]	@ (8007314 <prvInitialiseTaskLists+0x64>)
 80072fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007300:	4b0a      	ldr	r3, [pc, #40]	@ (800732c <prvInitialiseTaskLists+0x7c>)
 8007302:	4a05      	ldr	r2, [pc, #20]	@ (8007318 <prvInitialiseTaskLists+0x68>)
 8007304:	601a      	str	r2, [r3, #0]
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000814 	.word	0x20000814
 8007314:	20000c74 	.word	0x20000c74
 8007318:	20000c88 	.word	0x20000c88
 800731c:	20000ca4 	.word	0x20000ca4
 8007320:	20000cb8 	.word	0x20000cb8
 8007324:	20000cd0 	.word	0x20000cd0
 8007328:	20000c9c 	.word	0x20000c9c
 800732c:	20000ca0 	.word	0x20000ca0

08007330 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007336:	e019      	b.n	800736c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8007338:	f000 fbf0 	bl	8007b1c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800733c:	4b10      	ldr	r3, [pc, #64]	@ (8007380 <prvCheckTasksWaitingTermination+0x50>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3304      	adds	r3, #4
 8007348:	4618      	mov	r0, r3
 800734a:	f7fe fe8d 	bl	8006068 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800734e:	4b0d      	ldr	r3, [pc, #52]	@ (8007384 <prvCheckTasksWaitingTermination+0x54>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3b01      	subs	r3, #1
 8007354:	4a0b      	ldr	r2, [pc, #44]	@ (8007384 <prvCheckTasksWaitingTermination+0x54>)
 8007356:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8007358:	4b0b      	ldr	r3, [pc, #44]	@ (8007388 <prvCheckTasksWaitingTermination+0x58>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3b01      	subs	r3, #1
 800735e:	4a0a      	ldr	r2, [pc, #40]	@ (8007388 <prvCheckTasksWaitingTermination+0x58>)
 8007360:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8007362:	f000 fbed 	bl	8007b40 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f810 	bl	800738c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800736c:	4b06      	ldr	r3, [pc, #24]	@ (8007388 <prvCheckTasksWaitingTermination+0x58>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e1      	bne.n	8007338 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000cb8 	.word	0x20000cb8
 8007384:	20000ce4 	.word	0x20000ce4
 8007388:	20000ccc 	.word	0x20000ccc

0800738c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800739a:	2b00      	cmp	r3, #0
 800739c:	d108      	bne.n	80073b0 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fe6c 	bl	8008080 <vPortFree>
                vPortFree( pxTCB );
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fe69 	bl	8008080 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80073ae:	e011      	b.n	80073d4 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d103      	bne.n	80073c2 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fe60 	bl	8008080 <vPortFree>
    }
 80073c0:	e008      	b.n	80073d4 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d003      	beq.n	80073d4 <prvDeleteTCB+0x48>
 80073cc:	f000 fd3c 	bl	8007e48 <ulSetInterruptMask>
 80073d0:	bf00      	nop
 80073d2:	e7fd      	b.n	80073d0 <prvDeleteTCB+0x44>
    }
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073dc:	b480      	push	{r7}
 80073de:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073e0:	4b0a      	ldr	r3, [pc, #40]	@ (800740c <prvResetNextTaskUnblockTime+0x30>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d104      	bne.n	80073f4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80073ea:	4b09      	ldr	r3, [pc, #36]	@ (8007410 <prvResetNextTaskUnblockTime+0x34>)
 80073ec:	f04f 32ff 	mov.w	r2, #4294967295
 80073f0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80073f2:	e005      	b.n	8007400 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80073f4:	4b05      	ldr	r3, [pc, #20]	@ (800740c <prvResetNextTaskUnblockTime+0x30>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a04      	ldr	r2, [pc, #16]	@ (8007410 <prvResetNextTaskUnblockTime+0x34>)
 80073fe:	6013      	str	r3, [r2, #0]
}
 8007400:	bf00      	nop
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	20000c9c 	.word	0x20000c9c
 8007410:	20000d04 	.word	0x20000d04

08007414 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800741a:	4b0b      	ldr	r3, [pc, #44]	@ (8007448 <xTaskGetSchedulerState+0x34>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d102      	bne.n	8007428 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007422:	2301      	movs	r3, #1
 8007424:	607b      	str	r3, [r7, #4]
 8007426:	e008      	b.n	800743a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007428:	4b08      	ldr	r3, [pc, #32]	@ (800744c <xTaskGetSchedulerState+0x38>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007430:	2302      	movs	r3, #2
 8007432:	607b      	str	r3, [r7, #4]
 8007434:	e001      	b.n	800743a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007436:	2300      	movs	r3, #0
 8007438:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800743a:	687b      	ldr	r3, [r7, #4]
    }
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	20000cf0 	.word	0x20000cf0
 800744c:	20000d0c 	.word	0x20000d0c

08007450 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800745a:	4b2e      	ldr	r3, [pc, #184]	@ (8007514 <prvAddCurrentTaskToDelayedList+0xc4>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007460:	4b2d      	ldr	r3, [pc, #180]	@ (8007518 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3304      	adds	r3, #4
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe fdfe 	bl	8006068 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007472:	d124      	bne.n	80074be <prvAddCurrentTaskToDelayedList+0x6e>
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d021      	beq.n	80074be <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800747a:	4b28      	ldr	r3, [pc, #160]	@ (800751c <prvAddCurrentTaskToDelayedList+0xcc>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	613b      	str	r3, [r7, #16]
 8007480:	4b25      	ldr	r3, [pc, #148]	@ (8007518 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	609a      	str	r2, [r3, #8]
 8007488:	4b23      	ldr	r3, [pc, #140]	@ (8007518 <prvAddCurrentTaskToDelayedList+0xc8>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	6892      	ldr	r2, [r2, #8]
 8007490:	60da      	str	r2, [r3, #12]
 8007492:	4b21      	ldr	r3, [pc, #132]	@ (8007518 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	3204      	adds	r2, #4
 800749c:	605a      	str	r2, [r3, #4]
 800749e:	4b1e      	ldr	r3, [pc, #120]	@ (8007518 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	1d1a      	adds	r2, r3, #4
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	609a      	str	r2, [r3, #8]
 80074a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007518 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a1b      	ldr	r2, [pc, #108]	@ (800751c <prvAddCurrentTaskToDelayedList+0xcc>)
 80074ae:	615a      	str	r2, [r3, #20]
 80074b0:	4b1a      	ldr	r3, [pc, #104]	@ (800751c <prvAddCurrentTaskToDelayedList+0xcc>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3301      	adds	r3, #1
 80074b6:	4a19      	ldr	r2, [pc, #100]	@ (800751c <prvAddCurrentTaskToDelayedList+0xcc>)
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80074bc:	e026      	b.n	800750c <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4413      	add	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074c6:	4b14      	ldr	r3, [pc, #80]	@ (8007518 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d209      	bcs.n	80074ea <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074d6:	4b12      	ldr	r3, [pc, #72]	@ (8007520 <prvAddCurrentTaskToDelayedList+0xd0>)
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	4b0f      	ldr	r3, [pc, #60]	@ (8007518 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3304      	adds	r3, #4
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f7fe fd87 	bl	8005ff6 <vListInsert>
}
 80074e8:	e010      	b.n	800750c <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007524 <prvAddCurrentTaskToDelayedList+0xd4>)
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007518 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3304      	adds	r3, #4
 80074f4:	4619      	mov	r1, r3
 80074f6:	4610      	mov	r0, r2
 80074f8:	f7fe fd7d 	bl	8005ff6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80074fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007528 <prvAddCurrentTaskToDelayedList+0xd8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	429a      	cmp	r2, r3
 8007504:	d202      	bcs.n	800750c <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8007506:	4a08      	ldr	r2, [pc, #32]	@ (8007528 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6013      	str	r3, [r2, #0]
}
 800750c:	bf00      	nop
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	20000ce8 	.word	0x20000ce8
 8007518:	20000810 	.word	0x20000810
 800751c:	20000cd0 	.word	0x20000cd0
 8007520:	20000ca0 	.word	0x20000ca0
 8007524:	20000c9c 	.word	0x20000c9c
 8007528:	20000d04 	.word	0x20000d04

0800752c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007536:	f000 fa5f 	bl	80079f8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800753a:	4b18      	ldr	r3, [pc, #96]	@ (800759c <xTimerCreateTimerTask+0x70>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d020      	beq.n	8007584 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800754a:	463a      	mov	r2, r7
 800754c:	1d39      	adds	r1, r7, #4
 800754e:	f107 0308 	add.w	r3, r7, #8
 8007552:	4618      	mov	r0, r3
 8007554:	f7fe fd08 	bl	8005f68 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	9202      	str	r2, [sp, #8]
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	2302      	movs	r3, #2
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	2300      	movs	r3, #0
 8007568:	460a      	mov	r2, r1
 800756a:	490d      	ldr	r1, [pc, #52]	@ (80075a0 <xTimerCreateTimerTask+0x74>)
 800756c:	480d      	ldr	r0, [pc, #52]	@ (80075a4 <xTimerCreateTimerTask+0x78>)
 800756e:	f7ff f84f 	bl	8006610 <xTaskCreateStatic>
 8007572:	4603      	mov	r3, r0
 8007574:	4a0c      	ldr	r2, [pc, #48]	@ (80075a8 <xTimerCreateTimerTask+0x7c>)
 8007576:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8007578:	4b0b      	ldr	r3, [pc, #44]	@ (80075a8 <xTimerCreateTimerTask+0x7c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8007580:	2301      	movs	r3, #1
 8007582:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d103      	bne.n	8007592 <xTimerCreateTimerTask+0x66>
 800758a:	f000 fc5d 	bl	8007e48 <ulSetInterruptMask>
 800758e:	bf00      	nop
 8007590:	e7fd      	b.n	800758e <xTimerCreateTimerTask+0x62>
        return xReturn;
 8007592:	68fb      	ldr	r3, [r7, #12]
    }
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	20000d40 	.word	0x20000d40
 80075a0:	08009160 	.word	0x08009160
 80075a4:	08007651 	.word	0x08007651
 80075a8:	20000d44 	.word	0x20000d44

080075ac <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80075b8:	e008      	b.n	80075cc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	4413      	add	r3, r2
 80075c2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	699a      	ldr	r2, [r3, #24]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	18d1      	adds	r1, r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 f8d7 	bl	800778c <prvInsertTimerInActiveList>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1ea      	bne.n	80075ba <prvReloadTimer+0xe>
        }
    }
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075fa:	4b14      	ldr	r3, [pc, #80]	@ (800764c <prvProcessExpiredTimer+0x5c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3304      	adds	r3, #4
 8007608:	4618      	mov	r0, r3
 800760a:	f7fe fd2d 	bl	8006068 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f7ff ffc3 	bl	80075ac <prvReloadTimer>
 8007626:	e008      	b.n	800763a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800762e:	f023 0301 	bic.w	r3, r3, #1
 8007632:	b2da      	uxtb	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	4798      	blx	r3
    }
 8007642:	bf00      	nop
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	20000d38 	.word	0x20000d38

08007650 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007658:	f107 0308 	add.w	r3, r7, #8
 800765c:	4618      	mov	r0, r3
 800765e:	f000 f851 	bl	8007704 <prvGetNextExpireTime>
 8007662:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	4619      	mov	r1, r3
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f805 	bl	8007678 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800766e:	f000 f8cf 	bl	8007810 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007672:	bf00      	nop
 8007674:	e7f0      	b.n	8007658 <prvTimerTask+0x8>
	...

08007678 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007682:	f7ff f9f1 	bl	8006a68 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007686:	f107 0308 	add.w	r3, r7, #8
 800768a:	4618      	mov	r0, r3
 800768c:	f000 f85e 	bl	800774c <prvSampleTimeNow>
 8007690:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d12a      	bne.n	80076ee <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10a      	bne.n	80076b4 <prvProcessTimerOrBlockTask+0x3c>
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d806      	bhi.n	80076b4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80076a6:	f7ff f9ed 	bl	8006a84 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076aa:	68f9      	ldr	r1, [r7, #12]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff ff9f 	bl	80075f0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80076b2:	e01e      	b.n	80076f2 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d008      	beq.n	80076cc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076ba:	4b10      	ldr	r3, [pc, #64]	@ (80076fc <prvProcessTimerOrBlockTask+0x84>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <prvProcessTimerOrBlockTask+0x50>
 80076c4:	2301      	movs	r3, #1
 80076c6:	e000      	b.n	80076ca <prvProcessTimerOrBlockTask+0x52>
 80076c8:	2300      	movs	r3, #0
 80076ca:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007700 <prvProcessTimerOrBlockTask+0x88>)
 80076ce:	6818      	ldr	r0, [r3, #0]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	4619      	mov	r1, r3
 80076da:	f7fe ff65 	bl	80065a8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80076de:	f7ff f9d1 	bl	8006a84 <xTaskResumeAll>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 80076e8:	f000 fa06 	bl	8007af8 <vPortYield>
    }
 80076ec:	e001      	b.n	80076f2 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 80076ee:	f7ff f9c9 	bl	8006a84 <xTaskResumeAll>
    }
 80076f2:	bf00      	nop
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20000d3c 	.word	0x20000d3c
 8007700:	20000d40 	.word	0x20000d40

08007704 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800770c:	4b0e      	ldr	r3, [pc, #56]	@ (8007748 <prvGetNextExpireTime+0x44>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <prvGetNextExpireTime+0x16>
 8007716:	2201      	movs	r2, #1
 8007718:	e000      	b.n	800771c <prvGetNextExpireTime+0x18>
 800771a:	2200      	movs	r2, #0
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d105      	bne.n	8007734 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007728:	4b07      	ldr	r3, [pc, #28]	@ (8007748 <prvGetNextExpireTime+0x44>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	e001      	b.n	8007738 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007738:	68fb      	ldr	r3, [r7, #12]
    }
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	20000d38 	.word	0x20000d38

0800774c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007754:	f7ff fa84 	bl	8006c60 <xTaskGetTickCount>
 8007758:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800775a:	4b0b      	ldr	r3, [pc, #44]	@ (8007788 <prvSampleTimeNow+0x3c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	429a      	cmp	r2, r3
 8007762:	d205      	bcs.n	8007770 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007764:	f000 f922 	bl	80079ac <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	e002      	b.n	8007776 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007776:	4a04      	ldr	r2, [pc, #16]	@ (8007788 <prvSampleTimeNow+0x3c>)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800777c:	68fb      	ldr	r3, [r7, #12]
    }
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000d48 	.word	0x20000d48

0800778c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800779a:	2300      	movs	r3, #0
 800779c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d812      	bhi.n	80077d8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	1ad2      	subs	r2, r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d302      	bcc.n	80077c6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80077c0:	2301      	movs	r3, #1
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	e01b      	b.n	80077fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077c6:	4b10      	ldr	r3, [pc, #64]	@ (8007808 <prvInsertTimerInActiveList+0x7c>)
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3304      	adds	r3, #4
 80077ce:	4619      	mov	r1, r3
 80077d0:	4610      	mov	r0, r2
 80077d2:	f7fe fc10 	bl	8005ff6 <vListInsert>
 80077d6:	e012      	b.n	80077fe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d206      	bcs.n	80077ee <prvInsertTimerInActiveList+0x62>
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d302      	bcc.n	80077ee <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80077e8:	2301      	movs	r3, #1
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	e007      	b.n	80077fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077ee:	4b07      	ldr	r3, [pc, #28]	@ (800780c <prvInsertTimerInActiveList+0x80>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3304      	adds	r3, #4
 80077f6:	4619      	mov	r1, r3
 80077f8:	4610      	mov	r0, r2
 80077fa:	f7fe fbfc 	bl	8005ff6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80077fe:	697b      	ldr	r3, [r7, #20]
    }
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	20000d3c 	.word	0x20000d3c
 800780c:	20000d38 	.word	0x20000d38

08007810 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007810:	b580      	push	{r7, lr}
 8007812:	b088      	sub	sp, #32
 8007814:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007816:	e0b7      	b.n	8007988 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	da11      	bge.n	8007842 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800781e:	1d3b      	adds	r3, r7, #4
 8007820:	3304      	adds	r3, #4
 8007822:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d103      	bne.n	8007832 <prvProcessReceivedCommands+0x22>
 800782a:	f000 fb0d 	bl	8007e48 <ulSetInterruptMask>
 800782e:	bf00      	nop
 8007830:	e7fd      	b.n	800782e <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	6850      	ldr	r0, [r2, #4]
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	6892      	ldr	r2, [r2, #8]
 800783e:	4611      	mov	r1, r2
 8007840:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f2c0 809f 	blt.w	8007988 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d004      	beq.n	8007860 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	3304      	adds	r3, #4
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe fc04 	bl	8006068 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007860:	463b      	mov	r3, r7
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff ff72 	bl	800774c <prvSampleTimeNow>
 8007868:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3b01      	subs	r3, #1
 800786e:	2b08      	cmp	r3, #8
 8007870:	f200 8087 	bhi.w	8007982 <prvProcessReceivedCommands+0x172>
 8007874:	a201      	add	r2, pc, #4	@ (adr r2, 800787c <prvProcessReceivedCommands+0x6c>)
 8007876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787a:	bf00      	nop
 800787c:	080078a1 	.word	0x080078a1
 8007880:	080078a1 	.word	0x080078a1
 8007884:	08007909 	.word	0x08007909
 8007888:	0800791d 	.word	0x0800791d
 800788c:	08007959 	.word	0x08007959
 8007890:	080078a1 	.word	0x080078a1
 8007894:	080078a1 	.word	0x080078a1
 8007898:	08007909 	.word	0x08007909
 800789c:	0800791d 	.word	0x0800791d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078a6:	f043 0301 	orr.w	r3, r3, #1
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	18d1      	adds	r1, r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	69b8      	ldr	r0, [r7, #24]
 80078c0:	f7ff ff64 	bl	800778c <prvInsertTimerInActiveList>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d05d      	beq.n	8007986 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d009      	beq.n	80078ec <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	4413      	add	r3, r2
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	4619      	mov	r1, r3
 80078e4:	69b8      	ldr	r0, [r7, #24]
 80078e6:	f7ff fe61 	bl	80075ac <prvReloadTimer>
 80078ea:	e008      	b.n	80078fe <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078f2:	f023 0301 	bic.w	r3, r3, #1
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	69b8      	ldr	r0, [r7, #24]
 8007904:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007906:	e03e      	b.n	8007986 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800790e:	f023 0301 	bic.w	r3, r3, #1
 8007912:	b2da      	uxtb	r2, r3
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800791a:	e035      	b.n	8007988 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007922:	f043 0301 	orr.w	r3, r3, #1
 8007926:	b2da      	uxtb	r2, r3
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d103      	bne.n	8007944 <prvProcessReceivedCommands+0x134>
 800793c:	f000 fa84 	bl	8007e48 <ulSetInterruptMask>
 8007940:	bf00      	nop
 8007942:	e7fd      	b.n	8007940 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	699a      	ldr	r2, [r3, #24]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	18d1      	adds	r1, r2, r3
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	69b8      	ldr	r0, [r7, #24]
 8007952:	f7ff ff1b 	bl	800778c <prvInsertTimerInActiveList>
                        break;
 8007956:	e017      	b.n	8007988 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d103      	bne.n	800796e <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 8007966:	69b8      	ldr	r0, [r7, #24]
 8007968:	f000 fb8a 	bl	8008080 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800796c:	e00c      	b.n	8007988 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007974:	f023 0301 	bic.w	r3, r3, #1
 8007978:	b2da      	uxtb	r2, r3
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007980:	e002      	b.n	8007988 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007982:	bf00      	nop
 8007984:	e000      	b.n	8007988 <prvProcessReceivedCommands+0x178>
                        break;
 8007986:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007988:	4b07      	ldr	r3, [pc, #28]	@ (80079a8 <prvProcessReceivedCommands+0x198>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	1d39      	adds	r1, r7, #4
 800798e:	2200      	movs	r2, #0
 8007990:	4618      	mov	r0, r3
 8007992:	f7fe fc78 	bl	8006286 <xQueueReceive>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	f47f af3d 	bne.w	8007818 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800799e:	bf00      	nop
 80079a0:	bf00      	nop
 80079a2:	3720      	adds	r7, #32
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20000d40 	.word	0x20000d40

080079ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079b2:	e009      	b.n	80079c8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079b4:	4b0e      	ldr	r3, [pc, #56]	@ (80079f0 <prvSwitchTimerLists+0x44>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80079be:	f04f 31ff 	mov.w	r1, #4294967295
 80079c2:	6838      	ldr	r0, [r7, #0]
 80079c4:	f7ff fe14 	bl	80075f0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079c8:	4b09      	ldr	r3, [pc, #36]	@ (80079f0 <prvSwitchTimerLists+0x44>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1f0      	bne.n	80079b4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80079d2:	4b07      	ldr	r3, [pc, #28]	@ (80079f0 <prvSwitchTimerLists+0x44>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80079d8:	4b06      	ldr	r3, [pc, #24]	@ (80079f4 <prvSwitchTimerLists+0x48>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a04      	ldr	r2, [pc, #16]	@ (80079f0 <prvSwitchTimerLists+0x44>)
 80079de:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80079e0:	4a04      	ldr	r2, [pc, #16]	@ (80079f4 <prvSwitchTimerLists+0x48>)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6013      	str	r3, [r2, #0]
    }
 80079e6:	bf00      	nop
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	20000d38 	.word	0x20000d38
 80079f4:	20000d3c 	.word	0x20000d3c

080079f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80079fe:	f000 f88d 	bl	8007b1c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007a02:	4b15      	ldr	r3, [pc, #84]	@ (8007a58 <prvCheckForValidListAndQueue+0x60>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d120      	bne.n	8007a4c <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8007a0a:	4814      	ldr	r0, [pc, #80]	@ (8007a5c <prvCheckForValidListAndQueue+0x64>)
 8007a0c:	f7fe fac6 	bl	8005f9c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007a10:	4813      	ldr	r0, [pc, #76]	@ (8007a60 <prvCheckForValidListAndQueue+0x68>)
 8007a12:	f7fe fac3 	bl	8005f9c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007a16:	4b13      	ldr	r3, [pc, #76]	@ (8007a64 <prvCheckForValidListAndQueue+0x6c>)
 8007a18:	4a10      	ldr	r2, [pc, #64]	@ (8007a5c <prvCheckForValidListAndQueue+0x64>)
 8007a1a:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007a1c:	4b12      	ldr	r3, [pc, #72]	@ (8007a68 <prvCheckForValidListAndQueue+0x70>)
 8007a1e:	4a10      	ldr	r2, [pc, #64]	@ (8007a60 <prvCheckForValidListAndQueue+0x68>)
 8007a20:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a22:	2300      	movs	r3, #0
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	4b11      	ldr	r3, [pc, #68]	@ (8007a6c <prvCheckForValidListAndQueue+0x74>)
 8007a28:	4a11      	ldr	r2, [pc, #68]	@ (8007a70 <prvCheckForValidListAndQueue+0x78>)
 8007a2a:	2110      	movs	r1, #16
 8007a2c:	200a      	movs	r0, #10
 8007a2e:	f7fe fbbe 	bl	80061ae <xQueueGenericCreateStatic>
 8007a32:	4603      	mov	r3, r0
 8007a34:	4a08      	ldr	r2, [pc, #32]	@ (8007a58 <prvCheckForValidListAndQueue+0x60>)
 8007a36:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007a38:	4b07      	ldr	r3, [pc, #28]	@ (8007a58 <prvCheckForValidListAndQueue+0x60>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a40:	4b05      	ldr	r3, [pc, #20]	@ (8007a58 <prvCheckForValidListAndQueue+0x60>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	490b      	ldr	r1, [pc, #44]	@ (8007a74 <prvCheckForValidListAndQueue+0x7c>)
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe fd68 	bl	800651c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007a4c:	f000 f878 	bl	8007b40 <vPortExitCritical>
    }
 8007a50:	bf00      	nop
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20000d40 	.word	0x20000d40
 8007a5c:	20000d10 	.word	0x20000d10
 8007a60:	20000d24 	.word	0x20000d24
 8007a64:	20000d38 	.word	0x20000d38
 8007a68:	20000d3c 	.word	0x20000d3c
 8007a6c:	20000dec 	.word	0x20000dec
 8007a70:	20000d4c 	.word	0x20000d4c
 8007a74:	08009168 	.word	0x08009168

08007a78 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007aac <vPortSetupTimerInterrupt+0x34>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a82:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab0 <vPortSetupTimerInterrupt+0x38>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a88:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab4 <vPortSetupTimerInterrupt+0x3c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ab8 <vPortSetupTimerInterrupt+0x40>)
 8007a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a92:	099b      	lsrs	r3, r3, #6
 8007a94:	4a09      	ldr	r2, [pc, #36]	@ (8007abc <vPortSetupTimerInterrupt+0x44>)
 8007a96:	3b01      	subs	r3, #1
 8007a98:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8007a9a:	4b04      	ldr	r3, [pc, #16]	@ (8007aac <vPortSetupTimerInterrupt+0x34>)
 8007a9c:	2207      	movs	r2, #7
 8007a9e:	601a      	str	r2, [r3, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	e000e010 	.word	0xe000e010
 8007ab0:	e000e018 	.word	0xe000e018
 8007ab4:	20000000 	.word	0x20000000
 8007ab8:	10624dd3 	.word	0x10624dd3
 8007abc:	e000e014 	.word	0xe000e014

08007ac0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8007aca:	4b0a      	ldr	r3, [pc, #40]	@ (8007af4 <prvTaskExitError+0x34>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad2:	d003      	beq.n	8007adc <prvTaskExitError+0x1c>
 8007ad4:	f000 f9b8 	bl	8007e48 <ulSetInterruptMask>
 8007ad8:	bf00      	nop
 8007ada:	e7fd      	b.n	8007ad8 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 8007adc:	f000 f9b4 	bl	8007e48 <ulSetInterruptMask>

    while( ulDummy == 0 )
 8007ae0:	bf00      	nop
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d0fc      	beq.n	8007ae2 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8007ae8:	bf00      	nop
 8007aea:	bf00      	nop
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20000020 	.word	0x20000020

08007af8 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007afc:	4b06      	ldr	r3, [pc, #24]	@ (8007b18 <vPortYield+0x20>)
 8007afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b02:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8007b04:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8007b08:	f3bf 8f6f 	isb	sy
}
 8007b0c:	bf00      	nop
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	e000ed04 	.word	0xe000ed04

08007b1c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007b20:	f000 f992 	bl	8007e48 <ulSetInterruptMask>
    ulCriticalNesting++;
 8007b24:	4b05      	ldr	r3, [pc, #20]	@ (8007b3c <vPortEnterCritical+0x20>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	4a04      	ldr	r2, [pc, #16]	@ (8007b3c <vPortEnterCritical+0x20>)
 8007b2c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8007b2e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8007b32:	f3bf 8f6f 	isb	sy
}
 8007b36:	bf00      	nop
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000020 	.word	0x20000020

08007b40 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 8007b44:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <vPortExitCritical+0x30>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d103      	bne.n	8007b54 <vPortExitCritical+0x14>
 8007b4c:	f000 f97c 	bl	8007e48 <ulSetInterruptMask>
 8007b50:	bf00      	nop
 8007b52:	e7fd      	b.n	8007b50 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 8007b54:	4b06      	ldr	r3, [pc, #24]	@ (8007b70 <vPortExitCritical+0x30>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	4a05      	ldr	r2, [pc, #20]	@ (8007b70 <vPortExitCritical+0x30>)
 8007b5c:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 8007b5e:	4b04      	ldr	r3, [pc, #16]	@ (8007b70 <vPortExitCritical+0x30>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d102      	bne.n	8007b6c <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 8007b66:	2000      	movs	r0, #0
 8007b68:	f000 f97b 	bl	8007e62 <vClearInterruptMask>
    }
}
 8007b6c:	bf00      	nop
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20000020 	.word	0x20000020

08007b74 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b7a:	f000 f965 	bl	8007e48 <ulSetInterruptMask>
 8007b7e:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007b80:	f7ff f87e 	bl	8006c80 <xTaskIncrementTick>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b8a:	4b05      	ldr	r3, [pc, #20]	@ (8007ba0 <xPortSysTickHandler+0x2c>)
 8007b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b90:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f965 	bl	8007e62 <vClearInterruptMask>
}
 8007b98:	bf00      	nop
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	e000ed04 	.word	0xe000ed04

08007ba4 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3b02      	subs	r3, #2
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 8007bba:	7afb      	ldrb	r3, [r7, #11]
 8007bbc:	2b66      	cmp	r3, #102	@ 0x66
 8007bbe:	d102      	bne.n	8007bc6 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 8007bc0:	f000 f90e 	bl	8007de0 <vRestoreContextOfFirstTask>
            break;
 8007bc4:	e003      	b.n	8007bce <vPortSVCHandler_C+0x2a>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 8007bc6:	f000 f93f 	bl	8007e48 <ulSetInterruptMask>
 8007bca:	bf00      	nop
 8007bcc:	e7fd      	b.n	8007bca <vPortSVCHandler_C+0x26>
    }
}
 8007bce:	bf00      	nop
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
 8007be4:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3b04      	subs	r3, #4
 8007bea:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007bf2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3b04      	subs	r3, #4
 8007bf8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3b04      	subs	r3, #4
 8007c04:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 8007c06:	4a38      	ldr	r2, [pc, #224]	@ (8007ce8 <pxPortInitialiseStack+0x110>)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3b04      	subs	r3, #4
 8007c10:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8007c18:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3b04      	subs	r3, #4
 8007c1e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8007c26:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3b04      	subs	r3, #4
 8007c2c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8007c34:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3b04      	subs	r3, #4
 8007c3a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8007c42:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3b04      	subs	r3, #4
 8007c48:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3b04      	subs	r3, #4
 8007c54:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8007c5c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3b04      	subs	r3, #4
 8007c62:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8007c6a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	3b04      	subs	r3, #4
 8007c70:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8007c78:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3b04      	subs	r3, #4
 8007c7e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8007c86:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3b04      	subs	r3, #4
 8007c8c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8007c94:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	3b04      	subs	r3, #4
 8007c9a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8007ca2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3b04      	subs	r3, #4
 8007ca8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8007cb0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3b04      	subs	r3, #4
 8007cb6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8007cbe:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3b04      	subs	r3, #4
 8007cc4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 8007ccc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3b04      	subs	r3, #4
 8007cd2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 8007cda:	68fb      	ldr	r3, [r7, #12]
    }
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	08007ac1 	.word	0x08007ac1

08007cec <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 8007cf6:	4b35      	ldr	r3, [pc, #212]	@ (8007dcc <xPortStartScheduler+0xe0>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 8007cfc:	4b33      	ldr	r3, [pc, #204]	@ (8007dcc <xPortStartScheduler+0xe0>)
 8007cfe:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8007d02:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 8007d04:	4b31      	ldr	r3, [pc, #196]	@ (8007dcc <xPortStartScheduler+0xe0>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	0e1b      	lsrs	r3, r3, #24
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	4b2d      	ldr	r3, [pc, #180]	@ (8007dd0 <xPortStartScheduler+0xe4>)
 8007d1a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8007d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8007dd0 <xPortStartScheduler+0xe4>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d103      	bne.n	8007d2c <xPortStartScheduler+0x40>
 8007d24:	f000 f890 	bl	8007e48 <ulSetInterruptMask>
 8007d28:	bf00      	nop
 8007d2a:	e7fd      	b.n	8007d28 <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	43db      	mvns	r3, r3
 8007d32:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00b      	beq.n	8007d52 <xPortStartScheduler+0x66>
 8007d3a:	f000 f885 	bl	8007e48 <ulSetInterruptMask>
 8007d3e:	bf00      	nop
 8007d40:	e7fd      	b.n	8007d3e <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	3301      	adds	r3, #1
 8007d46:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d48:	79fb      	ldrb	r3, [r7, #7]
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	005b      	lsls	r3, r3, #1
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d52:	79fb      	ldrb	r3, [r7, #7]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5a:	2b80      	cmp	r3, #128	@ 0x80
 8007d5c:	d0f1      	beq.n	8007d42 <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b08      	cmp	r3, #8
 8007d62:	d103      	bne.n	8007d6c <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8007d64:	4b1b      	ldr	r3, [pc, #108]	@ (8007dd4 <xPortStartScheduler+0xe8>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	e004      	b.n	8007d76 <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f1c3 0307 	rsb	r3, r3, #7
 8007d72:	4a18      	ldr	r2, [pc, #96]	@ (8007dd4 <xPortStartScheduler+0xe8>)
 8007d74:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d76:	4b17      	ldr	r3, [pc, #92]	@ (8007dd4 <xPortStartScheduler+0xe8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	021b      	lsls	r3, r3, #8
 8007d7c:	4a15      	ldr	r2, [pc, #84]	@ (8007dd4 <xPortStartScheduler+0xe8>)
 8007d7e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d80:	4b14      	ldr	r3, [pc, #80]	@ (8007dd4 <xPortStartScheduler+0xe8>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d88:	4a12      	ldr	r2, [pc, #72]	@ (8007dd4 <xPortStartScheduler+0xe8>)
 8007d8a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 8007d8c:	4a0f      	ldr	r2, [pc, #60]	@ (8007dcc <xPortStartScheduler+0xe0>)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007d92:	4b11      	ldr	r3, [pc, #68]	@ (8007dd8 <xPortStartScheduler+0xec>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a10      	ldr	r2, [pc, #64]	@ (8007dd8 <xPortStartScheduler+0xec>)
 8007d98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d9c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd8 <xPortStartScheduler+0xec>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a0d      	ldr	r2, [pc, #52]	@ (8007dd8 <xPortStartScheduler+0xec>)
 8007da4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007da8:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007daa:	f7ff fe65 	bl	8007a78 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8007dae:	4b0b      	ldr	r3, [pc, #44]	@ (8007ddc <xPortStartScheduler+0xf0>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 8007db4:	f000 f834 	bl	8007e20 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007db8:	f7ff f872 	bl	8006ea0 <vTaskSwitchContext>
    prvTaskExitError();
 8007dbc:	f7ff fe80 	bl	8007ac0 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	e000ed1c 	.word	0xe000ed1c
 8007dd0:	20000e3c 	.word	0x20000e3c
 8007dd4:	20000e40 	.word	0x20000e40
 8007dd8:	e000ed20 	.word	0xe000ed20
 8007ddc:	20000020 	.word	0x20000020

08007de0 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8007de0:	4a0b      	ldr	r2, [pc, #44]	@ (8007e10 <pxCurrentTCBConst2>)
 8007de2:	6811      	ldr	r1, [r2, #0]
 8007de4:	6808      	ldr	r0, [r1, #0]
 8007de6:	c806      	ldmia	r0!, {r1, r2}
 8007de8:	f381 880b 	msr	PSPLIM, r1
 8007dec:	2102      	movs	r1, #2
 8007dee:	f381 8814 	msr	CONTROL, r1
 8007df2:	3020      	adds	r0, #32
 8007df4:	f380 8809 	msr	PSP, r0
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f04f 0000 	mov.w	r0, #0
 8007e00:	f380 8811 	msr	BASEPRI, r0
 8007e04:	4710      	bx	r2
 8007e06:	bf00      	nop
 8007e08:	f3af 8000 	nop.w
 8007e0c:	f3af 8000 	nop.w

08007e10 <pxCurrentTCBConst2>:
 8007e10:	20000810 	.word	0x20000810
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop
	...

08007e20 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8007e20:	4807      	ldr	r0, [pc, #28]	@ (8007e40 <xVTORConst>)
 8007e22:	6800      	ldr	r0, [r0, #0]
 8007e24:	6800      	ldr	r0, [r0, #0]
 8007e26:	f380 8808 	msr	MSP, r0
 8007e2a:	b662      	cpsie	i
 8007e2c:	b661      	cpsie	f
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	df66      	svc	102	@ 0x66
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	f3af 8000 	nop.w

08007e40 <xVTORConst>:
 8007e40:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop

08007e48 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8007e48:	f3ef 8011 	mrs	r0, BASEPRI
 8007e4c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8007e50:	f381 8811 	msr	BASEPRI, r1
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8007e5e:	bf00      	nop
 8007e60:	4618      	mov	r0, r3

08007e62 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8007e62:	f380 8811 	msr	BASEPRI, r0
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 8007e70:	bf00      	nop
	...

08007e80 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8007e80:	f3ef 8009 	mrs	r0, PSP
 8007e84:	f3ef 820b 	mrs	r2, PSPLIM
 8007e88:	4673      	mov	r3, lr
 8007e8a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8007e8e:	4a10      	ldr	r2, [pc, #64]	@ (8007ed0 <pxCurrentTCBConst>)
 8007e90:	6811      	ldr	r1, [r2, #0]
 8007e92:	6008      	str	r0, [r1, #0]
 8007e94:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e98:	f380 8811 	msr	BASEPRI, r0
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f7fe fffc 	bl	8006ea0 <vTaskSwitchContext>
 8007ea8:	f04f 0000 	mov.w	r0, #0
 8007eac:	f380 8811 	msr	BASEPRI, r0
 8007eb0:	4a07      	ldr	r2, [pc, #28]	@ (8007ed0 <pxCurrentTCBConst>)
 8007eb2:	6811      	ldr	r1, [r2, #0]
 8007eb4:	6808      	ldr	r0, [r1, #0]
 8007eb6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8007eba:	f382 880b 	msr	PSPLIM, r2
 8007ebe:	f380 8809 	msr	PSP, r0
 8007ec2:	4718      	bx	r3
 8007ec4:	f3af 8000 	nop.w
 8007ec8:	f3af 8000 	nop.w
 8007ecc:	f3af 8000 	nop.w

08007ed0 <pxCurrentTCBConst>:
 8007ed0:	20000810 	.word	0x20000810
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop
	...

08007ee0 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8007ee0:	f01e 0f04 	tst.w	lr, #4
 8007ee4:	bf0c      	ite	eq
 8007ee6:	f3ef 8008 	mrseq	r0, MSP
 8007eea:	f3ef 8009 	mrsne	r0, PSP
 8007eee:	4904      	ldr	r1, [pc, #16]	@ (8007f00 <svchandler_address_const>)
 8007ef0:	4708      	bx	r1
 8007ef2:	bf00      	nop
 8007ef4:	f3af 8000 	nop.w
 8007ef8:	f3af 8000 	nop.w
 8007efc:	f3af 8000 	nop.w

08007f00 <svchandler_address_const>:
 8007f00:	08007ba5 	.word	0x08007ba5
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop

08007f08 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b088      	sub	sp, #32
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007f10:	2300      	movs	r3, #0
 8007f12:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8007f14:	f7fe fda8 	bl	8006a68 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007f18:	4b54      	ldr	r3, [pc, #336]	@ (800806c <pvPortMalloc+0x164>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007f20:	f000 f8f8 	bl	8008114 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d022      	beq.n	8007f70 <pvPortMalloc+0x68>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8007f2a:	2308      	movs	r3, #8
 8007f2c:	43db      	mvns	r3, r3
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d81b      	bhi.n	8007f6c <pvPortMalloc+0x64>
            {
                xWantedSize += xHeapStructSize;
 8007f34:	2208      	movs	r2, #8
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4413      	add	r3, r2
 8007f3a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d014      	beq.n	8007f70 <pvPortMalloc+0x68>
                {
                    /* Byte alignment required. */
                    xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f003 0307 	and.w	r3, r3, #7
 8007f4c:	f1c3 0308 	rsb	r3, r3, #8
 8007f50:	613b      	str	r3, [r7, #16]

                    if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	43db      	mvns	r3, r3
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d804      	bhi.n	8007f66 <pvPortMalloc+0x5e>
                    {
                        xWantedSize += xAdditionalRequiredSize;
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	4413      	add	r3, r2
 8007f62:	607b      	str	r3, [r7, #4]
 8007f64:	e004      	b.n	8007f70 <pvPortMalloc+0x68>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007f66:	2300      	movs	r3, #0
 8007f68:	607b      	str	r3, [r7, #4]
 8007f6a:	e001      	b.n	8007f70 <pvPortMalloc+0x68>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	db69      	blt.n	800804a <pvPortMalloc+0x142>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d066      	beq.n	800804a <pvPortMalloc+0x142>
 8007f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8008070 <pvPortMalloc+0x168>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d861      	bhi.n	800804a <pvPortMalloc+0x142>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007f86:	4b3b      	ldr	r3, [pc, #236]	@ (8008074 <pvPortMalloc+0x16c>)
 8007f88:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8007f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8008074 <pvPortMalloc+0x16c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f90:	e004      	b.n	8007f9c <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d903      	bls.n	8007fae <pvPortMalloc+0xa6>
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1f1      	bne.n	8007f92 <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007fae:	4b2f      	ldr	r3, [pc, #188]	@ (800806c <pvPortMalloc+0x164>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d048      	beq.n	800804a <pvPortMalloc+0x142>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2208      	movs	r2, #8
 8007fbe:	4413      	add	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	1ad2      	subs	r2, r2, r3
 8007fd2:	2308      	movs	r3, #8
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d918      	bls.n	800800c <pvPortMalloc+0x104>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4413      	add	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f003 0307 	and.w	r3, r3, #7
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <pvPortMalloc+0xec>
 8007fec:	f7ff ff2c 	bl	8007e48 <ulSetInterruptMask>
 8007ff0:	bf00      	nop
 8007ff2:	e7fd      	b.n	8007ff0 <pvPortMalloc+0xe8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	1ad2      	subs	r2, r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 f8e0 	bl	80081cc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800800c:	4b18      	ldr	r3, [pc, #96]	@ (8008070 <pvPortMalloc+0x168>)
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	4a16      	ldr	r2, [pc, #88]	@ (8008070 <pvPortMalloc+0x168>)
 8008018:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800801a:	4b15      	ldr	r3, [pc, #84]	@ (8008070 <pvPortMalloc+0x168>)
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b16      	ldr	r3, [pc, #88]	@ (8008078 <pvPortMalloc+0x170>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	d203      	bcs.n	800802e <pvPortMalloc+0x126>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008026:	4b12      	ldr	r3, [pc, #72]	@ (8008070 <pvPortMalloc+0x168>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a13      	ldr	r2, [pc, #76]	@ (8008078 <pvPortMalloc+0x170>)
 800802c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008040:	4b0e      	ldr	r3, [pc, #56]	@ (800807c <pvPortMalloc+0x174>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3301      	adds	r3, #1
 8008046:	4a0d      	ldr	r2, [pc, #52]	@ (800807c <pvPortMalloc+0x174>)
 8008048:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800804a:	f7fe fd1b 	bl	8006a84 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	2b00      	cmp	r3, #0
 8008056:	d003      	beq.n	8008060 <pvPortMalloc+0x158>
 8008058:	f7ff fef6 	bl	8007e48 <ulSetInterruptMask>
 800805c:	bf00      	nop
 800805e:	e7fd      	b.n	800805c <pvPortMalloc+0x154>
    return pvReturn;
 8008060:	697b      	ldr	r3, [r7, #20]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3720      	adds	r7, #32
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20002e4c 	.word	0x20002e4c
 8008070:	20002e50 	.word	0x20002e50
 8008074:	20002e44 	.word	0x20002e44
 8008078:	20002e54 	.word	0x20002e54
 800807c:	20002e58 	.word	0x20002e58

08008080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d037      	beq.n	8008102 <vPortFree+0x82>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008092:	2308      	movs	r3, #8
 8008094:	425b      	negs	r3, r3
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	db03      	blt.n	80080b0 <vPortFree+0x30>
 80080a8:	f7ff fece 	bl	8007e48 <ulSetInterruptMask>
 80080ac:	bf00      	nop
 80080ae:	e7fd      	b.n	80080ac <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d003      	beq.n	80080c0 <vPortFree+0x40>
 80080b8:	f7ff fec6 	bl	8007e48 <ulSetInterruptMask>
 80080bc:	bf00      	nop
 80080be:	e7fd      	b.n	80080bc <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	da1c      	bge.n	8008102 <vPortFree+0x82>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d118      	bne.n	8008102 <vPortFree+0x82>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80080dc:	f7fe fcc4 	bl	8006a68 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	4b09      	ldr	r3, [pc, #36]	@ (800810c <vPortFree+0x8c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4413      	add	r3, r2
 80080ea:	4a08      	ldr	r2, [pc, #32]	@ (800810c <vPortFree+0x8c>)
 80080ec:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080ee:	68b8      	ldr	r0, [r7, #8]
 80080f0:	f000 f86c 	bl	80081cc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80080f4:	4b06      	ldr	r3, [pc, #24]	@ (8008110 <vPortFree+0x90>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	4a05      	ldr	r2, [pc, #20]	@ (8008110 <vPortFree+0x90>)
 80080fc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80080fe:	f7fe fcc1 	bl	8006a84 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008102:	bf00      	nop
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20002e50 	.word	0x20002e50
 8008110:	20002e5c 	.word	0x20002e5c

08008114 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800811a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800811e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008120:	4b25      	ldr	r3, [pc, #148]	@ (80081b8 <prvHeapInit+0xa4>)
 8008122:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00c      	beq.n	8008148 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3307      	adds	r3, #7
 8008132:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0307 	bic.w	r3, r3, #7
 800813a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	4a1d      	ldr	r2, [pc, #116]	@ (80081b8 <prvHeapInit+0xa4>)
 8008144:	4413      	add	r3, r2
 8008146:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800814c:	4a1b      	ldr	r2, [pc, #108]	@ (80081bc <prvHeapInit+0xa8>)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008152:	4b1a      	ldr	r3, [pc, #104]	@ (80081bc <prvHeapInit+0xa8>)
 8008154:	2200      	movs	r2, #0
 8008156:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ( pucAlignedHeap + xTotalHeapSize );
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	4413      	add	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008160:	2208      	movs	r2, #8
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	1a9b      	subs	r3, r3, r2
 8008166:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 0307 	bic.w	r3, r3, #7
 800816e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4a13      	ldr	r2, [pc, #76]	@ (80081c0 <prvHeapInit+0xac>)
 8008174:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008176:	4b12      	ldr	r3, [pc, #72]	@ (80081c0 <prvHeapInit+0xac>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2200      	movs	r2, #0
 800817c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800817e:	4b10      	ldr	r3, [pc, #64]	@ (80081c0 <prvHeapInit+0xac>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	1ad2      	subs	r2, r2, r3
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008194:	4b0a      	ldr	r3, [pc, #40]	@ (80081c0 <prvHeapInit+0xac>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	4a08      	ldr	r2, [pc, #32]	@ (80081c4 <prvHeapInit+0xb0>)
 80081a2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	4a07      	ldr	r2, [pc, #28]	@ (80081c8 <prvHeapInit+0xb4>)
 80081aa:	6013      	str	r3, [r2, #0]
}
 80081ac:	bf00      	nop
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	20000e44 	.word	0x20000e44
 80081bc:	20002e44 	.word	0x20002e44
 80081c0:	20002e4c 	.word	0x20002e4c
 80081c4:	20002e54 	.word	0x20002e54
 80081c8:	20002e50 	.word	0x20002e50

080081cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081d4:	4b28      	ldr	r3, [pc, #160]	@ (8008278 <prvInsertBlockIntoFreeList+0xac>)
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	e002      	b.n	80081e0 <prvInsertBlockIntoFreeList+0x14>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d8f7      	bhi.n	80081da <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	4413      	add	r3, r2
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d108      	bne.n	800820e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	441a      	add	r2, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	441a      	add	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d118      	bne.n	8008254 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	4b15      	ldr	r3, [pc, #84]	@ (800827c <prvInsertBlockIntoFreeList+0xb0>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	429a      	cmp	r2, r3
 800822c:	d00d      	beq.n	800824a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	441a      	add	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	e008      	b.n	800825c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800824a:	4b0c      	ldr	r3, [pc, #48]	@ (800827c <prvInsertBlockIntoFreeList+0xb0>)
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	e003      	b.n	800825c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	429a      	cmp	r2, r3
 8008262:	d002      	beq.n	800826a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800826a:	bf00      	nop
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	20002e44 	.word	0x20002e44
 800827c:	20002e4c 	.word	0x20002e4c

08008280 <std>:
 8008280:	2300      	movs	r3, #0
 8008282:	b510      	push	{r4, lr}
 8008284:	4604      	mov	r4, r0
 8008286:	6083      	str	r3, [r0, #8]
 8008288:	8181      	strh	r1, [r0, #12]
 800828a:	4619      	mov	r1, r3
 800828c:	6643      	str	r3, [r0, #100]	@ 0x64
 800828e:	81c2      	strh	r2, [r0, #14]
 8008290:	2208      	movs	r2, #8
 8008292:	6183      	str	r3, [r0, #24]
 8008294:	e9c0 3300 	strd	r3, r3, [r0]
 8008298:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800829c:	305c      	adds	r0, #92	@ 0x5c
 800829e:	f000 f99b 	bl	80085d8 <memset>
 80082a2:	4b0d      	ldr	r3, [pc, #52]	@ (80082d8 <std+0x58>)
 80082a4:	6224      	str	r4, [r4, #32]
 80082a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80082a8:	4b0c      	ldr	r3, [pc, #48]	@ (80082dc <std+0x5c>)
 80082aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80082ac:	4b0c      	ldr	r3, [pc, #48]	@ (80082e0 <std+0x60>)
 80082ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80082b0:	4b0c      	ldr	r3, [pc, #48]	@ (80082e4 <std+0x64>)
 80082b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80082b4:	4b0c      	ldr	r3, [pc, #48]	@ (80082e8 <std+0x68>)
 80082b6:	429c      	cmp	r4, r3
 80082b8:	d006      	beq.n	80082c8 <std+0x48>
 80082ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80082be:	4294      	cmp	r4, r2
 80082c0:	d002      	beq.n	80082c8 <std+0x48>
 80082c2:	33d0      	adds	r3, #208	@ 0xd0
 80082c4:	429c      	cmp	r4, r3
 80082c6:	d105      	bne.n	80082d4 <std+0x54>
 80082c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80082cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082d0:	f000 b9fa 	b.w	80086c8 <__retarget_lock_init_recursive>
 80082d4:	bd10      	pop	{r4, pc}
 80082d6:	bf00      	nop
 80082d8:	08008429 	.word	0x08008429
 80082dc:	0800844b 	.word	0x0800844b
 80082e0:	08008483 	.word	0x08008483
 80082e4:	080084a7 	.word	0x080084a7
 80082e8:	20002e60 	.word	0x20002e60

080082ec <stdio_exit_handler>:
 80082ec:	4a02      	ldr	r2, [pc, #8]	@ (80082f8 <stdio_exit_handler+0xc>)
 80082ee:	4903      	ldr	r1, [pc, #12]	@ (80082fc <stdio_exit_handler+0x10>)
 80082f0:	4803      	ldr	r0, [pc, #12]	@ (8008300 <stdio_exit_handler+0x14>)
 80082f2:	f000 b869 	b.w	80083c8 <_fwalk_sglue>
 80082f6:	bf00      	nop
 80082f8:	20000024 	.word	0x20000024
 80082fc:	08008f85 	.word	0x08008f85
 8008300:	20000034 	.word	0x20000034

08008304 <cleanup_stdio>:
 8008304:	6841      	ldr	r1, [r0, #4]
 8008306:	4b0c      	ldr	r3, [pc, #48]	@ (8008338 <cleanup_stdio+0x34>)
 8008308:	4299      	cmp	r1, r3
 800830a:	b510      	push	{r4, lr}
 800830c:	4604      	mov	r4, r0
 800830e:	d001      	beq.n	8008314 <cleanup_stdio+0x10>
 8008310:	f000 fe38 	bl	8008f84 <_fflush_r>
 8008314:	68a1      	ldr	r1, [r4, #8]
 8008316:	4b09      	ldr	r3, [pc, #36]	@ (800833c <cleanup_stdio+0x38>)
 8008318:	4299      	cmp	r1, r3
 800831a:	d002      	beq.n	8008322 <cleanup_stdio+0x1e>
 800831c:	4620      	mov	r0, r4
 800831e:	f000 fe31 	bl	8008f84 <_fflush_r>
 8008322:	68e1      	ldr	r1, [r4, #12]
 8008324:	4b06      	ldr	r3, [pc, #24]	@ (8008340 <cleanup_stdio+0x3c>)
 8008326:	4299      	cmp	r1, r3
 8008328:	d004      	beq.n	8008334 <cleanup_stdio+0x30>
 800832a:	4620      	mov	r0, r4
 800832c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008330:	f000 be28 	b.w	8008f84 <_fflush_r>
 8008334:	bd10      	pop	{r4, pc}
 8008336:	bf00      	nop
 8008338:	20002e60 	.word	0x20002e60
 800833c:	20002ec8 	.word	0x20002ec8
 8008340:	20002f30 	.word	0x20002f30

08008344 <global_stdio_init.part.0>:
 8008344:	b510      	push	{r4, lr}
 8008346:	4b0b      	ldr	r3, [pc, #44]	@ (8008374 <global_stdio_init.part.0+0x30>)
 8008348:	2104      	movs	r1, #4
 800834a:	4c0b      	ldr	r4, [pc, #44]	@ (8008378 <global_stdio_init.part.0+0x34>)
 800834c:	4a0b      	ldr	r2, [pc, #44]	@ (800837c <global_stdio_init.part.0+0x38>)
 800834e:	4620      	mov	r0, r4
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	2200      	movs	r2, #0
 8008354:	f7ff ff94 	bl	8008280 <std>
 8008358:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800835c:	2201      	movs	r2, #1
 800835e:	2109      	movs	r1, #9
 8008360:	f7ff ff8e 	bl	8008280 <std>
 8008364:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008368:	2202      	movs	r2, #2
 800836a:	2112      	movs	r1, #18
 800836c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008370:	f7ff bf86 	b.w	8008280 <std>
 8008374:	20002f98 	.word	0x20002f98
 8008378:	20002e60 	.word	0x20002e60
 800837c:	080082ed 	.word	0x080082ed

08008380 <__sfp_lock_acquire>:
 8008380:	4801      	ldr	r0, [pc, #4]	@ (8008388 <__sfp_lock_acquire+0x8>)
 8008382:	f000 b9a2 	b.w	80086ca <__retarget_lock_acquire_recursive>
 8008386:	bf00      	nop
 8008388:	20002fa1 	.word	0x20002fa1

0800838c <__sfp_lock_release>:
 800838c:	4801      	ldr	r0, [pc, #4]	@ (8008394 <__sfp_lock_release+0x8>)
 800838e:	f000 b99d 	b.w	80086cc <__retarget_lock_release_recursive>
 8008392:	bf00      	nop
 8008394:	20002fa1 	.word	0x20002fa1

08008398 <__sinit>:
 8008398:	b510      	push	{r4, lr}
 800839a:	4604      	mov	r4, r0
 800839c:	f7ff fff0 	bl	8008380 <__sfp_lock_acquire>
 80083a0:	6a23      	ldr	r3, [r4, #32]
 80083a2:	b11b      	cbz	r3, 80083ac <__sinit+0x14>
 80083a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083a8:	f7ff bff0 	b.w	800838c <__sfp_lock_release>
 80083ac:	4b04      	ldr	r3, [pc, #16]	@ (80083c0 <__sinit+0x28>)
 80083ae:	6223      	str	r3, [r4, #32]
 80083b0:	4b04      	ldr	r3, [pc, #16]	@ (80083c4 <__sinit+0x2c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1f5      	bne.n	80083a4 <__sinit+0xc>
 80083b8:	f7ff ffc4 	bl	8008344 <global_stdio_init.part.0>
 80083bc:	e7f2      	b.n	80083a4 <__sinit+0xc>
 80083be:	bf00      	nop
 80083c0:	08008305 	.word	0x08008305
 80083c4:	20002f98 	.word	0x20002f98

080083c8 <_fwalk_sglue>:
 80083c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083cc:	4607      	mov	r7, r0
 80083ce:	4688      	mov	r8, r1
 80083d0:	4614      	mov	r4, r2
 80083d2:	2600      	movs	r6, #0
 80083d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083d8:	f1b9 0901 	subs.w	r9, r9, #1
 80083dc:	d505      	bpl.n	80083ea <_fwalk_sglue+0x22>
 80083de:	6824      	ldr	r4, [r4, #0]
 80083e0:	2c00      	cmp	r4, #0
 80083e2:	d1f7      	bne.n	80083d4 <_fwalk_sglue+0xc>
 80083e4:	4630      	mov	r0, r6
 80083e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ea:	89ab      	ldrh	r3, [r5, #12]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d907      	bls.n	8008400 <_fwalk_sglue+0x38>
 80083f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083f4:	3301      	adds	r3, #1
 80083f6:	d003      	beq.n	8008400 <_fwalk_sglue+0x38>
 80083f8:	4629      	mov	r1, r5
 80083fa:	4638      	mov	r0, r7
 80083fc:	47c0      	blx	r8
 80083fe:	4306      	orrs	r6, r0
 8008400:	3568      	adds	r5, #104	@ 0x68
 8008402:	e7e9      	b.n	80083d8 <_fwalk_sglue+0x10>

08008404 <iprintf>:
 8008404:	b40f      	push	{r0, r1, r2, r3}
 8008406:	b507      	push	{r0, r1, r2, lr}
 8008408:	4906      	ldr	r1, [pc, #24]	@ (8008424 <iprintf+0x20>)
 800840a:	ab04      	add	r3, sp, #16
 800840c:	6808      	ldr	r0, [r1, #0]
 800840e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008412:	6881      	ldr	r1, [r0, #8]
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	f000 fa89 	bl	800892c <_vfiprintf_r>
 800841a:	b003      	add	sp, #12
 800841c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008420:	b004      	add	sp, #16
 8008422:	4770      	bx	lr
 8008424:	20000030 	.word	0x20000030

08008428 <__sread>:
 8008428:	b510      	push	{r4, lr}
 800842a:	460c      	mov	r4, r1
 800842c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008430:	f000 f8fc 	bl	800862c <_read_r>
 8008434:	2800      	cmp	r0, #0
 8008436:	bfab      	itete	ge
 8008438:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800843a:	89a3      	ldrhlt	r3, [r4, #12]
 800843c:	181b      	addge	r3, r3, r0
 800843e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008442:	bfac      	ite	ge
 8008444:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008446:	81a3      	strhlt	r3, [r4, #12]
 8008448:	bd10      	pop	{r4, pc}

0800844a <__swrite>:
 800844a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800844e:	461f      	mov	r7, r3
 8008450:	898b      	ldrh	r3, [r1, #12]
 8008452:	4605      	mov	r5, r0
 8008454:	460c      	mov	r4, r1
 8008456:	05db      	lsls	r3, r3, #23
 8008458:	4616      	mov	r6, r2
 800845a:	d505      	bpl.n	8008468 <__swrite+0x1e>
 800845c:	2302      	movs	r3, #2
 800845e:	2200      	movs	r2, #0
 8008460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008464:	f000 f8d0 	bl	8008608 <_lseek_r>
 8008468:	89a3      	ldrh	r3, [r4, #12]
 800846a:	4632      	mov	r2, r6
 800846c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008470:	4628      	mov	r0, r5
 8008472:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008476:	81a3      	strh	r3, [r4, #12]
 8008478:	463b      	mov	r3, r7
 800847a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800847e:	f000 b8e7 	b.w	8008650 <_write_r>

08008482 <__sseek>:
 8008482:	b510      	push	{r4, lr}
 8008484:	460c      	mov	r4, r1
 8008486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800848a:	f000 f8bd 	bl	8008608 <_lseek_r>
 800848e:	1c43      	adds	r3, r0, #1
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	bf15      	itete	ne
 8008494:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008496:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800849a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800849e:	81a3      	strheq	r3, [r4, #12]
 80084a0:	bf18      	it	ne
 80084a2:	81a3      	strhne	r3, [r4, #12]
 80084a4:	bd10      	pop	{r4, pc}

080084a6 <__sclose>:
 80084a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084aa:	f000 b89d 	b.w	80085e8 <_close_r>

080084ae <__swbuf_r>:
 80084ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b0:	460e      	mov	r6, r1
 80084b2:	4614      	mov	r4, r2
 80084b4:	4605      	mov	r5, r0
 80084b6:	b118      	cbz	r0, 80084c0 <__swbuf_r+0x12>
 80084b8:	6a03      	ldr	r3, [r0, #32]
 80084ba:	b90b      	cbnz	r3, 80084c0 <__swbuf_r+0x12>
 80084bc:	f7ff ff6c 	bl	8008398 <__sinit>
 80084c0:	69a3      	ldr	r3, [r4, #24]
 80084c2:	60a3      	str	r3, [r4, #8]
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	071a      	lsls	r2, r3, #28
 80084c8:	d501      	bpl.n	80084ce <__swbuf_r+0x20>
 80084ca:	6923      	ldr	r3, [r4, #16]
 80084cc:	b943      	cbnz	r3, 80084e0 <__swbuf_r+0x32>
 80084ce:	4621      	mov	r1, r4
 80084d0:	4628      	mov	r0, r5
 80084d2:	f000 f82b 	bl	800852c <__swsetup_r>
 80084d6:	b118      	cbz	r0, 80084e0 <__swbuf_r+0x32>
 80084d8:	f04f 37ff 	mov.w	r7, #4294967295
 80084dc:	4638      	mov	r0, r7
 80084de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	b2f6      	uxtb	r6, r6
 80084e4:	6922      	ldr	r2, [r4, #16]
 80084e6:	4637      	mov	r7, r6
 80084e8:	1a98      	subs	r0, r3, r2
 80084ea:	6963      	ldr	r3, [r4, #20]
 80084ec:	4283      	cmp	r3, r0
 80084ee:	dc05      	bgt.n	80084fc <__swbuf_r+0x4e>
 80084f0:	4621      	mov	r1, r4
 80084f2:	4628      	mov	r0, r5
 80084f4:	f000 fd46 	bl	8008f84 <_fflush_r>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d1ed      	bne.n	80084d8 <__swbuf_r+0x2a>
 80084fc:	68a3      	ldr	r3, [r4, #8]
 80084fe:	3b01      	subs	r3, #1
 8008500:	60a3      	str	r3, [r4, #8]
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	6022      	str	r2, [r4, #0]
 8008508:	701e      	strb	r6, [r3, #0]
 800850a:	1c43      	adds	r3, r0, #1
 800850c:	6962      	ldr	r2, [r4, #20]
 800850e:	429a      	cmp	r2, r3
 8008510:	d004      	beq.n	800851c <__swbuf_r+0x6e>
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	07db      	lsls	r3, r3, #31
 8008516:	d5e1      	bpl.n	80084dc <__swbuf_r+0x2e>
 8008518:	2e0a      	cmp	r6, #10
 800851a:	d1df      	bne.n	80084dc <__swbuf_r+0x2e>
 800851c:	4621      	mov	r1, r4
 800851e:	4628      	mov	r0, r5
 8008520:	f000 fd30 	bl	8008f84 <_fflush_r>
 8008524:	2800      	cmp	r0, #0
 8008526:	d0d9      	beq.n	80084dc <__swbuf_r+0x2e>
 8008528:	e7d6      	b.n	80084d8 <__swbuf_r+0x2a>
	...

0800852c <__swsetup_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4b29      	ldr	r3, [pc, #164]	@ (80085d4 <__swsetup_r+0xa8>)
 8008530:	4605      	mov	r5, r0
 8008532:	460c      	mov	r4, r1
 8008534:	6818      	ldr	r0, [r3, #0]
 8008536:	b118      	cbz	r0, 8008540 <__swsetup_r+0x14>
 8008538:	6a03      	ldr	r3, [r0, #32]
 800853a:	b90b      	cbnz	r3, 8008540 <__swsetup_r+0x14>
 800853c:	f7ff ff2c 	bl	8008398 <__sinit>
 8008540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008544:	0719      	lsls	r1, r3, #28
 8008546:	d422      	bmi.n	800858e <__swsetup_r+0x62>
 8008548:	06da      	lsls	r2, r3, #27
 800854a:	d407      	bmi.n	800855c <__swsetup_r+0x30>
 800854c:	2209      	movs	r2, #9
 800854e:	602a      	str	r2, [r5, #0]
 8008550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008554:	f04f 30ff 	mov.w	r0, #4294967295
 8008558:	81a3      	strh	r3, [r4, #12]
 800855a:	e033      	b.n	80085c4 <__swsetup_r+0x98>
 800855c:	0758      	lsls	r0, r3, #29
 800855e:	d512      	bpl.n	8008586 <__swsetup_r+0x5a>
 8008560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008562:	b141      	cbz	r1, 8008576 <__swsetup_r+0x4a>
 8008564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008568:	4299      	cmp	r1, r3
 800856a:	d002      	beq.n	8008572 <__swsetup_r+0x46>
 800856c:	4628      	mov	r0, r5
 800856e:	f000 f8bb 	bl	80086e8 <_free_r>
 8008572:	2300      	movs	r3, #0
 8008574:	6363      	str	r3, [r4, #52]	@ 0x34
 8008576:	89a3      	ldrh	r3, [r4, #12]
 8008578:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800857c:	81a3      	strh	r3, [r4, #12]
 800857e:	2300      	movs	r3, #0
 8008580:	6063      	str	r3, [r4, #4]
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	f043 0308 	orr.w	r3, r3, #8
 800858c:	81a3      	strh	r3, [r4, #12]
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	b94b      	cbnz	r3, 80085a6 <__swsetup_r+0x7a>
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800859c:	d003      	beq.n	80085a6 <__swsetup_r+0x7a>
 800859e:	4621      	mov	r1, r4
 80085a0:	4628      	mov	r0, r5
 80085a2:	f000 fd3c 	bl	800901e <__smakebuf_r>
 80085a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085aa:	f013 0201 	ands.w	r2, r3, #1
 80085ae:	d00a      	beq.n	80085c6 <__swsetup_r+0x9a>
 80085b0:	2200      	movs	r2, #0
 80085b2:	60a2      	str	r2, [r4, #8]
 80085b4:	6962      	ldr	r2, [r4, #20]
 80085b6:	4252      	negs	r2, r2
 80085b8:	61a2      	str	r2, [r4, #24]
 80085ba:	6922      	ldr	r2, [r4, #16]
 80085bc:	b942      	cbnz	r2, 80085d0 <__swsetup_r+0xa4>
 80085be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80085c2:	d1c5      	bne.n	8008550 <__swsetup_r+0x24>
 80085c4:	bd38      	pop	{r3, r4, r5, pc}
 80085c6:	0799      	lsls	r1, r3, #30
 80085c8:	bf58      	it	pl
 80085ca:	6962      	ldrpl	r2, [r4, #20]
 80085cc:	60a2      	str	r2, [r4, #8]
 80085ce:	e7f4      	b.n	80085ba <__swsetup_r+0x8e>
 80085d0:	2000      	movs	r0, #0
 80085d2:	e7f7      	b.n	80085c4 <__swsetup_r+0x98>
 80085d4:	20000030 	.word	0x20000030

080085d8 <memset>:
 80085d8:	4402      	add	r2, r0
 80085da:	4603      	mov	r3, r0
 80085dc:	4293      	cmp	r3, r2
 80085de:	d100      	bne.n	80085e2 <memset+0xa>
 80085e0:	4770      	bx	lr
 80085e2:	f803 1b01 	strb.w	r1, [r3], #1
 80085e6:	e7f9      	b.n	80085dc <memset+0x4>

080085e8 <_close_r>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	2300      	movs	r3, #0
 80085ec:	4d05      	ldr	r5, [pc, #20]	@ (8008604 <_close_r+0x1c>)
 80085ee:	4604      	mov	r4, r0
 80085f0:	4608      	mov	r0, r1
 80085f2:	602b      	str	r3, [r5, #0]
 80085f4:	f7f8 fcc1 	bl	8000f7a <_close>
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	d102      	bne.n	8008602 <_close_r+0x1a>
 80085fc:	682b      	ldr	r3, [r5, #0]
 80085fe:	b103      	cbz	r3, 8008602 <_close_r+0x1a>
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	bd38      	pop	{r3, r4, r5, pc}
 8008604:	20002f9c 	.word	0x20002f9c

08008608 <_lseek_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4604      	mov	r4, r0
 800860c:	4d06      	ldr	r5, [pc, #24]	@ (8008628 <_lseek_r+0x20>)
 800860e:	4608      	mov	r0, r1
 8008610:	4611      	mov	r1, r2
 8008612:	2200      	movs	r2, #0
 8008614:	602a      	str	r2, [r5, #0]
 8008616:	461a      	mov	r2, r3
 8008618:	f7f8 fcd6 	bl	8000fc8 <_lseek>
 800861c:	1c43      	adds	r3, r0, #1
 800861e:	d102      	bne.n	8008626 <_lseek_r+0x1e>
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	b103      	cbz	r3, 8008626 <_lseek_r+0x1e>
 8008624:	6023      	str	r3, [r4, #0]
 8008626:	bd38      	pop	{r3, r4, r5, pc}
 8008628:	20002f9c 	.word	0x20002f9c

0800862c <_read_r>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	4604      	mov	r4, r0
 8008630:	4d06      	ldr	r5, [pc, #24]	@ (800864c <_read_r+0x20>)
 8008632:	4608      	mov	r0, r1
 8008634:	4611      	mov	r1, r2
 8008636:	2200      	movs	r2, #0
 8008638:	602a      	str	r2, [r5, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	f7f8 fc64 	bl	8000f08 <_read>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d102      	bne.n	800864a <_read_r+0x1e>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	b103      	cbz	r3, 800864a <_read_r+0x1e>
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	bd38      	pop	{r3, r4, r5, pc}
 800864c:	20002f9c 	.word	0x20002f9c

08008650 <_write_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4604      	mov	r4, r0
 8008654:	4d06      	ldr	r5, [pc, #24]	@ (8008670 <_write_r+0x20>)
 8008656:	4608      	mov	r0, r1
 8008658:	4611      	mov	r1, r2
 800865a:	2200      	movs	r2, #0
 800865c:	602a      	str	r2, [r5, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	f7f8 fc6f 	bl	8000f42 <_write>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_write_r+0x1e>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	b103      	cbz	r3, 800866e <_write_r+0x1e>
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	20002f9c 	.word	0x20002f9c

08008674 <__errno>:
 8008674:	4b01      	ldr	r3, [pc, #4]	@ (800867c <__errno+0x8>)
 8008676:	6818      	ldr	r0, [r3, #0]
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	20000030 	.word	0x20000030

08008680 <__libc_init_array>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	4d0d      	ldr	r5, [pc, #52]	@ (80086b8 <__libc_init_array+0x38>)
 8008684:	2600      	movs	r6, #0
 8008686:	4c0d      	ldr	r4, [pc, #52]	@ (80086bc <__libc_init_array+0x3c>)
 8008688:	1b64      	subs	r4, r4, r5
 800868a:	10a4      	asrs	r4, r4, #2
 800868c:	42a6      	cmp	r6, r4
 800868e:	d109      	bne.n	80086a4 <__libc_init_array+0x24>
 8008690:	4d0b      	ldr	r5, [pc, #44]	@ (80086c0 <__libc_init_array+0x40>)
 8008692:	2600      	movs	r6, #0
 8008694:	4c0b      	ldr	r4, [pc, #44]	@ (80086c4 <__libc_init_array+0x44>)
 8008696:	f000 fd3f 	bl	8009118 <_init>
 800869a:	1b64      	subs	r4, r4, r5
 800869c:	10a4      	asrs	r4, r4, #2
 800869e:	42a6      	cmp	r6, r4
 80086a0:	d105      	bne.n	80086ae <__libc_init_array+0x2e>
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
 80086a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a8:	3601      	adds	r6, #1
 80086aa:	4798      	blx	r3
 80086ac:	e7ee      	b.n	800868c <__libc_init_array+0xc>
 80086ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b2:	3601      	adds	r6, #1
 80086b4:	4798      	blx	r3
 80086b6:	e7f2      	b.n	800869e <__libc_init_array+0x1e>
 80086b8:	08009218 	.word	0x08009218
 80086bc:	08009218 	.word	0x08009218
 80086c0:	08009218 	.word	0x08009218
 80086c4:	0800921c 	.word	0x0800921c

080086c8 <__retarget_lock_init_recursive>:
 80086c8:	4770      	bx	lr

080086ca <__retarget_lock_acquire_recursive>:
 80086ca:	4770      	bx	lr

080086cc <__retarget_lock_release_recursive>:
 80086cc:	4770      	bx	lr

080086ce <memcpy>:
 80086ce:	440a      	add	r2, r1
 80086d0:	1e43      	subs	r3, r0, #1
 80086d2:	4291      	cmp	r1, r2
 80086d4:	d100      	bne.n	80086d8 <memcpy+0xa>
 80086d6:	4770      	bx	lr
 80086d8:	b510      	push	{r4, lr}
 80086da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086de:	4291      	cmp	r1, r2
 80086e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086e4:	d1f9      	bne.n	80086da <memcpy+0xc>
 80086e6:	bd10      	pop	{r4, pc}

080086e8 <_free_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4605      	mov	r5, r0
 80086ec:	2900      	cmp	r1, #0
 80086ee:	d041      	beq.n	8008774 <_free_r+0x8c>
 80086f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f4:	1f0c      	subs	r4, r1, #4
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	bfb8      	it	lt
 80086fa:	18e4      	addlt	r4, r4, r3
 80086fc:	f000 f8e0 	bl	80088c0 <__malloc_lock>
 8008700:	4a1d      	ldr	r2, [pc, #116]	@ (8008778 <_free_r+0x90>)
 8008702:	6813      	ldr	r3, [r2, #0]
 8008704:	b933      	cbnz	r3, 8008714 <_free_r+0x2c>
 8008706:	6063      	str	r3, [r4, #4]
 8008708:	6014      	str	r4, [r2, #0]
 800870a:	4628      	mov	r0, r5
 800870c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008710:	f000 b8dc 	b.w	80088cc <__malloc_unlock>
 8008714:	42a3      	cmp	r3, r4
 8008716:	d908      	bls.n	800872a <_free_r+0x42>
 8008718:	6820      	ldr	r0, [r4, #0]
 800871a:	1821      	adds	r1, r4, r0
 800871c:	428b      	cmp	r3, r1
 800871e:	bf01      	itttt	eq
 8008720:	6819      	ldreq	r1, [r3, #0]
 8008722:	685b      	ldreq	r3, [r3, #4]
 8008724:	1809      	addeq	r1, r1, r0
 8008726:	6021      	streq	r1, [r4, #0]
 8008728:	e7ed      	b.n	8008706 <_free_r+0x1e>
 800872a:	461a      	mov	r2, r3
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	b10b      	cbz	r3, 8008734 <_free_r+0x4c>
 8008730:	42a3      	cmp	r3, r4
 8008732:	d9fa      	bls.n	800872a <_free_r+0x42>
 8008734:	6811      	ldr	r1, [r2, #0]
 8008736:	1850      	adds	r0, r2, r1
 8008738:	42a0      	cmp	r0, r4
 800873a:	d10b      	bne.n	8008754 <_free_r+0x6c>
 800873c:	6820      	ldr	r0, [r4, #0]
 800873e:	4401      	add	r1, r0
 8008740:	1850      	adds	r0, r2, r1
 8008742:	6011      	str	r1, [r2, #0]
 8008744:	4283      	cmp	r3, r0
 8008746:	d1e0      	bne.n	800870a <_free_r+0x22>
 8008748:	6818      	ldr	r0, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	4408      	add	r0, r1
 800874e:	6053      	str	r3, [r2, #4]
 8008750:	6010      	str	r0, [r2, #0]
 8008752:	e7da      	b.n	800870a <_free_r+0x22>
 8008754:	d902      	bls.n	800875c <_free_r+0x74>
 8008756:	230c      	movs	r3, #12
 8008758:	602b      	str	r3, [r5, #0]
 800875a:	e7d6      	b.n	800870a <_free_r+0x22>
 800875c:	6820      	ldr	r0, [r4, #0]
 800875e:	1821      	adds	r1, r4, r0
 8008760:	428b      	cmp	r3, r1
 8008762:	bf02      	ittt	eq
 8008764:	6819      	ldreq	r1, [r3, #0]
 8008766:	685b      	ldreq	r3, [r3, #4]
 8008768:	1809      	addeq	r1, r1, r0
 800876a:	6063      	str	r3, [r4, #4]
 800876c:	bf08      	it	eq
 800876e:	6021      	streq	r1, [r4, #0]
 8008770:	6054      	str	r4, [r2, #4]
 8008772:	e7ca      	b.n	800870a <_free_r+0x22>
 8008774:	bd38      	pop	{r3, r4, r5, pc}
 8008776:	bf00      	nop
 8008778:	20002fa8 	.word	0x20002fa8

0800877c <sbrk_aligned>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	4e0f      	ldr	r6, [pc, #60]	@ (80087bc <sbrk_aligned+0x40>)
 8008780:	460c      	mov	r4, r1
 8008782:	4605      	mov	r5, r0
 8008784:	6831      	ldr	r1, [r6, #0]
 8008786:	b911      	cbnz	r1, 800878e <sbrk_aligned+0x12>
 8008788:	f000 fca8 	bl	80090dc <_sbrk_r>
 800878c:	6030      	str	r0, [r6, #0]
 800878e:	4621      	mov	r1, r4
 8008790:	4628      	mov	r0, r5
 8008792:	f000 fca3 	bl	80090dc <_sbrk_r>
 8008796:	1c43      	adds	r3, r0, #1
 8008798:	d103      	bne.n	80087a2 <sbrk_aligned+0x26>
 800879a:	f04f 34ff 	mov.w	r4, #4294967295
 800879e:	4620      	mov	r0, r4
 80087a0:	bd70      	pop	{r4, r5, r6, pc}
 80087a2:	1cc4      	adds	r4, r0, #3
 80087a4:	f024 0403 	bic.w	r4, r4, #3
 80087a8:	42a0      	cmp	r0, r4
 80087aa:	d0f8      	beq.n	800879e <sbrk_aligned+0x22>
 80087ac:	1a21      	subs	r1, r4, r0
 80087ae:	4628      	mov	r0, r5
 80087b0:	f000 fc94 	bl	80090dc <_sbrk_r>
 80087b4:	3001      	adds	r0, #1
 80087b6:	d1f2      	bne.n	800879e <sbrk_aligned+0x22>
 80087b8:	e7ef      	b.n	800879a <sbrk_aligned+0x1e>
 80087ba:	bf00      	nop
 80087bc:	20002fa4 	.word	0x20002fa4

080087c0 <_malloc_r>:
 80087c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087c4:	1ccd      	adds	r5, r1, #3
 80087c6:	4606      	mov	r6, r0
 80087c8:	f025 0503 	bic.w	r5, r5, #3
 80087cc:	3508      	adds	r5, #8
 80087ce:	2d0c      	cmp	r5, #12
 80087d0:	bf38      	it	cc
 80087d2:	250c      	movcc	r5, #12
 80087d4:	2d00      	cmp	r5, #0
 80087d6:	db01      	blt.n	80087dc <_malloc_r+0x1c>
 80087d8:	42a9      	cmp	r1, r5
 80087da:	d904      	bls.n	80087e6 <_malloc_r+0x26>
 80087dc:	230c      	movs	r3, #12
 80087de:	6033      	str	r3, [r6, #0]
 80087e0:	2000      	movs	r0, #0
 80087e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088bc <_malloc_r+0xfc>
 80087ea:	f000 f869 	bl	80088c0 <__malloc_lock>
 80087ee:	f8d8 3000 	ldr.w	r3, [r8]
 80087f2:	461c      	mov	r4, r3
 80087f4:	bb44      	cbnz	r4, 8008848 <_malloc_r+0x88>
 80087f6:	4629      	mov	r1, r5
 80087f8:	4630      	mov	r0, r6
 80087fa:	f7ff ffbf 	bl	800877c <sbrk_aligned>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	4604      	mov	r4, r0
 8008802:	d158      	bne.n	80088b6 <_malloc_r+0xf6>
 8008804:	f8d8 4000 	ldr.w	r4, [r8]
 8008808:	4627      	mov	r7, r4
 800880a:	2f00      	cmp	r7, #0
 800880c:	d143      	bne.n	8008896 <_malloc_r+0xd6>
 800880e:	2c00      	cmp	r4, #0
 8008810:	d04b      	beq.n	80088aa <_malloc_r+0xea>
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	4639      	mov	r1, r7
 8008816:	4630      	mov	r0, r6
 8008818:	eb04 0903 	add.w	r9, r4, r3
 800881c:	f000 fc5e 	bl	80090dc <_sbrk_r>
 8008820:	4581      	cmp	r9, r0
 8008822:	d142      	bne.n	80088aa <_malloc_r+0xea>
 8008824:	6821      	ldr	r1, [r4, #0]
 8008826:	4630      	mov	r0, r6
 8008828:	1a6d      	subs	r5, r5, r1
 800882a:	4629      	mov	r1, r5
 800882c:	f7ff ffa6 	bl	800877c <sbrk_aligned>
 8008830:	3001      	adds	r0, #1
 8008832:	d03a      	beq.n	80088aa <_malloc_r+0xea>
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	442b      	add	r3, r5
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	f8d8 3000 	ldr.w	r3, [r8]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	bb62      	cbnz	r2, 800889c <_malloc_r+0xdc>
 8008842:	f8c8 7000 	str.w	r7, [r8]
 8008846:	e00f      	b.n	8008868 <_malloc_r+0xa8>
 8008848:	6822      	ldr	r2, [r4, #0]
 800884a:	1b52      	subs	r2, r2, r5
 800884c:	d420      	bmi.n	8008890 <_malloc_r+0xd0>
 800884e:	2a0b      	cmp	r2, #11
 8008850:	d917      	bls.n	8008882 <_malloc_r+0xc2>
 8008852:	1961      	adds	r1, r4, r5
 8008854:	42a3      	cmp	r3, r4
 8008856:	6025      	str	r5, [r4, #0]
 8008858:	bf18      	it	ne
 800885a:	6059      	strne	r1, [r3, #4]
 800885c:	6863      	ldr	r3, [r4, #4]
 800885e:	bf08      	it	eq
 8008860:	f8c8 1000 	streq.w	r1, [r8]
 8008864:	5162      	str	r2, [r4, r5]
 8008866:	604b      	str	r3, [r1, #4]
 8008868:	4630      	mov	r0, r6
 800886a:	f000 f82f 	bl	80088cc <__malloc_unlock>
 800886e:	f104 000b 	add.w	r0, r4, #11
 8008872:	1d23      	adds	r3, r4, #4
 8008874:	f020 0007 	bic.w	r0, r0, #7
 8008878:	1ac2      	subs	r2, r0, r3
 800887a:	bf1c      	itt	ne
 800887c:	1a1b      	subne	r3, r3, r0
 800887e:	50a3      	strne	r3, [r4, r2]
 8008880:	e7af      	b.n	80087e2 <_malloc_r+0x22>
 8008882:	6862      	ldr	r2, [r4, #4]
 8008884:	42a3      	cmp	r3, r4
 8008886:	bf0c      	ite	eq
 8008888:	f8c8 2000 	streq.w	r2, [r8]
 800888c:	605a      	strne	r2, [r3, #4]
 800888e:	e7eb      	b.n	8008868 <_malloc_r+0xa8>
 8008890:	4623      	mov	r3, r4
 8008892:	6864      	ldr	r4, [r4, #4]
 8008894:	e7ae      	b.n	80087f4 <_malloc_r+0x34>
 8008896:	463c      	mov	r4, r7
 8008898:	687f      	ldr	r7, [r7, #4]
 800889a:	e7b6      	b.n	800880a <_malloc_r+0x4a>
 800889c:	461a      	mov	r2, r3
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	42a3      	cmp	r3, r4
 80088a2:	d1fb      	bne.n	800889c <_malloc_r+0xdc>
 80088a4:	2300      	movs	r3, #0
 80088a6:	6053      	str	r3, [r2, #4]
 80088a8:	e7de      	b.n	8008868 <_malloc_r+0xa8>
 80088aa:	230c      	movs	r3, #12
 80088ac:	4630      	mov	r0, r6
 80088ae:	6033      	str	r3, [r6, #0]
 80088b0:	f000 f80c 	bl	80088cc <__malloc_unlock>
 80088b4:	e794      	b.n	80087e0 <_malloc_r+0x20>
 80088b6:	6005      	str	r5, [r0, #0]
 80088b8:	e7d6      	b.n	8008868 <_malloc_r+0xa8>
 80088ba:	bf00      	nop
 80088bc:	20002fa8 	.word	0x20002fa8

080088c0 <__malloc_lock>:
 80088c0:	4801      	ldr	r0, [pc, #4]	@ (80088c8 <__malloc_lock+0x8>)
 80088c2:	f7ff bf02 	b.w	80086ca <__retarget_lock_acquire_recursive>
 80088c6:	bf00      	nop
 80088c8:	20002fa0 	.word	0x20002fa0

080088cc <__malloc_unlock>:
 80088cc:	4801      	ldr	r0, [pc, #4]	@ (80088d4 <__malloc_unlock+0x8>)
 80088ce:	f7ff befd 	b.w	80086cc <__retarget_lock_release_recursive>
 80088d2:	bf00      	nop
 80088d4:	20002fa0 	.word	0x20002fa0

080088d8 <__sfputc_r>:
 80088d8:	6893      	ldr	r3, [r2, #8]
 80088da:	3b01      	subs	r3, #1
 80088dc:	2b00      	cmp	r3, #0
 80088de:	b410      	push	{r4}
 80088e0:	6093      	str	r3, [r2, #8]
 80088e2:	da08      	bge.n	80088f6 <__sfputc_r+0x1e>
 80088e4:	6994      	ldr	r4, [r2, #24]
 80088e6:	42a3      	cmp	r3, r4
 80088e8:	db01      	blt.n	80088ee <__sfputc_r+0x16>
 80088ea:	290a      	cmp	r1, #10
 80088ec:	d103      	bne.n	80088f6 <__sfputc_r+0x1e>
 80088ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088f2:	f7ff bddc 	b.w	80084ae <__swbuf_r>
 80088f6:	6813      	ldr	r3, [r2, #0]
 80088f8:	1c58      	adds	r0, r3, #1
 80088fa:	6010      	str	r0, [r2, #0]
 80088fc:	4608      	mov	r0, r1
 80088fe:	7019      	strb	r1, [r3, #0]
 8008900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008904:	4770      	bx	lr

08008906 <__sfputs_r>:
 8008906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008908:	4606      	mov	r6, r0
 800890a:	460f      	mov	r7, r1
 800890c:	4614      	mov	r4, r2
 800890e:	18d5      	adds	r5, r2, r3
 8008910:	42ac      	cmp	r4, r5
 8008912:	d101      	bne.n	8008918 <__sfputs_r+0x12>
 8008914:	2000      	movs	r0, #0
 8008916:	e007      	b.n	8008928 <__sfputs_r+0x22>
 8008918:	463a      	mov	r2, r7
 800891a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800891e:	4630      	mov	r0, r6
 8008920:	f7ff ffda 	bl	80088d8 <__sfputc_r>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d1f3      	bne.n	8008910 <__sfputs_r+0xa>
 8008928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800892c <_vfiprintf_r>:
 800892c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008930:	460d      	mov	r5, r1
 8008932:	b09d      	sub	sp, #116	@ 0x74
 8008934:	4614      	mov	r4, r2
 8008936:	4698      	mov	r8, r3
 8008938:	4606      	mov	r6, r0
 800893a:	b118      	cbz	r0, 8008944 <_vfiprintf_r+0x18>
 800893c:	6a03      	ldr	r3, [r0, #32]
 800893e:	b90b      	cbnz	r3, 8008944 <_vfiprintf_r+0x18>
 8008940:	f7ff fd2a 	bl	8008398 <__sinit>
 8008944:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008946:	07d9      	lsls	r1, r3, #31
 8008948:	d405      	bmi.n	8008956 <_vfiprintf_r+0x2a>
 800894a:	89ab      	ldrh	r3, [r5, #12]
 800894c:	059a      	lsls	r2, r3, #22
 800894e:	d402      	bmi.n	8008956 <_vfiprintf_r+0x2a>
 8008950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008952:	f7ff feba 	bl	80086ca <__retarget_lock_acquire_recursive>
 8008956:	89ab      	ldrh	r3, [r5, #12]
 8008958:	071b      	lsls	r3, r3, #28
 800895a:	d501      	bpl.n	8008960 <_vfiprintf_r+0x34>
 800895c:	692b      	ldr	r3, [r5, #16]
 800895e:	b99b      	cbnz	r3, 8008988 <_vfiprintf_r+0x5c>
 8008960:	4629      	mov	r1, r5
 8008962:	4630      	mov	r0, r6
 8008964:	f7ff fde2 	bl	800852c <__swsetup_r>
 8008968:	b170      	cbz	r0, 8008988 <_vfiprintf_r+0x5c>
 800896a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800896c:	07dc      	lsls	r4, r3, #31
 800896e:	d504      	bpl.n	800897a <_vfiprintf_r+0x4e>
 8008970:	f04f 30ff 	mov.w	r0, #4294967295
 8008974:	b01d      	add	sp, #116	@ 0x74
 8008976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897a:	89ab      	ldrh	r3, [r5, #12]
 800897c:	0598      	lsls	r0, r3, #22
 800897e:	d4f7      	bmi.n	8008970 <_vfiprintf_r+0x44>
 8008980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008982:	f7ff fea3 	bl	80086cc <__retarget_lock_release_recursive>
 8008986:	e7f3      	b.n	8008970 <_vfiprintf_r+0x44>
 8008988:	2300      	movs	r3, #0
 800898a:	f8cd 800c 	str.w	r8, [sp, #12]
 800898e:	f04f 0901 	mov.w	r9, #1
 8008992:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8008b48 <_vfiprintf_r+0x21c>
 8008996:	9309      	str	r3, [sp, #36]	@ 0x24
 8008998:	2320      	movs	r3, #32
 800899a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800899e:	2330      	movs	r3, #48	@ 0x30
 80089a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089a4:	4623      	mov	r3, r4
 80089a6:	469a      	mov	sl, r3
 80089a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ac:	b10a      	cbz	r2, 80089b2 <_vfiprintf_r+0x86>
 80089ae:	2a25      	cmp	r2, #37	@ 0x25
 80089b0:	d1f9      	bne.n	80089a6 <_vfiprintf_r+0x7a>
 80089b2:	ebba 0b04 	subs.w	fp, sl, r4
 80089b6:	d00b      	beq.n	80089d0 <_vfiprintf_r+0xa4>
 80089b8:	465b      	mov	r3, fp
 80089ba:	4622      	mov	r2, r4
 80089bc:	4629      	mov	r1, r5
 80089be:	4630      	mov	r0, r6
 80089c0:	f7ff ffa1 	bl	8008906 <__sfputs_r>
 80089c4:	3001      	adds	r0, #1
 80089c6:	f000 80a7 	beq.w	8008b18 <_vfiprintf_r+0x1ec>
 80089ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089cc:	445a      	add	r2, fp
 80089ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80089d0:	f89a 3000 	ldrb.w	r3, [sl]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 809f 	beq.w	8008b18 <_vfiprintf_r+0x1ec>
 80089da:	2300      	movs	r3, #0
 80089dc:	f04f 32ff 	mov.w	r2, #4294967295
 80089e0:	f10a 0a01 	add.w	sl, sl, #1
 80089e4:	9304      	str	r3, [sp, #16]
 80089e6:	9307      	str	r3, [sp, #28]
 80089e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80089ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089f2:	4654      	mov	r4, sl
 80089f4:	2205      	movs	r2, #5
 80089f6:	4854      	ldr	r0, [pc, #336]	@ (8008b48 <_vfiprintf_r+0x21c>)
 80089f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089fc:	f000 fb7e 	bl	80090fc <memchr>
 8008a00:	9a04      	ldr	r2, [sp, #16]
 8008a02:	b9d8      	cbnz	r0, 8008a3c <_vfiprintf_r+0x110>
 8008a04:	06d1      	lsls	r1, r2, #27
 8008a06:	bf44      	itt	mi
 8008a08:	2320      	movmi	r3, #32
 8008a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a0e:	0713      	lsls	r3, r2, #28
 8008a10:	bf44      	itt	mi
 8008a12:	232b      	movmi	r3, #43	@ 0x2b
 8008a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a18:	f89a 3000 	ldrb.w	r3, [sl]
 8008a1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a1e:	d015      	beq.n	8008a4c <_vfiprintf_r+0x120>
 8008a20:	9a07      	ldr	r2, [sp, #28]
 8008a22:	4654      	mov	r4, sl
 8008a24:	2000      	movs	r0, #0
 8008a26:	f04f 0c0a 	mov.w	ip, #10
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a30:	3b30      	subs	r3, #48	@ 0x30
 8008a32:	2b09      	cmp	r3, #9
 8008a34:	d94b      	bls.n	8008ace <_vfiprintf_r+0x1a2>
 8008a36:	b1b0      	cbz	r0, 8008a66 <_vfiprintf_r+0x13a>
 8008a38:	9207      	str	r2, [sp, #28]
 8008a3a:	e014      	b.n	8008a66 <_vfiprintf_r+0x13a>
 8008a3c:	eba0 0308 	sub.w	r3, r0, r8
 8008a40:	46a2      	mov	sl, r4
 8008a42:	fa09 f303 	lsl.w	r3, r9, r3
 8008a46:	4313      	orrs	r3, r2
 8008a48:	9304      	str	r3, [sp, #16]
 8008a4a:	e7d2      	b.n	80089f2 <_vfiprintf_r+0xc6>
 8008a4c:	9b03      	ldr	r3, [sp, #12]
 8008a4e:	1d19      	adds	r1, r3, #4
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	9103      	str	r1, [sp, #12]
 8008a56:	bfbb      	ittet	lt
 8008a58:	425b      	neglt	r3, r3
 8008a5a:	f042 0202 	orrlt.w	r2, r2, #2
 8008a5e:	9307      	strge	r3, [sp, #28]
 8008a60:	9307      	strlt	r3, [sp, #28]
 8008a62:	bfb8      	it	lt
 8008a64:	9204      	strlt	r2, [sp, #16]
 8008a66:	7823      	ldrb	r3, [r4, #0]
 8008a68:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a6a:	d10a      	bne.n	8008a82 <_vfiprintf_r+0x156>
 8008a6c:	7863      	ldrb	r3, [r4, #1]
 8008a6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a70:	d132      	bne.n	8008ad8 <_vfiprintf_r+0x1ac>
 8008a72:	9b03      	ldr	r3, [sp, #12]
 8008a74:	3402      	adds	r4, #2
 8008a76:	1d1a      	adds	r2, r3, #4
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a7e:	9203      	str	r2, [sp, #12]
 8008a80:	9305      	str	r3, [sp, #20]
 8008a82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b58 <_vfiprintf_r+0x22c>
 8008a86:	2203      	movs	r2, #3
 8008a88:	7821      	ldrb	r1, [r4, #0]
 8008a8a:	4650      	mov	r0, sl
 8008a8c:	f000 fb36 	bl	80090fc <memchr>
 8008a90:	b138      	cbz	r0, 8008aa2 <_vfiprintf_r+0x176>
 8008a92:	eba0 000a 	sub.w	r0, r0, sl
 8008a96:	2240      	movs	r2, #64	@ 0x40
 8008a98:	9b04      	ldr	r3, [sp, #16]
 8008a9a:	3401      	adds	r4, #1
 8008a9c:	4082      	lsls	r2, r0
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	9304      	str	r3, [sp, #16]
 8008aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa6:	2206      	movs	r2, #6
 8008aa8:	4828      	ldr	r0, [pc, #160]	@ (8008b4c <_vfiprintf_r+0x220>)
 8008aaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008aae:	f000 fb25 	bl	80090fc <memchr>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d03f      	beq.n	8008b36 <_vfiprintf_r+0x20a>
 8008ab6:	4b26      	ldr	r3, [pc, #152]	@ (8008b50 <_vfiprintf_r+0x224>)
 8008ab8:	bb1b      	cbnz	r3, 8008b02 <_vfiprintf_r+0x1d6>
 8008aba:	9b03      	ldr	r3, [sp, #12]
 8008abc:	3307      	adds	r3, #7
 8008abe:	f023 0307 	bic.w	r3, r3, #7
 8008ac2:	3308      	adds	r3, #8
 8008ac4:	9303      	str	r3, [sp, #12]
 8008ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac8:	443b      	add	r3, r7
 8008aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8008acc:	e76a      	b.n	80089a4 <_vfiprintf_r+0x78>
 8008ace:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	2001      	movs	r0, #1
 8008ad6:	e7a8      	b.n	8008a2a <_vfiprintf_r+0xfe>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	3401      	adds	r4, #1
 8008adc:	f04f 0c0a 	mov.w	ip, #10
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	9305      	str	r3, [sp, #20]
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aea:	3a30      	subs	r2, #48	@ 0x30
 8008aec:	2a09      	cmp	r2, #9
 8008aee:	d903      	bls.n	8008af8 <_vfiprintf_r+0x1cc>
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0c6      	beq.n	8008a82 <_vfiprintf_r+0x156>
 8008af4:	9105      	str	r1, [sp, #20]
 8008af6:	e7c4      	b.n	8008a82 <_vfiprintf_r+0x156>
 8008af8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008afc:	4604      	mov	r4, r0
 8008afe:	2301      	movs	r3, #1
 8008b00:	e7f0      	b.n	8008ae4 <_vfiprintf_r+0x1b8>
 8008b02:	ab03      	add	r3, sp, #12
 8008b04:	462a      	mov	r2, r5
 8008b06:	a904      	add	r1, sp, #16
 8008b08:	4630      	mov	r0, r6
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	4b11      	ldr	r3, [pc, #68]	@ (8008b54 <_vfiprintf_r+0x228>)
 8008b0e:	f3af 8000 	nop.w
 8008b12:	4607      	mov	r7, r0
 8008b14:	1c78      	adds	r0, r7, #1
 8008b16:	d1d6      	bne.n	8008ac6 <_vfiprintf_r+0x19a>
 8008b18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b1a:	07d9      	lsls	r1, r3, #31
 8008b1c:	d405      	bmi.n	8008b2a <_vfiprintf_r+0x1fe>
 8008b1e:	89ab      	ldrh	r3, [r5, #12]
 8008b20:	059a      	lsls	r2, r3, #22
 8008b22:	d402      	bmi.n	8008b2a <_vfiprintf_r+0x1fe>
 8008b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b26:	f7ff fdd1 	bl	80086cc <__retarget_lock_release_recursive>
 8008b2a:	89ab      	ldrh	r3, [r5, #12]
 8008b2c:	065b      	lsls	r3, r3, #25
 8008b2e:	f53f af1f 	bmi.w	8008970 <_vfiprintf_r+0x44>
 8008b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b34:	e71e      	b.n	8008974 <_vfiprintf_r+0x48>
 8008b36:	ab03      	add	r3, sp, #12
 8008b38:	462a      	mov	r2, r5
 8008b3a:	a904      	add	r1, sp, #16
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	4b04      	ldr	r3, [pc, #16]	@ (8008b54 <_vfiprintf_r+0x228>)
 8008b42:	f000 f87d 	bl	8008c40 <_printf_i>
 8008b46:	e7e4      	b.n	8008b12 <_vfiprintf_r+0x1e6>
 8008b48:	080091dc 	.word	0x080091dc
 8008b4c:	080091e6 	.word	0x080091e6
 8008b50:	00000000 	.word	0x00000000
 8008b54:	08008907 	.word	0x08008907
 8008b58:	080091e2 	.word	0x080091e2

08008b5c <_printf_common>:
 8008b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b60:	4616      	mov	r6, r2
 8008b62:	4698      	mov	r8, r3
 8008b64:	688a      	ldr	r2, [r1, #8]
 8008b66:	4607      	mov	r7, r0
 8008b68:	690b      	ldr	r3, [r1, #16]
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b70:	4293      	cmp	r3, r2
 8008b72:	bfb8      	it	lt
 8008b74:	4613      	movlt	r3, r2
 8008b76:	6033      	str	r3, [r6, #0]
 8008b78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b7c:	b10a      	cbz	r2, 8008b82 <_printf_common+0x26>
 8008b7e:	3301      	adds	r3, #1
 8008b80:	6033      	str	r3, [r6, #0]
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	0699      	lsls	r1, r3, #26
 8008b86:	bf42      	ittt	mi
 8008b88:	6833      	ldrmi	r3, [r6, #0]
 8008b8a:	3302      	addmi	r3, #2
 8008b8c:	6033      	strmi	r3, [r6, #0]
 8008b8e:	6825      	ldr	r5, [r4, #0]
 8008b90:	f015 0506 	ands.w	r5, r5, #6
 8008b94:	d106      	bne.n	8008ba4 <_printf_common+0x48>
 8008b96:	f104 0a19 	add.w	sl, r4, #25
 8008b9a:	68e3      	ldr	r3, [r4, #12]
 8008b9c:	6832      	ldr	r2, [r6, #0]
 8008b9e:	1a9b      	subs	r3, r3, r2
 8008ba0:	42ab      	cmp	r3, r5
 8008ba2:	dc2b      	bgt.n	8008bfc <_printf_common+0xa0>
 8008ba4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ba8:	6822      	ldr	r2, [r4, #0]
 8008baa:	3b00      	subs	r3, #0
 8008bac:	bf18      	it	ne
 8008bae:	2301      	movne	r3, #1
 8008bb0:	0692      	lsls	r2, r2, #26
 8008bb2:	d430      	bmi.n	8008c16 <_printf_common+0xba>
 8008bb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008bb8:	4641      	mov	r1, r8
 8008bba:	4638      	mov	r0, r7
 8008bbc:	47c8      	blx	r9
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	d023      	beq.n	8008c0a <_printf_common+0xae>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	341a      	adds	r4, #26
 8008bc6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008bca:	f003 0306 	and.w	r3, r3, #6
 8008bce:	2b04      	cmp	r3, #4
 8008bd0:	bf0a      	itet	eq
 8008bd2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008bd6:	2500      	movne	r5, #0
 8008bd8:	6833      	ldreq	r3, [r6, #0]
 8008bda:	f04f 0600 	mov.w	r6, #0
 8008bde:	bf08      	it	eq
 8008be0:	1aed      	subeq	r5, r5, r3
 8008be2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008be6:	bf08      	it	eq
 8008be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bec:	4293      	cmp	r3, r2
 8008bee:	bfc4      	itt	gt
 8008bf0:	1a9b      	subgt	r3, r3, r2
 8008bf2:	18ed      	addgt	r5, r5, r3
 8008bf4:	42b5      	cmp	r5, r6
 8008bf6:	d11a      	bne.n	8008c2e <_printf_common+0xd2>
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	e008      	b.n	8008c0e <_printf_common+0xb2>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	4652      	mov	r2, sl
 8008c00:	4641      	mov	r1, r8
 8008c02:	4638      	mov	r0, r7
 8008c04:	47c8      	blx	r9
 8008c06:	3001      	adds	r0, #1
 8008c08:	d103      	bne.n	8008c12 <_printf_common+0xb6>
 8008c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c12:	3501      	adds	r5, #1
 8008c14:	e7c1      	b.n	8008b9a <_printf_common+0x3e>
 8008c16:	18e1      	adds	r1, r4, r3
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	2030      	movs	r0, #48	@ 0x30
 8008c1c:	3302      	adds	r3, #2
 8008c1e:	4422      	add	r2, r4
 8008c20:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c2c:	e7c2      	b.n	8008bb4 <_printf_common+0x58>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	4622      	mov	r2, r4
 8008c32:	4641      	mov	r1, r8
 8008c34:	4638      	mov	r0, r7
 8008c36:	47c8      	blx	r9
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d0e6      	beq.n	8008c0a <_printf_common+0xae>
 8008c3c:	3601      	adds	r6, #1
 8008c3e:	e7d9      	b.n	8008bf4 <_printf_common+0x98>

08008c40 <_printf_i>:
 8008c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c44:	7e0f      	ldrb	r7, [r1, #24]
 8008c46:	4691      	mov	r9, r2
 8008c48:	4680      	mov	r8, r0
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	2f78      	cmp	r7, #120	@ 0x78
 8008c4e:	469a      	mov	sl, r3
 8008c50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c56:	d807      	bhi.n	8008c68 <_printf_i+0x28>
 8008c58:	2f62      	cmp	r7, #98	@ 0x62
 8008c5a:	d80a      	bhi.n	8008c72 <_printf_i+0x32>
 8008c5c:	2f00      	cmp	r7, #0
 8008c5e:	f000 80d1 	beq.w	8008e04 <_printf_i+0x1c4>
 8008c62:	2f58      	cmp	r7, #88	@ 0x58
 8008c64:	f000 80b8 	beq.w	8008dd8 <_printf_i+0x198>
 8008c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c70:	e03a      	b.n	8008ce8 <_printf_i+0xa8>
 8008c72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c76:	2b15      	cmp	r3, #21
 8008c78:	d8f6      	bhi.n	8008c68 <_printf_i+0x28>
 8008c7a:	a101      	add	r1, pc, #4	@ (adr r1, 8008c80 <_printf_i+0x40>)
 8008c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c80:	08008cd9 	.word	0x08008cd9
 8008c84:	08008ced 	.word	0x08008ced
 8008c88:	08008c69 	.word	0x08008c69
 8008c8c:	08008c69 	.word	0x08008c69
 8008c90:	08008c69 	.word	0x08008c69
 8008c94:	08008c69 	.word	0x08008c69
 8008c98:	08008ced 	.word	0x08008ced
 8008c9c:	08008c69 	.word	0x08008c69
 8008ca0:	08008c69 	.word	0x08008c69
 8008ca4:	08008c69 	.word	0x08008c69
 8008ca8:	08008c69 	.word	0x08008c69
 8008cac:	08008deb 	.word	0x08008deb
 8008cb0:	08008d17 	.word	0x08008d17
 8008cb4:	08008da5 	.word	0x08008da5
 8008cb8:	08008c69 	.word	0x08008c69
 8008cbc:	08008c69 	.word	0x08008c69
 8008cc0:	08008e0d 	.word	0x08008e0d
 8008cc4:	08008c69 	.word	0x08008c69
 8008cc8:	08008d17 	.word	0x08008d17
 8008ccc:	08008c69 	.word	0x08008c69
 8008cd0:	08008c69 	.word	0x08008c69
 8008cd4:	08008dad 	.word	0x08008dad
 8008cd8:	6833      	ldr	r3, [r6, #0]
 8008cda:	1d1a      	adds	r2, r3, #4
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6032      	str	r2, [r6, #0]
 8008ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e09c      	b.n	8008e26 <_printf_i+0x1e6>
 8008cec:	6833      	ldr	r3, [r6, #0]
 8008cee:	6820      	ldr	r0, [r4, #0]
 8008cf0:	1d19      	adds	r1, r3, #4
 8008cf2:	6031      	str	r1, [r6, #0]
 8008cf4:	0606      	lsls	r6, r0, #24
 8008cf6:	d501      	bpl.n	8008cfc <_printf_i+0xbc>
 8008cf8:	681d      	ldr	r5, [r3, #0]
 8008cfa:	e003      	b.n	8008d04 <_printf_i+0xc4>
 8008cfc:	0645      	lsls	r5, r0, #25
 8008cfe:	d5fb      	bpl.n	8008cf8 <_printf_i+0xb8>
 8008d00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	da03      	bge.n	8008d10 <_printf_i+0xd0>
 8008d08:	232d      	movs	r3, #45	@ 0x2d
 8008d0a:	426d      	negs	r5, r5
 8008d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d10:	4858      	ldr	r0, [pc, #352]	@ (8008e74 <_printf_i+0x234>)
 8008d12:	230a      	movs	r3, #10
 8008d14:	e011      	b.n	8008d3a <_printf_i+0xfa>
 8008d16:	6821      	ldr	r1, [r4, #0]
 8008d18:	6833      	ldr	r3, [r6, #0]
 8008d1a:	0608      	lsls	r0, r1, #24
 8008d1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d20:	d402      	bmi.n	8008d28 <_printf_i+0xe8>
 8008d22:	0649      	lsls	r1, r1, #25
 8008d24:	bf48      	it	mi
 8008d26:	b2ad      	uxthmi	r5, r5
 8008d28:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d2a:	6033      	str	r3, [r6, #0]
 8008d2c:	4851      	ldr	r0, [pc, #324]	@ (8008e74 <_printf_i+0x234>)
 8008d2e:	bf14      	ite	ne
 8008d30:	230a      	movne	r3, #10
 8008d32:	2308      	moveq	r3, #8
 8008d34:	2100      	movs	r1, #0
 8008d36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d3a:	6866      	ldr	r6, [r4, #4]
 8008d3c:	2e00      	cmp	r6, #0
 8008d3e:	60a6      	str	r6, [r4, #8]
 8008d40:	db05      	blt.n	8008d4e <_printf_i+0x10e>
 8008d42:	6821      	ldr	r1, [r4, #0]
 8008d44:	432e      	orrs	r6, r5
 8008d46:	f021 0104 	bic.w	r1, r1, #4
 8008d4a:	6021      	str	r1, [r4, #0]
 8008d4c:	d04b      	beq.n	8008de6 <_printf_i+0x1a6>
 8008d4e:	4616      	mov	r6, r2
 8008d50:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d54:	fb03 5711 	mls	r7, r3, r1, r5
 8008d58:	5dc7      	ldrb	r7, [r0, r7]
 8008d5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d5e:	462f      	mov	r7, r5
 8008d60:	460d      	mov	r5, r1
 8008d62:	42bb      	cmp	r3, r7
 8008d64:	d9f4      	bls.n	8008d50 <_printf_i+0x110>
 8008d66:	2b08      	cmp	r3, #8
 8008d68:	d10b      	bne.n	8008d82 <_printf_i+0x142>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	07df      	lsls	r7, r3, #31
 8008d6e:	d508      	bpl.n	8008d82 <_printf_i+0x142>
 8008d70:	6923      	ldr	r3, [r4, #16]
 8008d72:	6861      	ldr	r1, [r4, #4]
 8008d74:	4299      	cmp	r1, r3
 8008d76:	bfde      	ittt	le
 8008d78:	2330      	movle	r3, #48	@ 0x30
 8008d7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d82:	1b92      	subs	r2, r2, r6
 8008d84:	6122      	str	r2, [r4, #16]
 8008d86:	464b      	mov	r3, r9
 8008d88:	aa03      	add	r2, sp, #12
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	f8cd a000 	str.w	sl, [sp]
 8008d92:	f7ff fee3 	bl	8008b5c <_printf_common>
 8008d96:	3001      	adds	r0, #1
 8008d98:	d14a      	bne.n	8008e30 <_printf_i+0x1f0>
 8008d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9e:	b004      	add	sp, #16
 8008da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	f043 0320 	orr.w	r3, r3, #32
 8008daa:	6023      	str	r3, [r4, #0]
 8008dac:	2778      	movs	r7, #120	@ 0x78
 8008dae:	4832      	ldr	r0, [pc, #200]	@ (8008e78 <_printf_i+0x238>)
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008db6:	061f      	lsls	r7, r3, #24
 8008db8:	6831      	ldr	r1, [r6, #0]
 8008dba:	f851 5b04 	ldr.w	r5, [r1], #4
 8008dbe:	d402      	bmi.n	8008dc6 <_printf_i+0x186>
 8008dc0:	065f      	lsls	r7, r3, #25
 8008dc2:	bf48      	it	mi
 8008dc4:	b2ad      	uxthmi	r5, r5
 8008dc6:	6031      	str	r1, [r6, #0]
 8008dc8:	07d9      	lsls	r1, r3, #31
 8008dca:	bf44      	itt	mi
 8008dcc:	f043 0320 	orrmi.w	r3, r3, #32
 8008dd0:	6023      	strmi	r3, [r4, #0]
 8008dd2:	b11d      	cbz	r5, 8008ddc <_printf_i+0x19c>
 8008dd4:	2310      	movs	r3, #16
 8008dd6:	e7ad      	b.n	8008d34 <_printf_i+0xf4>
 8008dd8:	4826      	ldr	r0, [pc, #152]	@ (8008e74 <_printf_i+0x234>)
 8008dda:	e7e9      	b.n	8008db0 <_printf_i+0x170>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	f023 0320 	bic.w	r3, r3, #32
 8008de2:	6023      	str	r3, [r4, #0]
 8008de4:	e7f6      	b.n	8008dd4 <_printf_i+0x194>
 8008de6:	4616      	mov	r6, r2
 8008de8:	e7bd      	b.n	8008d66 <_printf_i+0x126>
 8008dea:	6833      	ldr	r3, [r6, #0]
 8008dec:	6825      	ldr	r5, [r4, #0]
 8008dee:	1d18      	adds	r0, r3, #4
 8008df0:	6961      	ldr	r1, [r4, #20]
 8008df2:	6030      	str	r0, [r6, #0]
 8008df4:	062e      	lsls	r6, r5, #24
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	d501      	bpl.n	8008dfe <_printf_i+0x1be>
 8008dfa:	6019      	str	r1, [r3, #0]
 8008dfc:	e002      	b.n	8008e04 <_printf_i+0x1c4>
 8008dfe:	0668      	lsls	r0, r5, #25
 8008e00:	d5fb      	bpl.n	8008dfa <_printf_i+0x1ba>
 8008e02:	8019      	strh	r1, [r3, #0]
 8008e04:	2300      	movs	r3, #0
 8008e06:	4616      	mov	r6, r2
 8008e08:	6123      	str	r3, [r4, #16]
 8008e0a:	e7bc      	b.n	8008d86 <_printf_i+0x146>
 8008e0c:	6833      	ldr	r3, [r6, #0]
 8008e0e:	2100      	movs	r1, #0
 8008e10:	1d1a      	adds	r2, r3, #4
 8008e12:	6032      	str	r2, [r6, #0]
 8008e14:	681e      	ldr	r6, [r3, #0]
 8008e16:	6862      	ldr	r2, [r4, #4]
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f000 f96f 	bl	80090fc <memchr>
 8008e1e:	b108      	cbz	r0, 8008e24 <_printf_i+0x1e4>
 8008e20:	1b80      	subs	r0, r0, r6
 8008e22:	6060      	str	r0, [r4, #4]
 8008e24:	6863      	ldr	r3, [r4, #4]
 8008e26:	6123      	str	r3, [r4, #16]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e2e:	e7aa      	b.n	8008d86 <_printf_i+0x146>
 8008e30:	6923      	ldr	r3, [r4, #16]
 8008e32:	4632      	mov	r2, r6
 8008e34:	4649      	mov	r1, r9
 8008e36:	4640      	mov	r0, r8
 8008e38:	47d0      	blx	sl
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	d0ad      	beq.n	8008d9a <_printf_i+0x15a>
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	079b      	lsls	r3, r3, #30
 8008e42:	d413      	bmi.n	8008e6c <_printf_i+0x22c>
 8008e44:	68e0      	ldr	r0, [r4, #12]
 8008e46:	9b03      	ldr	r3, [sp, #12]
 8008e48:	4298      	cmp	r0, r3
 8008e4a:	bfb8      	it	lt
 8008e4c:	4618      	movlt	r0, r3
 8008e4e:	e7a6      	b.n	8008d9e <_printf_i+0x15e>
 8008e50:	2301      	movs	r3, #1
 8008e52:	4632      	mov	r2, r6
 8008e54:	4649      	mov	r1, r9
 8008e56:	4640      	mov	r0, r8
 8008e58:	47d0      	blx	sl
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	d09d      	beq.n	8008d9a <_printf_i+0x15a>
 8008e5e:	3501      	adds	r5, #1
 8008e60:	68e3      	ldr	r3, [r4, #12]
 8008e62:	9903      	ldr	r1, [sp, #12]
 8008e64:	1a5b      	subs	r3, r3, r1
 8008e66:	42ab      	cmp	r3, r5
 8008e68:	dcf2      	bgt.n	8008e50 <_printf_i+0x210>
 8008e6a:	e7eb      	b.n	8008e44 <_printf_i+0x204>
 8008e6c:	2500      	movs	r5, #0
 8008e6e:	f104 0619 	add.w	r6, r4, #25
 8008e72:	e7f5      	b.n	8008e60 <_printf_i+0x220>
 8008e74:	080091ed 	.word	0x080091ed
 8008e78:	080091fe 	.word	0x080091fe

08008e7c <__sflush_r>:
 8008e7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e84:	0716      	lsls	r6, r2, #28
 8008e86:	4605      	mov	r5, r0
 8008e88:	460c      	mov	r4, r1
 8008e8a:	d454      	bmi.n	8008f36 <__sflush_r+0xba>
 8008e8c:	684b      	ldr	r3, [r1, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	dc02      	bgt.n	8008e98 <__sflush_r+0x1c>
 8008e92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	dd48      	ble.n	8008f2a <__sflush_r+0xae>
 8008e98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e9a:	2e00      	cmp	r6, #0
 8008e9c:	d045      	beq.n	8008f2a <__sflush_r+0xae>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ea4:	682f      	ldr	r7, [r5, #0]
 8008ea6:	6a21      	ldr	r1, [r4, #32]
 8008ea8:	602b      	str	r3, [r5, #0]
 8008eaa:	d030      	beq.n	8008f0e <__sflush_r+0x92>
 8008eac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008eae:	89a3      	ldrh	r3, [r4, #12]
 8008eb0:	0759      	lsls	r1, r3, #29
 8008eb2:	d505      	bpl.n	8008ec0 <__sflush_r+0x44>
 8008eb4:	6863      	ldr	r3, [r4, #4]
 8008eb6:	1ad2      	subs	r2, r2, r3
 8008eb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008eba:	b10b      	cbz	r3, 8008ec0 <__sflush_r+0x44>
 8008ebc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ebe:	1ad2      	subs	r2, r2, r3
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ec4:	6a21      	ldr	r1, [r4, #32]
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	47b0      	blx	r6
 8008eca:	1c43      	adds	r3, r0, #1
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	d106      	bne.n	8008ede <__sflush_r+0x62>
 8008ed0:	6829      	ldr	r1, [r5, #0]
 8008ed2:	291d      	cmp	r1, #29
 8008ed4:	d82b      	bhi.n	8008f2e <__sflush_r+0xb2>
 8008ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8008f80 <__sflush_r+0x104>)
 8008ed8:	40ca      	lsrs	r2, r1
 8008eda:	07d6      	lsls	r6, r2, #31
 8008edc:	d527      	bpl.n	8008f2e <__sflush_r+0xb2>
 8008ede:	2200      	movs	r2, #0
 8008ee0:	04d9      	lsls	r1, r3, #19
 8008ee2:	6062      	str	r2, [r4, #4]
 8008ee4:	6922      	ldr	r2, [r4, #16]
 8008ee6:	6022      	str	r2, [r4, #0]
 8008ee8:	d504      	bpl.n	8008ef4 <__sflush_r+0x78>
 8008eea:	1c42      	adds	r2, r0, #1
 8008eec:	d101      	bne.n	8008ef2 <__sflush_r+0x76>
 8008eee:	682b      	ldr	r3, [r5, #0]
 8008ef0:	b903      	cbnz	r3, 8008ef4 <__sflush_r+0x78>
 8008ef2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ef6:	602f      	str	r7, [r5, #0]
 8008ef8:	b1b9      	cbz	r1, 8008f2a <__sflush_r+0xae>
 8008efa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008efe:	4299      	cmp	r1, r3
 8008f00:	d002      	beq.n	8008f08 <__sflush_r+0x8c>
 8008f02:	4628      	mov	r0, r5
 8008f04:	f7ff fbf0 	bl	80086e8 <_free_r>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f0c:	e00d      	b.n	8008f2a <__sflush_r+0xae>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4628      	mov	r0, r5
 8008f12:	47b0      	blx	r6
 8008f14:	4602      	mov	r2, r0
 8008f16:	1c50      	adds	r0, r2, #1
 8008f18:	d1c9      	bne.n	8008eae <__sflush_r+0x32>
 8008f1a:	682b      	ldr	r3, [r5, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d0c6      	beq.n	8008eae <__sflush_r+0x32>
 8008f20:	2b1d      	cmp	r3, #29
 8008f22:	d001      	beq.n	8008f28 <__sflush_r+0xac>
 8008f24:	2b16      	cmp	r3, #22
 8008f26:	d11d      	bne.n	8008f64 <__sflush_r+0xe8>
 8008f28:	602f      	str	r7, [r5, #0]
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	e021      	b.n	8008f72 <__sflush_r+0xf6>
 8008f2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f32:	b21b      	sxth	r3, r3
 8008f34:	e01a      	b.n	8008f6c <__sflush_r+0xf0>
 8008f36:	690f      	ldr	r7, [r1, #16]
 8008f38:	2f00      	cmp	r7, #0
 8008f3a:	d0f6      	beq.n	8008f2a <__sflush_r+0xae>
 8008f3c:	0793      	lsls	r3, r2, #30
 8008f3e:	680e      	ldr	r6, [r1, #0]
 8008f40:	600f      	str	r7, [r1, #0]
 8008f42:	bf0c      	ite	eq
 8008f44:	694b      	ldreq	r3, [r1, #20]
 8008f46:	2300      	movne	r3, #0
 8008f48:	eba6 0807 	sub.w	r8, r6, r7
 8008f4c:	608b      	str	r3, [r1, #8]
 8008f4e:	f1b8 0f00 	cmp.w	r8, #0
 8008f52:	ddea      	ble.n	8008f2a <__sflush_r+0xae>
 8008f54:	4643      	mov	r3, r8
 8008f56:	463a      	mov	r2, r7
 8008f58:	6a21      	ldr	r1, [r4, #32]
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008f5e:	47b0      	blx	r6
 8008f60:	2800      	cmp	r0, #0
 8008f62:	dc08      	bgt.n	8008f76 <__sflush_r+0xfa>
 8008f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f70:	81a3      	strh	r3, [r4, #12]
 8008f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f76:	4407      	add	r7, r0
 8008f78:	eba8 0800 	sub.w	r8, r8, r0
 8008f7c:	e7e7      	b.n	8008f4e <__sflush_r+0xd2>
 8008f7e:	bf00      	nop
 8008f80:	20400001 	.word	0x20400001

08008f84 <_fflush_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	690b      	ldr	r3, [r1, #16]
 8008f88:	4605      	mov	r5, r0
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	b913      	cbnz	r3, 8008f94 <_fflush_r+0x10>
 8008f8e:	2500      	movs	r5, #0
 8008f90:	4628      	mov	r0, r5
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	b118      	cbz	r0, 8008f9e <_fflush_r+0x1a>
 8008f96:	6a03      	ldr	r3, [r0, #32]
 8008f98:	b90b      	cbnz	r3, 8008f9e <_fflush_r+0x1a>
 8008f9a:	f7ff f9fd 	bl	8008398 <__sinit>
 8008f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d0f3      	beq.n	8008f8e <_fflush_r+0xa>
 8008fa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008fa8:	07d0      	lsls	r0, r2, #31
 8008faa:	d404      	bmi.n	8008fb6 <_fflush_r+0x32>
 8008fac:	0599      	lsls	r1, r3, #22
 8008fae:	d402      	bmi.n	8008fb6 <_fflush_r+0x32>
 8008fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fb2:	f7ff fb8a 	bl	80086ca <__retarget_lock_acquire_recursive>
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	4621      	mov	r1, r4
 8008fba:	f7ff ff5f 	bl	8008e7c <__sflush_r>
 8008fbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	07da      	lsls	r2, r3, #31
 8008fc4:	d4e4      	bmi.n	8008f90 <_fflush_r+0xc>
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	059b      	lsls	r3, r3, #22
 8008fca:	d4e1      	bmi.n	8008f90 <_fflush_r+0xc>
 8008fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fce:	f7ff fb7d 	bl	80086cc <__retarget_lock_release_recursive>
 8008fd2:	e7dd      	b.n	8008f90 <_fflush_r+0xc>

08008fd4 <__swhatbuf_r>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fdc:	b096      	sub	sp, #88	@ 0x58
 8008fde:	4615      	mov	r5, r2
 8008fe0:	2900      	cmp	r1, #0
 8008fe2:	461e      	mov	r6, r3
 8008fe4:	da0c      	bge.n	8009000 <__swhatbuf_r+0x2c>
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	2100      	movs	r1, #0
 8008fea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fee:	bf14      	ite	ne
 8008ff0:	2340      	movne	r3, #64	@ 0x40
 8008ff2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	6031      	str	r1, [r6, #0]
 8008ffa:	602b      	str	r3, [r5, #0]
 8008ffc:	b016      	add	sp, #88	@ 0x58
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}
 8009000:	466a      	mov	r2, sp
 8009002:	f000 f849 	bl	8009098 <_fstat_r>
 8009006:	2800      	cmp	r0, #0
 8009008:	dbed      	blt.n	8008fe6 <__swhatbuf_r+0x12>
 800900a:	9901      	ldr	r1, [sp, #4]
 800900c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009010:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009014:	4259      	negs	r1, r3
 8009016:	4159      	adcs	r1, r3
 8009018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800901c:	e7eb      	b.n	8008ff6 <__swhatbuf_r+0x22>

0800901e <__smakebuf_r>:
 800901e:	898b      	ldrh	r3, [r1, #12]
 8009020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009022:	079d      	lsls	r5, r3, #30
 8009024:	4606      	mov	r6, r0
 8009026:	460c      	mov	r4, r1
 8009028:	d507      	bpl.n	800903a <__smakebuf_r+0x1c>
 800902a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800902e:	6023      	str	r3, [r4, #0]
 8009030:	6123      	str	r3, [r4, #16]
 8009032:	2301      	movs	r3, #1
 8009034:	6163      	str	r3, [r4, #20]
 8009036:	b003      	add	sp, #12
 8009038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800903a:	ab01      	add	r3, sp, #4
 800903c:	466a      	mov	r2, sp
 800903e:	f7ff ffc9 	bl	8008fd4 <__swhatbuf_r>
 8009042:	9f00      	ldr	r7, [sp, #0]
 8009044:	4605      	mov	r5, r0
 8009046:	4630      	mov	r0, r6
 8009048:	4639      	mov	r1, r7
 800904a:	f7ff fbb9 	bl	80087c0 <_malloc_r>
 800904e:	b948      	cbnz	r0, 8009064 <__smakebuf_r+0x46>
 8009050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009054:	059a      	lsls	r2, r3, #22
 8009056:	d4ee      	bmi.n	8009036 <__smakebuf_r+0x18>
 8009058:	f023 0303 	bic.w	r3, r3, #3
 800905c:	f043 0302 	orr.w	r3, r3, #2
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	e7e2      	b.n	800902a <__smakebuf_r+0xc>
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	6020      	str	r0, [r4, #0]
 8009068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800906c:	81a3      	strh	r3, [r4, #12]
 800906e:	9b01      	ldr	r3, [sp, #4]
 8009070:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009074:	b15b      	cbz	r3, 800908e <__smakebuf_r+0x70>
 8009076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800907a:	4630      	mov	r0, r6
 800907c:	f000 f81e 	bl	80090bc <_isatty_r>
 8009080:	b128      	cbz	r0, 800908e <__smakebuf_r+0x70>
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	f023 0303 	bic.w	r3, r3, #3
 8009088:	f043 0301 	orr.w	r3, r3, #1
 800908c:	81a3      	strh	r3, [r4, #12]
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	431d      	orrs	r5, r3
 8009092:	81a5      	strh	r5, [r4, #12]
 8009094:	e7cf      	b.n	8009036 <__smakebuf_r+0x18>
	...

08009098 <_fstat_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	2300      	movs	r3, #0
 800909c:	4d06      	ldr	r5, [pc, #24]	@ (80090b8 <_fstat_r+0x20>)
 800909e:	4604      	mov	r4, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	4611      	mov	r1, r2
 80090a4:	602b      	str	r3, [r5, #0]
 80090a6:	f7f7 ff74 	bl	8000f92 <_fstat>
 80090aa:	1c43      	adds	r3, r0, #1
 80090ac:	d102      	bne.n	80090b4 <_fstat_r+0x1c>
 80090ae:	682b      	ldr	r3, [r5, #0]
 80090b0:	b103      	cbz	r3, 80090b4 <_fstat_r+0x1c>
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	bd38      	pop	{r3, r4, r5, pc}
 80090b6:	bf00      	nop
 80090b8:	20002f9c 	.word	0x20002f9c

080090bc <_isatty_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	2300      	movs	r3, #0
 80090c0:	4d05      	ldr	r5, [pc, #20]	@ (80090d8 <_isatty_r+0x1c>)
 80090c2:	4604      	mov	r4, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	f7f7 ff73 	bl	8000fb2 <_isatty>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_isatty_r+0x1a>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_isatty_r+0x1a>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	20002f9c 	.word	0x20002f9c

080090dc <_sbrk_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	2300      	movs	r3, #0
 80090e0:	4d05      	ldr	r5, [pc, #20]	@ (80090f8 <_sbrk_r+0x1c>)
 80090e2:	4604      	mov	r4, r0
 80090e4:	4608      	mov	r0, r1
 80090e6:	602b      	str	r3, [r5, #0]
 80090e8:	f7f7 ff7c 	bl	8000fe4 <_sbrk>
 80090ec:	1c43      	adds	r3, r0, #1
 80090ee:	d102      	bne.n	80090f6 <_sbrk_r+0x1a>
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	b103      	cbz	r3, 80090f6 <_sbrk_r+0x1a>
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	20002f9c 	.word	0x20002f9c

080090fc <memchr>:
 80090fc:	b2c9      	uxtb	r1, r1
 80090fe:	4603      	mov	r3, r0
 8009100:	4402      	add	r2, r0
 8009102:	b510      	push	{r4, lr}
 8009104:	4293      	cmp	r3, r2
 8009106:	4618      	mov	r0, r3
 8009108:	d101      	bne.n	800910e <memchr+0x12>
 800910a:	2000      	movs	r0, #0
 800910c:	e003      	b.n	8009116 <memchr+0x1a>
 800910e:	7804      	ldrb	r4, [r0, #0]
 8009110:	3301      	adds	r3, #1
 8009112:	428c      	cmp	r4, r1
 8009114:	d1f6      	bne.n	8009104 <memchr+0x8>
 8009116:	bd10      	pop	{r4, pc}

08009118 <_init>:
 8009118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911a:	bf00      	nop
 800911c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911e:	bc08      	pop	{r3}
 8009120:	469e      	mov	lr, r3
 8009122:	4770      	bx	lr

08009124 <_fini>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	bf00      	nop
 8009128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912a:	bc08      	pop	{r3}
 800912c:	469e      	mov	lr, r3
 800912e:	4770      	bx	lr
